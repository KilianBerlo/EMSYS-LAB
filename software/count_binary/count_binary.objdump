
count_binary.elf:     file format elf32-littlenios2
count_binary.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008244

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00002ac8 memsz 0x00002ac8 flags r-x
    LOAD off    0x00003ae8 vaddr 0x0000aae8 paddr 0x0000adc8 align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x000040a8 vaddr 0x0000b0a8 paddr 0x0000b0a8 align 2**12
         filesz 0x00000000 memsz 0x00000128 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002794  00008244  00008244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000110  0000a9d8  0000a9d8  000039d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e0  0000aae8  0000adc8  00003ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000128  0000b0a8  0000b0a8  000040a8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  0000b1d0  0000b1d0  00003dc8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003dc8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000688  00000000  00000000  00003df0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000930c  00000000  00000000  00004478  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000310b  00000000  00000000  0000d784  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003571  00000000  00000000  0001088f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000d2c  00000000  00000000  00013e00  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001fc2  00000000  00000000  00014b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001535  00000000  00000000  00016aee  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00018024  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002d0  00000000  00000000  00018088  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00019f7e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00019f81  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00019f84  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00019f85  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00019f86  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00019f8a  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00019f8e  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00019f92  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00019f9b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00019fa4  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000012  00000000  00000000  00019fad  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000066  00000000  00000000  00019fbf  2**0
                  CONTENTS, READONLY
 29 .jdi          00005854  00000000  00000000  0001a025  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003cc67  00000000  00000000  0001f879  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008244 l    d  .text	00000000 .text
0000a9d8 l    d  .rodata	00000000 .rodata
0000aae8 l    d  .rwdata	00000000 .rwdata
0000b0a8 l    d  .bss	00000000 .bss
0000b1d0 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../count_binary_bsp//obj/HAL/src/crt0.o
0000828c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 count_binary.c
0000b0a8 l     O .bss	00000001 count
00008290 l     F .text	00000024 lcd_init
000082b4 l     F .text	00000058 initial_message
0000830c l     F .text	00000034 count_led
00008340 l     F .text	00000020 count_sevenseg
00008360 l     F .text	0000002c count_lcd
0000838c l     F .text	00000054 count_all
000083e0 l     F .text	0000013c handle_button_press
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000892c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000aae8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
000090c4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000924c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00009388 l     F .text	00000034 alt_dev_reg
0000abc8 l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00009684 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
000098d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009a2c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00009a58 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00009e0c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00009f6c l     F .text	0000003c alt_get_errno
00009fa8 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000b0cc g     O .bss	00000004 alt_instruction_exception_handler
00008860 g     F .text	0000001c putchar
000091b0 g     F .text	0000006c alt_main
0000887c g     F .text	00000080 _puts_r
0000b0d0 g     O .bss	00000100 alt_irq
0000adc8 g       *ABS*	00000000 __flash_rwdata_start
0000880c g     F .text	0000004c printf
0000a418 g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000001c __reset
0000b0ac g     O .bss	00000004 edge_capture
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000b0b0 g     O .bss	00000004 errno
0000b0b8 g     O .bss	00000004 alt_argv
00012d9c g       *ABS*	00000000 _gp
0000921c g     F .text	00000030 usleep
0000ac1c g     O .rwdata	00000180 alt_fd_list
00008858 g     F .text	00000008 _putchar_r
0000a43c g     F .text	00000090 alt_find_dev
00009ef0 g     F .text	0000007c alt_io_redirect
000088fc g     F .text	00000014 puts
0000a728 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00009504 g     F .text	000000ec altera_avalon_jtag_uart_read
000087d0 g     F .text	0000003c _printf_r
00008714 g     F .text	00000064 .hidden __udivsi3
0000a698 g     F .text	00000090 alt_icache_flush
0000adb4 g     O .rwdata	00000004 alt_max_fd
0000ad9c g     O .rwdata	00000004 _global_impure_ptr
0000b1d0 g       *ABS*	00000000 __bss_end
00009d1c g     F .text	000000f0 alt_iic_isr_register
0000a310 g     F .text	00000108 alt_tick
00009cd0 g     F .text	0000004c alt_ic_irq_enabled
0000a274 g     F .text	0000009c alt_alarm_stop
0000b0c0 g     O .bss	00000004 alt_irq_active
00008000 g       *ABS*	00000000 __alt_mem_onchip_mem
000080fc g     F .exceptions	000000d4 alt_irq_handler
0000abf4 g     O .rwdata	00000028 alt_dev_null
000099e4 g     F .text	00000048 alt_dcache_flush_all
0000adc8 g       *ABS*	00000000 __ram_rwdata_end
0000adac g     O .rwdata	00000008 alt_dev_list
00009288 g     F .text	00000100 write
00008fec g     F .text	00000058 _putc_r
0000aae8 g       *ABS*	00000000 __ram_rodata_end
00008778 g     F .text	00000058 .hidden __umodsi3
0000b1d0 g       *ABS*	00000000 end
000081d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0000d000 g       *ABS*	00000000 __alt_stack_pointer
000096fc g     F .text	0000007c alt_avalon_timer_sc_init
000095f0 g     F .text	00000094 altera_avalon_jtag_uart_write
00008998 g     F .text	0000052c ___vfprintf_internal_r
0000a814 g     F .text	00000190 __call_exitprocs
00008244 g     F .text	0000004c _start
0000b0c4 g     O .bss	00000004 _alt_tick_rate
0000b0c8 g     O .bss	00000004 _alt_nticks
000093f4 g     F .text	00000050 alt_sys_init
0000909c g     F .text	00000028 .hidden __mulsi3
0000aae8 g       *ABS*	00000000 __ram_rwdata_start
0000a9d8 g       *ABS*	00000000 __ram_rodata_start
00009444 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000a5d4 g     F .text	000000c4 alt_get_fd
00009778 g     F .text	00000158 alt_busy_sleep
0000a7e4 g     F .text	00000030 memcmp
0000b1d0 g       *ABS*	00000000 __alt_stack_base
0000a4cc g     F .text	00000108 alt_find_file
00009a94 g     F .text	000000a4 alt_dev_llist_insert
00008ee0 g     F .text	000000b8 __sfvwrite_small_dev
0000b0a8 g       *ABS*	00000000 __bss_start
0000851c g     F .text	00000100 main
0000b0bc g     O .bss	00000004 alt_envp
000094a4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000adb8 g     O .rwdata	00000004 alt_errno
00008f98 g     F .text	00000054 putc
0000861c g     F .text	00000084 .hidden __divsi3
0000a9d8 g       *ABS*	00000000 __flash_rodata_start
000093bc g     F .text	00000038 alt_irq_init
0000a1f0 g     F .text	00000084 alt_release_fd
00009044 g     F .text	00000058 _write_r
0000ada0 g     O .rwdata	00000004 _impure_ptr
0000b0b4 g     O .bss	00000004 alt_argc
00008020 g       .exceptions	00000000 alt_irq_entry
0000ada4 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
00009b6c g     F .text	00000050 alt_ic_isr_register
0000adc8 g       *ABS*	00000000 _edata
0000b1d0 g       *ABS*	00000000 _end
00008244 g       *ABS*	00000000 __ram_exceptions_end
00009c44 g     F .text	0000008c alt_ic_irq_disable
0000a7c4 g     F .text	00000020 exit
000086a0 g     F .text	00000074 .hidden __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000a9a4 g     F .text	00000034 _exit
00008910 g     F .text	0000001c strlen
0000a094 g     F .text	0000015c open
00009b38 g     F .text	00000034 alt_icache_flush_all
0000adbc g     O .rwdata	00000004 alt_priority_mask
00009bbc g     F .text	00000088 alt_ic_irq_enable
00008ec4 g     F .text	0000001c __vfprintf_internal
0000adc0 g     O .rwdata	00000008 alt_alarm_list
0000990c g     F .text	000000d8 close
0000912c g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08609114 	ori	at,at,33348
    jmp r1
    8018:	0800683a 	jmp	at
    801c:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080fc0 	call	80fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000706 	br	80a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    808c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    8094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    8098:	00081d00 	call	81d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    809c:	1000021e 	bne	r2,zero,80a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    80a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    80a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    80a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    80ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80f8:	ef80083a 	eret

000080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80fc:	defff904 	addi	sp,sp,-28
    8100:	dfc00615 	stw	ra,24(sp)
    8104:	df000515 	stw	fp,20(sp)
    8108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    810c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8110:	0005313a 	rdctl	r2,ipending
    8114:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    811c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8124:	00800044 	movi	r2,1
    8128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    812c:	e0fffb17 	ldw	r3,-20(fp)
    8130:	e0bffc17 	ldw	r2,-16(fp)
    8134:	1884703a 	and	r2,r3,r2
    8138:	10001426 	beq	r2,zero,818c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    813c:	00800074 	movhi	r2,1
    8140:	10ac3404 	addi	r2,r2,-20272
    8144:	e0fffd17 	ldw	r3,-12(fp)
    8148:	180690fa 	slli	r3,r3,3
    814c:	10c5883a 	add	r2,r2,r3
    8150:	10c00017 	ldw	r3,0(r2)
    8154:	00800074 	movhi	r2,1
    8158:	10ac3404 	addi	r2,r2,-20272
    815c:	e13ffd17 	ldw	r4,-12(fp)
    8160:	200890fa 	slli	r4,r4,3
    8164:	1105883a 	add	r2,r2,r4
    8168:	10800104 	addi	r2,r2,4
    816c:	10800017 	ldw	r2,0(r2)
    8170:	1009883a 	mov	r4,r2
    8174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    8178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    817c:	0005313a 	rdctl	r2,ipending
    8180:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8184:	e0bfff17 	ldw	r2,-4(fp)
    8188:	00000706 	br	81a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
    818c:	e0bffc17 	ldw	r2,-16(fp)
    8190:	1085883a 	add	r2,r2,r2
    8194:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8198:	e0bffd17 	ldw	r2,-12(fp)
    819c:	10800044 	addi	r2,r2,1
    81a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    81a4:	003fe106 	br	812c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
    81a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    81ac:	e0bffb17 	ldw	r2,-20(fp)
    81b0:	103fdb1e 	bne	r2,zero,8120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    81b4:	0001883a 	nop
}
    81b8:	0001883a 	nop
    81bc:	e037883a 	mov	sp,fp
    81c0:	dfc00117 	ldw	ra,4(sp)
    81c4:	df000017 	ldw	fp,0(sp)
    81c8:	dec00204 	addi	sp,sp,8
    81cc:	f800283a 	ret

000081d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
    81d0:	defffb04 	addi	sp,sp,-20
    81d4:	dfc00415 	stw	ra,16(sp)
    81d8:	df000315 	stw	fp,12(sp)
    81dc:	df000304 	addi	fp,sp,12
    81e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
    81e4:	000531fa 	rdctl	r2,exception
    81e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
    81ec:	e0bffd17 	ldw	r2,-12(fp)
    81f0:	10801f0c 	andi	r2,r2,124
    81f4:	1004d0ba 	srli	r2,r2,2
    81f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
    81fc:	0005333a 	rdctl	r2,badaddr
    8200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    8204:	d0a0cc17 	ldw	r2,-31952(gp)
    8208:	10000726 	beq	r2,zero,8228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    820c:	d0a0cc17 	ldw	r2,-31952(gp)
    8210:	e0fffd17 	ldw	r3,-12(fp)
    8214:	e1bffe17 	ldw	r6,-8(fp)
    8218:	e17fff17 	ldw	r5,-4(fp)
    821c:	1809883a 	mov	r4,r3
    8220:	103ee83a 	callr	r2
    8224:	00000206 	br	8230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    8228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
    822c:	0005883a 	mov	r2,zero
}
    8230:	e037883a 	mov	sp,fp
    8234:	dfc00117 	ldw	ra,4(sp)
    8238:	df000017 	ldw	fp,0(sp)
    823c:	dec00204 	addi	sp,sp,8
    8240:	f800283a 	ret

Disassembly of section .text:

00008244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    8244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    8248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    824c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    8250:	00bffd16 	blt	zero,r2,8248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8254:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8258:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    825c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    8260:	d68b6714 	ori	gp,gp,11676
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8264:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8268:	10ac2a14 	ori	r2,r2,45224

    movhi r3, %hi(__bss_end)
    826c:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    8270:	18ec7414 	ori	r3,r3,45520

    beq r2, r3, 1f
    8274:	10c00326 	beq	r2,r3,8284 <_start+0x40>

0:
    stw zero, (r2)
    8278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    827c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    8280:	10fffd36 	bltu	r2,r3,8278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8284:	000912c0 	call	912c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8288:	00091b00 	call	91b0 <alt_main>

0000828c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    828c:	003fff06 	br	828c <alt_after_alt_main>

00008290 <lcd_init>:
 * count_<device>() -- Implements the counting on the respective device.
 * handle_button_press() -- Determines what to do when one of the buttons
 * is pressed.
 */
static void lcd_init( FILE *lcd )
{
    8290:	defffe04 	addi	sp,sp,-8
    8294:	df000115 	stw	fp,4(sp)
    8298:	df000104 	addi	fp,sp,4
    829c:	e13fff15 	stw	r4,-4(fp)
    /* If the LCD Display exists, write a simple message on the first line. */
    LCD_PRINTF(lcd, "%c%s Counting will be displayed below...", ESC,
               ESC_TOP_LEFT);
}
    82a0:	0001883a 	nop
    82a4:	e037883a 	mov	sp,fp
    82a8:	df000017 	ldw	fp,0(sp)
    82ac:	dec00104 	addi	sp,sp,4
    82b0:	f800283a 	ret

000082b4 <initial_message>:

static void initial_message()
{
    82b4:	defffe04 	addi	sp,sp,-8
    82b8:	dfc00115 	stw	ra,4(sp)
    82bc:	df000015 	stw	fp,0(sp)
    82c0:	d839883a 	mov	fp,sp
    printf("\n\n**************************\n");
    82c4:	01000074 	movhi	r4,1
    82c8:	212a7604 	addi	r4,r4,-22056
    82cc:	00088fc0 	call	88fc <puts>
    printf("* Hello from Nios II!    *\n");
    82d0:	01000074 	movhi	r4,1
    82d4:	212a7e04 	addi	r4,r4,-22024
    82d8:	00088fc0 	call	88fc <puts>
    printf("* Counting from 00 to ff *\n");
    82dc:	01000074 	movhi	r4,1
    82e0:	212a8504 	addi	r4,r4,-21996
    82e4:	00088fc0 	call	88fc <puts>
    printf("**************************\n");
    82e8:	01000074 	movhi	r4,1
    82ec:	212a8c04 	addi	r4,r4,-21968
    82f0:	00088fc0 	call	88fc <puts>
}
    82f4:	0001883a 	nop
    82f8:	e037883a 	mov	sp,fp
    82fc:	dfc00117 	ldw	ra,4(sp)
    8300:	df000017 	ldw	fp,0(sp)
    8304:	dec00204 	addi	sp,sp,8
    8308:	f800283a 	ret

0000830c <count_led>:
 * Illuminate LEDs with the value of 'count', if they
 * exist in the system
 */

static void count_led()
{
    830c:	deffff04 	addi	sp,sp,-4
    8310:	df000015 	stw	fp,0(sp)
    8314:	d839883a 	mov	fp,sp
#ifdef LED_PIO_BASE
    IOWR_ALTERA_AVALON_PIO_DATA(
    8318:	d0a0c303 	ldbu	r2,-31988(gp)
    831c:	10c03fcc 	andi	r3,r2,255
    8320:	00800074 	movhi	r2,1
    8324:	10840804 	addi	r2,r2,4128
    8328:	10c00035 	stwio	r3,0(r2)
        LED_PIO_BASE,
        count
        );
#endif
}
    832c:	0001883a 	nop
    8330:	e037883a 	mov	sp,fp
    8334:	df000017 	ldw	fp,0(sp)
    8338:	dec00104 	addi	sp,sp,4
    833c:	f800283a 	ret

00008340 <count_sevenseg>:
 * 
 * Display value of 'count' on the Seven Segment Display
 */

static void count_sevenseg()
{
    8340:	deffff04 	addi	sp,sp,-4
    8344:	df000015 	stw	fp,0(sp)
    8348:	d839883a 	mov	fp,sp
#ifdef SEVEN_SEG_PIO_BASE
    sevenseg_set_hex(count);
#endif
}
    834c:	0001883a 	nop
    8350:	e037883a 	mov	sp,fp
    8354:	df000017 	ldw	fp,0(sp)
    8358:	dec00104 	addi	sp,sp,4
    835c:	f800283a 	ret

00008360 <count_lcd>:
 * is treated as an I/O device (i.e.: using fprintf).  You
 * can read more about HAL drivers <link/reference here>.
 */

static void count_lcd( void* arg )
{
    8360:	defffd04 	addi	sp,sp,-12
    8364:	df000215 	stw	fp,8(sp)
    8368:	df000204 	addi	fp,sp,8
    836c:	e13fff15 	stw	r4,-4(fp)
    FILE* __attribute__ ((unused))  lcd;  /* Attribute suppresses "unused variable" warning. */
    lcd = (FILE*) arg;
    8370:	e0bfff17 	ldw	r2,-4(fp)
    8374:	e0bffe15 	stw	r2,-8(fp)
    LCD_PRINTF(lcd, "%c%s 0x%x\n", ESC, ESC_COL2_INDENT5, count);
}
    8378:	0001883a 	nop
    837c:	e037883a 	mov	sp,fp
    8380:	df000017 	ldw	fp,0(sp)
    8384:	dec00104 	addi	sp,sp,4
    8388:	f800283a 	ret

0000838c <count_all>:

/* count_all merely combines all three peripherals counting */

static void count_all( void* arg )
{
    838c:	defffd04 	addi	sp,sp,-12
    8390:	dfc00215 	stw	ra,8(sp)
    8394:	df000115 	stw	fp,4(sp)
    8398:	df000104 	addi	fp,sp,4
    839c:	e13fff15 	stw	r4,-4(fp)
    count_led();
    83a0:	000830c0 	call	830c <count_led>
    count_sevenseg();
    83a4:	00083400 	call	8340 <count_sevenseg>
    count_lcd( arg );
    83a8:	e13fff17 	ldw	r4,-4(fp)
    83ac:	00083600 	call	8360 <count_lcd>
    printf("%02x,  ", count);
    83b0:	d0a0c303 	ldbu	r2,-31988(gp)
    83b4:	10803fcc 	andi	r2,r2,255
    83b8:	100b883a 	mov	r5,r2
    83bc:	01000074 	movhi	r4,1
    83c0:	212a9304 	addi	r4,r4,-21940
    83c4:	000880c0 	call	880c <printf>
}
    83c8:	0001883a 	nop
    83cc:	e037883a 	mov	sp,fp
    83d0:	dfc00117 	ldw	ra,4(sp)
    83d4:	df000017 	ldw	fp,0(sp)
    83d8:	dec00204 	addi	sp,sp,8
    83dc:	f800283a 	ret

000083e0 <handle_button_press>:
  

static void handle_button_press(alt_u8 type, FILE *lcd)
{
    83e0:	defffc04 	addi	sp,sp,-16
    83e4:	dfc00315 	stw	ra,12(sp)
    83e8:	df000215 	stw	fp,8(sp)
    83ec:	df000204 	addi	fp,sp,8
    83f0:	2005883a 	mov	r2,r4
    83f4:	e17fff15 	stw	r5,-4(fp)
    83f8:	e0bffe05 	stb	r2,-8(fp)
    /* Button press actions while counting. */
    if (type == 'c')
    83fc:	e0bffe03 	ldbu	r2,-8(fp)
    8400:	108018d8 	cmpnei	r2,r2,99
    8404:	10001b1e 	bne	r2,zero,8474 <handle_button_press+0x94>
    {
        switch (edge_capture) 
    8408:	d0a0c417 	ldw	r2,-31984(gp)
    840c:	10c000a0 	cmpeqi	r3,r2,2
    8410:	18000c1e 	bne	r3,zero,8444 <handle_button_press+0x64>
    8414:	10c000c8 	cmpgei	r3,r2,3
    8418:	1800031e 	bne	r3,zero,8428 <handle_button_press+0x48>
    841c:	10800060 	cmpeqi	r2,r2,1
    8420:	1000061e 	bne	r2,zero,843c <handle_button_press+0x5c>
    8424:	00000f06 	br	8464 <handle_button_press+0x84>
    8428:	10c00120 	cmpeqi	r3,r2,4
    842c:	1800071e 	bne	r3,zero,844c <handle_button_press+0x6c>
    8430:	10800220 	cmpeqi	r2,r2,8
    8434:	1000081e 	bne	r2,zero,8458 <handle_button_press+0x78>
    8438:	00000a06 	br	8464 <handle_button_press+0x84>
        {
            /* Button 1:  Output counting to LED only. */
        case 0x1:
            count_led();
    843c:	000830c0 	call	830c <count_led>
            break;
    8440:	00003006 	br	8504 <handle_button_press+0x124>
            /* Button 2:  Output counting to SEVEN SEG only. */
        case 0x2:
            count_sevenseg();
    8444:	00083400 	call	8340 <count_sevenseg>
            break;
    8448:	00002e06 	br	8504 <handle_button_press+0x124>
            /* Button 3:  Output counting to D only. */
        case 0x4:
            count_lcd( lcd );
    844c:	e13fff17 	ldw	r4,-4(fp)
    8450:	00083600 	call	8360 <count_lcd>
            break;
    8454:	00002b06 	br	8504 <handle_button_press+0x124>
            /* Button 4:  Output counting to LED, SEVEN_SEG, and D. */ 
        case 0x8:
            count_all( lcd );
    8458:	e13fff17 	ldw	r4,-4(fp)
    845c:	000838c0 	call	838c <count_all>
            break;
    8460:	00002806 	br	8504 <handle_button_press+0x124>
            /* If value ends up being something different (shouldn't) do
               same as 8. */
        default:
            count_all( lcd );
    8464:	e13fff17 	ldw	r4,-4(fp)
    8468:	000838c0 	call	838c <count_all>
            break;
    846c:	0001883a 	nop
    8470:	00002406 	br	8504 <handle_button_press+0x124>
        }
    }
    /* If 'type' is anything else, assume we're "waiting"...*/
    else
    {
        switch (edge_capture)
    8474:	d0a0c417 	ldw	r2,-31984(gp)
    8478:	10c000a0 	cmpeqi	r3,r2,2
    847c:	18000f1e 	bne	r3,zero,84bc <handle_button_press+0xdc>
    8480:	10c000c8 	cmpgei	r3,r2,3
    8484:	1800031e 	bne	r3,zero,8494 <handle_button_press+0xb4>
    8488:	10800060 	cmpeqi	r2,r2,1
    848c:	1000061e 	bne	r2,zero,84a8 <handle_button_press+0xc8>
    8490:	00001906 	br	84f8 <handle_button_press+0x118>
    8494:	10c00120 	cmpeqi	r3,r2,4
    8498:	18000d1e 	bne	r3,zero,84d0 <handle_button_press+0xf0>
    849c:	10800220 	cmpeqi	r2,r2,8
    84a0:	1000101e 	bne	r2,zero,84e4 <handle_button_press+0x104>
    84a4:	00001406 	br	84f8 <handle_button_press+0x118>
        {
        case 0x1:
            printf( "Button 1\n");
    84a8:	01000074 	movhi	r4,1
    84ac:	212a9504 	addi	r4,r4,-21932
    84b0:	00088fc0 	call	88fc <puts>
            edge_capture = 0;
    84b4:	d020c415 	stw	zero,-31984(gp)
            break;
    84b8:	00001206 	br	8504 <handle_button_press+0x124>
        case 0x2:
            printf( "Button 2\n");
    84bc:	01000074 	movhi	r4,1
    84c0:	212a9804 	addi	r4,r4,-21920
    84c4:	00088fc0 	call	88fc <puts>
            edge_capture = 0;
    84c8:	d020c415 	stw	zero,-31984(gp)
            break;
    84cc:	00000d06 	br	8504 <handle_button_press+0x124>
        case 0x4:
            printf( "Button 3\n");
    84d0:	01000074 	movhi	r4,1
    84d4:	212a9b04 	addi	r4,r4,-21908
    84d8:	00088fc0 	call	88fc <puts>
            edge_capture = 0;
    84dc:	d020c415 	stw	zero,-31984(gp)
            break;
    84e0:	00000806 	br	8504 <handle_button_press+0x124>
        case 0x8:
            printf( "Button 4\n");
    84e4:	01000074 	movhi	r4,1
    84e8:	212a9e04 	addi	r4,r4,-21896
    84ec:	00088fc0 	call	88fc <puts>
            edge_capture = 0;
    84f0:	d020c415 	stw	zero,-31984(gp)
            break;
    84f4:	00000306 	br	8504 <handle_button_press+0x124>
        default:
            printf( "Button press UNKNOWN!!\n");
    84f8:	01000074 	movhi	r4,1
    84fc:	212aa104 	addi	r4,r4,-21884
    8500:	00088fc0 	call	88fc <puts>
        }
    }
}
    8504:	0001883a 	nop
    8508:	e037883a 	mov	sp,fp
    850c:	dfc00117 	ldw	ra,4(sp)
    8510:	df000017 	ldw	fp,0(sp)
    8514:	dec00204 	addi	sp,sp,8
    8518:	f800283a 	ret

0000851c <main>:
 * NOTE:  References to Buttons 1-4 correspond to SW0-SW3 on the Development   *
 * Board.                                                                      *
 ******************************************************************************/

int main(void)
{ 
    851c:	defffb04 	addi	sp,sp,-20
    8520:	dfc00415 	stw	ra,16(sp)
    8524:	df000315 	stw	fp,12(sp)
    8528:	df000304 	addi	fp,sp,12
    int i;
    int  __attribute__ ((unused))  wait_time;  /* Attribute suppresses "var set but not used" warning. */
    FILE * lcd;

    count = 0;
    852c:	d020c305 	stb	zero,-31988(gp)

    /* Initialize the LCD, if there is one.
     */
    lcd = LCD_OPEN();
    8530:	e03ffe15 	stw	zero,-8(fp)
    if(lcd != NULL) {lcd_init( lcd );}
    8534:	e0bffe17 	ldw	r2,-8(fp)
    8538:	10000226 	beq	r2,zero,8544 <main+0x28>
    853c:	e13ffe17 	ldw	r4,-8(fp)
    8540:	00082900 	call	8290 <lcd_init>
    init_button_pio();
#endif

/* Initial message to output. */

    initial_message();
    8544:	00082b40 	call	82b4 <initial_message>

/* Continue 0-ff counting loop. */

    while( 1 ) 
    {
        usleep(100000);
    8548:	010000b4 	movhi	r4,2
    854c:	2121a804 	addi	r4,r4,-31072
    8550:	000921c0 	call	921c <usleep>
        if (edge_capture != 0)
    8554:	d0a0c417 	ldw	r2,-31984(gp)
    8558:	10000426 	beq	r2,zero,856c <main+0x50>
        {
            /* Handle button presses while counting... */
            handle_button_press('c', lcd);
    855c:	e17ffe17 	ldw	r5,-8(fp)
    8560:	010018c4 	movi	r4,99
    8564:	00083e00 	call	83e0 <handle_button_press>
    8568:	00000206 	br	8574 <main+0x58>
        }
        /* If no button presses, try to output counting to all. */
        else
        {
            count_all( lcd );
    856c:	e13ffe17 	ldw	r4,-8(fp)
    8570:	000838c0 	call	838c <count_all>
        }
        /*
         * If done counting, wait about 7 seconds...
         * detect button presses while waiting.
         */
        if( count == 0xff )
    8574:	d0a0c303 	ldbu	r2,-31988(gp)
    8578:	10803fcc 	andi	r2,r2,255
    857c:	10803fd8 	cmpnei	r2,r2,255
    8580:	1000221e 	bne	r2,zero,860c <main+0xf0>
        {
            LCD_PRINTF(lcd, "%c%s %c%s %c%s Waiting...\n", ESC, ESC_TOP_LEFT,
                       ESC, ESC_CLEAR, ESC, ESC_COL1_INDENT5);
            printf("\nWaiting...");
    8584:	01000074 	movhi	r4,1
    8588:	212aa704 	addi	r4,r4,-21860
    858c:	000880c0 	call	880c <printf>
            edge_capture = 0; /* Reset to 0 during wait/pause period. */
    8590:	d020c415 	stw	zero,-31984(gp)

            /* Clear the 2nd. line of the LCD screen. */
            LCD_PRINTF(lcd, "%c%s, %c%s", ESC, ESC_COL2_INDENT5, ESC,
                       ESC_CLEAR);
            wait_time = 0;
    8594:	e03fff15 	stw	zero,-4(fp)
            for (i = 0; i<70; ++i)
    8598:	e03ffd15 	stw	zero,-12(fp)
    859c:	00001506 	br	85f4 <main+0xd8>
            {
                printf(".");
    85a0:	01000b84 	movi	r4,46
    85a4:	00088600 	call	8860 <putchar>
                wait_time = i/10;
    85a8:	e0bffd17 	ldw	r2,-12(fp)
    85ac:	01400284 	movi	r5,10
    85b0:	1009883a 	mov	r4,r2
    85b4:	000861c0 	call	861c <__divsi3>
    85b8:	e0bfff15 	stw	r2,-4(fp)
                LCD_PRINTF(lcd, "%c%s %ds\n", ESC, ESC_COL2_INDENT5,
                    wait_time+1);

                if (edge_capture != 0) 
    85bc:	d0a0c417 	ldw	r2,-31984(gp)
    85c0:	10000626 	beq	r2,zero,85dc <main+0xc0>
                {
                    printf( "\nYou pushed:  " );
    85c4:	01000074 	movhi	r4,1
    85c8:	212aaa04 	addi	r4,r4,-21848
    85cc:	000880c0 	call	880c <printf>
                    handle_button_press('w', lcd);
    85d0:	e17ffe17 	ldw	r5,-8(fp)
    85d4:	01001dc4 	movi	r4,119
    85d8:	00083e00 	call	83e0 <handle_button_press>
                }
                usleep(100000); /* Sleep for 0.1s. */
    85dc:	010000b4 	movhi	r4,2
    85e0:	2121a804 	addi	r4,r4,-31072
    85e4:	000921c0 	call	921c <usleep>

            /* Clear the 2nd. line of the LCD screen. */
            LCD_PRINTF(lcd, "%c%s, %c%s", ESC, ESC_COL2_INDENT5, ESC,
                       ESC_CLEAR);
            wait_time = 0;
            for (i = 0; i<70; ++i)
    85e8:	e0bffd17 	ldw	r2,-12(fp)
    85ec:	10800044 	addi	r2,r2,1
    85f0:	e0bffd15 	stw	r2,-12(fp)
    85f4:	e0bffd17 	ldw	r2,-12(fp)
    85f8:	10801190 	cmplti	r2,r2,70
    85fc:	103fe81e 	bne	r2,zero,85a0 <main+0x84>
                }
                usleep(100000); /* Sleep for 0.1s. */
            }
            /*  Output the "loop start" messages before looping, again.
             */
            initial_message();
    8600:	00082b40 	call	82b4 <initial_message>
            lcd_init( lcd );
    8604:	e13ffe17 	ldw	r4,-8(fp)
    8608:	00082900 	call	8290 <lcd_init>
        }
        count++;
    860c:	d0a0c303 	ldbu	r2,-31988(gp)
    8610:	10800044 	addi	r2,r2,1
    8614:	d0a0c305 	stb	r2,-31988(gp)
    }
    8618:	003fcb06 	br	8548 <main+0x2c>

0000861c <__divsi3>:
    861c:	20001b16 	blt	r4,zero,868c <__divsi3+0x70>
    8620:	000f883a 	mov	r7,zero
    8624:	28001616 	blt	r5,zero,8680 <__divsi3+0x64>
    8628:	200d883a 	mov	r6,r4
    862c:	29001a2e 	bgeu	r5,r4,8698 <__divsi3+0x7c>
    8630:	00800804 	movi	r2,32
    8634:	00c00044 	movi	r3,1
    8638:	00000106 	br	8640 <__divsi3+0x24>
    863c:	10000d26 	beq	r2,zero,8674 <__divsi3+0x58>
    8640:	294b883a 	add	r5,r5,r5
    8644:	10bfffc4 	addi	r2,r2,-1
    8648:	18c7883a 	add	r3,r3,r3
    864c:	293ffb36 	bltu	r5,r4,863c <__divsi3+0x20>
    8650:	0005883a 	mov	r2,zero
    8654:	18000726 	beq	r3,zero,8674 <__divsi3+0x58>
    8658:	0005883a 	mov	r2,zero
    865c:	31400236 	bltu	r6,r5,8668 <__divsi3+0x4c>
    8660:	314dc83a 	sub	r6,r6,r5
    8664:	10c4b03a 	or	r2,r2,r3
    8668:	1806d07a 	srli	r3,r3,1
    866c:	280ad07a 	srli	r5,r5,1
    8670:	183ffa1e 	bne	r3,zero,865c <__divsi3+0x40>
    8674:	38000126 	beq	r7,zero,867c <__divsi3+0x60>
    8678:	0085c83a 	sub	r2,zero,r2
    867c:	f800283a 	ret
    8680:	014bc83a 	sub	r5,zero,r5
    8684:	39c0005c 	xori	r7,r7,1
    8688:	003fe706 	br	8628 <__divsi3+0xc>
    868c:	0109c83a 	sub	r4,zero,r4
    8690:	01c00044 	movi	r7,1
    8694:	003fe306 	br	8624 <__divsi3+0x8>
    8698:	00c00044 	movi	r3,1
    869c:	003fee06 	br	8658 <__divsi3+0x3c>

000086a0 <__modsi3>:
    86a0:	20001716 	blt	r4,zero,8700 <__modsi3+0x60>
    86a4:	000f883a 	mov	r7,zero
    86a8:	2005883a 	mov	r2,r4
    86ac:	28001216 	blt	r5,zero,86f8 <__modsi3+0x58>
    86b0:	2900162e 	bgeu	r5,r4,870c <__modsi3+0x6c>
    86b4:	01800804 	movi	r6,32
    86b8:	00c00044 	movi	r3,1
    86bc:	00000106 	br	86c4 <__modsi3+0x24>
    86c0:	30000a26 	beq	r6,zero,86ec <__modsi3+0x4c>
    86c4:	294b883a 	add	r5,r5,r5
    86c8:	31bfffc4 	addi	r6,r6,-1
    86cc:	18c7883a 	add	r3,r3,r3
    86d0:	293ffb36 	bltu	r5,r4,86c0 <__modsi3+0x20>
    86d4:	18000526 	beq	r3,zero,86ec <__modsi3+0x4c>
    86d8:	1806d07a 	srli	r3,r3,1
    86dc:	11400136 	bltu	r2,r5,86e4 <__modsi3+0x44>
    86e0:	1145c83a 	sub	r2,r2,r5
    86e4:	280ad07a 	srli	r5,r5,1
    86e8:	183ffb1e 	bne	r3,zero,86d8 <__modsi3+0x38>
    86ec:	38000126 	beq	r7,zero,86f4 <__modsi3+0x54>
    86f0:	0085c83a 	sub	r2,zero,r2
    86f4:	f800283a 	ret
    86f8:	014bc83a 	sub	r5,zero,r5
    86fc:	003fec06 	br	86b0 <__modsi3+0x10>
    8700:	0109c83a 	sub	r4,zero,r4
    8704:	01c00044 	movi	r7,1
    8708:	003fe706 	br	86a8 <__modsi3+0x8>
    870c:	00c00044 	movi	r3,1
    8710:	003ff106 	br	86d8 <__modsi3+0x38>

00008714 <__udivsi3>:
    8714:	200d883a 	mov	r6,r4
    8718:	2900152e 	bgeu	r5,r4,8770 <__udivsi3+0x5c>
    871c:	28001416 	blt	r5,zero,8770 <__udivsi3+0x5c>
    8720:	00800804 	movi	r2,32
    8724:	00c00044 	movi	r3,1
    8728:	00000206 	br	8734 <__udivsi3+0x20>
    872c:	10000e26 	beq	r2,zero,8768 <__udivsi3+0x54>
    8730:	28000516 	blt	r5,zero,8748 <__udivsi3+0x34>
    8734:	294b883a 	add	r5,r5,r5
    8738:	10bfffc4 	addi	r2,r2,-1
    873c:	18c7883a 	add	r3,r3,r3
    8740:	293ffa36 	bltu	r5,r4,872c <__udivsi3+0x18>
    8744:	18000826 	beq	r3,zero,8768 <__udivsi3+0x54>
    8748:	0005883a 	mov	r2,zero
    874c:	31400236 	bltu	r6,r5,8758 <__udivsi3+0x44>
    8750:	314dc83a 	sub	r6,r6,r5
    8754:	10c4b03a 	or	r2,r2,r3
    8758:	1806d07a 	srli	r3,r3,1
    875c:	280ad07a 	srli	r5,r5,1
    8760:	183ffa1e 	bne	r3,zero,874c <__udivsi3+0x38>
    8764:	f800283a 	ret
    8768:	0005883a 	mov	r2,zero
    876c:	f800283a 	ret
    8770:	00c00044 	movi	r3,1
    8774:	003ff406 	br	8748 <__udivsi3+0x34>

00008778 <__umodsi3>:
    8778:	2005883a 	mov	r2,r4
    877c:	2900122e 	bgeu	r5,r4,87c8 <__umodsi3+0x50>
    8780:	28001116 	blt	r5,zero,87c8 <__umodsi3+0x50>
    8784:	01800804 	movi	r6,32
    8788:	00c00044 	movi	r3,1
    878c:	00000206 	br	8798 <__umodsi3+0x20>
    8790:	30000c26 	beq	r6,zero,87c4 <__umodsi3+0x4c>
    8794:	28000516 	blt	r5,zero,87ac <__umodsi3+0x34>
    8798:	294b883a 	add	r5,r5,r5
    879c:	31bfffc4 	addi	r6,r6,-1
    87a0:	18c7883a 	add	r3,r3,r3
    87a4:	293ffa36 	bltu	r5,r4,8790 <__umodsi3+0x18>
    87a8:	18000626 	beq	r3,zero,87c4 <__umodsi3+0x4c>
    87ac:	1806d07a 	srli	r3,r3,1
    87b0:	11400136 	bltu	r2,r5,87b8 <__umodsi3+0x40>
    87b4:	1145c83a 	sub	r2,r2,r5
    87b8:	280ad07a 	srli	r5,r5,1
    87bc:	183ffb1e 	bne	r3,zero,87ac <__umodsi3+0x34>
    87c0:	f800283a 	ret
    87c4:	f800283a 	ret
    87c8:	00c00044 	movi	r3,1
    87cc:	003ff706 	br	87ac <__umodsi3+0x34>

000087d0 <_printf_r>:
    87d0:	defffd04 	addi	sp,sp,-12
    87d4:	dfc00015 	stw	ra,0(sp)
    87d8:	d9800115 	stw	r6,4(sp)
    87dc:	d9c00215 	stw	r7,8(sp)
    87e0:	20c00217 	ldw	r3,8(r4)
    87e4:	01800074 	movhi	r6,1
    87e8:	31a3b804 	addi	r6,r6,-28960
    87ec:	19800115 	stw	r6,4(r3)
    87f0:	280d883a 	mov	r6,r5
    87f4:	21400217 	ldw	r5,8(r4)
    87f8:	d9c00104 	addi	r7,sp,4
    87fc:	00089980 	call	8998 <___vfprintf_internal_r>
    8800:	dfc00017 	ldw	ra,0(sp)
    8804:	dec00304 	addi	sp,sp,12
    8808:	f800283a 	ret

0000880c <printf>:
    880c:	defffc04 	addi	sp,sp,-16
    8810:	dfc00015 	stw	ra,0(sp)
    8814:	d9400115 	stw	r5,4(sp)
    8818:	d9800215 	stw	r6,8(sp)
    881c:	d9c00315 	stw	r7,12(sp)
    8820:	00800074 	movhi	r2,1
    8824:	10ab6804 	addi	r2,r2,-21088
    8828:	10800017 	ldw	r2,0(r2)
    882c:	01400074 	movhi	r5,1
    8830:	2963b804 	addi	r5,r5,-28960
    8834:	10c00217 	ldw	r3,8(r2)
    8838:	d9800104 	addi	r6,sp,4
    883c:	19400115 	stw	r5,4(r3)
    8840:	200b883a 	mov	r5,r4
    8844:	11000217 	ldw	r4,8(r2)
    8848:	0008ec40 	call	8ec4 <__vfprintf_internal>
    884c:	dfc00017 	ldw	ra,0(sp)
    8850:	dec00404 	addi	sp,sp,16
    8854:	f800283a 	ret

00008858 <_putchar_r>:
    8858:	21800217 	ldw	r6,8(r4)
    885c:	0008fec1 	jmpi	8fec <_putc_r>

00008860 <putchar>:
    8860:	00800074 	movhi	r2,1
    8864:	10ab6804 	addi	r2,r2,-21088
    8868:	10800017 	ldw	r2,0(r2)
    886c:	200b883a 	mov	r5,r4
    8870:	11800217 	ldw	r6,8(r2)
    8874:	1009883a 	mov	r4,r2
    8878:	0008fec1 	jmpi	8fec <_putc_r>

0000887c <_puts_r>:
    887c:	defffd04 	addi	sp,sp,-12
    8880:	dc000015 	stw	r16,0(sp)
    8884:	2021883a 	mov	r16,r4
    8888:	2809883a 	mov	r4,r5
    888c:	dfc00215 	stw	ra,8(sp)
    8890:	dc400115 	stw	r17,4(sp)
    8894:	2823883a 	mov	r17,r5
    8898:	00089100 	call	8910 <strlen>
    889c:	81400217 	ldw	r5,8(r16)
    88a0:	01000074 	movhi	r4,1
    88a4:	2123b804 	addi	r4,r4,-28960
    88a8:	29000115 	stw	r4,4(r5)
    88ac:	100f883a 	mov	r7,r2
    88b0:	880d883a 	mov	r6,r17
    88b4:	8009883a 	mov	r4,r16
    88b8:	0008ee00 	call	8ee0 <__sfvwrite_small_dev>
    88bc:	00ffffc4 	movi	r3,-1
    88c0:	10c00926 	beq	r2,r3,88e8 <_puts_r+0x6c>
    88c4:	81400217 	ldw	r5,8(r16)
    88c8:	01800074 	movhi	r6,1
    88cc:	01c00044 	movi	r7,1
    88d0:	28800117 	ldw	r2,4(r5)
    88d4:	31aaae04 	addi	r6,r6,-21832
    88d8:	8009883a 	mov	r4,r16
    88dc:	103ee83a 	callr	r2
    88e0:	10bfffe0 	cmpeqi	r2,r2,-1
    88e4:	0085c83a 	sub	r2,zero,r2
    88e8:	dfc00217 	ldw	ra,8(sp)
    88ec:	dc400117 	ldw	r17,4(sp)
    88f0:	dc000017 	ldw	r16,0(sp)
    88f4:	dec00304 	addi	sp,sp,12
    88f8:	f800283a 	ret

000088fc <puts>:
    88fc:	00800074 	movhi	r2,1
    8900:	10ab6804 	addi	r2,r2,-21088
    8904:	200b883a 	mov	r5,r4
    8908:	11000017 	ldw	r4,0(r2)
    890c:	000887c1 	jmpi	887c <_puts_r>

00008910 <strlen>:
    8910:	2005883a 	mov	r2,r4
    8914:	10c00007 	ldb	r3,0(r2)
    8918:	18000226 	beq	r3,zero,8924 <strlen+0x14>
    891c:	10800044 	addi	r2,r2,1
    8920:	003ffc06 	br	8914 <strlen+0x4>
    8924:	1105c83a 	sub	r2,r2,r4
    8928:	f800283a 	ret

0000892c <print_repeat>:
    892c:	defffb04 	addi	sp,sp,-20
    8930:	dc800315 	stw	r18,12(sp)
    8934:	dc400215 	stw	r17,8(sp)
    8938:	dc000115 	stw	r16,4(sp)
    893c:	dfc00415 	stw	ra,16(sp)
    8940:	2025883a 	mov	r18,r4
    8944:	2823883a 	mov	r17,r5
    8948:	d9800005 	stb	r6,0(sp)
    894c:	3821883a 	mov	r16,r7
    8950:	04000a0e 	bge	zero,r16,897c <print_repeat+0x50>
    8954:	88800117 	ldw	r2,4(r17)
    8958:	01c00044 	movi	r7,1
    895c:	d80d883a 	mov	r6,sp
    8960:	880b883a 	mov	r5,r17
    8964:	9009883a 	mov	r4,r18
    8968:	103ee83a 	callr	r2
    896c:	843fffc4 	addi	r16,r16,-1
    8970:	103ff726 	beq	r2,zero,8950 <print_repeat+0x24>
    8974:	00bfffc4 	movi	r2,-1
    8978:	00000106 	br	8980 <print_repeat+0x54>
    897c:	0005883a 	mov	r2,zero
    8980:	dfc00417 	ldw	ra,16(sp)
    8984:	dc800317 	ldw	r18,12(sp)
    8988:	dc400217 	ldw	r17,8(sp)
    898c:	dc000117 	ldw	r16,4(sp)
    8990:	dec00504 	addi	sp,sp,20
    8994:	f800283a 	ret

00008998 <___vfprintf_internal_r>:
    8998:	deffe504 	addi	sp,sp,-108
    899c:	d8c00804 	addi	r3,sp,32
    89a0:	ddc01815 	stw	r23,96(sp)
    89a4:	dd801715 	stw	r22,92(sp)
    89a8:	dd401615 	stw	r21,88(sp)
    89ac:	dd001515 	stw	r20,84(sp)
    89b0:	dcc01415 	stw	r19,80(sp)
    89b4:	dc801315 	stw	r18,76(sp)
    89b8:	dc401215 	stw	r17,72(sp)
    89bc:	dc001115 	stw	r16,68(sp)
    89c0:	dfc01a15 	stw	ra,104(sp)
    89c4:	df001915 	stw	fp,100(sp)
    89c8:	2029883a 	mov	r20,r4
    89cc:	2823883a 	mov	r17,r5
    89d0:	382d883a 	mov	r22,r7
    89d4:	d9800f15 	stw	r6,60(sp)
    89d8:	0021883a 	mov	r16,zero
    89dc:	d8000e15 	stw	zero,56(sp)
    89e0:	d8000a15 	stw	zero,40(sp)
    89e4:	002b883a 	mov	r21,zero
    89e8:	0027883a 	mov	r19,zero
    89ec:	0025883a 	mov	r18,zero
    89f0:	d8000c15 	stw	zero,48(sp)
    89f4:	d8000b15 	stw	zero,44(sp)
    89f8:	002f883a 	mov	r23,zero
    89fc:	d8c00915 	stw	r3,36(sp)
    8a00:	d8c00f17 	ldw	r3,60(sp)
    8a04:	19000003 	ldbu	r4,0(r3)
    8a08:	20803fcc 	andi	r2,r4,255
    8a0c:	1080201c 	xori	r2,r2,128
    8a10:	10bfe004 	addi	r2,r2,-128
    8a14:	10011e26 	beq	r2,zero,8e90 <___vfprintf_internal_r+0x4f8>
    8a18:	00c00044 	movi	r3,1
    8a1c:	b8c01426 	beq	r23,r3,8a70 <___vfprintf_internal_r+0xd8>
    8a20:	1dc00216 	blt	r3,r23,8a2c <___vfprintf_internal_r+0x94>
    8a24:	b8000626 	beq	r23,zero,8a40 <___vfprintf_internal_r+0xa8>
    8a28:	00011506 	br	8e80 <___vfprintf_internal_r+0x4e8>
    8a2c:	01400084 	movi	r5,2
    8a30:	b9401d26 	beq	r23,r5,8aa8 <___vfprintf_internal_r+0x110>
    8a34:	014000c4 	movi	r5,3
    8a38:	b9402b26 	beq	r23,r5,8ae8 <___vfprintf_internal_r+0x150>
    8a3c:	00011006 	br	8e80 <___vfprintf_internal_r+0x4e8>
    8a40:	01400944 	movi	r5,37
    8a44:	1140fc26 	beq	r2,r5,8e38 <___vfprintf_internal_r+0x4a0>
    8a48:	88800117 	ldw	r2,4(r17)
    8a4c:	d9000005 	stb	r4,0(sp)
    8a50:	01c00044 	movi	r7,1
    8a54:	d80d883a 	mov	r6,sp
    8a58:	880b883a 	mov	r5,r17
    8a5c:	a009883a 	mov	r4,r20
    8a60:	103ee83a 	callr	r2
    8a64:	1000d81e 	bne	r2,zero,8dc8 <___vfprintf_internal_r+0x430>
    8a68:	84000044 	addi	r16,r16,1
    8a6c:	00010406 	br	8e80 <___vfprintf_internal_r+0x4e8>
    8a70:	01400c04 	movi	r5,48
    8a74:	1140fa26 	beq	r2,r5,8e60 <___vfprintf_internal_r+0x4c8>
    8a78:	01400944 	movi	r5,37
    8a7c:	11400a1e 	bne	r2,r5,8aa8 <___vfprintf_internal_r+0x110>
    8a80:	d8800005 	stb	r2,0(sp)
    8a84:	88800117 	ldw	r2,4(r17)
    8a88:	b80f883a 	mov	r7,r23
    8a8c:	d80d883a 	mov	r6,sp
    8a90:	880b883a 	mov	r5,r17
    8a94:	a009883a 	mov	r4,r20
    8a98:	103ee83a 	callr	r2
    8a9c:	1000ca1e 	bne	r2,zero,8dc8 <___vfprintf_internal_r+0x430>
    8aa0:	84000044 	addi	r16,r16,1
    8aa4:	0000f506 	br	8e7c <___vfprintf_internal_r+0x4e4>
    8aa8:	25fff404 	addi	r23,r4,-48
    8aac:	bdc03fcc 	andi	r23,r23,255
    8ab0:	00c00244 	movi	r3,9
    8ab4:	1dc00936 	bltu	r3,r23,8adc <___vfprintf_internal_r+0x144>
    8ab8:	00bfffc4 	movi	r2,-1
    8abc:	90800426 	beq	r18,r2,8ad0 <___vfprintf_internal_r+0x138>
    8ac0:	01400284 	movi	r5,10
    8ac4:	9009883a 	mov	r4,r18
    8ac8:	000909c0 	call	909c <__mulsi3>
    8acc:	00000106 	br	8ad4 <___vfprintf_internal_r+0x13c>
    8ad0:	0005883a 	mov	r2,zero
    8ad4:	b8a5883a 	add	r18,r23,r2
    8ad8:	0000e206 	br	8e64 <___vfprintf_internal_r+0x4cc>
    8adc:	01400b84 	movi	r5,46
    8ae0:	1140e426 	beq	r2,r5,8e74 <___vfprintf_internal_r+0x4dc>
    8ae4:	05c00084 	movi	r23,2
    8ae8:	213ff404 	addi	r4,r4,-48
    8aec:	27003fcc 	andi	fp,r4,255
    8af0:	00c00244 	movi	r3,9
    8af4:	1f000936 	bltu	r3,fp,8b1c <___vfprintf_internal_r+0x184>
    8af8:	00bfffc4 	movi	r2,-1
    8afc:	98800426 	beq	r19,r2,8b10 <___vfprintf_internal_r+0x178>
    8b00:	01400284 	movi	r5,10
    8b04:	9809883a 	mov	r4,r19
    8b08:	000909c0 	call	909c <__mulsi3>
    8b0c:	00000106 	br	8b14 <___vfprintf_internal_r+0x17c>
    8b10:	0005883a 	mov	r2,zero
    8b14:	e0a7883a 	add	r19,fp,r2
    8b18:	0000d906 	br	8e80 <___vfprintf_internal_r+0x4e8>
    8b1c:	00c01b04 	movi	r3,108
    8b20:	10c0d226 	beq	r2,r3,8e6c <___vfprintf_internal_r+0x4d4>
    8b24:	013fffc4 	movi	r4,-1
    8b28:	99000226 	beq	r19,r4,8b34 <___vfprintf_internal_r+0x19c>
    8b2c:	d8000b15 	stw	zero,44(sp)
    8b30:	00000106 	br	8b38 <___vfprintf_internal_r+0x1a0>
    8b34:	04c00044 	movi	r19,1
    8b38:	01001a44 	movi	r4,105
    8b3c:	11001626 	beq	r2,r4,8b98 <___vfprintf_internal_r+0x200>
    8b40:	20800916 	blt	r4,r2,8b68 <___vfprintf_internal_r+0x1d0>
    8b44:	010018c4 	movi	r4,99
    8b48:	11008826 	beq	r2,r4,8d6c <___vfprintf_internal_r+0x3d4>
    8b4c:	01001904 	movi	r4,100
    8b50:	11001126 	beq	r2,r4,8b98 <___vfprintf_internal_r+0x200>
    8b54:	01001604 	movi	r4,88
    8b58:	1100c81e 	bne	r2,r4,8e7c <___vfprintf_internal_r+0x4e4>
    8b5c:	00c00044 	movi	r3,1
    8b60:	d8c00e15 	stw	r3,56(sp)
    8b64:	00001506 	br	8bbc <___vfprintf_internal_r+0x224>
    8b68:	01001cc4 	movi	r4,115
    8b6c:	11009826 	beq	r2,r4,8dd0 <___vfprintf_internal_r+0x438>
    8b70:	20800416 	blt	r4,r2,8b84 <___vfprintf_internal_r+0x1ec>
    8b74:	01001bc4 	movi	r4,111
    8b78:	1100c01e 	bne	r2,r4,8e7c <___vfprintf_internal_r+0x4e4>
    8b7c:	05400204 	movi	r21,8
    8b80:	00000f06 	br	8bc0 <___vfprintf_internal_r+0x228>
    8b84:	01001d44 	movi	r4,117
    8b88:	11000d26 	beq	r2,r4,8bc0 <___vfprintf_internal_r+0x228>
    8b8c:	01001e04 	movi	r4,120
    8b90:	11000a26 	beq	r2,r4,8bbc <___vfprintf_internal_r+0x224>
    8b94:	0000b906 	br	8e7c <___vfprintf_internal_r+0x4e4>
    8b98:	d8c00a17 	ldw	r3,40(sp)
    8b9c:	b7000104 	addi	fp,r22,4
    8ba0:	18000726 	beq	r3,zero,8bc0 <___vfprintf_internal_r+0x228>
    8ba4:	df000d15 	stw	fp,52(sp)
    8ba8:	b5c00017 	ldw	r23,0(r22)
    8bac:	b800080e 	bge	r23,zero,8bd0 <___vfprintf_internal_r+0x238>
    8bb0:	05efc83a 	sub	r23,zero,r23
    8bb4:	02400044 	movi	r9,1
    8bb8:	00000606 	br	8bd4 <___vfprintf_internal_r+0x23c>
    8bbc:	05400404 	movi	r21,16
    8bc0:	b0c00104 	addi	r3,r22,4
    8bc4:	d8c00d15 	stw	r3,52(sp)
    8bc8:	b5c00017 	ldw	r23,0(r22)
    8bcc:	d8000a15 	stw	zero,40(sp)
    8bd0:	0013883a 	mov	r9,zero
    8bd4:	d839883a 	mov	fp,sp
    8bd8:	b8001726 	beq	r23,zero,8c38 <___vfprintf_internal_r+0x2a0>
    8bdc:	a80b883a 	mov	r5,r21
    8be0:	b809883a 	mov	r4,r23
    8be4:	da401015 	stw	r9,64(sp)
    8be8:	00087140 	call	8714 <__udivsi3>
    8bec:	a80b883a 	mov	r5,r21
    8bf0:	1009883a 	mov	r4,r2
    8bf4:	102d883a 	mov	r22,r2
    8bf8:	000909c0 	call	909c <__mulsi3>
    8bfc:	b885c83a 	sub	r2,r23,r2
    8c00:	00c00244 	movi	r3,9
    8c04:	da401017 	ldw	r9,64(sp)
    8c08:	18800216 	blt	r3,r2,8c14 <___vfprintf_internal_r+0x27c>
    8c0c:	10800c04 	addi	r2,r2,48
    8c10:	00000506 	br	8c28 <___vfprintf_internal_r+0x290>
    8c14:	d8c00e17 	ldw	r3,56(sp)
    8c18:	18000226 	beq	r3,zero,8c24 <___vfprintf_internal_r+0x28c>
    8c1c:	10800dc4 	addi	r2,r2,55
    8c20:	00000106 	br	8c28 <___vfprintf_internal_r+0x290>
    8c24:	108015c4 	addi	r2,r2,87
    8c28:	e0800005 	stb	r2,0(fp)
    8c2c:	b02f883a 	mov	r23,r22
    8c30:	e7000044 	addi	fp,fp,1
    8c34:	003fe806 	br	8bd8 <___vfprintf_internal_r+0x240>
    8c38:	e6efc83a 	sub	r23,fp,sp
    8c3c:	9dc5c83a 	sub	r2,r19,r23
    8c40:	0080090e 	bge	zero,r2,8c68 <___vfprintf_internal_r+0x2d0>
    8c44:	e085883a 	add	r2,fp,r2
    8c48:	01400c04 	movi	r5,48
    8c4c:	d8c00917 	ldw	r3,36(sp)
    8c50:	e009883a 	mov	r4,fp
    8c54:	e0c0032e 	bgeu	fp,r3,8c64 <___vfprintf_internal_r+0x2cc>
    8c58:	e7000044 	addi	fp,fp,1
    8c5c:	21400005 	stb	r5,0(r4)
    8c60:	e0bffa1e 	bne	fp,r2,8c4c <___vfprintf_internal_r+0x2b4>
    8c64:	e6efc83a 	sub	r23,fp,sp
    8c68:	d8c00b17 	ldw	r3,44(sp)
    8c6c:	4dd1883a 	add	r8,r9,r23
    8c70:	922dc83a 	sub	r22,r18,r8
    8c74:	18001626 	beq	r3,zero,8cd0 <___vfprintf_internal_r+0x338>
    8c78:	48000a26 	beq	r9,zero,8ca4 <___vfprintf_internal_r+0x30c>
    8c7c:	00800b44 	movi	r2,45
    8c80:	d8800805 	stb	r2,32(sp)
    8c84:	88800117 	ldw	r2,4(r17)
    8c88:	01c00044 	movi	r7,1
    8c8c:	d9800804 	addi	r6,sp,32
    8c90:	880b883a 	mov	r5,r17
    8c94:	a009883a 	mov	r4,r20
    8c98:	103ee83a 	callr	r2
    8c9c:	10004a1e 	bne	r2,zero,8dc8 <___vfprintf_internal_r+0x430>
    8ca0:	84000044 	addi	r16,r16,1
    8ca4:	0580070e 	bge	zero,r22,8cc4 <___vfprintf_internal_r+0x32c>
    8ca8:	b00f883a 	mov	r7,r22
    8cac:	01800c04 	movi	r6,48
    8cb0:	880b883a 	mov	r5,r17
    8cb4:	a009883a 	mov	r4,r20
    8cb8:	000892c0 	call	892c <print_repeat>
    8cbc:	1000421e 	bne	r2,zero,8dc8 <___vfprintf_internal_r+0x430>
    8cc0:	85a1883a 	add	r16,r16,r22
    8cc4:	e02d883a 	mov	r22,fp
    8cc8:	bf2fc83a 	sub	r23,r23,fp
    8ccc:	00002006 	br	8d50 <___vfprintf_internal_r+0x3b8>
    8cd0:	0580090e 	bge	zero,r22,8cf8 <___vfprintf_internal_r+0x360>
    8cd4:	b00f883a 	mov	r7,r22
    8cd8:	01800804 	movi	r6,32
    8cdc:	880b883a 	mov	r5,r17
    8ce0:	a009883a 	mov	r4,r20
    8ce4:	da401015 	stw	r9,64(sp)
    8ce8:	000892c0 	call	892c <print_repeat>
    8cec:	da401017 	ldw	r9,64(sp)
    8cf0:	1000351e 	bne	r2,zero,8dc8 <___vfprintf_internal_r+0x430>
    8cf4:	85a1883a 	add	r16,r16,r22
    8cf8:	483ff226 	beq	r9,zero,8cc4 <___vfprintf_internal_r+0x32c>
    8cfc:	00800b44 	movi	r2,45
    8d00:	d8800805 	stb	r2,32(sp)
    8d04:	88800117 	ldw	r2,4(r17)
    8d08:	01c00044 	movi	r7,1
    8d0c:	d9800804 	addi	r6,sp,32
    8d10:	880b883a 	mov	r5,r17
    8d14:	a009883a 	mov	r4,r20
    8d18:	103ee83a 	callr	r2
    8d1c:	10002a1e 	bne	r2,zero,8dc8 <___vfprintf_internal_r+0x430>
    8d20:	84000044 	addi	r16,r16,1
    8d24:	003fe706 	br	8cc4 <___vfprintf_internal_r+0x32c>
    8d28:	b5bfffc4 	addi	r22,r22,-1
    8d2c:	b0800003 	ldbu	r2,0(r22)
    8d30:	01c00044 	movi	r7,1
    8d34:	d9800804 	addi	r6,sp,32
    8d38:	d8800805 	stb	r2,32(sp)
    8d3c:	88800117 	ldw	r2,4(r17)
    8d40:	880b883a 	mov	r5,r17
    8d44:	a009883a 	mov	r4,r20
    8d48:	103ee83a 	callr	r2
    8d4c:	10001e1e 	bne	r2,zero,8dc8 <___vfprintf_internal_r+0x430>
    8d50:	8585c83a 	sub	r2,r16,r22
    8d54:	b5c9883a 	add	r4,r22,r23
    8d58:	e085883a 	add	r2,fp,r2
    8d5c:	013ff216 	blt	zero,r4,8d28 <___vfprintf_internal_r+0x390>
    8d60:	1021883a 	mov	r16,r2
    8d64:	dd800d17 	ldw	r22,52(sp)
    8d68:	00004406 	br	8e7c <___vfprintf_internal_r+0x4e4>
    8d6c:	00800044 	movi	r2,1
    8d70:	1480080e 	bge	r2,r18,8d94 <___vfprintf_internal_r+0x3fc>
    8d74:	95ffffc4 	addi	r23,r18,-1
    8d78:	b80f883a 	mov	r7,r23
    8d7c:	01800804 	movi	r6,32
    8d80:	880b883a 	mov	r5,r17
    8d84:	a009883a 	mov	r4,r20
    8d88:	000892c0 	call	892c <print_repeat>
    8d8c:	10000e1e 	bne	r2,zero,8dc8 <___vfprintf_internal_r+0x430>
    8d90:	85e1883a 	add	r16,r16,r23
    8d94:	b0800017 	ldw	r2,0(r22)
    8d98:	01c00044 	movi	r7,1
    8d9c:	d80d883a 	mov	r6,sp
    8da0:	d8800005 	stb	r2,0(sp)
    8da4:	88800117 	ldw	r2,4(r17)
    8da8:	880b883a 	mov	r5,r17
    8dac:	a009883a 	mov	r4,r20
    8db0:	b5c00104 	addi	r23,r22,4
    8db4:	103ee83a 	callr	r2
    8db8:	1000031e 	bne	r2,zero,8dc8 <___vfprintf_internal_r+0x430>
    8dbc:	84000044 	addi	r16,r16,1
    8dc0:	b82d883a 	mov	r22,r23
    8dc4:	00002d06 	br	8e7c <___vfprintf_internal_r+0x4e4>
    8dc8:	00bfffc4 	movi	r2,-1
    8dcc:	00003106 	br	8e94 <___vfprintf_internal_r+0x4fc>
    8dd0:	b5c00017 	ldw	r23,0(r22)
    8dd4:	b7000104 	addi	fp,r22,4
    8dd8:	b809883a 	mov	r4,r23
    8ddc:	00089100 	call	8910 <strlen>
    8de0:	9091c83a 	sub	r8,r18,r2
    8de4:	102d883a 	mov	r22,r2
    8de8:	0200090e 	bge	zero,r8,8e10 <___vfprintf_internal_r+0x478>
    8dec:	400f883a 	mov	r7,r8
    8df0:	01800804 	movi	r6,32
    8df4:	880b883a 	mov	r5,r17
    8df8:	a009883a 	mov	r4,r20
    8dfc:	da001015 	stw	r8,64(sp)
    8e00:	000892c0 	call	892c <print_repeat>
    8e04:	da001017 	ldw	r8,64(sp)
    8e08:	103fef1e 	bne	r2,zero,8dc8 <___vfprintf_internal_r+0x430>
    8e0c:	8221883a 	add	r16,r16,r8
    8e10:	88800117 	ldw	r2,4(r17)
    8e14:	b00f883a 	mov	r7,r22
    8e18:	b80d883a 	mov	r6,r23
    8e1c:	880b883a 	mov	r5,r17
    8e20:	a009883a 	mov	r4,r20
    8e24:	103ee83a 	callr	r2
    8e28:	103fe71e 	bne	r2,zero,8dc8 <___vfprintf_internal_r+0x430>
    8e2c:	85a1883a 	add	r16,r16,r22
    8e30:	e02d883a 	mov	r22,fp
    8e34:	00001106 	br	8e7c <___vfprintf_internal_r+0x4e4>
    8e38:	00c00044 	movi	r3,1
    8e3c:	04ffffc4 	movi	r19,-1
    8e40:	d8000e15 	stw	zero,56(sp)
    8e44:	d8c00a15 	stw	r3,40(sp)
    8e48:	05400284 	movi	r21,10
    8e4c:	9825883a 	mov	r18,r19
    8e50:	d8000c15 	stw	zero,48(sp)
    8e54:	d8000b15 	stw	zero,44(sp)
    8e58:	182f883a 	mov	r23,r3
    8e5c:	00000806 	br	8e80 <___vfprintf_internal_r+0x4e8>
    8e60:	ddc00b15 	stw	r23,44(sp)
    8e64:	05c00084 	movi	r23,2
    8e68:	00000506 	br	8e80 <___vfprintf_internal_r+0x4e8>
    8e6c:	00c00044 	movi	r3,1
    8e70:	d8c00c15 	stw	r3,48(sp)
    8e74:	05c000c4 	movi	r23,3
    8e78:	00000106 	br	8e80 <___vfprintf_internal_r+0x4e8>
    8e7c:	002f883a 	mov	r23,zero
    8e80:	d8c00f17 	ldw	r3,60(sp)
    8e84:	18c00044 	addi	r3,r3,1
    8e88:	d8c00f15 	stw	r3,60(sp)
    8e8c:	003edc06 	br	8a00 <___vfprintf_internal_r+0x68>
    8e90:	8005883a 	mov	r2,r16
    8e94:	dfc01a17 	ldw	ra,104(sp)
    8e98:	df001917 	ldw	fp,100(sp)
    8e9c:	ddc01817 	ldw	r23,96(sp)
    8ea0:	dd801717 	ldw	r22,92(sp)
    8ea4:	dd401617 	ldw	r21,88(sp)
    8ea8:	dd001517 	ldw	r20,84(sp)
    8eac:	dcc01417 	ldw	r19,80(sp)
    8eb0:	dc801317 	ldw	r18,76(sp)
    8eb4:	dc401217 	ldw	r17,72(sp)
    8eb8:	dc001117 	ldw	r16,68(sp)
    8ebc:	dec01b04 	addi	sp,sp,108
    8ec0:	f800283a 	ret

00008ec4 <__vfprintf_internal>:
    8ec4:	00800074 	movhi	r2,1
    8ec8:	10ab6804 	addi	r2,r2,-21088
    8ecc:	300f883a 	mov	r7,r6
    8ed0:	280d883a 	mov	r6,r5
    8ed4:	200b883a 	mov	r5,r4
    8ed8:	11000017 	ldw	r4,0(r2)
    8edc:	00089981 	jmpi	8998 <___vfprintf_internal_r>

00008ee0 <__sfvwrite_small_dev>:
    8ee0:	2880000b 	ldhu	r2,0(r5)
    8ee4:	1080020c 	andi	r2,r2,8
    8ee8:	10002126 	beq	r2,zero,8f70 <__sfvwrite_small_dev+0x90>
    8eec:	2880008f 	ldh	r2,2(r5)
    8ef0:	defffa04 	addi	sp,sp,-24
    8ef4:	dc000015 	stw	r16,0(sp)
    8ef8:	dfc00515 	stw	ra,20(sp)
    8efc:	dd000415 	stw	r20,16(sp)
    8f00:	dcc00315 	stw	r19,12(sp)
    8f04:	dc800215 	stw	r18,8(sp)
    8f08:	dc400115 	stw	r17,4(sp)
    8f0c:	2821883a 	mov	r16,r5
    8f10:	10001216 	blt	r2,zero,8f5c <__sfvwrite_small_dev+0x7c>
    8f14:	2027883a 	mov	r19,r4
    8f18:	3025883a 	mov	r18,r6
    8f1c:	3823883a 	mov	r17,r7
    8f20:	05010004 	movi	r20,1024
    8f24:	04400b0e 	bge	zero,r17,8f54 <__sfvwrite_small_dev+0x74>
    8f28:	880f883a 	mov	r7,r17
    8f2c:	a440010e 	bge	r20,r17,8f34 <__sfvwrite_small_dev+0x54>
    8f30:	01c10004 	movi	r7,1024
    8f34:	8140008f 	ldh	r5,2(r16)
    8f38:	900d883a 	mov	r6,r18
    8f3c:	9809883a 	mov	r4,r19
    8f40:	00090440 	call	9044 <_write_r>
    8f44:	0080050e 	bge	zero,r2,8f5c <__sfvwrite_small_dev+0x7c>
    8f48:	88a3c83a 	sub	r17,r17,r2
    8f4c:	90a5883a 	add	r18,r18,r2
    8f50:	003ff406 	br	8f24 <__sfvwrite_small_dev+0x44>
    8f54:	0005883a 	mov	r2,zero
    8f58:	00000706 	br	8f78 <__sfvwrite_small_dev+0x98>
    8f5c:	8080000b 	ldhu	r2,0(r16)
    8f60:	10801014 	ori	r2,r2,64
    8f64:	8080000d 	sth	r2,0(r16)
    8f68:	00bfffc4 	movi	r2,-1
    8f6c:	00000206 	br	8f78 <__sfvwrite_small_dev+0x98>
    8f70:	00bfffc4 	movi	r2,-1
    8f74:	f800283a 	ret
    8f78:	dfc00517 	ldw	ra,20(sp)
    8f7c:	dd000417 	ldw	r20,16(sp)
    8f80:	dcc00317 	ldw	r19,12(sp)
    8f84:	dc800217 	ldw	r18,8(sp)
    8f88:	dc400117 	ldw	r17,4(sp)
    8f8c:	dc000017 	ldw	r16,0(sp)
    8f90:	dec00604 	addi	sp,sp,24
    8f94:	f800283a 	ret

00008f98 <putc>:
    8f98:	defffd04 	addi	sp,sp,-12
    8f9c:	00800074 	movhi	r2,1
    8fa0:	dc000115 	stw	r16,4(sp)
    8fa4:	dfc00215 	stw	ra,8(sp)
    8fa8:	10a3b804 	addi	r2,r2,-28960
    8fac:	28800115 	stw	r2,4(r5)
    8fb0:	00800074 	movhi	r2,1
    8fb4:	10ab6804 	addi	r2,r2,-21088
    8fb8:	d9000005 	stb	r4,0(sp)
    8fbc:	2021883a 	mov	r16,r4
    8fc0:	11000017 	ldw	r4,0(r2)
    8fc4:	01c00044 	movi	r7,1
    8fc8:	d80d883a 	mov	r6,sp
    8fcc:	0008ee00 	call	8ee0 <__sfvwrite_small_dev>
    8fd0:	00ffffc4 	movi	r3,-1
    8fd4:	10c00126 	beq	r2,r3,8fdc <putc+0x44>
    8fd8:	8005883a 	mov	r2,r16
    8fdc:	dfc00217 	ldw	ra,8(sp)
    8fe0:	dc000117 	ldw	r16,4(sp)
    8fe4:	dec00304 	addi	sp,sp,12
    8fe8:	f800283a 	ret

00008fec <_putc_r>:
    8fec:	defffd04 	addi	sp,sp,-12
    8ff0:	00800074 	movhi	r2,1
    8ff4:	dc000115 	stw	r16,4(sp)
    8ff8:	dfc00215 	stw	ra,8(sp)
    8ffc:	10a3b804 	addi	r2,r2,-28960
    9000:	30800115 	stw	r2,4(r6)
    9004:	00800074 	movhi	r2,1
    9008:	10ab6804 	addi	r2,r2,-21088
    900c:	11000017 	ldw	r4,0(r2)
    9010:	2821883a 	mov	r16,r5
    9014:	01c00044 	movi	r7,1
    9018:	300b883a 	mov	r5,r6
    901c:	d80d883a 	mov	r6,sp
    9020:	dc000005 	stb	r16,0(sp)
    9024:	0008ee00 	call	8ee0 <__sfvwrite_small_dev>
    9028:	00ffffc4 	movi	r3,-1
    902c:	10c00126 	beq	r2,r3,9034 <_putc_r+0x48>
    9030:	8005883a 	mov	r2,r16
    9034:	dfc00217 	ldw	ra,8(sp)
    9038:	dc000117 	ldw	r16,4(sp)
    903c:	dec00304 	addi	sp,sp,12
    9040:	f800283a 	ret

00009044 <_write_r>:
    9044:	defffd04 	addi	sp,sp,-12
    9048:	dc000015 	stw	r16,0(sp)
    904c:	04000074 	movhi	r16,1
    9050:	dc400115 	stw	r17,4(sp)
    9054:	842c2c04 	addi	r16,r16,-20304
    9058:	2023883a 	mov	r17,r4
    905c:	2809883a 	mov	r4,r5
    9060:	300b883a 	mov	r5,r6
    9064:	380d883a 	mov	r6,r7
    9068:	dfc00215 	stw	ra,8(sp)
    906c:	80000015 	stw	zero,0(r16)
    9070:	00092880 	call	9288 <write>
    9074:	00ffffc4 	movi	r3,-1
    9078:	10c0031e 	bne	r2,r3,9088 <_write_r+0x44>
    907c:	80c00017 	ldw	r3,0(r16)
    9080:	18000126 	beq	r3,zero,9088 <_write_r+0x44>
    9084:	88c00015 	stw	r3,0(r17)
    9088:	dfc00217 	ldw	ra,8(sp)
    908c:	dc400117 	ldw	r17,4(sp)
    9090:	dc000017 	ldw	r16,0(sp)
    9094:	dec00304 	addi	sp,sp,12
    9098:	f800283a 	ret

0000909c <__mulsi3>:
    909c:	0005883a 	mov	r2,zero
    90a0:	20000726 	beq	r4,zero,90c0 <__mulsi3+0x24>
    90a4:	20c0004c 	andi	r3,r4,1
    90a8:	2008d07a 	srli	r4,r4,1
    90ac:	18000126 	beq	r3,zero,90b4 <__mulsi3+0x18>
    90b0:	1145883a 	add	r2,r2,r5
    90b4:	294b883a 	add	r5,r5,r5
    90b8:	203ffa1e 	bne	r4,zero,90a4 <__mulsi3+0x8>
    90bc:	f800283a 	ret
    90c0:	f800283a 	ret

000090c4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    90c4:	defffc04 	addi	sp,sp,-16
    90c8:	df000315 	stw	fp,12(sp)
    90cc:	df000304 	addi	fp,sp,12
    90d0:	e13ffd15 	stw	r4,-12(fp)
    90d4:	e17ffe15 	stw	r5,-8(fp)
    90d8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    90dc:	e0fffe17 	ldw	r3,-8(fp)
    90e0:	e0bffd17 	ldw	r2,-12(fp)
    90e4:	18800c26 	beq	r3,r2,9118 <alt_load_section+0x54>
  {
    while( to != end )
    90e8:	00000806 	br	910c <alt_load_section+0x48>
    {
      *to++ = *from++;
    90ec:	e0bffe17 	ldw	r2,-8(fp)
    90f0:	10c00104 	addi	r3,r2,4
    90f4:	e0fffe15 	stw	r3,-8(fp)
    90f8:	e0fffd17 	ldw	r3,-12(fp)
    90fc:	19000104 	addi	r4,r3,4
    9100:	e13ffd15 	stw	r4,-12(fp)
    9104:	18c00017 	ldw	r3,0(r3)
    9108:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    910c:	e0fffe17 	ldw	r3,-8(fp)
    9110:	e0bfff17 	ldw	r2,-4(fp)
    9114:	18bff51e 	bne	r3,r2,90ec <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    9118:	0001883a 	nop
    911c:	e037883a 	mov	sp,fp
    9120:	df000017 	ldw	fp,0(sp)
    9124:	dec00104 	addi	sp,sp,4
    9128:	f800283a 	ret

0000912c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    912c:	defffe04 	addi	sp,sp,-8
    9130:	dfc00115 	stw	ra,4(sp)
    9134:	df000015 	stw	fp,0(sp)
    9138:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    913c:	01800074 	movhi	r6,1
    9140:	31ab7204 	addi	r6,r6,-21048
    9144:	01400074 	movhi	r5,1
    9148:	296aba04 	addi	r5,r5,-21784
    914c:	01000074 	movhi	r4,1
    9150:	212b7204 	addi	r4,r4,-21048
    9154:	00090c40 	call	90c4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    9158:	01800074 	movhi	r6,1
    915c:	31a09104 	addi	r6,r6,-32188
    9160:	01400074 	movhi	r5,1
    9164:	29600804 	addi	r5,r5,-32736
    9168:	01000074 	movhi	r4,1
    916c:	21200804 	addi	r4,r4,-32736
    9170:	00090c40 	call	90c4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    9174:	01800074 	movhi	r6,1
    9178:	31aaba04 	addi	r6,r6,-21784
    917c:	01400074 	movhi	r5,1
    9180:	296a7604 	addi	r5,r5,-22056
    9184:	01000074 	movhi	r4,1
    9188:	212a7604 	addi	r4,r4,-22056
    918c:	00090c40 	call	90c4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    9190:	00099e40 	call	99e4 <alt_dcache_flush_all>
  alt_icache_flush_all();
    9194:	0009b380 	call	9b38 <alt_icache_flush_all>
}
    9198:	0001883a 	nop
    919c:	e037883a 	mov	sp,fp
    91a0:	dfc00117 	ldw	ra,4(sp)
    91a4:	df000017 	ldw	fp,0(sp)
    91a8:	dec00204 	addi	sp,sp,8
    91ac:	f800283a 	ret

000091b0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    91b0:	defffd04 	addi	sp,sp,-12
    91b4:	dfc00215 	stw	ra,8(sp)
    91b8:	df000115 	stw	fp,4(sp)
    91bc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    91c0:	0009883a 	mov	r4,zero
    91c4:	00093bc0 	call	93bc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    91c8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    91cc:	00093f40 	call	93f4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    91d0:	01800074 	movhi	r6,1
    91d4:	31aaaf04 	addi	r6,r6,-21828
    91d8:	01400074 	movhi	r5,1
    91dc:	296aaf04 	addi	r5,r5,-21828
    91e0:	01000074 	movhi	r4,1
    91e4:	212aaf04 	addi	r4,r4,-21828
    91e8:	0009ef00 	call	9ef0 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    91ec:	d0a0c617 	ldw	r2,-31976(gp)
    91f0:	d0e0c717 	ldw	r3,-31972(gp)
    91f4:	d120c817 	ldw	r4,-31968(gp)
    91f8:	200d883a 	mov	r6,r4
    91fc:	180b883a 	mov	r5,r3
    9200:	1009883a 	mov	r4,r2
    9204:	000851c0 	call	851c <main>
    9208:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    920c:	01000044 	movi	r4,1
    9210:	000990c0 	call	990c <close>
  exit (result);
    9214:	e13fff17 	ldw	r4,-4(fp)
    9218:	000a7c40 	call	a7c4 <exit>

0000921c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    921c:	defffd04 	addi	sp,sp,-12
    9220:	dfc00215 	stw	ra,8(sp)
    9224:	df000115 	stw	fp,4(sp)
    9228:	df000104 	addi	fp,sp,4
    922c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    9230:	e13fff17 	ldw	r4,-4(fp)
    9234:	00097780 	call	9778 <alt_busy_sleep>
}
    9238:	e037883a 	mov	sp,fp
    923c:	dfc00117 	ldw	ra,4(sp)
    9240:	df000017 	ldw	fp,0(sp)
    9244:	dec00204 	addi	sp,sp,8
    9248:	f800283a 	ret

0000924c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    924c:	defffe04 	addi	sp,sp,-8
    9250:	dfc00115 	stw	ra,4(sp)
    9254:	df000015 	stw	fp,0(sp)
    9258:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    925c:	d0a00717 	ldw	r2,-32740(gp)
    9260:	10000326 	beq	r2,zero,9270 <alt_get_errno+0x24>
    9264:	d0a00717 	ldw	r2,-32740(gp)
    9268:	103ee83a 	callr	r2
    926c:	00000106 	br	9274 <alt_get_errno+0x28>
    9270:	d0a0c504 	addi	r2,gp,-31980
}
    9274:	e037883a 	mov	sp,fp
    9278:	dfc00117 	ldw	ra,4(sp)
    927c:	df000017 	ldw	fp,0(sp)
    9280:	dec00204 	addi	sp,sp,8
    9284:	f800283a 	ret

00009288 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    9288:	defff904 	addi	sp,sp,-28
    928c:	dfc00615 	stw	ra,24(sp)
    9290:	df000515 	stw	fp,20(sp)
    9294:	df000504 	addi	fp,sp,20
    9298:	e13ffd15 	stw	r4,-12(fp)
    929c:	e17ffe15 	stw	r5,-8(fp)
    92a0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    92a4:	e0bffd17 	ldw	r2,-12(fp)
    92a8:	10000816 	blt	r2,zero,92cc <write+0x44>
    92ac:	01400304 	movi	r5,12
    92b0:	e13ffd17 	ldw	r4,-12(fp)
    92b4:	000909c0 	call	909c <__mulsi3>
    92b8:	1007883a 	mov	r3,r2
    92bc:	00800074 	movhi	r2,1
    92c0:	10ab0704 	addi	r2,r2,-21476
    92c4:	1885883a 	add	r2,r3,r2
    92c8:	00000106 	br	92d0 <write+0x48>
    92cc:	0005883a 	mov	r2,zero
    92d0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    92d4:	e0bffb17 	ldw	r2,-20(fp)
    92d8:	10002126 	beq	r2,zero,9360 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    92dc:	e0bffb17 	ldw	r2,-20(fp)
    92e0:	10800217 	ldw	r2,8(r2)
    92e4:	108000cc 	andi	r2,r2,3
    92e8:	10001826 	beq	r2,zero,934c <write+0xc4>
    92ec:	e0bffb17 	ldw	r2,-20(fp)
    92f0:	10800017 	ldw	r2,0(r2)
    92f4:	10800617 	ldw	r2,24(r2)
    92f8:	10001426 	beq	r2,zero,934c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    92fc:	e0bffb17 	ldw	r2,-20(fp)
    9300:	10800017 	ldw	r2,0(r2)
    9304:	10800617 	ldw	r2,24(r2)
    9308:	e0ffff17 	ldw	r3,-4(fp)
    930c:	180d883a 	mov	r6,r3
    9310:	e17ffe17 	ldw	r5,-8(fp)
    9314:	e13ffb17 	ldw	r4,-20(fp)
    9318:	103ee83a 	callr	r2
    931c:	e0bffc15 	stw	r2,-16(fp)
    9320:	e0bffc17 	ldw	r2,-16(fp)
    9324:	1000070e 	bge	r2,zero,9344 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    9328:	000924c0 	call	924c <alt_get_errno>
    932c:	1007883a 	mov	r3,r2
    9330:	e0bffc17 	ldw	r2,-16(fp)
    9334:	0085c83a 	sub	r2,zero,r2
    9338:	18800015 	stw	r2,0(r3)
        return -1;
    933c:	00bfffc4 	movi	r2,-1
    9340:	00000c06 	br	9374 <write+0xec>
      }
      return rval;
    9344:	e0bffc17 	ldw	r2,-16(fp)
    9348:	00000a06 	br	9374 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    934c:	000924c0 	call	924c <alt_get_errno>
    9350:	1007883a 	mov	r3,r2
    9354:	00800344 	movi	r2,13
    9358:	18800015 	stw	r2,0(r3)
    935c:	00000406 	br	9370 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    9360:	000924c0 	call	924c <alt_get_errno>
    9364:	1007883a 	mov	r3,r2
    9368:	00801444 	movi	r2,81
    936c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    9370:	00bfffc4 	movi	r2,-1
}
    9374:	e037883a 	mov	sp,fp
    9378:	dfc00117 	ldw	ra,4(sp)
    937c:	df000017 	ldw	fp,0(sp)
    9380:	dec00204 	addi	sp,sp,8
    9384:	f800283a 	ret

00009388 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    9388:	defffd04 	addi	sp,sp,-12
    938c:	dfc00215 	stw	ra,8(sp)
    9390:	df000115 	stw	fp,4(sp)
    9394:	df000104 	addi	fp,sp,4
    9398:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    939c:	d1600404 	addi	r5,gp,-32752
    93a0:	e13fff17 	ldw	r4,-4(fp)
    93a4:	0009a940 	call	9a94 <alt_dev_llist_insert>
}
    93a8:	e037883a 	mov	sp,fp
    93ac:	dfc00117 	ldw	ra,4(sp)
    93b0:	df000017 	ldw	fp,0(sp)
    93b4:	dec00204 	addi	sp,sp,8
    93b8:	f800283a 	ret

000093bc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    93bc:	defffd04 	addi	sp,sp,-12
    93c0:	dfc00215 	stw	ra,8(sp)
    93c4:	df000115 	stw	fp,4(sp)
    93c8:	df000104 	addi	fp,sp,4
    93cc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    93d0:	000a4180 	call	a418 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    93d4:	00800044 	movi	r2,1
    93d8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    93dc:	0001883a 	nop
    93e0:	e037883a 	mov	sp,fp
    93e4:	dfc00117 	ldw	ra,4(sp)
    93e8:	df000017 	ldw	fp,0(sp)
    93ec:	dec00204 	addi	sp,sp,8
    93f0:	f800283a 	ret

000093f4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    93f4:	defffe04 	addi	sp,sp,-8
    93f8:	dfc00115 	stw	ra,4(sp)
    93fc:	df000015 	stw	fp,0(sp)
    9400:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
    9404:	01c0fa04 	movi	r7,1000
    9408:	01800044 	movi	r6,1
    940c:	000b883a 	mov	r5,zero
    9410:	01000074 	movhi	r4,1
    9414:	21040004 	addi	r4,r4,4096
    9418:	00096fc0 	call	96fc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    941c:	01000074 	movhi	r4,1
    9420:	212af204 	addi	r4,r4,-21560
    9424:	00093880 	call	9388 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    9428:	0001883a 	nop
}
    942c:	0001883a 	nop
    9430:	e037883a 	mov	sp,fp
    9434:	dfc00117 	ldw	ra,4(sp)
    9438:	df000017 	ldw	fp,0(sp)
    943c:	dec00204 	addi	sp,sp,8
    9440:	f800283a 	ret

00009444 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    9444:	defffa04 	addi	sp,sp,-24
    9448:	dfc00515 	stw	ra,20(sp)
    944c:	df000415 	stw	fp,16(sp)
    9450:	df000404 	addi	fp,sp,16
    9454:	e13ffd15 	stw	r4,-12(fp)
    9458:	e17ffe15 	stw	r5,-8(fp)
    945c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9460:	e0bffd17 	ldw	r2,-12(fp)
    9464:	10800017 	ldw	r2,0(r2)
    9468:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    946c:	e0bffc17 	ldw	r2,-16(fp)
    9470:	10c00a04 	addi	r3,r2,40
    9474:	e0bffd17 	ldw	r2,-12(fp)
    9478:	10800217 	ldw	r2,8(r2)
    947c:	100f883a 	mov	r7,r2
    9480:	e1bfff17 	ldw	r6,-4(fp)
    9484:	e17ffe17 	ldw	r5,-8(fp)
    9488:	1809883a 	mov	r4,r3
    948c:	00095040 	call	9504 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    9490:	e037883a 	mov	sp,fp
    9494:	dfc00117 	ldw	ra,4(sp)
    9498:	df000017 	ldw	fp,0(sp)
    949c:	dec00204 	addi	sp,sp,8
    94a0:	f800283a 	ret

000094a4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    94a4:	defffa04 	addi	sp,sp,-24
    94a8:	dfc00515 	stw	ra,20(sp)
    94ac:	df000415 	stw	fp,16(sp)
    94b0:	df000404 	addi	fp,sp,16
    94b4:	e13ffd15 	stw	r4,-12(fp)
    94b8:	e17ffe15 	stw	r5,-8(fp)
    94bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    94c0:	e0bffd17 	ldw	r2,-12(fp)
    94c4:	10800017 	ldw	r2,0(r2)
    94c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    94cc:	e0bffc17 	ldw	r2,-16(fp)
    94d0:	10c00a04 	addi	r3,r2,40
    94d4:	e0bffd17 	ldw	r2,-12(fp)
    94d8:	10800217 	ldw	r2,8(r2)
    94dc:	100f883a 	mov	r7,r2
    94e0:	e1bfff17 	ldw	r6,-4(fp)
    94e4:	e17ffe17 	ldw	r5,-8(fp)
    94e8:	1809883a 	mov	r4,r3
    94ec:	00095f00 	call	95f0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    94f0:	e037883a 	mov	sp,fp
    94f4:	dfc00117 	ldw	ra,4(sp)
    94f8:	df000017 	ldw	fp,0(sp)
    94fc:	dec00204 	addi	sp,sp,8
    9500:	f800283a 	ret

00009504 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    9504:	defff704 	addi	sp,sp,-36
    9508:	df000815 	stw	fp,32(sp)
    950c:	df000804 	addi	fp,sp,32
    9510:	e13ffc15 	stw	r4,-16(fp)
    9514:	e17ffd15 	stw	r5,-12(fp)
    9518:	e1bffe15 	stw	r6,-8(fp)
    951c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    9520:	e0bffc17 	ldw	r2,-16(fp)
    9524:	10800017 	ldw	r2,0(r2)
    9528:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    952c:	e0bffd17 	ldw	r2,-12(fp)
    9530:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    9534:	e0bffe17 	ldw	r2,-8(fp)
    9538:	e0fffd17 	ldw	r3,-12(fp)
    953c:	1885883a 	add	r2,r3,r2
    9540:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    9544:	00001206 	br	9590 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    9548:	e0bff917 	ldw	r2,-28(fp)
    954c:	10800037 	ldwio	r2,0(r2)
    9550:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    9554:	e0bffb17 	ldw	r2,-20(fp)
    9558:	10a0000c 	andi	r2,r2,32768
    955c:	10000626 	beq	r2,zero,9578 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    9560:	e0bff817 	ldw	r2,-32(fp)
    9564:	10c00044 	addi	r3,r2,1
    9568:	e0fff815 	stw	r3,-32(fp)
    956c:	e0fffb17 	ldw	r3,-20(fp)
    9570:	10c00005 	stb	r3,0(r2)
    9574:	00000606 	br	9590 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    9578:	e0fff817 	ldw	r3,-32(fp)
    957c:	e0bffd17 	ldw	r2,-12(fp)
    9580:	1880071e 	bne	r3,r2,95a0 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    9584:	e0bfff17 	ldw	r2,-4(fp)
    9588:	1090000c 	andi	r2,r2,16384
    958c:	1000061e 	bne	r2,zero,95a8 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    9590:	e0fff817 	ldw	r3,-32(fp)
    9594:	e0bffa17 	ldw	r2,-24(fp)
    9598:	18bfeb36 	bltu	r3,r2,9548 <altera_avalon_jtag_uart_read+0x44>
    959c:	00000306 	br	95ac <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    95a0:	0001883a 	nop
    95a4:	00000106 	br	95ac <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    95a8:	0001883a 	nop
    
  }

  if (ptr != buffer)
    95ac:	e0fff817 	ldw	r3,-32(fp)
    95b0:	e0bffd17 	ldw	r2,-12(fp)
    95b4:	18800426 	beq	r3,r2,95c8 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    95b8:	e0fff817 	ldw	r3,-32(fp)
    95bc:	e0bffd17 	ldw	r2,-12(fp)
    95c0:	1885c83a 	sub	r2,r3,r2
    95c4:	00000606 	br	95e0 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    95c8:	e0bfff17 	ldw	r2,-4(fp)
    95cc:	1090000c 	andi	r2,r2,16384
    95d0:	10000226 	beq	r2,zero,95dc <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    95d4:	00bffd44 	movi	r2,-11
    95d8:	00000106 	br	95e0 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    95dc:	00bffec4 	movi	r2,-5
}
    95e0:	e037883a 	mov	sp,fp
    95e4:	df000017 	ldw	fp,0(sp)
    95e8:	dec00104 	addi	sp,sp,4
    95ec:	f800283a 	ret

000095f0 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    95f0:	defff904 	addi	sp,sp,-28
    95f4:	df000615 	stw	fp,24(sp)
    95f8:	df000604 	addi	fp,sp,24
    95fc:	e13ffc15 	stw	r4,-16(fp)
    9600:	e17ffd15 	stw	r5,-12(fp)
    9604:	e1bffe15 	stw	r6,-8(fp)
    9608:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    960c:	e0bffc17 	ldw	r2,-16(fp)
    9610:	10800017 	ldw	r2,0(r2)
    9614:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    9618:	e0bffe17 	ldw	r2,-8(fp)
    961c:	e0fffd17 	ldw	r3,-12(fp)
    9620:	1885883a 	add	r2,r3,r2
    9624:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    9628:	00000e06 	br	9664 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    962c:	e0bffa17 	ldw	r2,-24(fp)
    9630:	10800104 	addi	r2,r2,4
    9634:	10800037 	ldwio	r2,0(r2)
    9638:	10bfffec 	andhi	r2,r2,65535
    963c:	10000926 	beq	r2,zero,9664 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    9640:	e0fffa17 	ldw	r3,-24(fp)
    9644:	e0bffd17 	ldw	r2,-12(fp)
    9648:	11000044 	addi	r4,r2,1
    964c:	e13ffd15 	stw	r4,-12(fp)
    9650:	10800003 	ldbu	r2,0(r2)
    9654:	10803fcc 	andi	r2,r2,255
    9658:	1080201c 	xori	r2,r2,128
    965c:	10bfe004 	addi	r2,r2,-128
    9660:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    9664:	e0fffd17 	ldw	r3,-12(fp)
    9668:	e0bffb17 	ldw	r2,-20(fp)
    966c:	18bfef36 	bltu	r3,r2,962c <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    9670:	e0bffe17 	ldw	r2,-8(fp)
}
    9674:	e037883a 	mov	sp,fp
    9678:	df000017 	ldw	fp,0(sp)
    967c:	dec00104 	addi	sp,sp,4
    9680:	f800283a 	ret

00009684 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    9684:	defffa04 	addi	sp,sp,-24
    9688:	dfc00515 	stw	ra,20(sp)
    968c:	df000415 	stw	fp,16(sp)
    9690:	df000404 	addi	fp,sp,16
    9694:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    9698:	0007883a 	mov	r3,zero
    969c:	e0bfff17 	ldw	r2,-4(fp)
    96a0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    96a4:	e0bfff17 	ldw	r2,-4(fp)
    96a8:	10800104 	addi	r2,r2,4
    96ac:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    96b0:	0005303a 	rdctl	r2,status
    96b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    96b8:	e0fffd17 	ldw	r3,-12(fp)
    96bc:	00bfff84 	movi	r2,-2
    96c0:	1884703a 	and	r2,r3,r2
    96c4:	1001703a 	wrctl	status,r2
  
  return context;
    96c8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    96cc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    96d0:	000a3100 	call	a310 <alt_tick>
    96d4:	e0bffc17 	ldw	r2,-16(fp)
    96d8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    96dc:	e0bffe17 	ldw	r2,-8(fp)
    96e0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    96e4:	0001883a 	nop
    96e8:	e037883a 	mov	sp,fp
    96ec:	dfc00117 	ldw	ra,4(sp)
    96f0:	df000017 	ldw	fp,0(sp)
    96f4:	dec00204 	addi	sp,sp,8
    96f8:	f800283a 	ret

000096fc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    96fc:	defff804 	addi	sp,sp,-32
    9700:	dfc00715 	stw	ra,28(sp)
    9704:	df000615 	stw	fp,24(sp)
    9708:	df000604 	addi	fp,sp,24
    970c:	e13ffc15 	stw	r4,-16(fp)
    9710:	e17ffd15 	stw	r5,-12(fp)
    9714:	e1bffe15 	stw	r6,-8(fp)
    9718:	e1ffff15 	stw	r7,-4(fp)
    971c:	e0bfff17 	ldw	r2,-4(fp)
    9720:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    9724:	d0a0ca17 	ldw	r2,-31960(gp)
    9728:	1000021e 	bne	r2,zero,9734 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    972c:	e0bffb17 	ldw	r2,-20(fp)
    9730:	d0a0ca15 	stw	r2,-31960(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    9734:	e0bffc17 	ldw	r2,-16(fp)
    9738:	10800104 	addi	r2,r2,4
    973c:	00c001c4 	movi	r3,7
    9740:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    9744:	d8000015 	stw	zero,0(sp)
    9748:	e1fffc17 	ldw	r7,-16(fp)
    974c:	01800074 	movhi	r6,1
    9750:	31a5a104 	addi	r6,r6,-27004
    9754:	e17ffe17 	ldw	r5,-8(fp)
    9758:	e13ffd17 	ldw	r4,-12(fp)
    975c:	0009b6c0 	call	9b6c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    9760:	0001883a 	nop
    9764:	e037883a 	mov	sp,fp
    9768:	dfc00117 	ldw	ra,4(sp)
    976c:	df000017 	ldw	fp,0(sp)
    9770:	dec00204 	addi	sp,sp,8
    9774:	f800283a 	ret

00009778 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    9778:	defffa04 	addi	sp,sp,-24
    977c:	dfc00515 	stw	ra,20(sp)
    9780:	df000415 	stw	fp,16(sp)
    9784:	df000404 	addi	fp,sp,16
    9788:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    978c:	008000c4 	movi	r2,3
    9790:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    9794:	014003f4 	movhi	r5,15
    9798:	29509004 	addi	r5,r5,16960
    979c:	e13ffd17 	ldw	r4,-12(fp)
    97a0:	000909c0 	call	909c <__mulsi3>
    97a4:	100b883a 	mov	r5,r2
    97a8:	0100bef4 	movhi	r4,763
    97ac:	213c2004 	addi	r4,r4,-3968
    97b0:	00087140 	call	8714 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    97b4:	100b883a 	mov	r5,r2
    97b8:	01200034 	movhi	r4,32768
    97bc:	213fffc4 	addi	r4,r4,-1
    97c0:	00087140 	call	8714 <__udivsi3>
    97c4:	100b883a 	mov	r5,r2
    97c8:	e13fff17 	ldw	r4,-4(fp)
    97cc:	00087140 	call	8714 <__udivsi3>
    97d0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    97d4:	e0bffe17 	ldw	r2,-8(fp)
    97d8:	10002a26 	beq	r2,zero,9884 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    97dc:	e03ffc15 	stw	zero,-16(fp)
    97e0:	00001706 	br	9840 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    97e4:	00a00034 	movhi	r2,32768
    97e8:	10bfffc4 	addi	r2,r2,-1
    97ec:	10bfffc4 	addi	r2,r2,-1
    97f0:	103ffe1e 	bne	r2,zero,97ec <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    97f4:	014003f4 	movhi	r5,15
    97f8:	29509004 	addi	r5,r5,16960
    97fc:	e13ffd17 	ldw	r4,-12(fp)
    9800:	000909c0 	call	909c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    9804:	100b883a 	mov	r5,r2
    9808:	0100bef4 	movhi	r4,763
    980c:	213c2004 	addi	r4,r4,-3968
    9810:	00087140 	call	8714 <__udivsi3>
    9814:	100b883a 	mov	r5,r2
    9818:	01200034 	movhi	r4,32768
    981c:	213fffc4 	addi	r4,r4,-1
    9820:	00087140 	call	8714 <__udivsi3>
    9824:	1007883a 	mov	r3,r2
    9828:	e0bfff17 	ldw	r2,-4(fp)
    982c:	10c5c83a 	sub	r2,r2,r3
    9830:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    9834:	e0bffc17 	ldw	r2,-16(fp)
    9838:	10800044 	addi	r2,r2,1
    983c:	e0bffc15 	stw	r2,-16(fp)
    9840:	e0fffc17 	ldw	r3,-16(fp)
    9844:	e0bffe17 	ldw	r2,-8(fp)
    9848:	18bfe616 	blt	r3,r2,97e4 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    984c:	014003f4 	movhi	r5,15
    9850:	29509004 	addi	r5,r5,16960
    9854:	e13ffd17 	ldw	r4,-12(fp)
    9858:	000909c0 	call	909c <__mulsi3>
    985c:	100b883a 	mov	r5,r2
    9860:	0100bef4 	movhi	r4,763
    9864:	213c2004 	addi	r4,r4,-3968
    9868:	00087140 	call	8714 <__udivsi3>
    986c:	e17fff17 	ldw	r5,-4(fp)
    9870:	1009883a 	mov	r4,r2
    9874:	000909c0 	call	909c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    9878:	10bfffc4 	addi	r2,r2,-1
    987c:	103ffe1e 	bne	r2,zero,9878 <alt_busy_sleep+0x100>
    9880:	00000d06 	br	98b8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    9884:	014003f4 	movhi	r5,15
    9888:	29509004 	addi	r5,r5,16960
    988c:	e13ffd17 	ldw	r4,-12(fp)
    9890:	000909c0 	call	909c <__mulsi3>
    9894:	100b883a 	mov	r5,r2
    9898:	0100bef4 	movhi	r4,763
    989c:	213c2004 	addi	r4,r4,-3968
    98a0:	00087140 	call	8714 <__udivsi3>
    98a4:	e17fff17 	ldw	r5,-4(fp)
    98a8:	1009883a 	mov	r4,r2
    98ac:	000909c0 	call	909c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    98b0:	10bfffc4 	addi	r2,r2,-1
    98b4:	00bffe16 	blt	zero,r2,98b0 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    98b8:	0005883a 	mov	r2,zero
}
    98bc:	e037883a 	mov	sp,fp
    98c0:	dfc00117 	ldw	ra,4(sp)
    98c4:	df000017 	ldw	fp,0(sp)
    98c8:	dec00204 	addi	sp,sp,8
    98cc:	f800283a 	ret

000098d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    98d0:	defffe04 	addi	sp,sp,-8
    98d4:	dfc00115 	stw	ra,4(sp)
    98d8:	df000015 	stw	fp,0(sp)
    98dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    98e0:	d0a00717 	ldw	r2,-32740(gp)
    98e4:	10000326 	beq	r2,zero,98f4 <alt_get_errno+0x24>
    98e8:	d0a00717 	ldw	r2,-32740(gp)
    98ec:	103ee83a 	callr	r2
    98f0:	00000106 	br	98f8 <alt_get_errno+0x28>
    98f4:	d0a0c504 	addi	r2,gp,-31980
}
    98f8:	e037883a 	mov	sp,fp
    98fc:	dfc00117 	ldw	ra,4(sp)
    9900:	df000017 	ldw	fp,0(sp)
    9904:	dec00204 	addi	sp,sp,8
    9908:	f800283a 	ret

0000990c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    990c:	defffb04 	addi	sp,sp,-20
    9910:	dfc00415 	stw	ra,16(sp)
    9914:	df000315 	stw	fp,12(sp)
    9918:	df000304 	addi	fp,sp,12
    991c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9920:	e0bfff17 	ldw	r2,-4(fp)
    9924:	10000816 	blt	r2,zero,9948 <close+0x3c>
    9928:	01400304 	movi	r5,12
    992c:	e13fff17 	ldw	r4,-4(fp)
    9930:	000909c0 	call	909c <__mulsi3>
    9934:	1007883a 	mov	r3,r2
    9938:	00800074 	movhi	r2,1
    993c:	10ab0704 	addi	r2,r2,-21476
    9940:	1885883a 	add	r2,r3,r2
    9944:	00000106 	br	994c <close+0x40>
    9948:	0005883a 	mov	r2,zero
    994c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    9950:	e0bffd17 	ldw	r2,-12(fp)
    9954:	10001926 	beq	r2,zero,99bc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9958:	e0bffd17 	ldw	r2,-12(fp)
    995c:	10800017 	ldw	r2,0(r2)
    9960:	10800417 	ldw	r2,16(r2)
    9964:	10000626 	beq	r2,zero,9980 <close+0x74>
    9968:	e0bffd17 	ldw	r2,-12(fp)
    996c:	10800017 	ldw	r2,0(r2)
    9970:	10800417 	ldw	r2,16(r2)
    9974:	e13ffd17 	ldw	r4,-12(fp)
    9978:	103ee83a 	callr	r2
    997c:	00000106 	br	9984 <close+0x78>
    9980:	0005883a 	mov	r2,zero
    9984:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9988:	e13fff17 	ldw	r4,-4(fp)
    998c:	000a1f00 	call	a1f0 <alt_release_fd>
    if (rval < 0)
    9990:	e0bffe17 	ldw	r2,-8(fp)
    9994:	1000070e 	bge	r2,zero,99b4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    9998:	00098d00 	call	98d0 <alt_get_errno>
    999c:	1007883a 	mov	r3,r2
    99a0:	e0bffe17 	ldw	r2,-8(fp)
    99a4:	0085c83a 	sub	r2,zero,r2
    99a8:	18800015 	stw	r2,0(r3)
      return -1;
    99ac:	00bfffc4 	movi	r2,-1
    99b0:	00000706 	br	99d0 <close+0xc4>
    }
    return 0;
    99b4:	0005883a 	mov	r2,zero
    99b8:	00000506 	br	99d0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    99bc:	00098d00 	call	98d0 <alt_get_errno>
    99c0:	1007883a 	mov	r3,r2
    99c4:	00801444 	movi	r2,81
    99c8:	18800015 	stw	r2,0(r3)
    return -1;
    99cc:	00bfffc4 	movi	r2,-1
  }
}
    99d0:	e037883a 	mov	sp,fp
    99d4:	dfc00117 	ldw	ra,4(sp)
    99d8:	df000017 	ldw	fp,0(sp)
    99dc:	dec00204 	addi	sp,sp,8
    99e0:	f800283a 	ret

000099e4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    99e4:	defffe04 	addi	sp,sp,-8
    99e8:	df000115 	stw	fp,4(sp)
    99ec:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    99f0:	e03fff15 	stw	zero,-4(fp)
    99f4:	00000506 	br	9a0c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    99f8:	e0bfff17 	ldw	r2,-4(fp)
    99fc:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    9a00:	e0bfff17 	ldw	r2,-4(fp)
    9a04:	10800804 	addi	r2,r2,32
    9a08:	e0bfff15 	stw	r2,-4(fp)
    9a0c:	e0bfff17 	ldw	r2,-4(fp)
    9a10:	10820030 	cmpltui	r2,r2,2048
    9a14:	103ff81e 	bne	r2,zero,99f8 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9a18:	0001883a 	nop
    9a1c:	e037883a 	mov	sp,fp
    9a20:	df000017 	ldw	fp,0(sp)
    9a24:	dec00104 	addi	sp,sp,4
    9a28:	f800283a 	ret

00009a2c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9a2c:	defffc04 	addi	sp,sp,-16
    9a30:	df000315 	stw	fp,12(sp)
    9a34:	df000304 	addi	fp,sp,12
    9a38:	e13ffd15 	stw	r4,-12(fp)
    9a3c:	e17ffe15 	stw	r5,-8(fp)
    9a40:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9a44:	e0bfff17 	ldw	r2,-4(fp)
}
    9a48:	e037883a 	mov	sp,fp
    9a4c:	df000017 	ldw	fp,0(sp)
    9a50:	dec00104 	addi	sp,sp,4
    9a54:	f800283a 	ret

00009a58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9a58:	defffe04 	addi	sp,sp,-8
    9a5c:	dfc00115 	stw	ra,4(sp)
    9a60:	df000015 	stw	fp,0(sp)
    9a64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9a68:	d0a00717 	ldw	r2,-32740(gp)
    9a6c:	10000326 	beq	r2,zero,9a7c <alt_get_errno+0x24>
    9a70:	d0a00717 	ldw	r2,-32740(gp)
    9a74:	103ee83a 	callr	r2
    9a78:	00000106 	br	9a80 <alt_get_errno+0x28>
    9a7c:	d0a0c504 	addi	r2,gp,-31980
}
    9a80:	e037883a 	mov	sp,fp
    9a84:	dfc00117 	ldw	ra,4(sp)
    9a88:	df000017 	ldw	fp,0(sp)
    9a8c:	dec00204 	addi	sp,sp,8
    9a90:	f800283a 	ret

00009a94 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    9a94:	defffa04 	addi	sp,sp,-24
    9a98:	dfc00515 	stw	ra,20(sp)
    9a9c:	df000415 	stw	fp,16(sp)
    9aa0:	df000404 	addi	fp,sp,16
    9aa4:	e13ffe15 	stw	r4,-8(fp)
    9aa8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    9aac:	e0bffe17 	ldw	r2,-8(fp)
    9ab0:	10000326 	beq	r2,zero,9ac0 <alt_dev_llist_insert+0x2c>
    9ab4:	e0bffe17 	ldw	r2,-8(fp)
    9ab8:	10800217 	ldw	r2,8(r2)
    9abc:	1000061e 	bne	r2,zero,9ad8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    9ac0:	0009a580 	call	9a58 <alt_get_errno>
    9ac4:	1007883a 	mov	r3,r2
    9ac8:	00800584 	movi	r2,22
    9acc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    9ad0:	00bffa84 	movi	r2,-22
    9ad4:	00001306 	br	9b24 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    9ad8:	e0bffe17 	ldw	r2,-8(fp)
    9adc:	e0ffff17 	ldw	r3,-4(fp)
    9ae0:	e0fffc15 	stw	r3,-16(fp)
    9ae4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9ae8:	e0bffd17 	ldw	r2,-12(fp)
    9aec:	e0fffc17 	ldw	r3,-16(fp)
    9af0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    9af4:	e0bffc17 	ldw	r2,-16(fp)
    9af8:	10c00017 	ldw	r3,0(r2)
    9afc:	e0bffd17 	ldw	r2,-12(fp)
    9b00:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    9b04:	e0bffc17 	ldw	r2,-16(fp)
    9b08:	10800017 	ldw	r2,0(r2)
    9b0c:	e0fffd17 	ldw	r3,-12(fp)
    9b10:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    9b14:	e0bffc17 	ldw	r2,-16(fp)
    9b18:	e0fffd17 	ldw	r3,-12(fp)
    9b1c:	10c00015 	stw	r3,0(r2)

  return 0;  
    9b20:	0005883a 	mov	r2,zero
}
    9b24:	e037883a 	mov	sp,fp
    9b28:	dfc00117 	ldw	ra,4(sp)
    9b2c:	df000017 	ldw	fp,0(sp)
    9b30:	dec00204 	addi	sp,sp,8
    9b34:	f800283a 	ret

00009b38 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    9b38:	defffe04 	addi	sp,sp,-8
    9b3c:	dfc00115 	stw	ra,4(sp)
    9b40:	df000015 	stw	fp,0(sp)
    9b44:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    9b48:	01420004 	movi	r5,2048
    9b4c:	0009883a 	mov	r4,zero
    9b50:	000a6980 	call	a698 <alt_icache_flush>
#endif
}
    9b54:	0001883a 	nop
    9b58:	e037883a 	mov	sp,fp
    9b5c:	dfc00117 	ldw	ra,4(sp)
    9b60:	df000017 	ldw	fp,0(sp)
    9b64:	dec00204 	addi	sp,sp,8
    9b68:	f800283a 	ret

00009b6c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9b6c:	defff904 	addi	sp,sp,-28
    9b70:	dfc00615 	stw	ra,24(sp)
    9b74:	df000515 	stw	fp,20(sp)
    9b78:	df000504 	addi	fp,sp,20
    9b7c:	e13ffc15 	stw	r4,-16(fp)
    9b80:	e17ffd15 	stw	r5,-12(fp)
    9b84:	e1bffe15 	stw	r6,-8(fp)
    9b88:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    9b8c:	e0800217 	ldw	r2,8(fp)
    9b90:	d8800015 	stw	r2,0(sp)
    9b94:	e1ffff17 	ldw	r7,-4(fp)
    9b98:	e1bffe17 	ldw	r6,-8(fp)
    9b9c:	e17ffd17 	ldw	r5,-12(fp)
    9ba0:	e13ffc17 	ldw	r4,-16(fp)
    9ba4:	0009d1c0 	call	9d1c <alt_iic_isr_register>
}  
    9ba8:	e037883a 	mov	sp,fp
    9bac:	dfc00117 	ldw	ra,4(sp)
    9bb0:	df000017 	ldw	fp,0(sp)
    9bb4:	dec00204 	addi	sp,sp,8
    9bb8:	f800283a 	ret

00009bbc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    9bbc:	defff904 	addi	sp,sp,-28
    9bc0:	df000615 	stw	fp,24(sp)
    9bc4:	df000604 	addi	fp,sp,24
    9bc8:	e13ffe15 	stw	r4,-8(fp)
    9bcc:	e17fff15 	stw	r5,-4(fp)
    9bd0:	e0bfff17 	ldw	r2,-4(fp)
    9bd4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9bd8:	0005303a 	rdctl	r2,status
    9bdc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9be0:	e0fffb17 	ldw	r3,-20(fp)
    9be4:	00bfff84 	movi	r2,-2
    9be8:	1884703a 	and	r2,r3,r2
    9bec:	1001703a 	wrctl	status,r2
  
  return context;
    9bf0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    9bf4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    9bf8:	00c00044 	movi	r3,1
    9bfc:	e0bffa17 	ldw	r2,-24(fp)
    9c00:	1884983a 	sll	r2,r3,r2
    9c04:	1007883a 	mov	r3,r2
    9c08:	d0a0c917 	ldw	r2,-31964(gp)
    9c0c:	1884b03a 	or	r2,r3,r2
    9c10:	d0a0c915 	stw	r2,-31964(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9c14:	d0a0c917 	ldw	r2,-31964(gp)
    9c18:	100170fa 	wrctl	ienable,r2
    9c1c:	e0bffc17 	ldw	r2,-16(fp)
    9c20:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9c24:	e0bffd17 	ldw	r2,-12(fp)
    9c28:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    9c2c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    9c30:	0001883a 	nop
}
    9c34:	e037883a 	mov	sp,fp
    9c38:	df000017 	ldw	fp,0(sp)
    9c3c:	dec00104 	addi	sp,sp,4
    9c40:	f800283a 	ret

00009c44 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    9c44:	defff904 	addi	sp,sp,-28
    9c48:	df000615 	stw	fp,24(sp)
    9c4c:	df000604 	addi	fp,sp,24
    9c50:	e13ffe15 	stw	r4,-8(fp)
    9c54:	e17fff15 	stw	r5,-4(fp)
    9c58:	e0bfff17 	ldw	r2,-4(fp)
    9c5c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9c60:	0005303a 	rdctl	r2,status
    9c64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9c68:	e0fffb17 	ldw	r3,-20(fp)
    9c6c:	00bfff84 	movi	r2,-2
    9c70:	1884703a 	and	r2,r3,r2
    9c74:	1001703a 	wrctl	status,r2
  
  return context;
    9c78:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    9c7c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    9c80:	00c00044 	movi	r3,1
    9c84:	e0bffa17 	ldw	r2,-24(fp)
    9c88:	1884983a 	sll	r2,r3,r2
    9c8c:	0084303a 	nor	r2,zero,r2
    9c90:	1007883a 	mov	r3,r2
    9c94:	d0a0c917 	ldw	r2,-31964(gp)
    9c98:	1884703a 	and	r2,r3,r2
    9c9c:	d0a0c915 	stw	r2,-31964(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9ca0:	d0a0c917 	ldw	r2,-31964(gp)
    9ca4:	100170fa 	wrctl	ienable,r2
    9ca8:	e0bffc17 	ldw	r2,-16(fp)
    9cac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9cb0:	e0bffd17 	ldw	r2,-12(fp)
    9cb4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    9cb8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    9cbc:	0001883a 	nop
}
    9cc0:	e037883a 	mov	sp,fp
    9cc4:	df000017 	ldw	fp,0(sp)
    9cc8:	dec00104 	addi	sp,sp,4
    9ccc:	f800283a 	ret

00009cd0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    9cd0:	defffc04 	addi	sp,sp,-16
    9cd4:	df000315 	stw	fp,12(sp)
    9cd8:	df000304 	addi	fp,sp,12
    9cdc:	e13ffe15 	stw	r4,-8(fp)
    9ce0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    9ce4:	000530fa 	rdctl	r2,ienable
    9ce8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    9cec:	00c00044 	movi	r3,1
    9cf0:	e0bfff17 	ldw	r2,-4(fp)
    9cf4:	1884983a 	sll	r2,r3,r2
    9cf8:	1007883a 	mov	r3,r2
    9cfc:	e0bffd17 	ldw	r2,-12(fp)
    9d00:	1884703a 	and	r2,r3,r2
    9d04:	1004c03a 	cmpne	r2,r2,zero
    9d08:	10803fcc 	andi	r2,r2,255
}
    9d0c:	e037883a 	mov	sp,fp
    9d10:	df000017 	ldw	fp,0(sp)
    9d14:	dec00104 	addi	sp,sp,4
    9d18:	f800283a 	ret

00009d1c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9d1c:	defff504 	addi	sp,sp,-44
    9d20:	dfc00a15 	stw	ra,40(sp)
    9d24:	df000915 	stw	fp,36(sp)
    9d28:	df000904 	addi	fp,sp,36
    9d2c:	e13ffc15 	stw	r4,-16(fp)
    9d30:	e17ffd15 	stw	r5,-12(fp)
    9d34:	e1bffe15 	stw	r6,-8(fp)
    9d38:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    9d3c:	00bffa84 	movi	r2,-22
    9d40:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    9d44:	e0bffd17 	ldw	r2,-12(fp)
    9d48:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    9d4c:	e0bff817 	ldw	r2,-32(fp)
    9d50:	10800808 	cmpgei	r2,r2,32
    9d54:	1000271e 	bne	r2,zero,9df4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9d58:	0005303a 	rdctl	r2,status
    9d5c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9d60:	e0fffb17 	ldw	r3,-20(fp)
    9d64:	00bfff84 	movi	r2,-2
    9d68:	1884703a 	and	r2,r3,r2
    9d6c:	1001703a 	wrctl	status,r2
  
  return context;
    9d70:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    9d74:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    9d78:	00800074 	movhi	r2,1
    9d7c:	10ac3404 	addi	r2,r2,-20272
    9d80:	e0fff817 	ldw	r3,-32(fp)
    9d84:	180690fa 	slli	r3,r3,3
    9d88:	10c5883a 	add	r2,r2,r3
    9d8c:	e0fffe17 	ldw	r3,-8(fp)
    9d90:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    9d94:	00800074 	movhi	r2,1
    9d98:	10ac3404 	addi	r2,r2,-20272
    9d9c:	e0fff817 	ldw	r3,-32(fp)
    9da0:	180690fa 	slli	r3,r3,3
    9da4:	10c5883a 	add	r2,r2,r3
    9da8:	10800104 	addi	r2,r2,4
    9dac:	e0ffff17 	ldw	r3,-4(fp)
    9db0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    9db4:	e0bffe17 	ldw	r2,-8(fp)
    9db8:	10000526 	beq	r2,zero,9dd0 <alt_iic_isr_register+0xb4>
    9dbc:	e0bff817 	ldw	r2,-32(fp)
    9dc0:	100b883a 	mov	r5,r2
    9dc4:	e13ffc17 	ldw	r4,-16(fp)
    9dc8:	0009bbc0 	call	9bbc <alt_ic_irq_enable>
    9dcc:	00000406 	br	9de0 <alt_iic_isr_register+0xc4>
    9dd0:	e0bff817 	ldw	r2,-32(fp)
    9dd4:	100b883a 	mov	r5,r2
    9dd8:	e13ffc17 	ldw	r4,-16(fp)
    9ddc:	0009c440 	call	9c44 <alt_ic_irq_disable>
    9de0:	e0bff715 	stw	r2,-36(fp)
    9de4:	e0bffa17 	ldw	r2,-24(fp)
    9de8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9dec:	e0bff917 	ldw	r2,-28(fp)
    9df0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    9df4:	e0bff717 	ldw	r2,-36(fp)
}
    9df8:	e037883a 	mov	sp,fp
    9dfc:	dfc00117 	ldw	ra,4(sp)
    9e00:	df000017 	ldw	fp,0(sp)
    9e04:	dec00204 	addi	sp,sp,8
    9e08:	f800283a 	ret

00009e0c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    9e0c:	defff804 	addi	sp,sp,-32
    9e10:	dfc00715 	stw	ra,28(sp)
    9e14:	df000615 	stw	fp,24(sp)
    9e18:	dc000515 	stw	r16,20(sp)
    9e1c:	df000604 	addi	fp,sp,24
    9e20:	e13ffb15 	stw	r4,-20(fp)
    9e24:	e17ffc15 	stw	r5,-16(fp)
    9e28:	e1bffd15 	stw	r6,-12(fp)
    9e2c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    9e30:	e1bffe17 	ldw	r6,-8(fp)
    9e34:	e17ffd17 	ldw	r5,-12(fp)
    9e38:	e13ffc17 	ldw	r4,-16(fp)
    9e3c:	000a0940 	call	a094 <open>
    9e40:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    9e44:	e0bffa17 	ldw	r2,-24(fp)
    9e48:	10002216 	blt	r2,zero,9ed4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    9e4c:	04000074 	movhi	r16,1
    9e50:	842b0704 	addi	r16,r16,-21476
    9e54:	e0bffa17 	ldw	r2,-24(fp)
    9e58:	01400304 	movi	r5,12
    9e5c:	1009883a 	mov	r4,r2
    9e60:	000909c0 	call	909c <__mulsi3>
    9e64:	8085883a 	add	r2,r16,r2
    9e68:	10c00017 	ldw	r3,0(r2)
    9e6c:	e0bffb17 	ldw	r2,-20(fp)
    9e70:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    9e74:	04000074 	movhi	r16,1
    9e78:	842b0704 	addi	r16,r16,-21476
    9e7c:	e0bffa17 	ldw	r2,-24(fp)
    9e80:	01400304 	movi	r5,12
    9e84:	1009883a 	mov	r4,r2
    9e88:	000909c0 	call	909c <__mulsi3>
    9e8c:	8085883a 	add	r2,r16,r2
    9e90:	10800104 	addi	r2,r2,4
    9e94:	10c00017 	ldw	r3,0(r2)
    9e98:	e0bffb17 	ldw	r2,-20(fp)
    9e9c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    9ea0:	04000074 	movhi	r16,1
    9ea4:	842b0704 	addi	r16,r16,-21476
    9ea8:	e0bffa17 	ldw	r2,-24(fp)
    9eac:	01400304 	movi	r5,12
    9eb0:	1009883a 	mov	r4,r2
    9eb4:	000909c0 	call	909c <__mulsi3>
    9eb8:	8085883a 	add	r2,r16,r2
    9ebc:	10800204 	addi	r2,r2,8
    9ec0:	10c00017 	ldw	r3,0(r2)
    9ec4:	e0bffb17 	ldw	r2,-20(fp)
    9ec8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    9ecc:	e13ffa17 	ldw	r4,-24(fp)
    9ed0:	000a1f00 	call	a1f0 <alt_release_fd>
  }
} 
    9ed4:	0001883a 	nop
    9ed8:	e6ffff04 	addi	sp,fp,-4
    9edc:	dfc00217 	ldw	ra,8(sp)
    9ee0:	df000117 	ldw	fp,4(sp)
    9ee4:	dc000017 	ldw	r16,0(sp)
    9ee8:	dec00304 	addi	sp,sp,12
    9eec:	f800283a 	ret

00009ef0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9ef0:	defffb04 	addi	sp,sp,-20
    9ef4:	dfc00415 	stw	ra,16(sp)
    9ef8:	df000315 	stw	fp,12(sp)
    9efc:	df000304 	addi	fp,sp,12
    9f00:	e13ffd15 	stw	r4,-12(fp)
    9f04:	e17ffe15 	stw	r5,-8(fp)
    9f08:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    9f0c:	01c07fc4 	movi	r7,511
    9f10:	01800044 	movi	r6,1
    9f14:	e17ffd17 	ldw	r5,-12(fp)
    9f18:	01000074 	movhi	r4,1
    9f1c:	212b0a04 	addi	r4,r4,-21464
    9f20:	0009e0c0 	call	9e0c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    9f24:	01c07fc4 	movi	r7,511
    9f28:	000d883a 	mov	r6,zero
    9f2c:	e17ffe17 	ldw	r5,-8(fp)
    9f30:	01000074 	movhi	r4,1
    9f34:	212b0704 	addi	r4,r4,-21476
    9f38:	0009e0c0 	call	9e0c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    9f3c:	01c07fc4 	movi	r7,511
    9f40:	01800044 	movi	r6,1
    9f44:	e17fff17 	ldw	r5,-4(fp)
    9f48:	01000074 	movhi	r4,1
    9f4c:	212b0d04 	addi	r4,r4,-21452
    9f50:	0009e0c0 	call	9e0c <alt_open_fd>
}  
    9f54:	0001883a 	nop
    9f58:	e037883a 	mov	sp,fp
    9f5c:	dfc00117 	ldw	ra,4(sp)
    9f60:	df000017 	ldw	fp,0(sp)
    9f64:	dec00204 	addi	sp,sp,8
    9f68:	f800283a 	ret

00009f6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9f6c:	defffe04 	addi	sp,sp,-8
    9f70:	dfc00115 	stw	ra,4(sp)
    9f74:	df000015 	stw	fp,0(sp)
    9f78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9f7c:	d0a00717 	ldw	r2,-32740(gp)
    9f80:	10000326 	beq	r2,zero,9f90 <alt_get_errno+0x24>
    9f84:	d0a00717 	ldw	r2,-32740(gp)
    9f88:	103ee83a 	callr	r2
    9f8c:	00000106 	br	9f94 <alt_get_errno+0x28>
    9f90:	d0a0c504 	addi	r2,gp,-31980
}
    9f94:	e037883a 	mov	sp,fp
    9f98:	dfc00117 	ldw	ra,4(sp)
    9f9c:	df000017 	ldw	fp,0(sp)
    9fa0:	dec00204 	addi	sp,sp,8
    9fa4:	f800283a 	ret

00009fa8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    9fa8:	defffb04 	addi	sp,sp,-20
    9fac:	dfc00415 	stw	ra,16(sp)
    9fb0:	df000315 	stw	fp,12(sp)
    9fb4:	dc000215 	stw	r16,8(sp)
    9fb8:	df000304 	addi	fp,sp,12
    9fbc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    9fc0:	e0bffe17 	ldw	r2,-8(fp)
    9fc4:	10800217 	ldw	r2,8(r2)
    9fc8:	10d00034 	orhi	r3,r2,16384
    9fcc:	e0bffe17 	ldw	r2,-8(fp)
    9fd0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9fd4:	e03ffd15 	stw	zero,-12(fp)
    9fd8:	00002306 	br	a068 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9fdc:	04000074 	movhi	r16,1
    9fe0:	842b0704 	addi	r16,r16,-21476
    9fe4:	e0bffd17 	ldw	r2,-12(fp)
    9fe8:	01400304 	movi	r5,12
    9fec:	1009883a 	mov	r4,r2
    9ff0:	000909c0 	call	909c <__mulsi3>
    9ff4:	8085883a 	add	r2,r16,r2
    9ff8:	10c00017 	ldw	r3,0(r2)
    9ffc:	e0bffe17 	ldw	r2,-8(fp)
    a000:	10800017 	ldw	r2,0(r2)
    a004:	1880151e 	bne	r3,r2,a05c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    a008:	04000074 	movhi	r16,1
    a00c:	842b0704 	addi	r16,r16,-21476
    a010:	e0bffd17 	ldw	r2,-12(fp)
    a014:	01400304 	movi	r5,12
    a018:	1009883a 	mov	r4,r2
    a01c:	000909c0 	call	909c <__mulsi3>
    a020:	8085883a 	add	r2,r16,r2
    a024:	10800204 	addi	r2,r2,8
    a028:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    a02c:	10000b0e 	bge	r2,zero,a05c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    a030:	01400304 	movi	r5,12
    a034:	e13ffd17 	ldw	r4,-12(fp)
    a038:	000909c0 	call	909c <__mulsi3>
    a03c:	1007883a 	mov	r3,r2
    a040:	00800074 	movhi	r2,1
    a044:	10ab0704 	addi	r2,r2,-21476
    a048:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    a04c:	e0bffe17 	ldw	r2,-8(fp)
    a050:	18800226 	beq	r3,r2,a05c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    a054:	00bffcc4 	movi	r2,-13
    a058:	00000806 	br	a07c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    a05c:	e0bffd17 	ldw	r2,-12(fp)
    a060:	10800044 	addi	r2,r2,1
    a064:	e0bffd15 	stw	r2,-12(fp)
    a068:	d0a00617 	ldw	r2,-32744(gp)
    a06c:	1007883a 	mov	r3,r2
    a070:	e0bffd17 	ldw	r2,-12(fp)
    a074:	18bfd92e 	bgeu	r3,r2,9fdc <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    a078:	0005883a 	mov	r2,zero
}
    a07c:	e6ffff04 	addi	sp,fp,-4
    a080:	dfc00217 	ldw	ra,8(sp)
    a084:	df000117 	ldw	fp,4(sp)
    a088:	dc000017 	ldw	r16,0(sp)
    a08c:	dec00304 	addi	sp,sp,12
    a090:	f800283a 	ret

0000a094 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    a094:	defff604 	addi	sp,sp,-40
    a098:	dfc00915 	stw	ra,36(sp)
    a09c:	df000815 	stw	fp,32(sp)
    a0a0:	df000804 	addi	fp,sp,32
    a0a4:	e13ffd15 	stw	r4,-12(fp)
    a0a8:	e17ffe15 	stw	r5,-8(fp)
    a0ac:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    a0b0:	00bfffc4 	movi	r2,-1
    a0b4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    a0b8:	00bffb44 	movi	r2,-19
    a0bc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    a0c0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    a0c4:	d1600404 	addi	r5,gp,-32752
    a0c8:	e13ffd17 	ldw	r4,-12(fp)
    a0cc:	000a43c0 	call	a43c <alt_find_dev>
    a0d0:	e0bff815 	stw	r2,-32(fp)
    a0d4:	e0bff817 	ldw	r2,-32(fp)
    a0d8:	1000051e 	bne	r2,zero,a0f0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    a0dc:	e13ffd17 	ldw	r4,-12(fp)
    a0e0:	000a4cc0 	call	a4cc <alt_find_file>
    a0e4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    a0e8:	00800044 	movi	r2,1
    a0ec:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    a0f0:	e0bff817 	ldw	r2,-32(fp)
    a0f4:	10002b26 	beq	r2,zero,a1a4 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    a0f8:	e13ff817 	ldw	r4,-32(fp)
    a0fc:	000a5d40 	call	a5d4 <alt_get_fd>
    a100:	e0bff915 	stw	r2,-28(fp)
    a104:	e0bff917 	ldw	r2,-28(fp)
    a108:	1000030e 	bge	r2,zero,a118 <open+0x84>
    {
      status = index;
    a10c:	e0bff917 	ldw	r2,-28(fp)
    a110:	e0bffa15 	stw	r2,-24(fp)
    a114:	00002506 	br	a1ac <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    a118:	01400304 	movi	r5,12
    a11c:	e13ff917 	ldw	r4,-28(fp)
    a120:	000909c0 	call	909c <__mulsi3>
    a124:	1007883a 	mov	r3,r2
    a128:	00800074 	movhi	r2,1
    a12c:	10ab0704 	addi	r2,r2,-21476
    a130:	1885883a 	add	r2,r3,r2
    a134:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    a138:	e0fffe17 	ldw	r3,-8(fp)
    a13c:	00900034 	movhi	r2,16384
    a140:	10bfffc4 	addi	r2,r2,-1
    a144:	1886703a 	and	r3,r3,r2
    a148:	e0bffc17 	ldw	r2,-16(fp)
    a14c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    a150:	e0bffb17 	ldw	r2,-20(fp)
    a154:	1000051e 	bne	r2,zero,a16c <open+0xd8>
    a158:	e13ffc17 	ldw	r4,-16(fp)
    a15c:	0009fa80 	call	9fa8 <alt_file_locked>
    a160:	e0bffa15 	stw	r2,-24(fp)
    a164:	e0bffa17 	ldw	r2,-24(fp)
    a168:	10001016 	blt	r2,zero,a1ac <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    a16c:	e0bff817 	ldw	r2,-32(fp)
    a170:	10800317 	ldw	r2,12(r2)
    a174:	10000826 	beq	r2,zero,a198 <open+0x104>
    a178:	e0bff817 	ldw	r2,-32(fp)
    a17c:	10800317 	ldw	r2,12(r2)
    a180:	e1ffff17 	ldw	r7,-4(fp)
    a184:	e1bffe17 	ldw	r6,-8(fp)
    a188:	e17ffd17 	ldw	r5,-12(fp)
    a18c:	e13ffc17 	ldw	r4,-16(fp)
    a190:	103ee83a 	callr	r2
    a194:	00000106 	br	a19c <open+0x108>
    a198:	0005883a 	mov	r2,zero
    a19c:	e0bffa15 	stw	r2,-24(fp)
    a1a0:	00000206 	br	a1ac <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    a1a4:	00bffb44 	movi	r2,-19
    a1a8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    a1ac:	e0bffa17 	ldw	r2,-24(fp)
    a1b0:	1000090e 	bge	r2,zero,a1d8 <open+0x144>
  {
    alt_release_fd (index);  
    a1b4:	e13ff917 	ldw	r4,-28(fp)
    a1b8:	000a1f00 	call	a1f0 <alt_release_fd>
    ALT_ERRNO = -status;
    a1bc:	0009f6c0 	call	9f6c <alt_get_errno>
    a1c0:	1007883a 	mov	r3,r2
    a1c4:	e0bffa17 	ldw	r2,-24(fp)
    a1c8:	0085c83a 	sub	r2,zero,r2
    a1cc:	18800015 	stw	r2,0(r3)
    return -1;
    a1d0:	00bfffc4 	movi	r2,-1
    a1d4:	00000106 	br	a1dc <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    a1d8:	e0bff917 	ldw	r2,-28(fp)
}
    a1dc:	e037883a 	mov	sp,fp
    a1e0:	dfc00117 	ldw	ra,4(sp)
    a1e4:	df000017 	ldw	fp,0(sp)
    a1e8:	dec00204 	addi	sp,sp,8
    a1ec:	f800283a 	ret

0000a1f0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    a1f0:	defffc04 	addi	sp,sp,-16
    a1f4:	dfc00315 	stw	ra,12(sp)
    a1f8:	df000215 	stw	fp,8(sp)
    a1fc:	dc000115 	stw	r16,4(sp)
    a200:	df000204 	addi	fp,sp,8
    a204:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    a208:	e0bffe17 	ldw	r2,-8(fp)
    a20c:	108000d0 	cmplti	r2,r2,3
    a210:	1000111e 	bne	r2,zero,a258 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    a214:	04000074 	movhi	r16,1
    a218:	842b0704 	addi	r16,r16,-21476
    a21c:	e0bffe17 	ldw	r2,-8(fp)
    a220:	01400304 	movi	r5,12
    a224:	1009883a 	mov	r4,r2
    a228:	000909c0 	call	909c <__mulsi3>
    a22c:	8085883a 	add	r2,r16,r2
    a230:	10800204 	addi	r2,r2,8
    a234:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    a238:	04000074 	movhi	r16,1
    a23c:	842b0704 	addi	r16,r16,-21476
    a240:	e0bffe17 	ldw	r2,-8(fp)
    a244:	01400304 	movi	r5,12
    a248:	1009883a 	mov	r4,r2
    a24c:	000909c0 	call	909c <__mulsi3>
    a250:	8085883a 	add	r2,r16,r2
    a254:	10000015 	stw	zero,0(r2)
  }
}
    a258:	0001883a 	nop
    a25c:	e6ffff04 	addi	sp,fp,-4
    a260:	dfc00217 	ldw	ra,8(sp)
    a264:	df000117 	ldw	fp,4(sp)
    a268:	dc000017 	ldw	r16,0(sp)
    a26c:	dec00304 	addi	sp,sp,12
    a270:	f800283a 	ret

0000a274 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    a274:	defffa04 	addi	sp,sp,-24
    a278:	df000515 	stw	fp,20(sp)
    a27c:	df000504 	addi	fp,sp,20
    a280:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a284:	0005303a 	rdctl	r2,status
    a288:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a28c:	e0fffc17 	ldw	r3,-16(fp)
    a290:	00bfff84 	movi	r2,-2
    a294:	1884703a 	and	r2,r3,r2
    a298:	1001703a 	wrctl	status,r2
  
  return context;
    a29c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    a2a0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    a2a4:	e0bfff17 	ldw	r2,-4(fp)
    a2a8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    a2ac:	e0bffd17 	ldw	r2,-12(fp)
    a2b0:	10800017 	ldw	r2,0(r2)
    a2b4:	e0fffd17 	ldw	r3,-12(fp)
    a2b8:	18c00117 	ldw	r3,4(r3)
    a2bc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    a2c0:	e0bffd17 	ldw	r2,-12(fp)
    a2c4:	10800117 	ldw	r2,4(r2)
    a2c8:	e0fffd17 	ldw	r3,-12(fp)
    a2cc:	18c00017 	ldw	r3,0(r3)
    a2d0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    a2d4:	e0bffd17 	ldw	r2,-12(fp)
    a2d8:	e0fffd17 	ldw	r3,-12(fp)
    a2dc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    a2e0:	e0bffd17 	ldw	r2,-12(fp)
    a2e4:	e0fffd17 	ldw	r3,-12(fp)
    a2e8:	10c00015 	stw	r3,0(r2)
    a2ec:	e0bffb17 	ldw	r2,-20(fp)
    a2f0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a2f4:	e0bffe17 	ldw	r2,-8(fp)
    a2f8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    a2fc:	0001883a 	nop
    a300:	e037883a 	mov	sp,fp
    a304:	df000017 	ldw	fp,0(sp)
    a308:	dec00104 	addi	sp,sp,4
    a30c:	f800283a 	ret

0000a310 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    a310:	defffb04 	addi	sp,sp,-20
    a314:	dfc00415 	stw	ra,16(sp)
    a318:	df000315 	stw	fp,12(sp)
    a31c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    a320:	d0a00917 	ldw	r2,-32732(gp)
    a324:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    a328:	d0a0cb17 	ldw	r2,-31956(gp)
    a32c:	10800044 	addi	r2,r2,1
    a330:	d0a0cb15 	stw	r2,-31956(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a334:	00002e06 	br	a3f0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    a338:	e0bffd17 	ldw	r2,-12(fp)
    a33c:	10800017 	ldw	r2,0(r2)
    a340:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    a344:	e0bffd17 	ldw	r2,-12(fp)
    a348:	10800403 	ldbu	r2,16(r2)
    a34c:	10803fcc 	andi	r2,r2,255
    a350:	10000426 	beq	r2,zero,a364 <alt_tick+0x54>
    a354:	d0a0cb17 	ldw	r2,-31956(gp)
    a358:	1000021e 	bne	r2,zero,a364 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    a35c:	e0bffd17 	ldw	r2,-12(fp)
    a360:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    a364:	e0bffd17 	ldw	r2,-12(fp)
    a368:	10800217 	ldw	r2,8(r2)
    a36c:	d0e0cb17 	ldw	r3,-31956(gp)
    a370:	18801d36 	bltu	r3,r2,a3e8 <alt_tick+0xd8>
    a374:	e0bffd17 	ldw	r2,-12(fp)
    a378:	10800403 	ldbu	r2,16(r2)
    a37c:	10803fcc 	andi	r2,r2,255
    a380:	1000191e 	bne	r2,zero,a3e8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    a384:	e0bffd17 	ldw	r2,-12(fp)
    a388:	10800317 	ldw	r2,12(r2)
    a38c:	e0fffd17 	ldw	r3,-12(fp)
    a390:	18c00517 	ldw	r3,20(r3)
    a394:	1809883a 	mov	r4,r3
    a398:	103ee83a 	callr	r2
    a39c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    a3a0:	e0bfff17 	ldw	r2,-4(fp)
    a3a4:	1000031e 	bne	r2,zero,a3b4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    a3a8:	e13ffd17 	ldw	r4,-12(fp)
    a3ac:	000a2740 	call	a274 <alt_alarm_stop>
    a3b0:	00000d06 	br	a3e8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    a3b4:	e0bffd17 	ldw	r2,-12(fp)
    a3b8:	10c00217 	ldw	r3,8(r2)
    a3bc:	e0bfff17 	ldw	r2,-4(fp)
    a3c0:	1887883a 	add	r3,r3,r2
    a3c4:	e0bffd17 	ldw	r2,-12(fp)
    a3c8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    a3cc:	e0bffd17 	ldw	r2,-12(fp)
    a3d0:	10c00217 	ldw	r3,8(r2)
    a3d4:	d0a0cb17 	ldw	r2,-31956(gp)
    a3d8:	1880032e 	bgeu	r3,r2,a3e8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    a3dc:	e0bffd17 	ldw	r2,-12(fp)
    a3e0:	00c00044 	movi	r3,1
    a3e4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    a3e8:	e0bffe17 	ldw	r2,-8(fp)
    a3ec:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a3f0:	e0fffd17 	ldw	r3,-12(fp)
    a3f4:	d0a00904 	addi	r2,gp,-32732
    a3f8:	18bfcf1e 	bne	r3,r2,a338 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    a3fc:	0001883a 	nop
}
    a400:	0001883a 	nop
    a404:	e037883a 	mov	sp,fp
    a408:	dfc00117 	ldw	ra,4(sp)
    a40c:	df000017 	ldw	fp,0(sp)
    a410:	dec00204 	addi	sp,sp,8
    a414:	f800283a 	ret

0000a418 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    a418:	deffff04 	addi	sp,sp,-4
    a41c:	df000015 	stw	fp,0(sp)
    a420:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    a424:	000170fa 	wrctl	ienable,zero
}
    a428:	0001883a 	nop
    a42c:	e037883a 	mov	sp,fp
    a430:	df000017 	ldw	fp,0(sp)
    a434:	dec00104 	addi	sp,sp,4
    a438:	f800283a 	ret

0000a43c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    a43c:	defffa04 	addi	sp,sp,-24
    a440:	dfc00515 	stw	ra,20(sp)
    a444:	df000415 	stw	fp,16(sp)
    a448:	df000404 	addi	fp,sp,16
    a44c:	e13ffe15 	stw	r4,-8(fp)
    a450:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    a454:	e0bfff17 	ldw	r2,-4(fp)
    a458:	10800017 	ldw	r2,0(r2)
    a45c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    a460:	e13ffe17 	ldw	r4,-8(fp)
    a464:	00089100 	call	8910 <strlen>
    a468:	10800044 	addi	r2,r2,1
    a46c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a470:	00000d06 	br	a4a8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    a474:	e0bffc17 	ldw	r2,-16(fp)
    a478:	10800217 	ldw	r2,8(r2)
    a47c:	e0fffd17 	ldw	r3,-12(fp)
    a480:	180d883a 	mov	r6,r3
    a484:	e17ffe17 	ldw	r5,-8(fp)
    a488:	1009883a 	mov	r4,r2
    a48c:	000a7e40 	call	a7e4 <memcmp>
    a490:	1000021e 	bne	r2,zero,a49c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    a494:	e0bffc17 	ldw	r2,-16(fp)
    a498:	00000706 	br	a4b8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    a49c:	e0bffc17 	ldw	r2,-16(fp)
    a4a0:	10800017 	ldw	r2,0(r2)
    a4a4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a4a8:	e0fffc17 	ldw	r3,-16(fp)
    a4ac:	e0bfff17 	ldw	r2,-4(fp)
    a4b0:	18bff01e 	bne	r3,r2,a474 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    a4b4:	0005883a 	mov	r2,zero
}
    a4b8:	e037883a 	mov	sp,fp
    a4bc:	dfc00117 	ldw	ra,4(sp)
    a4c0:	df000017 	ldw	fp,0(sp)
    a4c4:	dec00204 	addi	sp,sp,8
    a4c8:	f800283a 	ret

0000a4cc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    a4cc:	defffb04 	addi	sp,sp,-20
    a4d0:	dfc00415 	stw	ra,16(sp)
    a4d4:	df000315 	stw	fp,12(sp)
    a4d8:	df000304 	addi	fp,sp,12
    a4dc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    a4e0:	d0a00217 	ldw	r2,-32760(gp)
    a4e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a4e8:	00003106 	br	a5b0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    a4ec:	e0bffd17 	ldw	r2,-12(fp)
    a4f0:	10800217 	ldw	r2,8(r2)
    a4f4:	1009883a 	mov	r4,r2
    a4f8:	00089100 	call	8910 <strlen>
    a4fc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    a500:	e0bffd17 	ldw	r2,-12(fp)
    a504:	10c00217 	ldw	r3,8(r2)
    a508:	e0bffe17 	ldw	r2,-8(fp)
    a50c:	10bfffc4 	addi	r2,r2,-1
    a510:	1885883a 	add	r2,r3,r2
    a514:	10800003 	ldbu	r2,0(r2)
    a518:	10803fcc 	andi	r2,r2,255
    a51c:	1080201c 	xori	r2,r2,128
    a520:	10bfe004 	addi	r2,r2,-128
    a524:	10800bd8 	cmpnei	r2,r2,47
    a528:	1000031e 	bne	r2,zero,a538 <alt_find_file+0x6c>
    {
      len -= 1;
    a52c:	e0bffe17 	ldw	r2,-8(fp)
    a530:	10bfffc4 	addi	r2,r2,-1
    a534:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a538:	e0bffe17 	ldw	r2,-8(fp)
    a53c:	e0ffff17 	ldw	r3,-4(fp)
    a540:	1885883a 	add	r2,r3,r2
    a544:	10800003 	ldbu	r2,0(r2)
    a548:	10803fcc 	andi	r2,r2,255
    a54c:	1080201c 	xori	r2,r2,128
    a550:	10bfe004 	addi	r2,r2,-128
    a554:	10800be0 	cmpeqi	r2,r2,47
    a558:	1000081e 	bne	r2,zero,a57c <alt_find_file+0xb0>
    a55c:	e0bffe17 	ldw	r2,-8(fp)
    a560:	e0ffff17 	ldw	r3,-4(fp)
    a564:	1885883a 	add	r2,r3,r2
    a568:	10800003 	ldbu	r2,0(r2)
    a56c:	10803fcc 	andi	r2,r2,255
    a570:	1080201c 	xori	r2,r2,128
    a574:	10bfe004 	addi	r2,r2,-128
    a578:	10000a1e 	bne	r2,zero,a5a4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    a57c:	e0bffd17 	ldw	r2,-12(fp)
    a580:	10800217 	ldw	r2,8(r2)
    a584:	e0fffe17 	ldw	r3,-8(fp)
    a588:	180d883a 	mov	r6,r3
    a58c:	e17fff17 	ldw	r5,-4(fp)
    a590:	1009883a 	mov	r4,r2
    a594:	000a7e40 	call	a7e4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a598:	1000021e 	bne	r2,zero,a5a4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    a59c:	e0bffd17 	ldw	r2,-12(fp)
    a5a0:	00000706 	br	a5c0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    a5a4:	e0bffd17 	ldw	r2,-12(fp)
    a5a8:	10800017 	ldw	r2,0(r2)
    a5ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a5b0:	e0fffd17 	ldw	r3,-12(fp)
    a5b4:	d0a00204 	addi	r2,gp,-32760
    a5b8:	18bfcc1e 	bne	r3,r2,a4ec <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    a5bc:	0005883a 	mov	r2,zero
}
    a5c0:	e037883a 	mov	sp,fp
    a5c4:	dfc00117 	ldw	ra,4(sp)
    a5c8:	df000017 	ldw	fp,0(sp)
    a5cc:	dec00204 	addi	sp,sp,8
    a5d0:	f800283a 	ret

0000a5d4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    a5d4:	defffa04 	addi	sp,sp,-24
    a5d8:	dfc00515 	stw	ra,20(sp)
    a5dc:	df000415 	stw	fp,16(sp)
    a5e0:	dc000315 	stw	r16,12(sp)
    a5e4:	df000404 	addi	fp,sp,16
    a5e8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    a5ec:	00bffa04 	movi	r2,-24
    a5f0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a5f4:	e03ffc15 	stw	zero,-16(fp)
    a5f8:	00001d06 	br	a670 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    a5fc:	04000074 	movhi	r16,1
    a600:	842b0704 	addi	r16,r16,-21476
    a604:	e0bffc17 	ldw	r2,-16(fp)
    a608:	01400304 	movi	r5,12
    a60c:	1009883a 	mov	r4,r2
    a610:	000909c0 	call	909c <__mulsi3>
    a614:	8085883a 	add	r2,r16,r2
    a618:	10800017 	ldw	r2,0(r2)
    a61c:	1000111e 	bne	r2,zero,a664 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    a620:	04000074 	movhi	r16,1
    a624:	842b0704 	addi	r16,r16,-21476
    a628:	e0bffc17 	ldw	r2,-16(fp)
    a62c:	01400304 	movi	r5,12
    a630:	1009883a 	mov	r4,r2
    a634:	000909c0 	call	909c <__mulsi3>
    a638:	8085883a 	add	r2,r16,r2
    a63c:	e0fffe17 	ldw	r3,-8(fp)
    a640:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    a644:	d0e00617 	ldw	r3,-32744(gp)
    a648:	e0bffc17 	ldw	r2,-16(fp)
    a64c:	1880020e 	bge	r3,r2,a658 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    a650:	e0bffc17 	ldw	r2,-16(fp)
    a654:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
    a658:	e0bffc17 	ldw	r2,-16(fp)
    a65c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    a660:	00000606 	br	a67c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a664:	e0bffc17 	ldw	r2,-16(fp)
    a668:	10800044 	addi	r2,r2,1
    a66c:	e0bffc15 	stw	r2,-16(fp)
    a670:	e0bffc17 	ldw	r2,-16(fp)
    a674:	10800810 	cmplti	r2,r2,32
    a678:	103fe01e 	bne	r2,zero,a5fc <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    a67c:	e0bffd17 	ldw	r2,-12(fp)
}
    a680:	e6ffff04 	addi	sp,fp,-4
    a684:	dfc00217 	ldw	ra,8(sp)
    a688:	df000117 	ldw	fp,4(sp)
    a68c:	dc000017 	ldw	r16,0(sp)
    a690:	dec00304 	addi	sp,sp,12
    a694:	f800283a 	ret

0000a698 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    a698:	defffb04 	addi	sp,sp,-20
    a69c:	df000415 	stw	fp,16(sp)
    a6a0:	df000404 	addi	fp,sp,16
    a6a4:	e13ffe15 	stw	r4,-8(fp)
    a6a8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    a6ac:	e0bfff17 	ldw	r2,-4(fp)
    a6b0:	10820070 	cmpltui	r2,r2,2049
    a6b4:	1000021e 	bne	r2,zero,a6c0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    a6b8:	00820004 	movi	r2,2048
    a6bc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    a6c0:	e0fffe17 	ldw	r3,-8(fp)
    a6c4:	e0bfff17 	ldw	r2,-4(fp)
    a6c8:	1885883a 	add	r2,r3,r2
    a6cc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    a6d0:	e0bffe17 	ldw	r2,-8(fp)
    a6d4:	e0bffc15 	stw	r2,-16(fp)
    a6d8:	00000506 	br	a6f0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    a6dc:	e0bffc17 	ldw	r2,-16(fp)
    a6e0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    a6e4:	e0bffc17 	ldw	r2,-16(fp)
    a6e8:	10800804 	addi	r2,r2,32
    a6ec:	e0bffc15 	stw	r2,-16(fp)
    a6f0:	e0fffc17 	ldw	r3,-16(fp)
    a6f4:	e0bffd17 	ldw	r2,-12(fp)
    a6f8:	18bff836 	bltu	r3,r2,a6dc <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    a6fc:	e0bffe17 	ldw	r2,-8(fp)
    a700:	108007cc 	andi	r2,r2,31
    a704:	10000226 	beq	r2,zero,a710 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    a708:	e0bffc17 	ldw	r2,-16(fp)
    a70c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    a710:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    a714:	0001883a 	nop
    a718:	e037883a 	mov	sp,fp
    a71c:	df000017 	ldw	fp,0(sp)
    a720:	dec00104 	addi	sp,sp,4
    a724:	f800283a 	ret

0000a728 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    a728:	defffe04 	addi	sp,sp,-8
    a72c:	df000115 	stw	fp,4(sp)
    a730:	df000104 	addi	fp,sp,4
    a734:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    a738:	e0bfff17 	ldw	r2,-4(fp)
    a73c:	10bffe84 	addi	r2,r2,-6
    a740:	10c00428 	cmpgeui	r3,r2,16
    a744:	18001a1e 	bne	r3,zero,a7b0 <alt_exception_cause_generated_bad_addr+0x88>
    a748:	100690ba 	slli	r3,r2,2
    a74c:	00800074 	movhi	r2,1
    a750:	10a9d804 	addi	r2,r2,-22688
    a754:	1885883a 	add	r2,r3,r2
    a758:	10800017 	ldw	r2,0(r2)
    a75c:	1000683a 	jmp	r2
    a760:	0000a7a0 	cmpeqi	zero,zero,670
    a764:	0000a7a0 	cmpeqi	zero,zero,670
    a768:	0000a7b0 	cmpltui	zero,zero,670
    a76c:	0000a7b0 	cmpltui	zero,zero,670
    a770:	0000a7b0 	cmpltui	zero,zero,670
    a774:	0000a7a0 	cmpeqi	zero,zero,670
    a778:	0000a7a8 	cmpgeui	zero,zero,670
    a77c:	0000a7b0 	cmpltui	zero,zero,670
    a780:	0000a7a0 	cmpeqi	zero,zero,670
    a784:	0000a7a0 	cmpeqi	zero,zero,670
    a788:	0000a7b0 	cmpltui	zero,zero,670
    a78c:	0000a7a0 	cmpeqi	zero,zero,670
    a790:	0000a7a8 	cmpgeui	zero,zero,670
    a794:	0000a7b0 	cmpltui	zero,zero,670
    a798:	0000a7b0 	cmpltui	zero,zero,670
    a79c:	0000a7a0 	cmpeqi	zero,zero,670
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    a7a0:	00800044 	movi	r2,1
    a7a4:	00000306 	br	a7b4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    a7a8:	0005883a 	mov	r2,zero
    a7ac:	00000106 	br	a7b4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    a7b0:	0005883a 	mov	r2,zero
  }
}
    a7b4:	e037883a 	mov	sp,fp
    a7b8:	df000017 	ldw	fp,0(sp)
    a7bc:	dec00104 	addi	sp,sp,4
    a7c0:	f800283a 	ret

0000a7c4 <exit>:
    a7c4:	defffe04 	addi	sp,sp,-8
    a7c8:	000b883a 	mov	r5,zero
    a7cc:	dc000015 	stw	r16,0(sp)
    a7d0:	dfc00115 	stw	ra,4(sp)
    a7d4:	2021883a 	mov	r16,r4
    a7d8:	000a8140 	call	a814 <__call_exitprocs>
    a7dc:	8009883a 	mov	r4,r16
    a7e0:	000a9a40 	call	a9a4 <_exit>

0000a7e4 <memcmp>:
    a7e4:	218d883a 	add	r6,r4,r6
    a7e8:	21800826 	beq	r4,r6,a80c <memcmp+0x28>
    a7ec:	20800003 	ldbu	r2,0(r4)
    a7f0:	28c00003 	ldbu	r3,0(r5)
    a7f4:	10c00226 	beq	r2,r3,a800 <memcmp+0x1c>
    a7f8:	10c5c83a 	sub	r2,r2,r3
    a7fc:	f800283a 	ret
    a800:	21000044 	addi	r4,r4,1
    a804:	29400044 	addi	r5,r5,1
    a808:	003ff706 	br	a7e8 <memcmp+0x4>
    a80c:	0005883a 	mov	r2,zero
    a810:	f800283a 	ret

0000a814 <__call_exitprocs>:
    a814:	defff504 	addi	sp,sp,-44
    a818:	dd000515 	stw	r20,20(sp)
    a81c:	05000074 	movhi	r20,1
    a820:	dc800315 	stw	r18,12(sp)
    a824:	dfc00a15 	stw	ra,40(sp)
    a828:	df000915 	stw	fp,36(sp)
    a82c:	ddc00815 	stw	r23,32(sp)
    a830:	dd800715 	stw	r22,28(sp)
    a834:	dd400615 	stw	r21,24(sp)
    a838:	dcc00415 	stw	r19,16(sp)
    a83c:	dc400215 	stw	r17,8(sp)
    a840:	dc000115 	stw	r16,4(sp)
    a844:	d9000015 	stw	r4,0(sp)
    a848:	2825883a 	mov	r18,r5
    a84c:	a52b6704 	addi	r20,r20,-21092
    a850:	a4400017 	ldw	r17,0(r20)
    a854:	8cc00c17 	ldw	r19,48(r17)
    a858:	8c400c04 	addi	r17,r17,48
    a85c:	98004526 	beq	r19,zero,a974 <__call_exitprocs+0x160>
    a860:	9c000117 	ldw	r16,4(r19)
    a864:	00900034 	movhi	r2,16384
    a868:	10bfffc4 	addi	r2,r2,-1
    a86c:	9d402217 	ldw	r21,136(r19)
    a870:	85bfffc4 	addi	r22,r16,-1
    a874:	80a1883a 	add	r16,r16,r2
    a878:	8421883a 	add	r16,r16,r16
    a87c:	8421883a 	add	r16,r16,r16
    a880:	ac2f883a 	add	r23,r21,r16
    a884:	84000204 	addi	r16,r16,8
    a888:	9c21883a 	add	r16,r19,r16
    a88c:	b0002716 	blt	r22,zero,a92c <__call_exitprocs+0x118>
    a890:	90000726 	beq	r18,zero,a8b0 <__call_exitprocs+0x9c>
    a894:	a800041e 	bne	r21,zero,a8a8 <__call_exitprocs+0x94>
    a898:	b5bfffc4 	addi	r22,r22,-1
    a89c:	bdffff04 	addi	r23,r23,-4
    a8a0:	843fff04 	addi	r16,r16,-4
    a8a4:	003ff906 	br	a88c <__call_exitprocs+0x78>
    a8a8:	b9002017 	ldw	r4,128(r23)
    a8ac:	913ffa1e 	bne	r18,r4,a898 <__call_exitprocs+0x84>
    a8b0:	99000117 	ldw	r4,4(r19)
    a8b4:	82000017 	ldw	r8,0(r16)
    a8b8:	213fffc4 	addi	r4,r4,-1
    a8bc:	b100021e 	bne	r22,r4,a8c8 <__call_exitprocs+0xb4>
    a8c0:	9d800115 	stw	r22,4(r19)
    a8c4:	00000106 	br	a8cc <__call_exitprocs+0xb8>
    a8c8:	80000015 	stw	zero,0(r16)
    a8cc:	403ff226 	beq	r8,zero,a898 <__call_exitprocs+0x84>
    a8d0:	9f000117 	ldw	fp,4(r19)
    a8d4:	a8000526 	beq	r21,zero,a8ec <__call_exitprocs+0xd8>
    a8d8:	00800044 	movi	r2,1
    a8dc:	1592983a 	sll	r9,r2,r22
    a8e0:	a9404017 	ldw	r5,256(r21)
    a8e4:	494a703a 	and	r5,r9,r5
    a8e8:	2800021e 	bne	r5,zero,a8f4 <__call_exitprocs+0xe0>
    a8ec:	403ee83a 	callr	r8
    a8f0:	00000906 	br	a918 <__call_exitprocs+0x104>
    a8f4:	a9004117 	ldw	r4,260(r21)
    a8f8:	4908703a 	and	r4,r9,r4
    a8fc:	2000041e 	bne	r4,zero,a910 <__call_exitprocs+0xfc>
    a900:	b9400017 	ldw	r5,0(r23)
    a904:	d9000017 	ldw	r4,0(sp)
    a908:	403ee83a 	callr	r8
    a90c:	00000206 	br	a918 <__call_exitprocs+0x104>
    a910:	b9000017 	ldw	r4,0(r23)
    a914:	403ee83a 	callr	r8
    a918:	99000117 	ldw	r4,4(r19)
    a91c:	e13fcc1e 	bne	fp,r4,a850 <__call_exitprocs+0x3c>
    a920:	89000017 	ldw	r4,0(r17)
    a924:	993fdc26 	beq	r19,r4,a898 <__call_exitprocs+0x84>
    a928:	003fc906 	br	a850 <__call_exitprocs+0x3c>
    a92c:	00800034 	movhi	r2,0
    a930:	10800004 	addi	r2,r2,0
    a934:	10000f26 	beq	r2,zero,a974 <__call_exitprocs+0x160>
    a938:	99400117 	ldw	r5,4(r19)
    a93c:	99000017 	ldw	r4,0(r19)
    a940:	2800091e 	bne	r5,zero,a968 <__call_exitprocs+0x154>
    a944:	20000826 	beq	r4,zero,a968 <__call_exitprocs+0x154>
    a948:	89000015 	stw	r4,0(r17)
    a94c:	a8000226 	beq	r21,zero,a958 <__call_exitprocs+0x144>
    a950:	a809883a 	mov	r4,r21
    a954:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>
    a958:	9809883a 	mov	r4,r19
    a95c:	00000000 	call	0 <__alt_mem_onchip_mem-0x8000>
    a960:	8cc00017 	ldw	r19,0(r17)
    a964:	003fbd06 	br	a85c <__call_exitprocs+0x48>
    a968:	9823883a 	mov	r17,r19
    a96c:	2027883a 	mov	r19,r4
    a970:	003fba06 	br	a85c <__call_exitprocs+0x48>
    a974:	dfc00a17 	ldw	ra,40(sp)
    a978:	df000917 	ldw	fp,36(sp)
    a97c:	ddc00817 	ldw	r23,32(sp)
    a980:	dd800717 	ldw	r22,28(sp)
    a984:	dd400617 	ldw	r21,24(sp)
    a988:	dd000517 	ldw	r20,20(sp)
    a98c:	dcc00417 	ldw	r19,16(sp)
    a990:	dc800317 	ldw	r18,12(sp)
    a994:	dc400217 	ldw	r17,8(sp)
    a998:	dc000117 	ldw	r16,4(sp)
    a99c:	dec00b04 	addi	sp,sp,44
    a9a0:	f800283a 	ret

0000a9a4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    a9a4:	defffd04 	addi	sp,sp,-12
    a9a8:	df000215 	stw	fp,8(sp)
    a9ac:	df000204 	addi	fp,sp,8
    a9b0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    a9b4:	0001883a 	nop
    a9b8:	e0bfff17 	ldw	r2,-4(fp)
    a9bc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    a9c0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    a9c4:	10000226 	beq	r2,zero,a9d0 <_exit+0x2c>
    ALT_SIM_FAIL();
    a9c8:	002af070 	cmpltui	zero,zero,43969
    a9cc:	00000106 	br	a9d4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    a9d0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    a9d4:	003fff06 	br	a9d4 <_exit+0x30>
