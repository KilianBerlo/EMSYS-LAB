
quadrature_nios_pwm.elf:     file format elf32-littlenios2
quadrature_nios_pwm.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008224

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00002438 memsz 0x00002438 flags r-x
    LOAD off    0x00003458 vaddr 0x0000a458 paddr 0x0000a73c align 2**12
         filesz 0x000002e4 memsz 0x000002e4 flags rw-
    LOAD off    0x00003a20 vaddr 0x0000aa20 paddr 0x0000aa20 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000021dc  00008224  00008224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000058  0000a400  0000a400  00003400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e4  0000a458  0000a73c  00003458  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  0000aa20  0000aa20  00003a20  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  0000ab40  0000ab40  0000373c  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  0000373c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000618  00000000  00000000  00003770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   000082aa  00000000  00000000  00003d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002df7  00000000  00000000  0000c032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00003bd4  00000000  00000000  0000ee29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00000b30  00000000  00000000  00012a00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00001e7e  00000000  00000000  00013530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000017da  00000000  00000000  000153ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000040  00000000  00000000  00016b88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000002c8  00000000  00000000  00016bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  000188bb  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000188be  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000188c1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000188c2  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000188c3  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000188c7  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000188cb  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000188cf  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000188d8  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000188e1  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000013  00000000  00000000  000188ea  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002a  00000000  00000000  000188fd  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008224 l    d  .text	00000000 .text
0000a400 l    d  .rodata	00000000 .rodata
0000a458 l    d  .rwdata	00000000 .rwdata
0000aa20 l    d  .bss	00000000 .bss
0000ab40 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/Users/gteho/Repositories/EMSYS-LAB/nios/software/quadrature_nios_pwm_bsp//obj/HAL/src/crt0.o
0000825c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000083d8 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000a458 l     O .rwdata	000000e4 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00008c3c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00008dc4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00008f04 l     F .text	00000034 alt_dev_reg
0000a53c l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00009204 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
0000945c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009594 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000095c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000995c l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00009aac l     F .text	0000003c alt_get_errno
00009ae8 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000aa3c g     O .bss	00000004 alt_instruction_exception_handler
00008d28 g     F .text	0000006c alt_main
0000832c g     F .text	00000080 _puts_r
0000aa40 g     O .bss	00000100 alt_irq
0000a73c g       *ABS*	00000000 __flash_rwdata_start
000082e4 g     F .text	00000048 printf
00009f40 g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000aa20 g     O .bss	00000004 errno
0000aa28 g     O .bss	00000004 alt_argv
00012710 g       *ABS*	00000000 _gp
00008d94 g     F .text	00000030 usleep
0000a590 g     O .rwdata	00000180 alt_fd_list
00009f64 g     F .text	00000090 alt_find_dev
00009a30 g     F .text	0000007c alt_io_redirect
000083ac g     F .text	00000010 puts
0000a1b4 g     F .text	00000098 alt_exception_cause_generated_bad_addr
00009084 g     F .text	000000ec altera_avalon_jtag_uart_read
000082a8 g     F .text	0000003c _printf_r
00008b54 g     F .text	00000064 .hidden __udivsi3
0000a728 g     O .rwdata	00000004 alt_max_fd
0000a710 g     O .rwdata	00000004 _global_impure_ptr
0000ab40 g       *ABS*	00000000 __bss_end
00009874 g     F .text	000000e8 alt_iic_isr_register
00009e38 g     F .text	00000108 alt_tick
00009828 g     F .text	0000004c alt_ic_irq_enabled
00009d94 g     F .text	000000a4 alt_alarm_stop
0000aa30 g     O .bss	00000004 alt_irq_active
00008000 g       *ABS*	00000000 __alt_mem_onchip_mem
000080fc g     F .exceptions	000000c8 alt_irq_handler
0000a568 g     O .rwdata	00000028 alt_dev_null
00009574 g     F .text	00000020 alt_dcache_flush_all
0000a73c g       *ABS*	00000000 __ram_rwdata_end
0000a720 g     O .rwdata	00000008 alt_dev_list
00008e00 g     F .text	00000104 write
0000a458 g       *ABS*	00000000 __ram_rodata_end
00008bb8 g     F .text	0000005c .hidden __umodsi3
0000ab40 g       *ABS*	00000000 end
000081c4 g     F .exceptions	00000060 alt_instruction_exception_entry
0000d000 g       *ABS*	00000000 __alt_stack_pointer
00009280 g     F .text	00000084 alt_avalon_timer_sc_init
00009170 g     F .text	00000094 altera_avalon_jtag_uart_write
00008444 g     F .text	0000050c ___vfprintf_internal_r
0000a29c g     F .text	0000012c __call_exitprocs
00008224 g     F .text	0000003c _start
0000aa34 g     O .bss	00000004 _alt_tick_rate
0000aa38 g     O .bss	00000004 _alt_nticks
00008f74 g     F .text	00000050 alt_sys_init
00008c14 g     F .text	00000028 .hidden __mulsi3
0000a458 g       *ABS*	00000000 __ram_rwdata_start
0000a400 g       *ABS*	00000000 __ram_rodata_start
00008fc4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000a0fc g     F .text	000000b8 alt_get_fd
00009304 g     F .text	00000158 alt_busy_sleep
0000a26c g     F .text	00000030 memcmp
0000ab40 g       *ABS*	00000000 __alt_stack_base
00009ff4 g     F .text	00000108 alt_find_file
000095fc g     F .text	000000a8 alt_dev_llist_insert
00008968 g     F .text	000000a8 __sfvwrite_small_dev
0000aa20 g       *ABS*	00000000 __bss_start
00008260 g     F .text	00000048 main
0000aa2c g     O .bss	00000004 alt_envp
00009024 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000a72c g     O .rwdata	00000004 alt_errno
00008a60 g     F .text	00000080 .hidden __divsi3
0000a400 g       *ABS*	00000000 __flash_rodata_start
00008f38 g     F .text	0000003c alt_irq_init
00009d24 g     F .text	00000070 alt_release_fd
00008a10 g     F .text	00000050 _write_r
0000a714 g     O .rwdata	00000004 _impure_ptr
0000aa24 g     O .bss	00000004 alt_argc
00008020 g       .exceptions	00000000 alt_irq_entry
0000a718 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
000096c4 g     F .text	00000050 alt_ic_isr_register
0000a73c g       *ABS*	00000000 _edata
0000ab40 g       *ABS*	00000000 _end
00008224 g       *ABS*	00000000 __ram_exceptions_end
0000979c g     F .text	0000008c alt_ic_irq_disable
0000a24c g     F .text	00000020 exit
00008ae0 g     F .text	00000074 .hidden __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000a3c8 g     F .text	00000038 _exit
000083bc g     F .text	0000001c strlen
00009bc4 g     F .text	00000160 open
000096a4 g     F .text	00000020 alt_icache_flush_all
0000a730 g     O .rwdata	00000004 alt_priority_mask
00009714 g     F .text	00000088 alt_ic_irq_enable
00008950 g     F .text	00000018 __vfprintf_internal
0000a734 g     O .rwdata	00000008 alt_alarm_list
00009498 g     F .text	000000dc close
00008ca4 g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08608914 	ori	at,at,33316
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080fc0 	call	80fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000706 	br	80a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    808c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    8094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    8098:	00081c40 	call	81c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    809c:	1000021e 	bne	r2,zero,80a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    80a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    80a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    80a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    80ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80f8:	ef80083a 	eret

000080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80fc:	defff904 	addi	sp,sp,-28
    8100:	dfc00615 	stw	ra,24(sp)
    8104:	df000515 	stw	fp,20(sp)
    8108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    810c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8110:	0005313a 	rdctl	r2,ipending
    8114:	e0bffc15 	stw	r2,-16(fp)

  return active;
    8118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    811c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
    8120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8124:	00800044 	movi	r2,1
    8128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    812c:	e0ffff17 	ldw	r3,-4(fp)
    8130:	e0bffe17 	ldw	r2,-8(fp)
    8134:	1884703a 	and	r2,r3,r2
    8138:	10001126 	beq	r2,zero,8180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    813c:	e0bffd17 	ldw	r2,-12(fp)
    8140:	100690fa 	slli	r3,r2,3
    8144:	00800074 	movhi	r2,1
    8148:	1885883a 	add	r2,r3,r2
    814c:	10ea9017 	ldw	r3,-21952(r2)
    8150:	e0bffd17 	ldw	r2,-12(fp)
    8154:	100890fa 	slli	r4,r2,3
    8158:	00800074 	movhi	r2,1
    815c:	2085883a 	add	r2,r4,r2
    8160:	10aa9117 	ldw	r2,-21948(r2)
    8164:	1009883a 	mov	r4,r2
    8168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    816c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
    8170:	0005313a 	rdctl	r2,ipending
    8174:	e0bffb15 	stw	r2,-20(fp)
  return active;
    8178:	e0bffb17 	ldw	r2,-20(fp)
    817c:	00000706 	br	819c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
    8180:	e0bffe17 	ldw	r2,-8(fp)
    8184:	1085883a 	add	r2,r2,r2
    8188:	e0bffe15 	stw	r2,-8(fp)
      i++;
    818c:	e0bffd17 	ldw	r2,-12(fp)
    8190:	10800044 	addi	r2,r2,1
    8194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
    8198:	003fe406 	br	812c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
    819c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
    81a0:	e0bfff17 	ldw	r2,-4(fp)
    81a4:	103fde1e 	bne	r2,zero,8120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    81a8:	0001883a 	nop
}
    81ac:	0001883a 	nop
    81b0:	e037883a 	mov	sp,fp
    81b4:	dfc00117 	ldw	ra,4(sp)
    81b8:	df000017 	ldw	fp,0(sp)
    81bc:	dec00204 	addi	sp,sp,8
    81c0:	f800283a 	ret

000081c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
    81c4:	defffb04 	addi	sp,sp,-20
    81c8:	dfc00415 	stw	ra,16(sp)
    81cc:	df000315 	stw	fp,12(sp)
    81d0:	df000304 	addi	fp,sp,12
    81d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
    81d8:	00bfffc4 	movi	r2,-1
    81dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
    81e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    81e4:	d0a0cb17 	ldw	r2,-31956(gp)
    81e8:	10000726 	beq	r2,zero,8208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    81ec:	d0a0cb17 	ldw	r2,-31956(gp)
    81f0:	e0ffff17 	ldw	r3,-4(fp)
    81f4:	e1bffe17 	ldw	r6,-8(fp)
    81f8:	e17ffd17 	ldw	r5,-12(fp)
    81fc:	1809883a 	mov	r4,r3
    8200:	103ee83a 	callr	r2
    8204:	00000206 	br	8210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    8208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
    820c:	0005883a 	mov	r2,zero
}
    8210:	e037883a 	mov	sp,fp
    8214:	dfc00117 	ldw	ra,4(sp)
    8218:	df000017 	ldw	fp,0(sp)
    821c:	dec00204 	addi	sp,sp,8
    8220:	f800283a 	ret

Disassembly of section .text:

00008224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8224:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8228:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    822c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    8230:	d689c414 	ori	gp,gp,10000
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8234:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8238:	10aa8814 	ori	r2,r2,43552

    movhi r3, %hi(__bss_end)
    823c:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    8240:	18ead014 	ori	r3,r3,43840

    beq r2, r3, 1f
    8244:	10c00326 	beq	r2,r3,8254 <_start+0x30>

0:
    stw zero, (r2)
    8248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    824c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    8250:	10fffd36 	bltu	r2,r3,8248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8254:	0008ca40 	call	8ca4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8258:	0008d280 	call	8d28 <alt_main>

0000825c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    825c:	003fff06 	br	825c <alt_after_alt_main>

00008260 <main>:

// Every 0.1 sec print.
#define delay 100000

int main()
{
    8260:	defffd04 	addi	sp,sp,-12
    8264:	dfc00215 	stw	ra,8(sp)
    8268:	df000115 	stw	fp,4(sp)
    826c:	df000104 	addi	fp,sp,4
  printf("Hello from Nios II!\n");
    8270:	01000074 	movhi	r4,1
    8274:	21290004 	addi	r4,r4,-23552
    8278:	00083ac0 	call	83ac <puts>

  while(1)
  {
	int nReadOut = IORD_32DIRECT(QUADRATURE_ENCODER_0_BASE, 0x00);
    827c:	00800074 	movhi	r2,1
    8280:	10840037 	ldwio	r2,4096(r2)
    8284:	e0bfff15 	stw	r2,-4(fp)
	printf("From the IP: %d \n\r", nReadOut);
    8288:	e17fff17 	ldw	r5,-4(fp)
    828c:	01000074 	movhi	r4,1
    8290:	21290504 	addi	r4,r4,-23532
    8294:	00082e40 	call	82e4 <printf>
	usleep(delay);
    8298:	010000b4 	movhi	r4,2
    829c:	2121a804 	addi	r4,r4,-31072
    82a0:	0008d940 	call	8d94 <usleep>
  {
    82a4:	003ff506 	br	827c <main+0x1c>

000082a8 <_printf_r>:
    82a8:	defffd04 	addi	sp,sp,-12
    82ac:	dfc00015 	stw	ra,0(sp)
    82b0:	d9800115 	stw	r6,4(sp)
    82b4:	d9c00215 	stw	r7,8(sp)
    82b8:	21800217 	ldw	r6,8(r4)
    82bc:	00c00074 	movhi	r3,1
    82c0:	18e25a04 	addi	r3,r3,-30360
    82c4:	30c00115 	stw	r3,4(r6)
    82c8:	280d883a 	mov	r6,r5
    82cc:	21400217 	ldw	r5,8(r4)
    82d0:	d9c00104 	addi	r7,sp,4
    82d4:	00084440 	call	8444 <___vfprintf_internal_r>
    82d8:	dfc00017 	ldw	ra,0(sp)
    82dc:	dec00304 	addi	sp,sp,12
    82e0:	f800283a 	ret

000082e4 <printf>:
    82e4:	defffc04 	addi	sp,sp,-16
    82e8:	dfc00015 	stw	ra,0(sp)
    82ec:	d9400115 	stw	r5,4(sp)
    82f0:	d9800215 	stw	r6,8(sp)
    82f4:	d9c00315 	stw	r7,12(sp)
    82f8:	00800074 	movhi	r2,1
    82fc:	10e9c517 	ldw	r3,-22764(r2)
    8300:	00800074 	movhi	r2,1
    8304:	10a25a04 	addi	r2,r2,-30360
    8308:	19400217 	ldw	r5,8(r3)
    830c:	d9800104 	addi	r6,sp,4
    8310:	28800115 	stw	r2,4(r5)
    8314:	200b883a 	mov	r5,r4
    8318:	19000217 	ldw	r4,8(r3)
    831c:	00089500 	call	8950 <__vfprintf_internal>
    8320:	dfc00017 	ldw	ra,0(sp)
    8324:	dec00404 	addi	sp,sp,16
    8328:	f800283a 	ret

0000832c <_puts_r>:
    832c:	defffd04 	addi	sp,sp,-12
    8330:	dc000015 	stw	r16,0(sp)
    8334:	2021883a 	mov	r16,r4
    8338:	2809883a 	mov	r4,r5
    833c:	dfc00215 	stw	ra,8(sp)
    8340:	dc400115 	stw	r17,4(sp)
    8344:	2823883a 	mov	r17,r5
    8348:	00083bc0 	call	83bc <strlen>
    834c:	81400217 	ldw	r5,8(r16)
    8350:	00c00074 	movhi	r3,1
    8354:	18e25a04 	addi	r3,r3,-30360
    8358:	28c00115 	stw	r3,4(r5)
    835c:	100f883a 	mov	r7,r2
    8360:	880d883a 	mov	r6,r17
    8364:	8009883a 	mov	r4,r16
    8368:	00089680 	call	8968 <__sfvwrite_small_dev>
    836c:	10ffffe0 	cmpeqi	r3,r2,-1
    8370:	1800091e 	bne	r3,zero,8398 <_puts_r+0x6c>
    8374:	81400217 	ldw	r5,8(r16)
    8378:	01800074 	movhi	r6,1
    837c:	01c00044 	movi	r7,1
    8380:	28800117 	ldw	r2,4(r5)
    8384:	31a90a04 	addi	r6,r6,-23512
    8388:	8009883a 	mov	r4,r16
    838c:	103ee83a 	callr	r2
    8390:	10bfffe0 	cmpeqi	r2,r2,-1
    8394:	0085c83a 	sub	r2,zero,r2
    8398:	dfc00217 	ldw	ra,8(sp)
    839c:	dc400117 	ldw	r17,4(sp)
    83a0:	dc000017 	ldw	r16,0(sp)
    83a4:	dec00304 	addi	sp,sp,12
    83a8:	f800283a 	ret

000083ac <puts>:
    83ac:	00800074 	movhi	r2,1
    83b0:	200b883a 	mov	r5,r4
    83b4:	1129c517 	ldw	r4,-22764(r2)
    83b8:	000832c1 	jmpi	832c <_puts_r>

000083bc <strlen>:
    83bc:	2005883a 	mov	r2,r4
    83c0:	10c00007 	ldb	r3,0(r2)
    83c4:	1800021e 	bne	r3,zero,83d0 <strlen+0x14>
    83c8:	1105c83a 	sub	r2,r2,r4
    83cc:	f800283a 	ret
    83d0:	10800044 	addi	r2,r2,1
    83d4:	003ffa06 	br	83c0 <strlen+0x4>

000083d8 <print_repeat>:
    83d8:	defffb04 	addi	sp,sp,-20
    83dc:	dc800315 	stw	r18,12(sp)
    83e0:	dc400215 	stw	r17,8(sp)
    83e4:	dc000115 	stw	r16,4(sp)
    83e8:	dfc00415 	stw	ra,16(sp)
    83ec:	2025883a 	mov	r18,r4
    83f0:	2823883a 	mov	r17,r5
    83f4:	d9800005 	stb	r6,0(sp)
    83f8:	3821883a 	mov	r16,r7
    83fc:	04000716 	blt	zero,r16,841c <print_repeat+0x44>
    8400:	0005883a 	mov	r2,zero
    8404:	dfc00417 	ldw	ra,16(sp)
    8408:	dc800317 	ldw	r18,12(sp)
    840c:	dc400217 	ldw	r17,8(sp)
    8410:	dc000117 	ldw	r16,4(sp)
    8414:	dec00504 	addi	sp,sp,20
    8418:	f800283a 	ret
    841c:	88800117 	ldw	r2,4(r17)
    8420:	01c00044 	movi	r7,1
    8424:	d80d883a 	mov	r6,sp
    8428:	880b883a 	mov	r5,r17
    842c:	9009883a 	mov	r4,r18
    8430:	103ee83a 	callr	r2
    8434:	843fffc4 	addi	r16,r16,-1
    8438:	103ff026 	beq	r2,zero,83fc <print_repeat+0x24>
    843c:	00bfffc4 	movi	r2,-1
    8440:	003ff006 	br	8404 <print_repeat+0x2c>

00008444 <___vfprintf_internal_r>:
    8444:	deffe604 	addi	sp,sp,-104
    8448:	df001815 	stw	fp,96(sp)
    844c:	ddc01715 	stw	r23,92(sp)
    8450:	dd801615 	stw	r22,88(sp)
    8454:	dd001415 	stw	r20,80(sp)
    8458:	dcc01315 	stw	r19,76(sp)
    845c:	dc801215 	stw	r18,72(sp)
    8460:	dc401115 	stw	r17,68(sp)
    8464:	dc001015 	stw	r16,64(sp)
    8468:	dfc01915 	stw	ra,100(sp)
    846c:	dd401515 	stw	r21,84(sp)
    8470:	2021883a 	mov	r16,r4
    8474:	282f883a 	mov	r23,r5
    8478:	d9800515 	stw	r6,20(sp)
    847c:	3839883a 	mov	fp,r7
    8480:	002d883a 	mov	r22,zero
    8484:	d8000215 	stw	zero,8(sp)
    8488:	0027883a 	mov	r19,zero
    848c:	0029883a 	mov	r20,zero
    8490:	0025883a 	mov	r18,zero
    8494:	0023883a 	mov	r17,zero
    8498:	d8000115 	stw	zero,4(sp)
    849c:	d8000015 	stw	zero,0(sp)
    84a0:	0005883a 	mov	r2,zero
    84a4:	00000206 	br	84b0 <___vfprintf_internal_r+0x6c>
    84a8:	114000e0 	cmpeqi	r5,r2,3
    84ac:	28003f1e 	bne	r5,zero,85ac <___vfprintf_internal_r+0x168>
    84b0:	d8c00517 	ldw	r3,20(sp)
    84b4:	19000003 	ldbu	r4,0(r3)
    84b8:	18c00044 	addi	r3,r3,1
    84bc:	d8c00515 	stw	r3,20(sp)
    84c0:	21803fcc 	andi	r6,r4,255
    84c4:	3180201c 	xori	r6,r6,128
    84c8:	31bfe004 	addi	r6,r6,-128
    84cc:	30001426 	beq	r6,zero,8520 <___vfprintf_internal_r+0xdc>
    84d0:	114000a0 	cmpeqi	r5,r2,2
    84d4:	2800231e 	bne	r5,zero,8564 <___vfprintf_internal_r+0x120>
    84d8:	114000c8 	cmpgei	r5,r2,3
    84dc:	283ff21e 	bne	r5,zero,84a8 <___vfprintf_internal_r+0x64>
    84e0:	10000426 	beq	r2,zero,84f4 <___vfprintf_internal_r+0xb0>
    84e4:	10800060 	cmpeqi	r2,r2,1
    84e8:	10001a1e 	bne	r2,zero,8554 <___vfprintf_internal_r+0x110>
    84ec:	00800084 	movi	r2,2
    84f0:	003fef06 	br	84b0 <___vfprintf_internal_r+0x6c>
    84f4:	31800960 	cmpeqi	r6,r6,37
    84f8:	3000fe1e 	bne	r6,zero,88f4 <___vfprintf_internal_r+0x4b0>
    84fc:	b8800117 	ldw	r2,4(r23)
    8500:	d9000805 	stb	r4,32(sp)
    8504:	01c00044 	movi	r7,1
    8508:	d9800804 	addi	r6,sp,32
    850c:	b80b883a 	mov	r5,r23
    8510:	8009883a 	mov	r4,r16
    8514:	103ee83a 	callr	r2
    8518:	10001d26 	beq	r2,zero,8590 <___vfprintf_internal_r+0x14c>
    851c:	05bfffc4 	movi	r22,-1
    8520:	b005883a 	mov	r2,r22
    8524:	dfc01917 	ldw	ra,100(sp)
    8528:	df001817 	ldw	fp,96(sp)
    852c:	ddc01717 	ldw	r23,92(sp)
    8530:	dd801617 	ldw	r22,88(sp)
    8534:	dd401517 	ldw	r21,84(sp)
    8538:	dd001417 	ldw	r20,80(sp)
    853c:	dcc01317 	ldw	r19,76(sp)
    8540:	dc801217 	ldw	r18,72(sp)
    8544:	dc401117 	ldw	r17,68(sp)
    8548:	dc001017 	ldw	r16,64(sp)
    854c:	dec01a04 	addi	sp,sp,104
    8550:	f800283a 	ret
    8554:	30800c20 	cmpeqi	r2,r6,48
    8558:	1000ef1e 	bne	r2,zero,8918 <___vfprintf_internal_r+0x4d4>
    855c:	30800958 	cmpnei	r2,r6,37
    8560:	103fe626 	beq	r2,zero,84fc <___vfprintf_internal_r+0xb8>
    8564:	217ff404 	addi	r5,r4,-48
    8568:	29403fcc 	andi	r5,r5,255
    856c:	288002a8 	cmpgeui	r2,r5,10
    8570:	10000b1e 	bne	r2,zero,85a0 <___vfprintf_internal_r+0x15c>
    8574:	88bfffe0 	cmpeqi	r2,r17,-1
    8578:	1000071e 	bne	r2,zero,8598 <___vfprintf_internal_r+0x154>
    857c:	880490ba 	slli	r2,r17,2
    8580:	1463883a 	add	r17,r2,r17
    8584:	8822907a 	slli	r17,r17,1
    8588:	2c63883a 	add	r17,r5,r17
    858c:	003fd706 	br	84ec <___vfprintf_internal_r+0xa8>
    8590:	b5800044 	addi	r22,r22,1
    8594:	003fc606 	br	84b0 <___vfprintf_internal_r+0x6c>
    8598:	0023883a 	mov	r17,zero
    859c:	003ffa06 	br	8588 <___vfprintf_internal_r+0x144>
    85a0:	30800ba0 	cmpeqi	r2,r6,46
    85a4:	1000e11e 	bne	r2,zero,892c <___vfprintf_internal_r+0x4e8>
    85a8:	00800084 	movi	r2,2
    85ac:	213ff404 	addi	r4,r4,-48
    85b0:	21003fcc 	andi	r4,r4,255
    85b4:	214002a8 	cmpgeui	r5,r4,10
    85b8:	2800091e 	bne	r5,zero,85e0 <___vfprintf_internal_r+0x19c>
    85bc:	917fffe0 	cmpeqi	r5,r18,-1
    85c0:	2800051e 	bne	r5,zero,85d8 <___vfprintf_internal_r+0x194>
    85c4:	900a90ba 	slli	r5,r18,2
    85c8:	2ca5883a 	add	r18,r5,r18
    85cc:	9024907a 	slli	r18,r18,1
    85d0:	24a5883a 	add	r18,r4,r18
    85d4:	003fb606 	br	84b0 <___vfprintf_internal_r+0x6c>
    85d8:	0025883a 	mov	r18,zero
    85dc:	003ffc06 	br	85d0 <___vfprintf_internal_r+0x18c>
    85e0:	30801b20 	cmpeqi	r2,r6,108
    85e4:	1000cf1e 	bne	r2,zero,8924 <___vfprintf_internal_r+0x4e0>
    85e8:	90bfffe0 	cmpeqi	r2,r18,-1
    85ec:	10000f1e 	bne	r2,zero,862c <___vfprintf_internal_r+0x1e8>
    85f0:	d8000015 	stw	zero,0(sp)
    85f4:	30801be0 	cmpeqi	r2,r6,111
    85f8:	1000ce1e 	bne	r2,zero,8934 <___vfprintf_internal_r+0x4f0>
    85fc:	30801c08 	cmpgei	r2,r6,112
    8600:	1000171e 	bne	r2,zero,8660 <___vfprintf_internal_r+0x21c>
    8604:	308018e0 	cmpeqi	r2,r6,99
    8608:	1000a31e 	bne	r2,zero,8898 <___vfprintf_internal_r+0x454>
    860c:	30801908 	cmpgei	r2,r6,100
    8610:	1000081e 	bne	r2,zero,8634 <___vfprintf_internal_r+0x1f0>
    8614:	31801620 	cmpeqi	r6,r6,88
    8618:	303fa126 	beq	r6,zero,84a0 <___vfprintf_internal_r+0x5c>
    861c:	00800044 	movi	r2,1
    8620:	d8800215 	stw	r2,8(sp)
    8624:	05000404 	movi	r20,16
    8628:	0000c306 	br	8938 <___vfprintf_internal_r+0x4f4>
    862c:	04800044 	movi	r18,1
    8630:	003ff006 	br	85f4 <___vfprintf_internal_r+0x1b0>
    8634:	30801920 	cmpeqi	r2,r6,100
    8638:	1000021e 	bne	r2,zero,8644 <___vfprintf_internal_r+0x200>
    863c:	31801a60 	cmpeqi	r6,r6,105
    8640:	303f9726 	beq	r6,zero,84a0 <___vfprintf_internal_r+0x5c>
    8644:	e0800104 	addi	r2,fp,4
    8648:	d8800415 	stw	r2,16(sp)
    864c:	9800ba26 	beq	r19,zero,8938 <___vfprintf_internal_r+0x4f4>
    8650:	e5400017 	ldw	r21,0(fp)
    8654:	a8002216 	blt	r21,zero,86e0 <___vfprintf_internal_r+0x29c>
    8658:	04c00044 	movi	r19,1
    865c:	0000ba06 	br	8948 <___vfprintf_internal_r+0x504>
    8660:	30801d60 	cmpeqi	r2,r6,117
    8664:	1000b41e 	bne	r2,zero,8938 <___vfprintf_internal_r+0x4f4>
    8668:	30801e20 	cmpeqi	r2,r6,120
    866c:	103fed1e 	bne	r2,zero,8624 <___vfprintf_internal_r+0x1e0>
    8670:	31801ce0 	cmpeqi	r6,r6,115
    8674:	303f8a26 	beq	r6,zero,84a0 <___vfprintf_internal_r+0x5c>
    8678:	e5400017 	ldw	r21,0(fp)
    867c:	e0800104 	addi	r2,fp,4
    8680:	d8800315 	stw	r2,12(sp)
    8684:	a809883a 	mov	r4,r21
    8688:	00083bc0 	call	83bc <strlen>
    868c:	888fc83a 	sub	r7,r17,r2
    8690:	1039883a 	mov	fp,r2
    8694:	01c0080e 	bge	zero,r7,86b8 <___vfprintf_internal_r+0x274>
    8698:	01800804 	movi	r6,32
    869c:	b80b883a 	mov	r5,r23
    86a0:	8009883a 	mov	r4,r16
    86a4:	d9c00415 	stw	r7,16(sp)
    86a8:	00083d80 	call	83d8 <print_repeat>
    86ac:	103f9b1e 	bne	r2,zero,851c <___vfprintf_internal_r+0xd8>
    86b0:	d9c00417 	ldw	r7,16(sp)
    86b4:	b1ed883a 	add	r22,r22,r7
    86b8:	b8800117 	ldw	r2,4(r23)
    86bc:	e00f883a 	mov	r7,fp
    86c0:	a80d883a 	mov	r6,r21
    86c4:	b80b883a 	mov	r5,r23
    86c8:	8009883a 	mov	r4,r16
    86cc:	103ee83a 	callr	r2
    86d0:	103f921e 	bne	r2,zero,851c <___vfprintf_internal_r+0xd8>
    86d4:	b72d883a 	add	r22,r22,fp
    86d8:	df000317 	ldw	fp,12(sp)
    86dc:	003f7406 	br	84b0 <___vfprintf_internal_r+0x6c>
    86e0:	056bc83a 	sub	r21,zero,r21
    86e4:	04c00044 	movi	r19,1
    86e8:	00c00044 	movi	r3,1
    86ec:	df000804 	addi	fp,sp,32
    86f0:	e00d883a 	mov	r6,fp
    86f4:	a8002e1e 	bne	r21,zero,87b0 <___vfprintf_internal_r+0x36c>
    86f8:	e185c83a 	sub	r2,fp,r6
    86fc:	d8800315 	stw	r2,12(sp)
    8700:	9085c83a 	sub	r2,r18,r2
    8704:	0080090e 	bge	zero,r2,872c <___vfprintf_internal_r+0x2e8>
    8708:	e085883a 	add	r2,fp,r2
    870c:	d9001004 	addi	r4,sp,64
    8710:	e100042e 	bgeu	fp,r4,8724 <___vfprintf_internal_r+0x2e0>
    8714:	e7000044 	addi	fp,fp,1
    8718:	01000c04 	movi	r4,48
    871c:	e13fffc5 	stb	r4,-1(fp)
    8720:	e0bffa1e 	bne	fp,r2,870c <___vfprintf_internal_r+0x2c8>
    8724:	e185c83a 	sub	r2,fp,r6
    8728:	d8800315 	stw	r2,12(sp)
    872c:	d8800317 	ldw	r2,12(sp)
    8730:	1897883a 	add	r11,r3,r2
    8734:	d8800017 	ldw	r2,0(sp)
    8738:	8aebc83a 	sub	r21,r17,r11
    873c:	10003526 	beq	r2,zero,8814 <___vfprintf_internal_r+0x3d0>
    8740:	18000a26 	beq	r3,zero,876c <___vfprintf_internal_r+0x328>
    8744:	00800b44 	movi	r2,45
    8748:	d88007c5 	stb	r2,31(sp)
    874c:	b8800117 	ldw	r2,4(r23)
    8750:	01c00044 	movi	r7,1
    8754:	d98007c4 	addi	r6,sp,31
    8758:	b80b883a 	mov	r5,r23
    875c:	8009883a 	mov	r4,r16
    8760:	103ee83a 	callr	r2
    8764:	103f6d1e 	bne	r2,zero,851c <___vfprintf_internal_r+0xd8>
    8768:	b5800044 	addi	r22,r22,1
    876c:	0540070e 	bge	zero,r21,878c <___vfprintf_internal_r+0x348>
    8770:	a80f883a 	mov	r7,r21
    8774:	01800c04 	movi	r6,48
    8778:	b80b883a 	mov	r5,r23
    877c:	8009883a 	mov	r4,r16
    8780:	00083d80 	call	83d8 <print_repeat>
    8784:	103f651e 	bne	r2,zero,851c <___vfprintf_internal_r+0xd8>
    8788:	b56d883a 	add	r22,r22,r21
    878c:	d8800317 	ldw	r2,12(sp)
    8790:	b72d883a 	add	r22,r22,fp
    8794:	172bc83a 	sub	r21,r2,fp
    8798:	af05883a 	add	r2,r21,fp
    879c:	b707c83a 	sub	r3,r22,fp
    87a0:	00803216 	blt	zero,r2,886c <___vfprintf_internal_r+0x428>
    87a4:	df000417 	ldw	fp,16(sp)
    87a8:	182d883a 	mov	r22,r3
    87ac:	003f3c06 	br	84a0 <___vfprintf_internal_r+0x5c>
    87b0:	a809883a 	mov	r4,r21
    87b4:	a00b883a 	mov	r5,r20
    87b8:	d8c00615 	stw	r3,24(sp)
    87bc:	0008b540 	call	8b54 <__udivsi3>
    87c0:	1009883a 	mov	r4,r2
    87c4:	a00b883a 	mov	r5,r20
    87c8:	d8800315 	stw	r2,12(sp)
    87cc:	0008c140 	call	8c14 <__mulsi3>
    87d0:	a8abc83a 	sub	r21,r21,r2
    87d4:	a8800288 	cmpgei	r2,r21,10
    87d8:	d9000317 	ldw	r4,12(sp)
    87dc:	d8c00617 	ldw	r3,24(sp)
    87e0:	d9800804 	addi	r6,sp,32
    87e4:	1000051e 	bne	r2,zero,87fc <___vfprintf_internal_r+0x3b8>
    87e8:	ad400c04 	addi	r21,r21,48
    87ec:	e7000044 	addi	fp,fp,1
    87f0:	e57fffc5 	stb	r21,-1(fp)
    87f4:	202b883a 	mov	r21,r4
    87f8:	003fbe06 	br	86f4 <___vfprintf_internal_r+0x2b0>
    87fc:	d8800217 	ldw	r2,8(sp)
    8800:	10000226 	beq	r2,zero,880c <___vfprintf_internal_r+0x3c8>
    8804:	ad400dc4 	addi	r21,r21,55
    8808:	003ff806 	br	87ec <___vfprintf_internal_r+0x3a8>
    880c:	ad4015c4 	addi	r21,r21,87
    8810:	003ff606 	br	87ec <___vfprintf_internal_r+0x3a8>
    8814:	0540090e 	bge	zero,r21,883c <___vfprintf_internal_r+0x3f8>
    8818:	a80f883a 	mov	r7,r21
    881c:	01800804 	movi	r6,32
    8820:	b80b883a 	mov	r5,r23
    8824:	8009883a 	mov	r4,r16
    8828:	d8c00615 	stw	r3,24(sp)
    882c:	00083d80 	call	83d8 <print_repeat>
    8830:	103f3a1e 	bne	r2,zero,851c <___vfprintf_internal_r+0xd8>
    8834:	d8c00617 	ldw	r3,24(sp)
    8838:	b56d883a 	add	r22,r22,r21
    883c:	183fd326 	beq	r3,zero,878c <___vfprintf_internal_r+0x348>
    8840:	00800b44 	movi	r2,45
    8844:	d88007c5 	stb	r2,31(sp)
    8848:	b8800117 	ldw	r2,4(r23)
    884c:	01c00044 	movi	r7,1
    8850:	d98007c4 	addi	r6,sp,31
    8854:	b80b883a 	mov	r5,r23
    8858:	8009883a 	mov	r4,r16
    885c:	103ee83a 	callr	r2
    8860:	103f2e1e 	bne	r2,zero,851c <___vfprintf_internal_r+0xd8>
    8864:	b5800044 	addi	r22,r22,1
    8868:	003fc806 	br	878c <___vfprintf_internal_r+0x348>
    886c:	e0bfffc3 	ldbu	r2,-1(fp)
    8870:	01c00044 	movi	r7,1
    8874:	d98007c4 	addi	r6,sp,31
    8878:	d88007c5 	stb	r2,31(sp)
    887c:	b8800117 	ldw	r2,4(r23)
    8880:	b80b883a 	mov	r5,r23
    8884:	8009883a 	mov	r4,r16
    8888:	e73fffc4 	addi	fp,fp,-1
    888c:	103ee83a 	callr	r2
    8890:	103fc126 	beq	r2,zero,8798 <___vfprintf_internal_r+0x354>
    8894:	003f2106 	br	851c <___vfprintf_internal_r+0xd8>
    8898:	88800090 	cmplti	r2,r17,2
    889c:	1000081e 	bne	r2,zero,88c0 <___vfprintf_internal_r+0x47c>
    88a0:	8d7fffc4 	addi	r21,r17,-1
    88a4:	a80f883a 	mov	r7,r21
    88a8:	01800804 	movi	r6,32
    88ac:	b80b883a 	mov	r5,r23
    88b0:	8009883a 	mov	r4,r16
    88b4:	00083d80 	call	83d8 <print_repeat>
    88b8:	103f181e 	bne	r2,zero,851c <___vfprintf_internal_r+0xd8>
    88bc:	b56d883a 	add	r22,r22,r21
    88c0:	e0800017 	ldw	r2,0(fp)
    88c4:	01c00044 	movi	r7,1
    88c8:	d9800804 	addi	r6,sp,32
    88cc:	d8800805 	stb	r2,32(sp)
    88d0:	b8800117 	ldw	r2,4(r23)
    88d4:	b80b883a 	mov	r5,r23
    88d8:	8009883a 	mov	r4,r16
    88dc:	e5400104 	addi	r21,fp,4
    88e0:	103ee83a 	callr	r2
    88e4:	103f0d1e 	bne	r2,zero,851c <___vfprintf_internal_r+0xd8>
    88e8:	b5800044 	addi	r22,r22,1
    88ec:	a839883a 	mov	fp,r21
    88f0:	003eef06 	br	84b0 <___vfprintf_internal_r+0x6c>
    88f4:	d8000215 	stw	zero,8(sp)
    88f8:	d8000115 	stw	zero,4(sp)
    88fc:	d8000015 	stw	zero,0(sp)
    8900:	04c00044 	movi	r19,1
    8904:	05000284 	movi	r20,10
    8908:	04bfffc4 	movi	r18,-1
    890c:	047fffc4 	movi	r17,-1
    8910:	00800044 	movi	r2,1
    8914:	003ee606 	br	84b0 <___vfprintf_internal_r+0x6c>
    8918:	00800044 	movi	r2,1
    891c:	d8800015 	stw	r2,0(sp)
    8920:	003ef206 	br	84ec <___vfprintf_internal_r+0xa8>
    8924:	00800044 	movi	r2,1
    8928:	d8800115 	stw	r2,4(sp)
    892c:	008000c4 	movi	r2,3
    8930:	003edf06 	br	84b0 <___vfprintf_internal_r+0x6c>
    8934:	05000204 	movi	r20,8
    8938:	e0800104 	addi	r2,fp,4
    893c:	d8800415 	stw	r2,16(sp)
    8940:	e5400017 	ldw	r21,0(fp)
    8944:	0027883a 	mov	r19,zero
    8948:	0007883a 	mov	r3,zero
    894c:	003f6706 	br	86ec <___vfprintf_internal_r+0x2a8>

00008950 <__vfprintf_internal>:
    8950:	00800074 	movhi	r2,1
    8954:	300f883a 	mov	r7,r6
    8958:	280d883a 	mov	r6,r5
    895c:	200b883a 	mov	r5,r4
    8960:	1129c517 	ldw	r4,-22764(r2)
    8964:	00084441 	jmpi	8444 <___vfprintf_internal_r>

00008968 <__sfvwrite_small_dev>:
    8968:	2880000b 	ldhu	r2,0(r5)
    896c:	1080020c 	andi	r2,r2,8
    8970:	10002526 	beq	r2,zero,8a08 <__sfvwrite_small_dev+0xa0>
    8974:	2880008f 	ldh	r2,2(r5)
    8978:	defffb04 	addi	sp,sp,-20
    897c:	dcc00315 	stw	r19,12(sp)
    8980:	dc800215 	stw	r18,8(sp)
    8984:	dc400115 	stw	r17,4(sp)
    8988:	dc000015 	stw	r16,0(sp)
    898c:	dfc00415 	stw	ra,16(sp)
    8990:	2027883a 	mov	r19,r4
    8994:	2821883a 	mov	r16,r5
    8998:	3025883a 	mov	r18,r6
    899c:	3823883a 	mov	r17,r7
    89a0:	1000100e 	bge	r2,zero,89e4 <__sfvwrite_small_dev+0x7c>
    89a4:	8080000b 	ldhu	r2,0(r16)
    89a8:	10801014 	ori	r2,r2,64
    89ac:	8080000d 	sth	r2,0(r16)
    89b0:	00bfffc4 	movi	r2,-1
    89b4:	00000d06 	br	89ec <__sfvwrite_small_dev+0x84>
    89b8:	88810050 	cmplti	r2,r17,1025
    89bc:	880f883a 	mov	r7,r17
    89c0:	1000011e 	bne	r2,zero,89c8 <__sfvwrite_small_dev+0x60>
    89c4:	01c10004 	movi	r7,1024
    89c8:	8140008f 	ldh	r5,2(r16)
    89cc:	900d883a 	mov	r6,r18
    89d0:	9809883a 	mov	r4,r19
    89d4:	0008a100 	call	8a10 <_write_r>
    89d8:	00bff20e 	bge	zero,r2,89a4 <__sfvwrite_small_dev+0x3c>
    89dc:	88a3c83a 	sub	r17,r17,r2
    89e0:	90a5883a 	add	r18,r18,r2
    89e4:	047ff416 	blt	zero,r17,89b8 <__sfvwrite_small_dev+0x50>
    89e8:	0005883a 	mov	r2,zero
    89ec:	dfc00417 	ldw	ra,16(sp)
    89f0:	dcc00317 	ldw	r19,12(sp)
    89f4:	dc800217 	ldw	r18,8(sp)
    89f8:	dc400117 	ldw	r17,4(sp)
    89fc:	dc000017 	ldw	r16,0(sp)
    8a00:	dec00504 	addi	sp,sp,20
    8a04:	f800283a 	ret
    8a08:	00bfffc4 	movi	r2,-1
    8a0c:	f800283a 	ret

00008a10 <_write_r>:
    8a10:	defffe04 	addi	sp,sp,-8
    8a14:	dc000015 	stw	r16,0(sp)
    8a18:	00800074 	movhi	r2,1
    8a1c:	2021883a 	mov	r16,r4
    8a20:	2809883a 	mov	r4,r5
    8a24:	300b883a 	mov	r5,r6
    8a28:	380d883a 	mov	r6,r7
    8a2c:	dfc00115 	stw	ra,4(sp)
    8a30:	102a8815 	stw	zero,-21984(r2)
    8a34:	0008e000 	call	8e00 <write>
    8a38:	10ffffd8 	cmpnei	r3,r2,-1
    8a3c:	1800041e 	bne	r3,zero,8a50 <_write_r+0x40>
    8a40:	00c00074 	movhi	r3,1
    8a44:	18ea8817 	ldw	r3,-21984(r3)
    8a48:	18000126 	beq	r3,zero,8a50 <_write_r+0x40>
    8a4c:	80c00015 	stw	r3,0(r16)
    8a50:	dfc00117 	ldw	ra,4(sp)
    8a54:	dc000017 	ldw	r16,0(sp)
    8a58:	dec00204 	addi	sp,sp,8
    8a5c:	f800283a 	ret

00008a60 <__divsi3>:
    8a60:	20001a16 	blt	r4,zero,8acc <__divsi3+0x6c>
    8a64:	000f883a 	mov	r7,zero
    8a68:	2800020e 	bge	r5,zero,8a74 <__divsi3+0x14>
    8a6c:	014bc83a 	sub	r5,zero,r5
    8a70:	39c0005c 	xori	r7,r7,1
    8a74:	200d883a 	mov	r6,r4
    8a78:	00c00044 	movi	r3,1
    8a7c:	2900092e 	bgeu	r5,r4,8aa4 <__divsi3+0x44>
    8a80:	00800804 	movi	r2,32
    8a84:	00c00044 	movi	r3,1
    8a88:	00000106 	br	8a90 <__divsi3+0x30>
    8a8c:	10001226 	beq	r2,zero,8ad8 <__divsi3+0x78>
    8a90:	294b883a 	add	r5,r5,r5
    8a94:	10bfffc4 	addi	r2,r2,-1
    8a98:	18c7883a 	add	r3,r3,r3
    8a9c:	293ffb36 	bltu	r5,r4,8a8c <__divsi3+0x2c>
    8aa0:	18000d26 	beq	r3,zero,8ad8 <__divsi3+0x78>
    8aa4:	0005883a 	mov	r2,zero
    8aa8:	31400236 	bltu	r6,r5,8ab4 <__divsi3+0x54>
    8aac:	314dc83a 	sub	r6,r6,r5
    8ab0:	10c4b03a 	or	r2,r2,r3
    8ab4:	1806d07a 	srli	r3,r3,1
    8ab8:	280ad07a 	srli	r5,r5,1
    8abc:	183ffa1e 	bne	r3,zero,8aa8 <__divsi3+0x48>
    8ac0:	38000126 	beq	r7,zero,8ac8 <__divsi3+0x68>
    8ac4:	0085c83a 	sub	r2,zero,r2
    8ac8:	f800283a 	ret
    8acc:	0109c83a 	sub	r4,zero,r4
    8ad0:	01c00044 	movi	r7,1
    8ad4:	003fe406 	br	8a68 <__divsi3+0x8>
    8ad8:	0005883a 	mov	r2,zero
    8adc:	003ff806 	br	8ac0 <__divsi3+0x60>

00008ae0 <__modsi3>:
    8ae0:	20001916 	blt	r4,zero,8b48 <__modsi3+0x68>
    8ae4:	000f883a 	mov	r7,zero
    8ae8:	2005883a 	mov	r2,r4
    8aec:	2800010e 	bge	r5,zero,8af4 <__modsi3+0x14>
    8af0:	014bc83a 	sub	r5,zero,r5
    8af4:	00c00044 	movi	r3,1
    8af8:	2900092e 	bgeu	r5,r4,8b20 <__modsi3+0x40>
    8afc:	01800804 	movi	r6,32
    8b00:	00c00044 	movi	r3,1
    8b04:	00000106 	br	8b0c <__modsi3+0x2c>
    8b08:	30000d26 	beq	r6,zero,8b40 <__modsi3+0x60>
    8b0c:	294b883a 	add	r5,r5,r5
    8b10:	31bfffc4 	addi	r6,r6,-1
    8b14:	18c7883a 	add	r3,r3,r3
    8b18:	293ffb36 	bltu	r5,r4,8b08 <__modsi3+0x28>
    8b1c:	18000826 	beq	r3,zero,8b40 <__modsi3+0x60>
    8b20:	1806d07a 	srli	r3,r3,1
    8b24:	11400136 	bltu	r2,r5,8b2c <__modsi3+0x4c>
    8b28:	1145c83a 	sub	r2,r2,r5
    8b2c:	280ad07a 	srli	r5,r5,1
    8b30:	183ffb1e 	bne	r3,zero,8b20 <__modsi3+0x40>
    8b34:	38000126 	beq	r7,zero,8b3c <__modsi3+0x5c>
    8b38:	0085c83a 	sub	r2,zero,r2
    8b3c:	f800283a 	ret
    8b40:	2005883a 	mov	r2,r4
    8b44:	003ffb06 	br	8b34 <__modsi3+0x54>
    8b48:	0109c83a 	sub	r4,zero,r4
    8b4c:	01c00044 	movi	r7,1
    8b50:	003fe506 	br	8ae8 <__modsi3+0x8>

00008b54 <__udivsi3>:
    8b54:	200d883a 	mov	r6,r4
    8b58:	2900152e 	bgeu	r5,r4,8bb0 <__udivsi3+0x5c>
    8b5c:	28001416 	blt	r5,zero,8bb0 <__udivsi3+0x5c>
    8b60:	00800804 	movi	r2,32
    8b64:	00c00044 	movi	r3,1
    8b68:	00000206 	br	8b74 <__udivsi3+0x20>
    8b6c:	10000e26 	beq	r2,zero,8ba8 <__udivsi3+0x54>
    8b70:	28000516 	blt	r5,zero,8b88 <__udivsi3+0x34>
    8b74:	294b883a 	add	r5,r5,r5
    8b78:	10bfffc4 	addi	r2,r2,-1
    8b7c:	18c7883a 	add	r3,r3,r3
    8b80:	293ffa36 	bltu	r5,r4,8b6c <__udivsi3+0x18>
    8b84:	18000826 	beq	r3,zero,8ba8 <__udivsi3+0x54>
    8b88:	0005883a 	mov	r2,zero
    8b8c:	31400236 	bltu	r6,r5,8b98 <__udivsi3+0x44>
    8b90:	314dc83a 	sub	r6,r6,r5
    8b94:	10c4b03a 	or	r2,r2,r3
    8b98:	1806d07a 	srli	r3,r3,1
    8b9c:	280ad07a 	srli	r5,r5,1
    8ba0:	183ffa1e 	bne	r3,zero,8b8c <__udivsi3+0x38>
    8ba4:	f800283a 	ret
    8ba8:	0005883a 	mov	r2,zero
    8bac:	f800283a 	ret
    8bb0:	00c00044 	movi	r3,1
    8bb4:	003ff406 	br	8b88 <__udivsi3+0x34>

00008bb8 <__umodsi3>:
    8bb8:	2005883a 	mov	r2,r4
    8bbc:	2900132e 	bgeu	r5,r4,8c0c <__umodsi3+0x54>
    8bc0:	28001216 	blt	r5,zero,8c0c <__umodsi3+0x54>
    8bc4:	01800804 	movi	r6,32
    8bc8:	00c00044 	movi	r3,1
    8bcc:	00000206 	br	8bd8 <__umodsi3+0x20>
    8bd0:	30000c26 	beq	r6,zero,8c04 <__umodsi3+0x4c>
    8bd4:	28000516 	blt	r5,zero,8bec <__umodsi3+0x34>
    8bd8:	294b883a 	add	r5,r5,r5
    8bdc:	31bfffc4 	addi	r6,r6,-1
    8be0:	18c7883a 	add	r3,r3,r3
    8be4:	293ffa36 	bltu	r5,r4,8bd0 <__umodsi3+0x18>
    8be8:	18000626 	beq	r3,zero,8c04 <__umodsi3+0x4c>
    8bec:	1806d07a 	srli	r3,r3,1
    8bf0:	11400136 	bltu	r2,r5,8bf8 <__umodsi3+0x40>
    8bf4:	1145c83a 	sub	r2,r2,r5
    8bf8:	280ad07a 	srli	r5,r5,1
    8bfc:	183ffb1e 	bne	r3,zero,8bec <__umodsi3+0x34>
    8c00:	f800283a 	ret
    8c04:	2005883a 	mov	r2,r4
    8c08:	f800283a 	ret
    8c0c:	00c00044 	movi	r3,1
    8c10:	003ff606 	br	8bec <__umodsi3+0x34>

00008c14 <__mulsi3>:
    8c14:	0005883a 	mov	r2,zero
    8c18:	20000726 	beq	r4,zero,8c38 <__mulsi3+0x24>
    8c1c:	20c0004c 	andi	r3,r4,1
    8c20:	2008d07a 	srli	r4,r4,1
    8c24:	18000126 	beq	r3,zero,8c2c <__mulsi3+0x18>
    8c28:	1145883a 	add	r2,r2,r5
    8c2c:	294b883a 	add	r5,r5,r5
    8c30:	203ffa1e 	bne	r4,zero,8c1c <__mulsi3+0x8>
    8c34:	f800283a 	ret
    8c38:	f800283a 	ret

00008c3c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    8c3c:	defffc04 	addi	sp,sp,-16
    8c40:	df000315 	stw	fp,12(sp)
    8c44:	df000304 	addi	fp,sp,12
    8c48:	e13fff15 	stw	r4,-4(fp)
    8c4c:	e17ffe15 	stw	r5,-8(fp)
    8c50:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
    8c54:	e0fffe17 	ldw	r3,-8(fp)
    8c58:	e0bfff17 	ldw	r2,-4(fp)
    8c5c:	18800c26 	beq	r3,r2,8c90 <alt_load_section+0x54>
  {
    while( to != end )
    8c60:	00000806 	br	8c84 <alt_load_section+0x48>
    {
      *to++ = *from++;
    8c64:	e0ffff17 	ldw	r3,-4(fp)
    8c68:	18800104 	addi	r2,r3,4
    8c6c:	e0bfff15 	stw	r2,-4(fp)
    8c70:	e0bffe17 	ldw	r2,-8(fp)
    8c74:	11000104 	addi	r4,r2,4
    8c78:	e13ffe15 	stw	r4,-8(fp)
    8c7c:	18c00017 	ldw	r3,0(r3)
    8c80:	10c00015 	stw	r3,0(r2)
    while( to != end )
    8c84:	e0fffe17 	ldw	r3,-8(fp)
    8c88:	e0bffd17 	ldw	r2,-12(fp)
    8c8c:	18bff51e 	bne	r3,r2,8c64 <alt_load_section+0x28>
    }
  }
}
    8c90:	0001883a 	nop
    8c94:	e037883a 	mov	sp,fp
    8c98:	df000017 	ldw	fp,0(sp)
    8c9c:	dec00104 	addi	sp,sp,4
    8ca0:	f800283a 	ret

00008ca4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8ca4:	defffe04 	addi	sp,sp,-8
    8ca8:	dfc00115 	stw	ra,4(sp)
    8cac:	df000015 	stw	fp,0(sp)
    8cb0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8cb4:	01800074 	movhi	r6,1
    8cb8:	31a9cf04 	addi	r6,r6,-22724
    8cbc:	01400074 	movhi	r5,1
    8cc0:	29691604 	addi	r5,r5,-23464
    8cc4:	01000074 	movhi	r4,1
    8cc8:	2129cf04 	addi	r4,r4,-22724
    8ccc:	0008c3c0 	call	8c3c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    8cd0:	01800074 	movhi	r6,1
    8cd4:	31a08904 	addi	r6,r6,-32220
    8cd8:	01400074 	movhi	r5,1
    8cdc:	29600804 	addi	r5,r5,-32736
    8ce0:	01000074 	movhi	r4,1
    8ce4:	21200804 	addi	r4,r4,-32736
    8ce8:	0008c3c0 	call	8c3c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    8cec:	01800074 	movhi	r6,1
    8cf0:	31a91604 	addi	r6,r6,-23464
    8cf4:	01400074 	movhi	r5,1
    8cf8:	29690004 	addi	r5,r5,-23552
    8cfc:	01000074 	movhi	r4,1
    8d00:	21290004 	addi	r4,r4,-23552
    8d04:	0008c3c0 	call	8c3c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8d08:	00095740 	call	9574 <alt_dcache_flush_all>
  alt_icache_flush_all();
    8d0c:	00096a40 	call	96a4 <alt_icache_flush_all>
}
    8d10:	0001883a 	nop
    8d14:	e037883a 	mov	sp,fp
    8d18:	dfc00117 	ldw	ra,4(sp)
    8d1c:	df000017 	ldw	fp,0(sp)
    8d20:	dec00204 	addi	sp,sp,8
    8d24:	f800283a 	ret

00008d28 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8d28:	defffd04 	addi	sp,sp,-12
    8d2c:	dfc00215 	stw	ra,8(sp)
    8d30:	df000115 	stw	fp,4(sp)
    8d34:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8d38:	0009883a 	mov	r4,zero
    8d3c:	0008f380 	call	8f38 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    8d40:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8d44:	0008f740 	call	8f74 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    8d48:	01800074 	movhi	r6,1
    8d4c:	31a90b04 	addi	r6,r6,-23508
    8d50:	01400074 	movhi	r5,1
    8d54:	29690b04 	addi	r5,r5,-23508
    8d58:	01000074 	movhi	r4,1
    8d5c:	21290b04 	addi	r4,r4,-23508
    8d60:	0009a300 	call	9a30 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    8d64:	d0a0c517 	ldw	r2,-31980(gp)
    8d68:	d0e0c617 	ldw	r3,-31976(gp)
    8d6c:	d120c717 	ldw	r4,-31972(gp)
    8d70:	200d883a 	mov	r6,r4
    8d74:	180b883a 	mov	r5,r3
    8d78:	1009883a 	mov	r4,r2
    8d7c:	00082600 	call	8260 <main>
    8d80:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    8d84:	01000044 	movi	r4,1
    8d88:	00094980 	call	9498 <close>
  exit (result);
    8d8c:	e13fff17 	ldw	r4,-4(fp)
    8d90:	000a24c0 	call	a24c <exit>

00008d94 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    8d94:	defffd04 	addi	sp,sp,-12
    8d98:	dfc00215 	stw	ra,8(sp)
    8d9c:	df000115 	stw	fp,4(sp)
    8da0:	df000104 	addi	fp,sp,4
    8da4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    8da8:	e13fff17 	ldw	r4,-4(fp)
    8dac:	00093040 	call	9304 <alt_busy_sleep>
}
    8db0:	e037883a 	mov	sp,fp
    8db4:	dfc00117 	ldw	ra,4(sp)
    8db8:	df000017 	ldw	fp,0(sp)
    8dbc:	dec00204 	addi	sp,sp,8
    8dc0:	f800283a 	ret

00008dc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8dc4:	defffe04 	addi	sp,sp,-8
    8dc8:	dfc00115 	stw	ra,4(sp)
    8dcc:	df000015 	stw	fp,0(sp)
    8dd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8dd4:	d0a00717 	ldw	r2,-32740(gp)
    8dd8:	10000326 	beq	r2,zero,8de8 <alt_get_errno+0x24>
    8ddc:	d0a00717 	ldw	r2,-32740(gp)
    8de0:	103ee83a 	callr	r2
    8de4:	00000106 	br	8dec <alt_get_errno+0x28>
    8de8:	d0a0c404 	addi	r2,gp,-31984
}
    8dec:	e037883a 	mov	sp,fp
    8df0:	dfc00117 	ldw	ra,4(sp)
    8df4:	df000017 	ldw	fp,0(sp)
    8df8:	dec00204 	addi	sp,sp,8
    8dfc:	f800283a 	ret

00008e00 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8e00:	defff904 	addi	sp,sp,-28
    8e04:	dfc00615 	stw	ra,24(sp)
    8e08:	df000515 	stw	fp,20(sp)
    8e0c:	df000504 	addi	fp,sp,20
    8e10:	e13ffd15 	stw	r4,-12(fp)
    8e14:	e17ffc15 	stw	r5,-16(fp)
    8e18:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    8e1c:	e0bffd17 	ldw	r2,-12(fp)
    8e20:	10000916 	blt	r2,zero,8e48 <write+0x48>
    8e24:	e0fffd17 	ldw	r3,-12(fp)
    8e28:	1805883a 	mov	r2,r3
    8e2c:	1085883a 	add	r2,r2,r2
    8e30:	10c5883a 	add	r2,r2,r3
    8e34:	100490ba 	slli	r2,r2,2
    8e38:	00c00074 	movhi	r3,1
    8e3c:	18e96404 	addi	r3,r3,-23152
    8e40:	10c5883a 	add	r2,r2,r3
    8e44:	00000106 	br	8e4c <write+0x4c>
    8e48:	0005883a 	mov	r2,zero
    8e4c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    8e50:	e0bfff17 	ldw	r2,-4(fp)
    8e54:	10002126 	beq	r2,zero,8edc <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    8e58:	e0bfff17 	ldw	r2,-4(fp)
    8e5c:	10800217 	ldw	r2,8(r2)
    8e60:	108000cc 	andi	r2,r2,3
    8e64:	10001826 	beq	r2,zero,8ec8 <write+0xc8>
    8e68:	e0bfff17 	ldw	r2,-4(fp)
    8e6c:	10800017 	ldw	r2,0(r2)
    8e70:	10800617 	ldw	r2,24(r2)
    8e74:	10001426 	beq	r2,zero,8ec8 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    8e78:	e0bfff17 	ldw	r2,-4(fp)
    8e7c:	10800017 	ldw	r2,0(r2)
    8e80:	10800617 	ldw	r2,24(r2)
    8e84:	e0fffb17 	ldw	r3,-20(fp)
    8e88:	180d883a 	mov	r6,r3
    8e8c:	e17ffc17 	ldw	r5,-16(fp)
    8e90:	e13fff17 	ldw	r4,-4(fp)
    8e94:	103ee83a 	callr	r2
    8e98:	e0bffe15 	stw	r2,-8(fp)
    8e9c:	e0bffe17 	ldw	r2,-8(fp)
    8ea0:	1000070e 	bge	r2,zero,8ec0 <write+0xc0>
      {
        ALT_ERRNO = -rval;
    8ea4:	0008dc40 	call	8dc4 <alt_get_errno>
    8ea8:	1007883a 	mov	r3,r2
    8eac:	e0bffe17 	ldw	r2,-8(fp)
    8eb0:	0085c83a 	sub	r2,zero,r2
    8eb4:	18800015 	stw	r2,0(r3)
        return -1;
    8eb8:	00bfffc4 	movi	r2,-1
    8ebc:	00000c06 	br	8ef0 <write+0xf0>
      }
      return rval;
    8ec0:	e0bffe17 	ldw	r2,-8(fp)
    8ec4:	00000a06 	br	8ef0 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
    8ec8:	0008dc40 	call	8dc4 <alt_get_errno>
    8ecc:	1007883a 	mov	r3,r2
    8ed0:	00800344 	movi	r2,13
    8ed4:	18800015 	stw	r2,0(r3)
    8ed8:	00000406 	br	8eec <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    8edc:	0008dc40 	call	8dc4 <alt_get_errno>
    8ee0:	1007883a 	mov	r3,r2
    8ee4:	00801444 	movi	r2,81
    8ee8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    8eec:	00bfffc4 	movi	r2,-1
}
    8ef0:	e037883a 	mov	sp,fp
    8ef4:	dfc00117 	ldw	ra,4(sp)
    8ef8:	df000017 	ldw	fp,0(sp)
    8efc:	dec00204 	addi	sp,sp,8
    8f00:	f800283a 	ret

00008f04 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    8f04:	defffd04 	addi	sp,sp,-12
    8f08:	dfc00215 	stw	ra,8(sp)
    8f0c:	df000115 	stw	fp,4(sp)
    8f10:	df000104 	addi	fp,sp,4
    8f14:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    8f18:	d1600404 	addi	r5,gp,-32752
    8f1c:	e13fff17 	ldw	r4,-4(fp)
    8f20:	00095fc0 	call	95fc <alt_dev_llist_insert>
}
    8f24:	e037883a 	mov	sp,fp
    8f28:	dfc00117 	ldw	ra,4(sp)
    8f2c:	df000017 	ldw	fp,0(sp)
    8f30:	dec00204 	addi	sp,sp,8
    8f34:	f800283a 	ret

00008f38 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8f38:	defffd04 	addi	sp,sp,-12
    8f3c:	dfc00215 	stw	ra,8(sp)
    8f40:	df000115 	stw	fp,4(sp)
    8f44:	df000104 	addi	fp,sp,4
    8f48:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    8f4c:	0009f400 	call	9f40 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8f50:	00800044 	movi	r2,1
    8f54:	1001703a 	wrctl	status,r2
}
    8f58:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
    8f5c:	0001883a 	nop
    8f60:	e037883a 	mov	sp,fp
    8f64:	dfc00117 	ldw	ra,4(sp)
    8f68:	df000017 	ldw	fp,0(sp)
    8f6c:	dec00204 	addi	sp,sp,8
    8f70:	f800283a 	ret

00008f74 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8f74:	defffe04 	addi	sp,sp,-8
    8f78:	dfc00115 	stw	ra,4(sp)
    8f7c:	df000015 	stw	fp,0(sp)
    8f80:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
    8f84:	01c0fa04 	movi	r7,1000
    8f88:	01800044 	movi	r6,1
    8f8c:	000b883a 	mov	r5,zero
    8f90:	01000074 	movhi	r4,1
    8f94:	21050004 	addi	r4,r4,5120
    8f98:	00092800 	call	9280 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    8f9c:	01000074 	movhi	r4,1
    8fa0:	21294f04 	addi	r4,r4,-23236
    8fa4:	0008f040 	call	8f04 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    8fa8:	0001883a 	nop
}
    8fac:	0001883a 	nop
    8fb0:	e037883a 	mov	sp,fp
    8fb4:	dfc00117 	ldw	ra,4(sp)
    8fb8:	df000017 	ldw	fp,0(sp)
    8fbc:	dec00204 	addi	sp,sp,8
    8fc0:	f800283a 	ret

00008fc4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    8fc4:	defffa04 	addi	sp,sp,-24
    8fc8:	dfc00515 	stw	ra,20(sp)
    8fcc:	df000415 	stw	fp,16(sp)
    8fd0:	df000404 	addi	fp,sp,16
    8fd4:	e13ffe15 	stw	r4,-8(fp)
    8fd8:	e17ffd15 	stw	r5,-12(fp)
    8fdc:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8fe0:	e0bffe17 	ldw	r2,-8(fp)
    8fe4:	10800017 	ldw	r2,0(r2)
    8fe8:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    8fec:	e0bfff17 	ldw	r2,-4(fp)
    8ff0:	10c00a04 	addi	r3,r2,40
    8ff4:	e0bffe17 	ldw	r2,-8(fp)
    8ff8:	10800217 	ldw	r2,8(r2)
    8ffc:	100f883a 	mov	r7,r2
    9000:	e1bffc17 	ldw	r6,-16(fp)
    9004:	e17ffd17 	ldw	r5,-12(fp)
    9008:	1809883a 	mov	r4,r3
    900c:	00090840 	call	9084 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    9010:	e037883a 	mov	sp,fp
    9014:	dfc00117 	ldw	ra,4(sp)
    9018:	df000017 	ldw	fp,0(sp)
    901c:	dec00204 	addi	sp,sp,8
    9020:	f800283a 	ret

00009024 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    9024:	defffa04 	addi	sp,sp,-24
    9028:	dfc00515 	stw	ra,20(sp)
    902c:	df000415 	stw	fp,16(sp)
    9030:	df000404 	addi	fp,sp,16
    9034:	e13ffe15 	stw	r4,-8(fp)
    9038:	e17ffd15 	stw	r5,-12(fp)
    903c:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9040:	e0bffe17 	ldw	r2,-8(fp)
    9044:	10800017 	ldw	r2,0(r2)
    9048:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    904c:	e0bfff17 	ldw	r2,-4(fp)
    9050:	10c00a04 	addi	r3,r2,40
    9054:	e0bffe17 	ldw	r2,-8(fp)
    9058:	10800217 	ldw	r2,8(r2)
    905c:	100f883a 	mov	r7,r2
    9060:	e1bffc17 	ldw	r6,-16(fp)
    9064:	e17ffd17 	ldw	r5,-12(fp)
    9068:	1809883a 	mov	r4,r3
    906c:	00091700 	call	9170 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    9070:	e037883a 	mov	sp,fp
    9074:	dfc00117 	ldw	ra,4(sp)
    9078:	df000017 	ldw	fp,0(sp)
    907c:	dec00204 	addi	sp,sp,8
    9080:	f800283a 	ret

00009084 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    9084:	defff704 	addi	sp,sp,-36
    9088:	df000815 	stw	fp,32(sp)
    908c:	df000804 	addi	fp,sp,32
    9090:	e13ffb15 	stw	r4,-20(fp)
    9094:	e17ffa15 	stw	r5,-24(fp)
    9098:	e1bff915 	stw	r6,-28(fp)
    909c:	e1fff815 	stw	r7,-32(fp)
  unsigned int base = sp->base;
    90a0:	e0bffb17 	ldw	r2,-20(fp)
    90a4:	10800017 	ldw	r2,0(r2)
    90a8:	e0bffe15 	stw	r2,-8(fp)

  char * ptr = buffer;
    90ac:	e0bffa17 	ldw	r2,-24(fp)
    90b0:	e0bfff15 	stw	r2,-4(fp)
  char * end = buffer + space;
    90b4:	e0bff917 	ldw	r2,-28(fp)
    90b8:	e0fffa17 	ldw	r3,-24(fp)
    90bc:	1885883a 	add	r2,r3,r2
    90c0:	e0bffd15 	stw	r2,-12(fp)

  while (ptr < end)
    90c4:	00001206 	br	9110 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    90c8:	e0bffe17 	ldw	r2,-8(fp)
    90cc:	10800037 	ldwio	r2,0(r2)
    90d0:	e0bffc15 	stw	r2,-16(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    90d4:	e0bffc17 	ldw	r2,-16(fp)
    90d8:	10a0000c 	andi	r2,r2,32768
    90dc:	10000626 	beq	r2,zero,90f8 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    90e0:	e0bfff17 	ldw	r2,-4(fp)
    90e4:	10c00044 	addi	r3,r2,1
    90e8:	e0ffff15 	stw	r3,-4(fp)
    90ec:	e0fffc17 	ldw	r3,-16(fp)
    90f0:	10c00005 	stb	r3,0(r2)
    90f4:	00000606 	br	9110 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    90f8:	e0ffff17 	ldw	r3,-4(fp)
    90fc:	e0bffa17 	ldw	r2,-24(fp)
    9100:	1880071e 	bne	r3,r2,9120 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    9104:	e0bff817 	ldw	r2,-32(fp)
    9108:	1090000c 	andi	r2,r2,16384
    910c:	1000061e 	bne	r2,zero,9128 <altera_avalon_jtag_uart_read+0xa4>
  while (ptr < end)
    9110:	e0ffff17 	ldw	r3,-4(fp)
    9114:	e0bffd17 	ldw	r2,-12(fp)
    9118:	18bfeb36 	bltu	r3,r2,90c8 <altera_avalon_jtag_uart_read+0x44>
    911c:	00000306 	br	912c <altera_avalon_jtag_uart_read+0xa8>
      break;
    9120:	0001883a 	nop
    9124:	00000106 	br	912c <altera_avalon_jtag_uart_read+0xa8>
      break;   
    9128:	0001883a 	nop
    
  }

  if (ptr != buffer)
    912c:	e0ffff17 	ldw	r3,-4(fp)
    9130:	e0bffa17 	ldw	r2,-24(fp)
    9134:	18800426 	beq	r3,r2,9148 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    9138:	e0ffff17 	ldw	r3,-4(fp)
    913c:	e0bffa17 	ldw	r2,-24(fp)
    9140:	1885c83a 	sub	r2,r3,r2
    9144:	00000606 	br	9160 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    9148:	e0bff817 	ldw	r2,-32(fp)
    914c:	1090000c 	andi	r2,r2,16384
    9150:	10000226 	beq	r2,zero,915c <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    9154:	00bffd44 	movi	r2,-11
    9158:	00000106 	br	9160 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    915c:	00bffec4 	movi	r2,-5
}
    9160:	e037883a 	mov	sp,fp
    9164:	df000017 	ldw	fp,0(sp)
    9168:	dec00104 	addi	sp,sp,4
    916c:	f800283a 	ret

00009170 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    9170:	defff904 	addi	sp,sp,-28
    9174:	df000615 	stw	fp,24(sp)
    9178:	df000604 	addi	fp,sp,24
    917c:	e13ffd15 	stw	r4,-12(fp)
    9180:	e17ffc15 	stw	r5,-16(fp)
    9184:	e1bffb15 	stw	r6,-20(fp)
    9188:	e1fffa15 	stw	r7,-24(fp)
  unsigned int base = sp->base;
    918c:	e0bffd17 	ldw	r2,-12(fp)
    9190:	10800017 	ldw	r2,0(r2)
    9194:	e0bfff15 	stw	r2,-4(fp)

  const char * end = ptr + count;
    9198:	e0bffb17 	ldw	r2,-20(fp)
    919c:	e0fffc17 	ldw	r3,-16(fp)
    91a0:	1885883a 	add	r2,r3,r2
    91a4:	e0bffe15 	stw	r2,-8(fp)

  while (ptr < end)
    91a8:	00000e06 	br	91e4 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    91ac:	e0bfff17 	ldw	r2,-4(fp)
    91b0:	10800104 	addi	r2,r2,4
    91b4:	10800037 	ldwio	r2,0(r2)
    91b8:	10bfffec 	andhi	r2,r2,65535
    91bc:	10000926 	beq	r2,zero,91e4 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    91c0:	e0ffff17 	ldw	r3,-4(fp)
    91c4:	e0bffc17 	ldw	r2,-16(fp)
    91c8:	11000044 	addi	r4,r2,1
    91cc:	e13ffc15 	stw	r4,-16(fp)
    91d0:	10800003 	ldbu	r2,0(r2)
    91d4:	10803fcc 	andi	r2,r2,255
    91d8:	1080201c 	xori	r2,r2,128
    91dc:	10bfe004 	addi	r2,r2,-128
    91e0:	18800035 	stwio	r2,0(r3)
  while (ptr < end)
    91e4:	e0fffc17 	ldw	r3,-16(fp)
    91e8:	e0bffe17 	ldw	r2,-8(fp)
    91ec:	18bfef36 	bltu	r3,r2,91ac <altera_avalon_jtag_uart_write+0x3c>

  return count;
    91f0:	e0bffb17 	ldw	r2,-20(fp)
}
    91f4:	e037883a 	mov	sp,fp
    91f8:	df000017 	ldw	fp,0(sp)
    91fc:	dec00104 	addi	sp,sp,4
    9200:	f800283a 	ret

00009204 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    9204:	defffa04 	addi	sp,sp,-24
    9208:	dfc00515 	stw	ra,20(sp)
    920c:	df000415 	stw	fp,16(sp)
    9210:	df000404 	addi	fp,sp,16
    9214:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    9218:	0007883a 	mov	r3,zero
    921c:	e0bffc17 	ldw	r2,-16(fp)
    9220:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    9224:	e0bffc17 	ldw	r2,-16(fp)
    9228:	10800104 	addi	r2,r2,4
    922c:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
    9230:	0005303a 	rdctl	r2,status
    9234:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9238:	e0fffd17 	ldw	r3,-12(fp)
    923c:	00bfff84 	movi	r2,-2
    9240:	1884703a 	and	r2,r3,r2
    9244:	1001703a 	wrctl	status,r2
  return context;
    9248:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    924c:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
    9250:	0009e380 	call	9e38 <alt_tick>
    9254:	e0bfff17 	ldw	r2,-4(fp)
    9258:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    925c:	e0bffe17 	ldw	r2,-8(fp)
    9260:	1001703a 	wrctl	status,r2
}
    9264:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
    9268:	0001883a 	nop
    926c:	e037883a 	mov	sp,fp
    9270:	dfc00117 	ldw	ra,4(sp)
    9274:	df000017 	ldw	fp,0(sp)
    9278:	dec00204 	addi	sp,sp,8
    927c:	f800283a 	ret

00009280 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    9280:	defff804 	addi	sp,sp,-32
    9284:	dfc00715 	stw	ra,28(sp)
    9288:	df000615 	stw	fp,24(sp)
    928c:	df000604 	addi	fp,sp,24
    9290:	e13ffe15 	stw	r4,-8(fp)
    9294:	e17ffd15 	stw	r5,-12(fp)
    9298:	e1bffc15 	stw	r6,-16(fp)
    929c:	e1fffb15 	stw	r7,-20(fp)
    92a0:	e0bffb17 	ldw	r2,-20(fp)
    92a4:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    92a8:	d0a0c917 	ldw	r2,-31964(gp)
    92ac:	1000031e 	bne	r2,zero,92bc <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
    92b0:	e0bfff17 	ldw	r2,-4(fp)
    92b4:	d0a0c915 	stw	r2,-31964(gp)
    return 0;
    92b8:	00000106 	br	92c0 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
    92bc:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    92c0:	e0bffe17 	ldw	r2,-8(fp)
    92c4:	10800104 	addi	r2,r2,4
    92c8:	00c001c4 	movi	r3,7
    92cc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    92d0:	d8000015 	stw	zero,0(sp)
    92d4:	e1fffe17 	ldw	r7,-8(fp)
    92d8:	01800074 	movhi	r6,1
    92dc:	31a48104 	addi	r6,r6,-28156
    92e0:	e17ffc17 	ldw	r5,-16(fp)
    92e4:	e13ffd17 	ldw	r4,-12(fp)
    92e8:	00096c40 	call	96c4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    92ec:	0001883a 	nop
    92f0:	e037883a 	mov	sp,fp
    92f4:	dfc00117 	ldw	ra,4(sp)
    92f8:	df000017 	ldw	fp,0(sp)
    92fc:	dec00204 	addi	sp,sp,8
    9300:	f800283a 	ret

00009304 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    9304:	defffa04 	addi	sp,sp,-24
    9308:	dfc00515 	stw	ra,20(sp)
    930c:	df000415 	stw	fp,16(sp)
    9310:	df000404 	addi	fp,sp,16
    9314:	e13ffc15 	stw	r4,-16(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    9318:	00800244 	movi	r2,9
    931c:	e0bffe15 	stw	r2,-8(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    9320:	014003f4 	movhi	r5,15
    9324:	29509004 	addi	r5,r5,16960
    9328:	e13ffe17 	ldw	r4,-8(fp)
    932c:	0008c140 	call	8c14 <__mulsi3>
    9330:	100b883a 	mov	r5,r2
    9334:	0100bef4 	movhi	r4,763
    9338:	213c2004 	addi	r4,r4,-3968
    933c:	0008b540 	call	8b54 <__udivsi3>
  big_loops = us / (INT_MAX/
    9340:	100b883a 	mov	r5,r2
    9344:	01200034 	movhi	r4,32768
    9348:	213fffc4 	addi	r4,r4,-1
    934c:	0008b540 	call	8b54 <__udivsi3>
    9350:	100b883a 	mov	r5,r2
    9354:	e13ffc17 	ldw	r4,-16(fp)
    9358:	0008b540 	call	8b54 <__udivsi3>
    935c:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
    9360:	e0bffd17 	ldw	r2,-12(fp)
    9364:	10002a26 	beq	r2,zero,9410 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    9368:	e03fff15 	stw	zero,-4(fp)
    936c:	00001706 	br	93cc <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    9370:	00a00034 	movhi	r2,32768
    9374:	10bfffc4 	addi	r2,r2,-1
    9378:	10bfffc4 	addi	r2,r2,-1
    937c:	103ffe1e 	bne	r2,zero,9378 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    9380:	014003f4 	movhi	r5,15
    9384:	29509004 	addi	r5,r5,16960
    9388:	e13ffe17 	ldw	r4,-8(fp)
    938c:	0008c140 	call	8c14 <__mulsi3>
      us -= (INT_MAX/(ALT_CPU_FREQ/
    9390:	100b883a 	mov	r5,r2
    9394:	0100bef4 	movhi	r4,763
    9398:	213c2004 	addi	r4,r4,-3968
    939c:	0008b540 	call	8b54 <__udivsi3>
    93a0:	100b883a 	mov	r5,r2
    93a4:	01200034 	movhi	r4,32768
    93a8:	213fffc4 	addi	r4,r4,-1
    93ac:	0008b540 	call	8b54 <__udivsi3>
    93b0:	1007883a 	mov	r3,r2
    93b4:	e0bffc17 	ldw	r2,-16(fp)
    93b8:	10c5c83a 	sub	r2,r2,r3
    93bc:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
    93c0:	e0bfff17 	ldw	r2,-4(fp)
    93c4:	10800044 	addi	r2,r2,1
    93c8:	e0bfff15 	stw	r2,-4(fp)
    93cc:	e0ffff17 	ldw	r3,-4(fp)
    93d0:	e0bffd17 	ldw	r2,-12(fp)
    93d4:	18bfe616 	blt	r3,r2,9370 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    93d8:	014003f4 	movhi	r5,15
    93dc:	29509004 	addi	r5,r5,16960
    93e0:	e13ffe17 	ldw	r4,-8(fp)
    93e4:	0008c140 	call	8c14 <__mulsi3>
    93e8:	100b883a 	mov	r5,r2
    93ec:	0100bef4 	movhi	r4,763
    93f0:	213c2004 	addi	r4,r4,-3968
    93f4:	0008b540 	call	8b54 <__udivsi3>
    93f8:	e17ffc17 	ldw	r5,-16(fp)
    93fc:	1009883a 	mov	r4,r2
    9400:	0008c140 	call	8c14 <__mulsi3>
    __asm__ volatile (
    9404:	10bfffc4 	addi	r2,r2,-1
    9408:	103ffe1e 	bne	r2,zero,9404 <alt_busy_sleep+0x100>
    940c:	00000d06 	br	9444 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    9410:	014003f4 	movhi	r5,15
    9414:	29509004 	addi	r5,r5,16960
    9418:	e13ffe17 	ldw	r4,-8(fp)
    941c:	0008c140 	call	8c14 <__mulsi3>
    9420:	100b883a 	mov	r5,r2
    9424:	0100bef4 	movhi	r4,763
    9428:	213c2004 	addi	r4,r4,-3968
    942c:	0008b540 	call	8b54 <__udivsi3>
    9430:	e17ffc17 	ldw	r5,-16(fp)
    9434:	1009883a 	mov	r4,r2
    9438:	0008c140 	call	8c14 <__mulsi3>
    __asm__ volatile (
    943c:	10bfffc4 	addi	r2,r2,-1
    9440:	00bffe16 	blt	zero,r2,943c <alt_busy_sleep+0x138>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    9444:	0005883a 	mov	r2,zero
}
    9448:	e037883a 	mov	sp,fp
    944c:	dfc00117 	ldw	ra,4(sp)
    9450:	df000017 	ldw	fp,0(sp)
    9454:	dec00204 	addi	sp,sp,8
    9458:	f800283a 	ret

0000945c <alt_get_errno>:
{
    945c:	defffe04 	addi	sp,sp,-8
    9460:	dfc00115 	stw	ra,4(sp)
    9464:	df000015 	stw	fp,0(sp)
    9468:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    946c:	d0a00717 	ldw	r2,-32740(gp)
    9470:	10000326 	beq	r2,zero,9480 <alt_get_errno+0x24>
    9474:	d0a00717 	ldw	r2,-32740(gp)
    9478:	103ee83a 	callr	r2
    947c:	00000106 	br	9484 <alt_get_errno+0x28>
    9480:	d0a0c404 	addi	r2,gp,-31984
}
    9484:	e037883a 	mov	sp,fp
    9488:	dfc00117 	ldw	ra,4(sp)
    948c:	df000017 	ldw	fp,0(sp)
    9490:	dec00204 	addi	sp,sp,8
    9494:	f800283a 	ret

00009498 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9498:	defffb04 	addi	sp,sp,-20
    949c:	dfc00415 	stw	ra,16(sp)
    94a0:	df000315 	stw	fp,12(sp)
    94a4:	df000304 	addi	fp,sp,12
    94a8:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    94ac:	e0bffd17 	ldw	r2,-12(fp)
    94b0:	10000916 	blt	r2,zero,94d8 <close+0x40>
    94b4:	e0fffd17 	ldw	r3,-12(fp)
    94b8:	1805883a 	mov	r2,r3
    94bc:	1085883a 	add	r2,r2,r2
    94c0:	10c5883a 	add	r2,r2,r3
    94c4:	100490ba 	slli	r2,r2,2
    94c8:	00c00074 	movhi	r3,1
    94cc:	18e96404 	addi	r3,r3,-23152
    94d0:	10c5883a 	add	r2,r2,r3
    94d4:	00000106 	br	94dc <close+0x44>
    94d8:	0005883a 	mov	r2,zero
    94dc:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
    94e0:	e0bfff17 	ldw	r2,-4(fp)
    94e4:	10001926 	beq	r2,zero,954c <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    94e8:	e0bfff17 	ldw	r2,-4(fp)
    94ec:	10800017 	ldw	r2,0(r2)
    94f0:	10800417 	ldw	r2,16(r2)
    94f4:	10000626 	beq	r2,zero,9510 <close+0x78>
    94f8:	e0bfff17 	ldw	r2,-4(fp)
    94fc:	10800017 	ldw	r2,0(r2)
    9500:	10800417 	ldw	r2,16(r2)
    9504:	e13fff17 	ldw	r4,-4(fp)
    9508:	103ee83a 	callr	r2
    950c:	00000106 	br	9514 <close+0x7c>
    9510:	0005883a 	mov	r2,zero
    9514:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9518:	e13ffd17 	ldw	r4,-12(fp)
    951c:	0009d240 	call	9d24 <alt_release_fd>
    if (rval < 0)
    9520:	e0bffe17 	ldw	r2,-8(fp)
    9524:	1000070e 	bge	r2,zero,9544 <close+0xac>
    {
      ALT_ERRNO = -rval;
    9528:	000945c0 	call	945c <alt_get_errno>
    952c:	1007883a 	mov	r3,r2
    9530:	e0bffe17 	ldw	r2,-8(fp)
    9534:	0085c83a 	sub	r2,zero,r2
    9538:	18800015 	stw	r2,0(r3)
      return -1;
    953c:	00bfffc4 	movi	r2,-1
    9540:	00000706 	br	9560 <close+0xc8>
    }
    return 0;
    9544:	0005883a 	mov	r2,zero
    9548:	00000506 	br	9560 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    954c:	000945c0 	call	945c <alt_get_errno>
    9550:	1007883a 	mov	r3,r2
    9554:	00801444 	movi	r2,81
    9558:	18800015 	stw	r2,0(r3)
    return -1;
    955c:	00bfffc4 	movi	r2,-1
  }
}
    9560:	e037883a 	mov	sp,fp
    9564:	dfc00117 	ldw	ra,4(sp)
    9568:	df000017 	ldw	fp,0(sp)
    956c:	dec00204 	addi	sp,sp,8
    9570:	f800283a 	ret

00009574 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9574:	deffff04 	addi	sp,sp,-4
    9578:	df000015 	stw	fp,0(sp)
    957c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9580:	0001883a 	nop
    9584:	e037883a 	mov	sp,fp
    9588:	df000017 	ldw	fp,0(sp)
    958c:	dec00104 	addi	sp,sp,4
    9590:	f800283a 	ret

00009594 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9594:	defffc04 	addi	sp,sp,-16
    9598:	df000315 	stw	fp,12(sp)
    959c:	df000304 	addi	fp,sp,12
    95a0:	e13fff15 	stw	r4,-4(fp)
    95a4:	e17ffe15 	stw	r5,-8(fp)
    95a8:	e1bffd15 	stw	r6,-12(fp)
  return len;
    95ac:	e0bffd17 	ldw	r2,-12(fp)
}
    95b0:	e037883a 	mov	sp,fp
    95b4:	df000017 	ldw	fp,0(sp)
    95b8:	dec00104 	addi	sp,sp,4
    95bc:	f800283a 	ret

000095c0 <alt_get_errno>:
{
    95c0:	defffe04 	addi	sp,sp,-8
    95c4:	dfc00115 	stw	ra,4(sp)
    95c8:	df000015 	stw	fp,0(sp)
    95cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    95d0:	d0a00717 	ldw	r2,-32740(gp)
    95d4:	10000326 	beq	r2,zero,95e4 <alt_get_errno+0x24>
    95d8:	d0a00717 	ldw	r2,-32740(gp)
    95dc:	103ee83a 	callr	r2
    95e0:	00000106 	br	95e8 <alt_get_errno+0x28>
    95e4:	d0a0c404 	addi	r2,gp,-31984
}
    95e8:	e037883a 	mov	sp,fp
    95ec:	dfc00117 	ldw	ra,4(sp)
    95f0:	df000017 	ldw	fp,0(sp)
    95f4:	dec00204 	addi	sp,sp,8
    95f8:	f800283a 	ret

000095fc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    95fc:	defffa04 	addi	sp,sp,-24
    9600:	dfc00515 	stw	ra,20(sp)
    9604:	df000415 	stw	fp,16(sp)
    9608:	df000404 	addi	fp,sp,16
    960c:	e13ffd15 	stw	r4,-12(fp)
    9610:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    9614:	e0bffd17 	ldw	r2,-12(fp)
    9618:	10000326 	beq	r2,zero,9628 <alt_dev_llist_insert+0x2c>
    961c:	e0bffd17 	ldw	r2,-12(fp)
    9620:	10800217 	ldw	r2,8(r2)
    9624:	1000061e 	bne	r2,zero,9640 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    9628:	00095c00 	call	95c0 <alt_get_errno>
    962c:	1007883a 	mov	r3,r2
    9630:	00800584 	movi	r2,22
    9634:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    9638:	00bffa84 	movi	r2,-22
    963c:	00001406 	br	9690 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    9640:	e0bffd17 	ldw	r2,-12(fp)
    9644:	e0fffc17 	ldw	r3,-16(fp)
    9648:	e0ffff15 	stw	r3,-4(fp)
    964c:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9650:	e0bffe17 	ldw	r2,-8(fp)
    9654:	e0ffff17 	ldw	r3,-4(fp)
    9658:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    965c:	e0bfff17 	ldw	r2,-4(fp)
    9660:	10c00017 	ldw	r3,0(r2)
    9664:	e0bffe17 	ldw	r2,-8(fp)
    9668:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    966c:	e0bfff17 	ldw	r2,-4(fp)
    9670:	10800017 	ldw	r2,0(r2)
    9674:	e0fffe17 	ldw	r3,-8(fp)
    9678:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    967c:	e0bfff17 	ldw	r2,-4(fp)
    9680:	e0fffe17 	ldw	r3,-8(fp)
    9684:	10c00015 	stw	r3,0(r2)
}
    9688:	0001883a 	nop

  return 0;  
    968c:	0005883a 	mov	r2,zero
}
    9690:	e037883a 	mov	sp,fp
    9694:	dfc00117 	ldw	ra,4(sp)
    9698:	df000017 	ldw	fp,0(sp)
    969c:	dec00204 	addi	sp,sp,8
    96a0:	f800283a 	ret

000096a4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    96a4:	deffff04 	addi	sp,sp,-4
    96a8:	df000015 	stw	fp,0(sp)
    96ac:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    96b0:	0001883a 	nop
    96b4:	e037883a 	mov	sp,fp
    96b8:	df000017 	ldw	fp,0(sp)
    96bc:	dec00104 	addi	sp,sp,4
    96c0:	f800283a 	ret

000096c4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    96c4:	defff904 	addi	sp,sp,-28
    96c8:	dfc00615 	stw	ra,24(sp)
    96cc:	df000515 	stw	fp,20(sp)
    96d0:	df000504 	addi	fp,sp,20
    96d4:	e13fff15 	stw	r4,-4(fp)
    96d8:	e17ffe15 	stw	r5,-8(fp)
    96dc:	e1bffd15 	stw	r6,-12(fp)
    96e0:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    96e4:	e0800217 	ldw	r2,8(fp)
    96e8:	d8800015 	stw	r2,0(sp)
    96ec:	e1fffc17 	ldw	r7,-16(fp)
    96f0:	e1bffd17 	ldw	r6,-12(fp)
    96f4:	e17ffe17 	ldw	r5,-8(fp)
    96f8:	e13fff17 	ldw	r4,-4(fp)
    96fc:	00098740 	call	9874 <alt_iic_isr_register>
}  
    9700:	e037883a 	mov	sp,fp
    9704:	dfc00117 	ldw	ra,4(sp)
    9708:	df000017 	ldw	fp,0(sp)
    970c:	dec00204 	addi	sp,sp,8
    9710:	f800283a 	ret

00009714 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    9714:	defff904 	addi	sp,sp,-28
    9718:	df000615 	stw	fp,24(sp)
    971c:	df000604 	addi	fp,sp,24
    9720:	e13ffb15 	stw	r4,-20(fp)
    9724:	e17ffa15 	stw	r5,-24(fp)
    9728:	e0bffa17 	ldw	r2,-24(fp)
    972c:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
    9730:	0005303a 	rdctl	r2,status
    9734:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9738:	e0fffe17 	ldw	r3,-8(fp)
    973c:	00bfff84 	movi	r2,-2
    9740:	1884703a 	and	r2,r3,r2
    9744:	1001703a 	wrctl	status,r2
  return context;
    9748:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    974c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    9750:	00c00044 	movi	r3,1
    9754:	e0bfff17 	ldw	r2,-4(fp)
    9758:	1884983a 	sll	r2,r3,r2
    975c:	1007883a 	mov	r3,r2
    9760:	d0a0c817 	ldw	r2,-31968(gp)
    9764:	1884b03a 	or	r2,r3,r2
    9768:	d0a0c815 	stw	r2,-31968(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    976c:	d0a0c817 	ldw	r2,-31968(gp)
    9770:	100170fa 	wrctl	ienable,r2
    9774:	e0bffd17 	ldw	r2,-12(fp)
    9778:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    977c:	e0bffc17 	ldw	r2,-16(fp)
    9780:	1001703a 	wrctl	status,r2
}
    9784:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
    9788:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    978c:	e037883a 	mov	sp,fp
    9790:	df000017 	ldw	fp,0(sp)
    9794:	dec00104 	addi	sp,sp,4
    9798:	f800283a 	ret

0000979c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    979c:	defff904 	addi	sp,sp,-28
    97a0:	df000615 	stw	fp,24(sp)
    97a4:	df000604 	addi	fp,sp,24
    97a8:	e13ffb15 	stw	r4,-20(fp)
    97ac:	e17ffa15 	stw	r5,-24(fp)
    97b0:	e0bffa17 	ldw	r2,-24(fp)
    97b4:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
    97b8:	0005303a 	rdctl	r2,status
    97bc:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    97c0:	e0fffe17 	ldw	r3,-8(fp)
    97c4:	00bfff84 	movi	r2,-2
    97c8:	1884703a 	and	r2,r3,r2
    97cc:	1001703a 	wrctl	status,r2
  return context;
    97d0:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
    97d4:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
    97d8:	00c00044 	movi	r3,1
    97dc:	e0bfff17 	ldw	r2,-4(fp)
    97e0:	1884983a 	sll	r2,r3,r2
    97e4:	0084303a 	nor	r2,zero,r2
    97e8:	1007883a 	mov	r3,r2
    97ec:	d0a0c817 	ldw	r2,-31968(gp)
    97f0:	1884703a 	and	r2,r3,r2
    97f4:	d0a0c815 	stw	r2,-31968(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    97f8:	d0a0c817 	ldw	r2,-31968(gp)
    97fc:	100170fa 	wrctl	ienable,r2
    9800:	e0bffd17 	ldw	r2,-12(fp)
    9804:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
    9808:	e0bffc17 	ldw	r2,-16(fp)
    980c:	1001703a 	wrctl	status,r2
}
    9810:	0001883a 	nop
  return 0;
    9814:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    9818:	e037883a 	mov	sp,fp
    981c:	df000017 	ldw	fp,0(sp)
    9820:	dec00104 	addi	sp,sp,4
    9824:	f800283a 	ret

00009828 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    9828:	defffc04 	addi	sp,sp,-16
    982c:	df000315 	stw	fp,12(sp)
    9830:	df000304 	addi	fp,sp,12
    9834:	e13ffe15 	stw	r4,-8(fp)
    9838:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    983c:	000530fa 	rdctl	r2,ienable
    9840:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    9844:	00c00044 	movi	r3,1
    9848:	e0bffd17 	ldw	r2,-12(fp)
    984c:	1884983a 	sll	r2,r3,r2
    9850:	1007883a 	mov	r3,r2
    9854:	e0bfff17 	ldw	r2,-4(fp)
    9858:	1884703a 	and	r2,r3,r2
    985c:	1004c03a 	cmpne	r2,r2,zero
    9860:	10803fcc 	andi	r2,r2,255
}
    9864:	e037883a 	mov	sp,fp
    9868:	df000017 	ldw	fp,0(sp)
    986c:	dec00104 	addi	sp,sp,4
    9870:	f800283a 	ret

00009874 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9874:	defff504 	addi	sp,sp,-44
    9878:	dfc00a15 	stw	ra,40(sp)
    987c:	df000915 	stw	fp,36(sp)
    9880:	df000904 	addi	fp,sp,36
    9884:	e13ffa15 	stw	r4,-24(fp)
    9888:	e17ff915 	stw	r5,-28(fp)
    988c:	e1bff815 	stw	r6,-32(fp)
    9890:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
    9894:	00bffa84 	movi	r2,-22
    9898:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    989c:	e0bff917 	ldw	r2,-28(fp)
    98a0:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    98a4:	e0bffe17 	ldw	r2,-8(fp)
    98a8:	10800808 	cmpgei	r2,r2,32
    98ac:	1000251e 	bne	r2,zero,9944 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
    98b0:	0005303a 	rdctl	r2,status
    98b4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    98b8:	e0fffc17 	ldw	r3,-16(fp)
    98bc:	00bfff84 	movi	r2,-2
    98c0:	1884703a 	and	r2,r3,r2
    98c4:	1001703a 	wrctl	status,r2
  return context;
    98c8:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    98cc:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
    98d0:	e0bffe17 	ldw	r2,-8(fp)
    98d4:	100890fa 	slli	r4,r2,3
    98d8:	e0fff817 	ldw	r3,-32(fp)
    98dc:	00800074 	movhi	r2,1
    98e0:	2085883a 	add	r2,r4,r2
    98e4:	10ea9015 	stw	r3,-21952(r2)
    alt_irq[id].context = isr_context;
    98e8:	e0bffe17 	ldw	r2,-8(fp)
    98ec:	100890fa 	slli	r4,r2,3
    98f0:	e0fff717 	ldw	r3,-36(fp)
    98f4:	00800074 	movhi	r2,1
    98f8:	2085883a 	add	r2,r4,r2
    98fc:	10ea9115 	stw	r3,-21948(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    9900:	e0bff817 	ldw	r2,-32(fp)
    9904:	10000526 	beq	r2,zero,991c <alt_iic_isr_register+0xa8>
    9908:	e0bffe17 	ldw	r2,-8(fp)
    990c:	100b883a 	mov	r5,r2
    9910:	e13ffa17 	ldw	r4,-24(fp)
    9914:	00097140 	call	9714 <alt_ic_irq_enable>
    9918:	00000406 	br	992c <alt_iic_isr_register+0xb8>
    991c:	e0bffe17 	ldw	r2,-8(fp)
    9920:	100b883a 	mov	r5,r2
    9924:	e13ffa17 	ldw	r4,-24(fp)
    9928:	000979c0 	call	979c <alt_ic_irq_disable>
    992c:	e0bfff15 	stw	r2,-4(fp)
    9930:	e0bffd17 	ldw	r2,-12(fp)
    9934:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    9938:	e0bffb17 	ldw	r2,-20(fp)
    993c:	1001703a 	wrctl	status,r2
}
    9940:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
    9944:	e0bfff17 	ldw	r2,-4(fp)
}
    9948:	e037883a 	mov	sp,fp
    994c:	dfc00117 	ldw	ra,4(sp)
    9950:	df000017 	ldw	fp,0(sp)
    9954:	dec00204 	addi	sp,sp,8
    9958:	f800283a 	ret

0000995c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    995c:	defff904 	addi	sp,sp,-28
    9960:	dfc00615 	stw	ra,24(sp)
    9964:	df000515 	stw	fp,20(sp)
    9968:	df000504 	addi	fp,sp,20
    996c:	e13ffe15 	stw	r4,-8(fp)
    9970:	e17ffd15 	stw	r5,-12(fp)
    9974:	e1bffc15 	stw	r6,-16(fp)
    9978:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
    997c:	e1bffb17 	ldw	r6,-20(fp)
    9980:	e17ffc17 	ldw	r5,-16(fp)
    9984:	e13ffd17 	ldw	r4,-12(fp)
    9988:	0009bc40 	call	9bc4 <open>
    998c:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
    9990:	e0bfff17 	ldw	r2,-4(fp)
    9994:	10002016 	blt	r2,zero,9a18 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
    9998:	e0ffff17 	ldw	r3,-4(fp)
    999c:	1805883a 	mov	r2,r3
    99a0:	1085883a 	add	r2,r2,r2
    99a4:	10c5883a 	add	r2,r2,r3
    99a8:	100490ba 	slli	r2,r2,2
    99ac:	00c00074 	movhi	r3,1
    99b0:	10c7883a 	add	r3,r2,r3
    99b4:	18e96417 	ldw	r3,-23152(r3)
    99b8:	e0bffe17 	ldw	r2,-8(fp)
    99bc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    99c0:	e0ffff17 	ldw	r3,-4(fp)
    99c4:	1805883a 	mov	r2,r3
    99c8:	1085883a 	add	r2,r2,r2
    99cc:	10c5883a 	add	r2,r2,r3
    99d0:	100490ba 	slli	r2,r2,2
    99d4:	00c00074 	movhi	r3,1
    99d8:	10c7883a 	add	r3,r2,r3
    99dc:	18e96517 	ldw	r3,-23148(r3)
    99e0:	e0bffe17 	ldw	r2,-8(fp)
    99e4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    99e8:	e0ffff17 	ldw	r3,-4(fp)
    99ec:	1805883a 	mov	r2,r3
    99f0:	1085883a 	add	r2,r2,r2
    99f4:	10c5883a 	add	r2,r2,r3
    99f8:	100490ba 	slli	r2,r2,2
    99fc:	00c00074 	movhi	r3,1
    9a00:	10c7883a 	add	r3,r2,r3
    9a04:	18e96617 	ldw	r3,-23144(r3)
    9a08:	e0bffe17 	ldw	r2,-8(fp)
    9a0c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    9a10:	e13fff17 	ldw	r4,-4(fp)
    9a14:	0009d240 	call	9d24 <alt_release_fd>
  }
} 
    9a18:	0001883a 	nop
    9a1c:	e037883a 	mov	sp,fp
    9a20:	dfc00117 	ldw	ra,4(sp)
    9a24:	df000017 	ldw	fp,0(sp)
    9a28:	dec00204 	addi	sp,sp,8
    9a2c:	f800283a 	ret

00009a30 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9a30:	defffb04 	addi	sp,sp,-20
    9a34:	dfc00415 	stw	ra,16(sp)
    9a38:	df000315 	stw	fp,12(sp)
    9a3c:	df000304 	addi	fp,sp,12
    9a40:	e13fff15 	stw	r4,-4(fp)
    9a44:	e17ffe15 	stw	r5,-8(fp)
    9a48:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    9a4c:	01c07fc4 	movi	r7,511
    9a50:	01800044 	movi	r6,1
    9a54:	e17fff17 	ldw	r5,-4(fp)
    9a58:	01000074 	movhi	r4,1
    9a5c:	21296704 	addi	r4,r4,-23140
    9a60:	000995c0 	call	995c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    9a64:	01c07fc4 	movi	r7,511
    9a68:	000d883a 	mov	r6,zero
    9a6c:	e17ffe17 	ldw	r5,-8(fp)
    9a70:	01000074 	movhi	r4,1
    9a74:	21296404 	addi	r4,r4,-23152
    9a78:	000995c0 	call	995c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    9a7c:	01c07fc4 	movi	r7,511
    9a80:	01800044 	movi	r6,1
    9a84:	e17ffd17 	ldw	r5,-12(fp)
    9a88:	01000074 	movhi	r4,1
    9a8c:	21296a04 	addi	r4,r4,-23128
    9a90:	000995c0 	call	995c <alt_open_fd>
}  
    9a94:	0001883a 	nop
    9a98:	e037883a 	mov	sp,fp
    9a9c:	dfc00117 	ldw	ra,4(sp)
    9aa0:	df000017 	ldw	fp,0(sp)
    9aa4:	dec00204 	addi	sp,sp,8
    9aa8:	f800283a 	ret

00009aac <alt_get_errno>:
{
    9aac:	defffe04 	addi	sp,sp,-8
    9ab0:	dfc00115 	stw	ra,4(sp)
    9ab4:	df000015 	stw	fp,0(sp)
    9ab8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9abc:	d0a00717 	ldw	r2,-32740(gp)
    9ac0:	10000326 	beq	r2,zero,9ad0 <alt_get_errno+0x24>
    9ac4:	d0a00717 	ldw	r2,-32740(gp)
    9ac8:	103ee83a 	callr	r2
    9acc:	00000106 	br	9ad4 <alt_get_errno+0x28>
    9ad0:	d0a0c404 	addi	r2,gp,-31984
}
    9ad4:	e037883a 	mov	sp,fp
    9ad8:	dfc00117 	ldw	ra,4(sp)
    9adc:	df000017 	ldw	fp,0(sp)
    9ae0:	dec00204 	addi	sp,sp,8
    9ae4:	f800283a 	ret

00009ae8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    9ae8:	defffd04 	addi	sp,sp,-12
    9aec:	df000215 	stw	fp,8(sp)
    9af0:	df000204 	addi	fp,sp,8
    9af4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    9af8:	e0bffe17 	ldw	r2,-8(fp)
    9afc:	10800217 	ldw	r2,8(r2)
    9b00:	10d00034 	orhi	r3,r2,16384
    9b04:	e0bffe17 	ldw	r2,-8(fp)
    9b08:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9b0c:	e03fff15 	stw	zero,-4(fp)
    9b10:	00002306 	br	9ba0 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9b14:	e0ffff17 	ldw	r3,-4(fp)
    9b18:	1805883a 	mov	r2,r3
    9b1c:	1085883a 	add	r2,r2,r2
    9b20:	10c5883a 	add	r2,r2,r3
    9b24:	100490ba 	slli	r2,r2,2
    9b28:	00c00074 	movhi	r3,1
    9b2c:	10c7883a 	add	r3,r2,r3
    9b30:	18e96417 	ldw	r3,-23152(r3)
    9b34:	e0bffe17 	ldw	r2,-8(fp)
    9b38:	10800017 	ldw	r2,0(r2)
    9b3c:	1880151e 	bne	r3,r2,9b94 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    9b40:	e0ffff17 	ldw	r3,-4(fp)
    9b44:	1805883a 	mov	r2,r3
    9b48:	1085883a 	add	r2,r2,r2
    9b4c:	10c5883a 	add	r2,r2,r3
    9b50:	100490ba 	slli	r2,r2,2
    9b54:	00c00074 	movhi	r3,1
    9b58:	10c7883a 	add	r3,r2,r3
    9b5c:	18a96617 	ldw	r2,-23144(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
    9b60:	10000c0e 	bge	r2,zero,9b94 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
    9b64:	e0ffff17 	ldw	r3,-4(fp)
    9b68:	1805883a 	mov	r2,r3
    9b6c:	1085883a 	add	r2,r2,r2
    9b70:	10c5883a 	add	r2,r2,r3
    9b74:	100490ba 	slli	r2,r2,2
    9b78:	00c00074 	movhi	r3,1
    9b7c:	18e96404 	addi	r3,r3,-23152
    9b80:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    9b84:	e0fffe17 	ldw	r3,-8(fp)
    9b88:	18800226 	beq	r3,r2,9b94 <alt_file_locked+0xac>
    {
      return -EACCES;
    9b8c:	00bffcc4 	movi	r2,-13
    9b90:	00000806 	br	9bb4 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
    9b94:	e0bfff17 	ldw	r2,-4(fp)
    9b98:	10800044 	addi	r2,r2,1
    9b9c:	e0bfff15 	stw	r2,-4(fp)
    9ba0:	d0a00617 	ldw	r2,-32744(gp)
    9ba4:	1007883a 	mov	r3,r2
    9ba8:	e0bfff17 	ldw	r2,-4(fp)
    9bac:	18bfd92e 	bgeu	r3,r2,9b14 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    9bb0:	0005883a 	mov	r2,zero
}
    9bb4:	e037883a 	mov	sp,fp
    9bb8:	df000017 	ldw	fp,0(sp)
    9bbc:	dec00104 	addi	sp,sp,4
    9bc0:	f800283a 	ret

00009bc4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    9bc4:	defff604 	addi	sp,sp,-40
    9bc8:	dfc00915 	stw	ra,36(sp)
    9bcc:	df000815 	stw	fp,32(sp)
    9bd0:	df000804 	addi	fp,sp,32
    9bd4:	e13ffa15 	stw	r4,-24(fp)
    9bd8:	e17ff915 	stw	r5,-28(fp)
    9bdc:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    9be0:	00bfffc4 	movi	r2,-1
    9be4:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
    9be8:	00bffb44 	movi	r2,-19
    9bec:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
    9bf0:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    9bf4:	d1600404 	addi	r5,gp,-32752
    9bf8:	e13ffa17 	ldw	r4,-24(fp)
    9bfc:	0009f640 	call	9f64 <alt_find_dev>
    9c00:	e0bfff15 	stw	r2,-4(fp)
    9c04:	e0bfff17 	ldw	r2,-4(fp)
    9c08:	1000051e 	bne	r2,zero,9c20 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    9c0c:	e13ffa17 	ldw	r4,-24(fp)
    9c10:	0009ff40 	call	9ff4 <alt_find_file>
    9c14:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
    9c18:	00800044 	movi	r2,1
    9c1c:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    9c20:	e0bfff17 	ldw	r2,-4(fp)
    9c24:	10002c26 	beq	r2,zero,9cd8 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
    9c28:	e13fff17 	ldw	r4,-4(fp)
    9c2c:	000a0fc0 	call	a0fc <alt_get_fd>
    9c30:	e0bffe15 	stw	r2,-8(fp)
    9c34:	e0bffe17 	ldw	r2,-8(fp)
    9c38:	1000030e 	bge	r2,zero,9c48 <open+0x84>
    {
      status = index;
    9c3c:	e0bffe17 	ldw	r2,-8(fp)
    9c40:	e0bffd15 	stw	r2,-12(fp)
    9c44:	00002606 	br	9ce0 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
    9c48:	e0fffe17 	ldw	r3,-8(fp)
    9c4c:	1805883a 	mov	r2,r3
    9c50:	1085883a 	add	r2,r2,r2
    9c54:	10c5883a 	add	r2,r2,r3
    9c58:	100490ba 	slli	r2,r2,2
    9c5c:	00c00074 	movhi	r3,1
    9c60:	18e96404 	addi	r3,r3,-23152
    9c64:	10c5883a 	add	r2,r2,r3
    9c68:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    9c6c:	e0fff917 	ldw	r3,-28(fp)
    9c70:	00900034 	movhi	r2,16384
    9c74:	10bfffc4 	addi	r2,r2,-1
    9c78:	1886703a 	and	r3,r3,r2
    9c7c:	e0bffb17 	ldw	r2,-20(fp)
    9c80:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    9c84:	e0bffc17 	ldw	r2,-16(fp)
    9c88:	1000051e 	bne	r2,zero,9ca0 <open+0xdc>
    9c8c:	e13ffb17 	ldw	r4,-20(fp)
    9c90:	0009ae80 	call	9ae8 <alt_file_locked>
    9c94:	e0bffd15 	stw	r2,-12(fp)
    9c98:	e0bffd17 	ldw	r2,-12(fp)
    9c9c:	10001016 	blt	r2,zero,9ce0 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    9ca0:	e0bfff17 	ldw	r2,-4(fp)
    9ca4:	10800317 	ldw	r2,12(r2)
    9ca8:	10000826 	beq	r2,zero,9ccc <open+0x108>
    9cac:	e0bfff17 	ldw	r2,-4(fp)
    9cb0:	10800317 	ldw	r2,12(r2)
    9cb4:	e1fff817 	ldw	r7,-32(fp)
    9cb8:	e1bff917 	ldw	r6,-28(fp)
    9cbc:	e17ffa17 	ldw	r5,-24(fp)
    9cc0:	e13ffb17 	ldw	r4,-20(fp)
    9cc4:	103ee83a 	callr	r2
    9cc8:	00000106 	br	9cd0 <open+0x10c>
    9ccc:	0005883a 	mov	r2,zero
    9cd0:	e0bffd15 	stw	r2,-12(fp)
    9cd4:	00000206 	br	9ce0 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    9cd8:	00bffb44 	movi	r2,-19
    9cdc:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    9ce0:	e0bffd17 	ldw	r2,-12(fp)
    9ce4:	1000090e 	bge	r2,zero,9d0c <open+0x148>
  {
    alt_release_fd (index);  
    9ce8:	e13ffe17 	ldw	r4,-8(fp)
    9cec:	0009d240 	call	9d24 <alt_release_fd>
    ALT_ERRNO = -status;
    9cf0:	0009aac0 	call	9aac <alt_get_errno>
    9cf4:	1007883a 	mov	r3,r2
    9cf8:	e0bffd17 	ldw	r2,-12(fp)
    9cfc:	0085c83a 	sub	r2,zero,r2
    9d00:	18800015 	stw	r2,0(r3)
    return -1;
    9d04:	00bfffc4 	movi	r2,-1
    9d08:	00000106 	br	9d10 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
    9d0c:	e0bffe17 	ldw	r2,-8(fp)
}
    9d10:	e037883a 	mov	sp,fp
    9d14:	dfc00117 	ldw	ra,4(sp)
    9d18:	df000017 	ldw	fp,0(sp)
    9d1c:	dec00204 	addi	sp,sp,8
    9d20:	f800283a 	ret

00009d24 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    9d24:	defffe04 	addi	sp,sp,-8
    9d28:	df000115 	stw	fp,4(sp)
    9d2c:	df000104 	addi	fp,sp,4
    9d30:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    9d34:	e0bfff17 	ldw	r2,-4(fp)
    9d38:	108000d0 	cmplti	r2,r2,3
    9d3c:	1000101e 	bne	r2,zero,9d80 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
    9d40:	e0ffff17 	ldw	r3,-4(fp)
    9d44:	1805883a 	mov	r2,r3
    9d48:	1085883a 	add	r2,r2,r2
    9d4c:	10c5883a 	add	r2,r2,r3
    9d50:	100490ba 	slli	r2,r2,2
    9d54:	00c00074 	movhi	r3,1
    9d58:	10c7883a 	add	r3,r2,r3
    9d5c:	18296615 	stw	zero,-23144(r3)
    alt_fd_list[fd].dev      = 0;
    9d60:	e0ffff17 	ldw	r3,-4(fp)
    9d64:	1805883a 	mov	r2,r3
    9d68:	1085883a 	add	r2,r2,r2
    9d6c:	10c5883a 	add	r2,r2,r3
    9d70:	100490ba 	slli	r2,r2,2
    9d74:	00c00074 	movhi	r3,1
    9d78:	10c7883a 	add	r3,r2,r3
    9d7c:	18296415 	stw	zero,-23152(r3)
  }
}
    9d80:	0001883a 	nop
    9d84:	e037883a 	mov	sp,fp
    9d88:	df000017 	ldw	fp,0(sp)
    9d8c:	dec00104 	addi	sp,sp,4
    9d90:	f800283a 	ret

00009d94 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    9d94:	defffa04 	addi	sp,sp,-24
    9d98:	df000515 	stw	fp,20(sp)
    9d9c:	df000504 	addi	fp,sp,20
    9da0:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
    9da4:	0005303a 	rdctl	r2,status
    9da8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9dac:	e0fffc17 	ldw	r3,-16(fp)
    9db0:	00bfff84 	movi	r2,-2
    9db4:	1884703a 	and	r2,r3,r2
    9db8:	1001703a 	wrctl	status,r2
  return context;
    9dbc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    9dc0:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
    9dc4:	e0bffb17 	ldw	r2,-20(fp)
    9dc8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    9dcc:	e0bffd17 	ldw	r2,-12(fp)
    9dd0:	10800017 	ldw	r2,0(r2)
    9dd4:	e0fffd17 	ldw	r3,-12(fp)
    9dd8:	18c00117 	ldw	r3,4(r3)
    9ddc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    9de0:	e0bffd17 	ldw	r2,-12(fp)
    9de4:	10800117 	ldw	r2,4(r2)
    9de8:	e0fffd17 	ldw	r3,-12(fp)
    9dec:	18c00017 	ldw	r3,0(r3)
    9df0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    9df4:	e0bffd17 	ldw	r2,-12(fp)
    9df8:	e0fffd17 	ldw	r3,-12(fp)
    9dfc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    9e00:	e0bffd17 	ldw	r2,-12(fp)
    9e04:	e0fffd17 	ldw	r3,-12(fp)
    9e08:	10c00015 	stw	r3,0(r2)
} 
    9e0c:	0001883a 	nop
    9e10:	e0bfff17 	ldw	r2,-4(fp)
    9e14:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
    9e18:	e0bffe17 	ldw	r2,-8(fp)
    9e1c:	1001703a 	wrctl	status,r2
}
    9e20:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
    9e24:	0001883a 	nop
    9e28:	e037883a 	mov	sp,fp
    9e2c:	df000017 	ldw	fp,0(sp)
    9e30:	dec00104 	addi	sp,sp,4
    9e34:	f800283a 	ret

00009e38 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    9e38:	defffb04 	addi	sp,sp,-20
    9e3c:	dfc00415 	stw	ra,16(sp)
    9e40:	df000315 	stw	fp,12(sp)
    9e44:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    9e48:	d0a00917 	ldw	r2,-32732(gp)
    9e4c:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    9e50:	d0a0ca17 	ldw	r2,-31960(gp)
    9e54:	10800044 	addi	r2,r2,1
    9e58:	d0a0ca15 	stw	r2,-31960(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    9e5c:	00002e06 	br	9f18 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    9e60:	e0bfff17 	ldw	r2,-4(fp)
    9e64:	10800017 	ldw	r2,0(r2)
    9e68:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    9e6c:	e0bfff17 	ldw	r2,-4(fp)
    9e70:	10800403 	ldbu	r2,16(r2)
    9e74:	10803fcc 	andi	r2,r2,255
    9e78:	10000426 	beq	r2,zero,9e8c <alt_tick+0x54>
    9e7c:	d0a0ca17 	ldw	r2,-31960(gp)
    9e80:	1000021e 	bne	r2,zero,9e8c <alt_tick+0x54>
    {
      alarm->rollover = 0;
    9e84:	e0bfff17 	ldw	r2,-4(fp)
    9e88:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    9e8c:	e0bfff17 	ldw	r2,-4(fp)
    9e90:	10800217 	ldw	r2,8(r2)
    9e94:	d0e0ca17 	ldw	r3,-31960(gp)
    9e98:	18801d36 	bltu	r3,r2,9f10 <alt_tick+0xd8>
    9e9c:	e0bfff17 	ldw	r2,-4(fp)
    9ea0:	10800403 	ldbu	r2,16(r2)
    9ea4:	10803fcc 	andi	r2,r2,255
    9ea8:	1000191e 	bne	r2,zero,9f10 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    9eac:	e0bfff17 	ldw	r2,-4(fp)
    9eb0:	10800317 	ldw	r2,12(r2)
    9eb4:	e0ffff17 	ldw	r3,-4(fp)
    9eb8:	18c00517 	ldw	r3,20(r3)
    9ebc:	1809883a 	mov	r4,r3
    9ec0:	103ee83a 	callr	r2
    9ec4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    9ec8:	e0bffd17 	ldw	r2,-12(fp)
    9ecc:	1000031e 	bne	r2,zero,9edc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    9ed0:	e13fff17 	ldw	r4,-4(fp)
    9ed4:	0009d940 	call	9d94 <alt_alarm_stop>
    9ed8:	00000d06 	br	9f10 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    9edc:	e0bfff17 	ldw	r2,-4(fp)
    9ee0:	10c00217 	ldw	r3,8(r2)
    9ee4:	e0bffd17 	ldw	r2,-12(fp)
    9ee8:	1887883a 	add	r3,r3,r2
    9eec:	e0bfff17 	ldw	r2,-4(fp)
    9ef0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    9ef4:	e0bfff17 	ldw	r2,-4(fp)
    9ef8:	10c00217 	ldw	r3,8(r2)
    9efc:	d0a0ca17 	ldw	r2,-31960(gp)
    9f00:	1880032e 	bgeu	r3,r2,9f10 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    9f04:	e0bfff17 	ldw	r2,-4(fp)
    9f08:	00c00044 	movi	r3,1
    9f0c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    9f10:	e0bffe17 	ldw	r2,-8(fp)
    9f14:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
    9f18:	e0ffff17 	ldw	r3,-4(fp)
    9f1c:	d0a00904 	addi	r2,gp,-32732
    9f20:	18bfcf1e 	bne	r3,r2,9e60 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    9f24:	0001883a 	nop
}
    9f28:	0001883a 	nop
    9f2c:	e037883a 	mov	sp,fp
    9f30:	dfc00117 	ldw	ra,4(sp)
    9f34:	df000017 	ldw	fp,0(sp)
    9f38:	dec00204 	addi	sp,sp,8
    9f3c:	f800283a 	ret

00009f40 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    9f40:	deffff04 	addi	sp,sp,-4
    9f44:	df000015 	stw	fp,0(sp)
    9f48:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    9f4c:	000170fa 	wrctl	ienable,zero
}
    9f50:	0001883a 	nop
    9f54:	e037883a 	mov	sp,fp
    9f58:	df000017 	ldw	fp,0(sp)
    9f5c:	dec00104 	addi	sp,sp,4
    9f60:	f800283a 	ret

00009f64 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    9f64:	defffa04 	addi	sp,sp,-24
    9f68:	dfc00515 	stw	ra,20(sp)
    9f6c:	df000415 	stw	fp,16(sp)
    9f70:	df000404 	addi	fp,sp,16
    9f74:	e13ffd15 	stw	r4,-12(fp)
    9f78:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
    9f7c:	e0bffc17 	ldw	r2,-16(fp)
    9f80:	10800017 	ldw	r2,0(r2)
    9f84:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    9f88:	e13ffd17 	ldw	r4,-12(fp)
    9f8c:	00083bc0 	call	83bc <strlen>
    9f90:	10800044 	addi	r2,r2,1
    9f94:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9f98:	00000d06 	br	9fd0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    9f9c:	e0bfff17 	ldw	r2,-4(fp)
    9fa0:	10800217 	ldw	r2,8(r2)
    9fa4:	e0fffe17 	ldw	r3,-8(fp)
    9fa8:	180d883a 	mov	r6,r3
    9fac:	e17ffd17 	ldw	r5,-12(fp)
    9fb0:	1009883a 	mov	r4,r2
    9fb4:	000a26c0 	call	a26c <memcmp>
    9fb8:	1000021e 	bne	r2,zero,9fc4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    9fbc:	e0bfff17 	ldw	r2,-4(fp)
    9fc0:	00000706 	br	9fe0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    9fc4:	e0bfff17 	ldw	r2,-4(fp)
    9fc8:	10800017 	ldw	r2,0(r2)
    9fcc:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
    9fd0:	e0ffff17 	ldw	r3,-4(fp)
    9fd4:	e0bffc17 	ldw	r2,-16(fp)
    9fd8:	18bff01e 	bne	r3,r2,9f9c <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
    9fdc:	0005883a 	mov	r2,zero
}
    9fe0:	e037883a 	mov	sp,fp
    9fe4:	dfc00117 	ldw	ra,4(sp)
    9fe8:	df000017 	ldw	fp,0(sp)
    9fec:	dec00204 	addi	sp,sp,8
    9ff0:	f800283a 	ret

00009ff4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    9ff4:	defffb04 	addi	sp,sp,-20
    9ff8:	dfc00415 	stw	ra,16(sp)
    9ffc:	df000315 	stw	fp,12(sp)
    a000:	df000304 	addi	fp,sp,12
    a004:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    a008:	d0a00217 	ldw	r2,-32760(gp)
    a00c:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a010:	00003106 	br	a0d8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    a014:	e0bfff17 	ldw	r2,-4(fp)
    a018:	10800217 	ldw	r2,8(r2)
    a01c:	1009883a 	mov	r4,r2
    a020:	00083bc0 	call	83bc <strlen>
    a024:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    a028:	e0bfff17 	ldw	r2,-4(fp)
    a02c:	10c00217 	ldw	r3,8(r2)
    a030:	e0bffe17 	ldw	r2,-8(fp)
    a034:	10bfffc4 	addi	r2,r2,-1
    a038:	1885883a 	add	r2,r3,r2
    a03c:	10800003 	ldbu	r2,0(r2)
    a040:	10803fcc 	andi	r2,r2,255
    a044:	1080201c 	xori	r2,r2,128
    a048:	10bfe004 	addi	r2,r2,-128
    a04c:	10800bd8 	cmpnei	r2,r2,47
    a050:	1000031e 	bne	r2,zero,a060 <alt_find_file+0x6c>
    {
      len -= 1;
    a054:	e0bffe17 	ldw	r2,-8(fp)
    a058:	10bfffc4 	addi	r2,r2,-1
    a05c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a060:	e0bffe17 	ldw	r2,-8(fp)
    a064:	e0fffd17 	ldw	r3,-12(fp)
    a068:	1885883a 	add	r2,r3,r2
    a06c:	10800003 	ldbu	r2,0(r2)
    a070:	10803fcc 	andi	r2,r2,255
    a074:	1080201c 	xori	r2,r2,128
    a078:	10bfe004 	addi	r2,r2,-128
    a07c:	10800be0 	cmpeqi	r2,r2,47
    a080:	1000081e 	bne	r2,zero,a0a4 <alt_find_file+0xb0>
    a084:	e0bffe17 	ldw	r2,-8(fp)
    a088:	e0fffd17 	ldw	r3,-12(fp)
    a08c:	1885883a 	add	r2,r3,r2
    a090:	10800003 	ldbu	r2,0(r2)
    a094:	10803fcc 	andi	r2,r2,255
    a098:	1080201c 	xori	r2,r2,128
    a09c:	10bfe004 	addi	r2,r2,-128
    a0a0:	10000a1e 	bne	r2,zero,a0cc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    a0a4:	e0bfff17 	ldw	r2,-4(fp)
    a0a8:	10800217 	ldw	r2,8(r2)
    a0ac:	e0fffe17 	ldw	r3,-8(fp)
    a0b0:	180d883a 	mov	r6,r3
    a0b4:	e17ffd17 	ldw	r5,-12(fp)
    a0b8:	1009883a 	mov	r4,r2
    a0bc:	000a26c0 	call	a26c <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
    a0c0:	1000021e 	bne	r2,zero,a0cc <alt_find_file+0xd8>
    {
      /* match found */

      return next;
    a0c4:	e0bfff17 	ldw	r2,-4(fp)
    a0c8:	00000706 	br	a0e8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    a0cc:	e0bfff17 	ldw	r2,-4(fp)
    a0d0:	10800017 	ldw	r2,0(r2)
    a0d4:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
    a0d8:	e0ffff17 	ldw	r3,-4(fp)
    a0dc:	d0a00204 	addi	r2,gp,-32760
    a0e0:	18bfcc1e 	bne	r3,r2,a014 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
    a0e4:	0005883a 	mov	r2,zero
}
    a0e8:	e037883a 	mov	sp,fp
    a0ec:	dfc00117 	ldw	ra,4(sp)
    a0f0:	df000017 	ldw	fp,0(sp)
    a0f4:	dec00204 	addi	sp,sp,8
    a0f8:	f800283a 	ret

0000a0fc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    a0fc:	defffc04 	addi	sp,sp,-16
    a100:	df000315 	stw	fp,12(sp)
    a104:	df000304 	addi	fp,sp,12
    a108:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
    a10c:	00bffa04 	movi	r2,-24
    a110:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a114:	e03fff15 	stw	zero,-4(fp)
    a118:	00001d06 	br	a190 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    a11c:	e0ffff17 	ldw	r3,-4(fp)
    a120:	1805883a 	mov	r2,r3
    a124:	1085883a 	add	r2,r2,r2
    a128:	10c5883a 	add	r2,r2,r3
    a12c:	100490ba 	slli	r2,r2,2
    a130:	00c00074 	movhi	r3,1
    a134:	10c7883a 	add	r3,r2,r3
    a138:	18a96417 	ldw	r2,-23152(r3)
    a13c:	1000111e 	bne	r2,zero,a184 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    a140:	e0ffff17 	ldw	r3,-4(fp)
    a144:	1805883a 	mov	r2,r3
    a148:	1085883a 	add	r2,r2,r2
    a14c:	10c5883a 	add	r2,r2,r3
    a150:	100490ba 	slli	r2,r2,2
    a154:	e13ffd17 	ldw	r4,-12(fp)
    a158:	00c00074 	movhi	r3,1
    a15c:	10c7883a 	add	r3,r2,r3
    a160:	19296415 	stw	r4,-23152(r3)
      if (i > alt_max_fd)
    a164:	d0e00617 	ldw	r3,-32744(gp)
    a168:	e0bfff17 	ldw	r2,-4(fp)
    a16c:	1880020e 	bge	r3,r2,a178 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    a170:	e0bfff17 	ldw	r2,-4(fp)
    a174:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
    a178:	e0bfff17 	ldw	r2,-4(fp)
    a17c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    a180:	00000706 	br	a1a0 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
    a184:	e0bfff17 	ldw	r2,-4(fp)
    a188:	10800044 	addi	r2,r2,1
    a18c:	e0bfff15 	stw	r2,-4(fp)
    a190:	e0bfff17 	ldw	r2,-4(fp)
    a194:	10800810 	cmplti	r2,r2,32
    a198:	103fe01e 	bne	r2,zero,a11c <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
    a19c:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    a1a0:	e0bffe17 	ldw	r2,-8(fp)
}
    a1a4:	e037883a 	mov	sp,fp
    a1a8:	df000017 	ldw	fp,0(sp)
    a1ac:	dec00104 	addi	sp,sp,4
    a1b0:	f800283a 	ret

0000a1b4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    a1b4:	defffe04 	addi	sp,sp,-8
    a1b8:	df000115 	stw	fp,4(sp)
    a1bc:	df000104 	addi	fp,sp,4
    a1c0:	e13fff15 	stw	r4,-4(fp)
    a1c4:	e0bfff17 	ldw	r2,-4(fp)
    a1c8:	10bffe84 	addi	r2,r2,-6
    a1cc:	10c00428 	cmpgeui	r3,r2,16
    a1d0:	1800191e 	bne	r3,zero,a238 <alt_exception_cause_generated_bad_addr+0x84>
    a1d4:	100690ba 	slli	r3,r2,2
    a1d8:	00800074 	movhi	r2,1
    a1dc:	1885883a 	add	r2,r3,r2
    a1e0:	10a87a17 	ldw	r2,-24088(r2)
    a1e4:	1000683a 	jmp	r2
    a1e8:	0000a228 	cmpgeui	zero,zero,648
    a1ec:	0000a228 	cmpgeui	zero,zero,648
    a1f0:	0000a238 	rdprs	zero,zero,648
    a1f4:	0000a238 	rdprs	zero,zero,648
    a1f8:	0000a238 	rdprs	zero,zero,648
    a1fc:	0000a228 	cmpgeui	zero,zero,648
    a200:	0000a230 	cmpltui	zero,zero,648
    a204:	0000a238 	rdprs	zero,zero,648
    a208:	0000a228 	cmpgeui	zero,zero,648
    a20c:	0000a228 	cmpgeui	zero,zero,648
    a210:	0000a238 	rdprs	zero,zero,648
    a214:	0000a228 	cmpgeui	zero,zero,648
    a218:	0000a230 	cmpltui	zero,zero,648
    a21c:	0000a238 	rdprs	zero,zero,648
    a220:	0000a238 	rdprs	zero,zero,648
    a224:	0000a228 	cmpgeui	zero,zero,648
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    a228:	00800044 	movi	r2,1
    a22c:	00000306 	br	a23c <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    a230:	0005883a 	mov	r2,zero
    a234:	00000106 	br	a23c <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
    a238:	0005883a 	mov	r2,zero
  }
}
    a23c:	e037883a 	mov	sp,fp
    a240:	df000017 	ldw	fp,0(sp)
    a244:	dec00104 	addi	sp,sp,4
    a248:	f800283a 	ret

0000a24c <exit>:
    a24c:	defffe04 	addi	sp,sp,-8
    a250:	000b883a 	mov	r5,zero
    a254:	dc000015 	stw	r16,0(sp)
    a258:	dfc00115 	stw	ra,4(sp)
    a25c:	2021883a 	mov	r16,r4
    a260:	000a29c0 	call	a29c <__call_exitprocs>
    a264:	8009883a 	mov	r4,r16
    a268:	000a3c80 	call	a3c8 <_exit>

0000a26c <memcmp>:
    a26c:	0007883a 	mov	r3,zero
    a270:	30c0021e 	bne	r6,r3,a27c <memcmp+0x10>
    a274:	0005883a 	mov	r2,zero
    a278:	f800283a 	ret
    a27c:	20c5883a 	add	r2,r4,r3
    a280:	18c00044 	addi	r3,r3,1
    a284:	28cf883a 	add	r7,r5,r3
    a288:	10800003 	ldbu	r2,0(r2)
    a28c:	39ffffc3 	ldbu	r7,-1(r7)
    a290:	11fff726 	beq	r2,r7,a270 <memcmp+0x4>
    a294:	11c5c83a 	sub	r2,r2,r7
    a298:	f800283a 	ret

0000a29c <__call_exitprocs>:
    a29c:	defff604 	addi	sp,sp,-40
    a2a0:	00800074 	movhi	r2,1
    a2a4:	dd800615 	stw	r22,24(sp)
    a2a8:	15a9c417 	ldw	r22,-22768(r2)
    a2ac:	dd400515 	stw	r21,20(sp)
    a2b0:	dd000415 	stw	r20,16(sp)
    a2b4:	dfc00915 	stw	ra,36(sp)
    a2b8:	df000815 	stw	fp,32(sp)
    a2bc:	ddc00715 	stw	r23,28(sp)
    a2c0:	dcc00315 	stw	r19,12(sp)
    a2c4:	dc800215 	stw	r18,8(sp)
    a2c8:	dc400115 	stw	r17,4(sp)
    a2cc:	dc000015 	stw	r16,0(sp)
    a2d0:	202b883a 	mov	r21,r4
    a2d4:	2829883a 	mov	r20,r5
    a2d8:	b4400d17 	ldw	r17,52(r22)
    a2dc:	88000726 	beq	r17,zero,a2fc <__call_exitprocs+0x60>
    a2e0:	8c000117 	ldw	r16,4(r17)
    a2e4:	8cc02217 	ldw	r19,136(r17)
    a2e8:	84bfffc4 	addi	r18,r16,-1
    a2ec:	802090ba 	slli	r16,r16,2
    a2f0:	9c2f883a 	add	r23,r19,r16
    a2f4:	8c21883a 	add	r16,r17,r16
    a2f8:	90000c0e 	bge	r18,zero,a32c <__call_exitprocs+0x90>
    a2fc:	dfc00917 	ldw	ra,36(sp)
    a300:	df000817 	ldw	fp,32(sp)
    a304:	ddc00717 	ldw	r23,28(sp)
    a308:	dd800617 	ldw	r22,24(sp)
    a30c:	dd400517 	ldw	r21,20(sp)
    a310:	dd000417 	ldw	r20,16(sp)
    a314:	dcc00317 	ldw	r19,12(sp)
    a318:	dc800217 	ldw	r18,8(sp)
    a31c:	dc400117 	ldw	r17,4(sp)
    a320:	dc000017 	ldw	r16,0(sp)
    a324:	dec00a04 	addi	sp,sp,40
    a328:	f800283a 	ret
    a32c:	a0000726 	beq	r20,zero,a34c <__call_exitprocs+0xb0>
    a330:	9800041e 	bne	r19,zero,a344 <__call_exitprocs+0xa8>
    a334:	94bfffc4 	addi	r18,r18,-1
    a338:	bdffff04 	addi	r23,r23,-4
    a33c:	843fff04 	addi	r16,r16,-4
    a340:	003fed06 	br	a2f8 <__call_exitprocs+0x5c>
    a344:	b8c01f17 	ldw	r3,124(r23)
    a348:	1d3ffa1e 	bne	r3,r20,a334 <__call_exitprocs+0x98>
    a34c:	89000117 	ldw	r4,4(r17)
    a350:	80c00117 	ldw	r3,4(r16)
    a354:	213fffc4 	addi	r4,r4,-1
    a358:	24800f1e 	bne	r4,r18,a398 <__call_exitprocs+0xfc>
    a35c:	8c800115 	stw	r18,4(r17)
    a360:	183ff426 	beq	r3,zero,a334 <__call_exitprocs+0x98>
    a364:	8f000117 	ldw	fp,4(r17)
    a368:	98000526 	beq	r19,zero,a380 <__call_exitprocs+0xe4>
    a36c:	00800044 	movi	r2,1
    a370:	148c983a 	sll	r6,r2,r18
    a374:	99004017 	ldw	r4,256(r19)
    a378:	3108703a 	and	r4,r6,r4
    a37c:	2000081e 	bne	r4,zero,a3a0 <__call_exitprocs+0x104>
    a380:	183ee83a 	callr	r3
    a384:	89000117 	ldw	r4,4(r17)
    a388:	b0c00d17 	ldw	r3,52(r22)
    a38c:	273fd21e 	bne	r4,fp,a2d8 <__call_exitprocs+0x3c>
    a390:	88ffe826 	beq	r17,r3,a334 <__call_exitprocs+0x98>
    a394:	003fd006 	br	a2d8 <__call_exitprocs+0x3c>
    a398:	80000115 	stw	zero,4(r16)
    a39c:	003ff006 	br	a360 <__call_exitprocs+0xc4>
    a3a0:	99404117 	ldw	r5,260(r19)
    a3a4:	b93fff17 	ldw	r4,-4(r23)
    a3a8:	314c703a 	and	r6,r6,r5
    a3ac:	3000041e 	bne	r6,zero,a3c0 <__call_exitprocs+0x124>
    a3b0:	200b883a 	mov	r5,r4
    a3b4:	a809883a 	mov	r4,r21
    a3b8:	183ee83a 	callr	r3
    a3bc:	003ff106 	br	a384 <__call_exitprocs+0xe8>
    a3c0:	183ee83a 	callr	r3
    a3c4:	003fef06 	br	a384 <__call_exitprocs+0xe8>

0000a3c8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    a3c8:	defffd04 	addi	sp,sp,-12
    a3cc:	df000215 	stw	fp,8(sp)
    a3d0:	df000204 	addi	fp,sp,8
    a3d4:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    a3d8:	0001883a 	nop
    a3dc:	e0bffe17 	ldw	r2,-8(fp)
    a3e0:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    a3e4:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    a3e8:	10000226 	beq	r2,zero,a3f4 <_exit+0x2c>
    ALT_SIM_FAIL();
    a3ec:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
    a3f0:	00000106 	br	a3f8 <_exit+0x30>
    ALT_SIM_PASS();
    a3f4:	002af0b0 	cmpltui	zero,zero,43970
}
    a3f8:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    a3fc:	003fff06 	br	a3fc <_exit+0x34>
