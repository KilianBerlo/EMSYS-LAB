/**********************************************************
 * This file is generated by 20-sim C++ Code Generator
 *
 *  file:  common\xxinteg.cpp
 *  subm:  PositionControllerPan
 *  model: PositionControllerPan
 *  expmt: Jiwy
 *  date:  June 14, 2021
 *  time:  6:18:55 PM
 *  user:  20-sim 4.8 Campus License
 *  from:  Universiteit Twente
 *  build: 4.8.3.10415
 **********************************************************/

/* This file describes the integration methods
   that are supplied for computation.

   Currently only Euler, RungeKutta2 and RungeKutta4 are supplied,
   but it is easy for the user to add their own
   integration methods with these as examples.
*/

/* the system include files */
#include "xxinteg.h"

#include <stdlib.h>
#include <string.h>
#include <math.h>

/* our own include files */
#include "../tilt/tilt_model.h"
#include "../pan/pan_model.h"


/*********************************************************************
 * Discrete integration method
 *********************************************************************/
Discrete::Discrete(void)
{
	model = NULL;
}

Discrete::~Discrete(void)
{
}

/*
 * the initialization of the Discrete integration method
 */
void Discrete::Initialize (Submodel20sim* themodel)
{
	model = themodel;
	model->m_major = true;
}

/* the termination of the Discrete integration method */
void Discrete::Terminate ()
{
	/* nothing to be done */
}

/* the Discrete integration method itself */
void Discrete::Step ()
{
	XXInteger index;

	/* for each of the supplied states */
	for (index = 0; index < model->m_number_states; index++)
	{
		/* just a move of the new state */
		model->m_s [index] = model->m_R [index];
	}

	/* increment the simulation time */
	model->m_time += model->m_step_size;
	model->m_major = true;

	/* evaluate the dynamic part to calculate the new rates */
	model->CalculateDynamic ();
}

