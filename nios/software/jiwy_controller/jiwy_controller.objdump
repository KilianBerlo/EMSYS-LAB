
jiwy_controller.elf:     file format elf32-littlenios2
jiwy_controller.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010224

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000073b0 memsz 0x000073b0 flags r-x
    LOAD off    0x000083d0 vaddr 0x000173d0 paddr 0x00017924 align 2**12
         filesz 0x00000554 memsz 0x00000554 flags rw-
    LOAD off    0x00008e78 vaddr 0x00017e78 paddr 0x00017e78 align 2**12
         filesz 0x00000000 memsz 0x00000188 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006924  00010224  00010224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000888  00016b48  00016b48  00007b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000554  000173d0  00017924  000083d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000188  00017e78  00017e78  00008e78  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00018000  00018000  00008924  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00008924  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001030  00000000  00000000  00008958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   0001fff9  00000000  00000000  00009988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000bcbd  00000000  00000000  00029981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   0000ed58  00000000  00000000  0003563e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  000029f0  00000000  00000000  00044398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000094e2  00000000  00000000  00046d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000730a  00000000  00000000  0005026a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000010  00000000  00000000  00057574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015d0  00000000  00000000  00057588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  0005fcaf  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0005fcb2  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0005fcb5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0005fcb6  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0005fcb7  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0005fcbb  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0005fcbf  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0005fcc3  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0005fccc  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0005fcd5  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000013  00000000  00000000  0005fcde  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002a  00000000  00000000  0005fcf1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010224 l    d  .text	00000000 .text
00016b48 l    d  .rodata	00000000 .rodata
000173d0 l    d  .rwdata	00000000 .rwdata
00017e78 l    d  .bss	00000000 .bss
00018000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/Users/gteho/Repositories/EMSYS-LAB/nios/software/jiwy_controller_bsp//obj/HAL/src/crt0.o
0001025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.cpp
000176b4 l     O .rwdata	00000001 _ZStL19piecewise_construct
000176b5 l     O .rwdata	00000001 _ZStL13allocator_arg
000176b6 l     O .rwdata	00000001 _ZStL6ignore
000176b7 l     O .rwdata	00000001 _ZN6SerialL12MESSAGE_SIZEE
000103b4 l     F .text	00000198 _Z41__static_initialization_and_destruction_0ii
0001054c l     F .text	00000030 _GLOBAL__sub_I_uart
00000000 l    df *ABS*	00000000 encoder.cpp
00000000 l    df *ABS*	00000000 motor.cpp
00000000 l    df *ABS*	00000000 uart.cpp
000176c0 l     O .rwdata	00000001 _ZStL19piecewise_construct
000176c1 l     O .rwdata	00000001 _ZStL13allocator_arg
000176c2 l     O .rwdata	00000001 _ZStL6ignore
000176c3 l     O .rwdata	00000001 _ZN6SerialL12MESSAGE_SIZEE
000113c0 l     F .text	00000074 _Z41__static_initialization_and_destruction_0ii
00011434 l     F .text	00000030 _GLOBAL__sub_I__ZN6Serial4UART10uart_readyE
00011464 l     F .text	00000030 _GLOBAL__sub_D__ZN6Serial4UART10uart_readyE
00000000 l    df *ABS*	00000000 eh_personality.cc
00011cf4 l     F .text	00000090 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv
00011d84 l     F .text	000001e8 _ZL28read_encoded_value_with_basehjPKhPj
00011f6c l     F .text	00000070 _ZL21base_of_encoded_valuehP15_Unwind_Context
00011fdc l     F .text	0000012c _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
00012108 l     F .text	00000110 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
00012b8c l     F .text	00000068 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 function_type_info.cc
00000000 l    df *ABS*	00000000 pointer_type_info.cc
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 functional.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 del_ops.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
000134d8 l     F .text	000000cc _ZN12_GLOBAL__N_14pool4freeEPv.constprop.0
00017ef0 l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
000135a4 l     F .text	00000090 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.0
00013754 l     F .text	00000064 _GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
00017e8c l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 fundamental_type_info.cc
00000000 l    df *ABS*	00000000 pbase_type_info.cc
000178ec l     O .rwdata	00000008 _ZZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvjE3pmf
000178e8 l     O .rwdata	00000004 _ZZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvjE2pm
00000000 l    df *ABS*	00000000 pmem_type_info.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 eh_aux_runtime.cc
00000000 l    df *ABS*	00000000 bad_array_new.cc
00000000 l    df *ABS*	00000000 bad_cast.cc
00000000 l    df *ABS*	00000000 bad_typeid.cc
00000000 l    df *ABS*	00000000 bad_alloc.cc
00000000 l    df *ABS*	00000000 unwind-sjlj.c
00014010 l     F .text	00000114 _Unwind_ForcedUnwind_Phase2
00017e94 l     O .bss	00000004 fc_static
00014124 l     F .text	000000d8 _Unwind_RaiseException_Phase2
000141fc l     F .text	0000002c uw_install_context.constprop.0.isra.0
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000173d0 l     O .rwdata	000000e4 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_kill.c
00015024 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001518c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00017900 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000153f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00015534 l     F .text	00000034 alt_dev_reg
000174b4 l     O .rwdata	0000002c jtag_uart
000174e0 l     O .rwdata	0000002c uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00015840 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00015a00 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00015b00 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_close.c
00015c1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00015d54 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00015d80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00015fe4 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00016134 l     F .text	0000003c alt_get_errno
00016170 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00017eb4 g     O .bss	00000004 alt_instruction_exception_handler
000136bc g     F .text	00000028 __cxa_free_exception
0001314c g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
0001712c  w    O .rodata	00000010 _ZTIPKDs
00012b18 g     F .text	00000014 _ZSt10unexpectedv
00011090 g     F .text	000000dc _ZN6Serial4UART10uart_0_isrEPv
000178d0  w    O .rwdata	00000008 _ZTIw
000178b0  w    O .rwdata	00000008 _ZTIc
00015278 g     F .text	0000007c alt_main
0001484c g     F .text	00000080 _puts_r
00017f00 g     O .bss	00000100 alt_irq
000139f0 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
000178a8  w    O .rwdata	00000008 _ZTIa
000116f8  w    F .text	00000140 _ZNSt8functionIFvRN6Serial10rx_messageEEEC1ERKS4_
000142a8 g     F .text	00000020 .hidden _Unwind_GetIPInfo
00017924 g       *ABS*	00000000 __flash_rwdata_start
00016fbc  w    O .rodata	00000010 _ZTIPy
0001774c  w    O .rwdata	00000002 _ZTSa
00010b8c  w    F .text	00000024 _ZSt7forwardIRN6Serial10rx_messageEEOT_RNSt16remove_referenceIS3_E4typeE
00016d20  w    O .rodata	00000014 _ZTVSt17bad_function_call
00012cb8 g     F .text	00000084 __cxa_rethrow
00014240 g     F .text	00000010 .hidden _Unwind_SjLj_Unregister
00012b5c g     F .text	00000024 _ZSt14set_unexpectedPFvvE
0001704c  w    O .rodata	00000010 _ZTIPKi
00014298 g     F .text	00000010 .hidden _Unwind_GetIP
00018000 g       *ABS*	00000000 __alt_heap_start
0001778c  w    O .rwdata	00000003 _ZTSPj
00010744  w    F .text	00000094 _ZN6Serial10tx_messageC2Ell
00011994  w    F .text	00000038 _ZNKSt8functionIFvRN6Serial10rx_messageEEEcvbEv
00014b8c g     F .text	0000004c _kill_r
00010db8  w    F .text	00000058 _ZSt13__invoke_implIvRPFvRN6Serial10rx_messageEEJS2_EET_St14__invoke_otherOT0_DpOT1_
00013fc8 g     F .text	00000010 _ZNSt9bad_allocD2Ev
00010f38 g     F .text	00000064 _ZN5Plant5MotorC2Emm
00014980 g     F .text	00000078 _signal_r
000177b0  w    O .rwdata	00000003 _ZTSPx
0001166c  w    F .text	0000005c _ZSt4copyIPhS0_ET0_T_S2_S1_
000178b8  w    O .rwdata	00000008 _ZTIDi
00017810  w    O .rwdata	00000005 _ZTSPKDd
000177a4  w    O .rwdata	00000003 _ZTSPm
000106d4  w    F .text	00000070 _ZN6Serial10rx_message13getSecondWordEv
00013728 g     F .text	0000002c __cxa_free_dependent_exception
00010ff4 g     F .text	00000058 _ZN5Plant5Motor13setSecondWordEm
00012e80 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
00016c58  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
00015318 g     F .text	00000024 __malloc_unlock
00017718  w    O .rwdata	00000005 _ZTSPKDu
0001725c  w    O .rodata	00000024 _ZTVN10__cxxabiv129__pointer_to_member_type_infoE
000139f0 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
00013984 g     F .text	00000020 _ZSt18uncaught_exceptionv
00010260 g     F .text	000000ac _Z17handleUartMessageRN6Serial10rx_messageE
000112e8 g     F .text	000000d8 _ZN6Serial4UART14convertToArrayENS_10tx_messageE
00013e18 g     F .text	0000000c __cxa_deleted_virtual
00016f3c  w    O .rodata	00000010 _ZTIPDn
0001190c  w    F .text	00000088 _ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_
0001456c g     F .text	00000060 memmove
00011638  w    F .text	00000034 _ZNSt5arrayIhLj4EE3endEv
00017788  w    O .rwdata	00000002 _ZTSj
000139c0 g     F .text	00000004 _ZNSt9exceptionD2Ev
00016c04  w    O .rodata	00000024 _ZTSN10__cxxabiv119__pointer_type_infoE
00012d94 g     F .text	00000010 _ZN10__cxxabiv119__pointer_type_infoD1Ev
000172f4  w    O .rodata	0000000c _ZTISt8bad_cast
00016e3c  w    O .rodata	00000014 _ZTVSt13bad_exception
000165c8 g     F .text	00000024 altera_nios2_gen2_irq_init
00010810  w    F .text	00000150 _ZNSt8functionIFvRN6Serial10rx_messageEEEC2IPS3_vvEET_
00017734  w    O .rwdata	00000004 _ZTSPDi
00013ecc g     F .text	00000010 _ZNSt20bad_array_new_lengthD1Ev
000176f8  w    O .rwdata	00000002 _ZTSb
000114f8  w    F .text	0000003c _ZNSt5arrayIhLj4EEixEj
00010000 g     F .entry	0000000c __reset
00017748  w    O .rwdata	00000004 _ZTSPKc
000142e4 g     F .text	00000008 .hidden _Unwind_GetRegionStart
000177c0  w    O .rwdata	00000004 _ZTSPKy
00017700  w    O .rwdata	00000004 _ZTSPKb
000119cc  w    F .text	00000024 _ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_
00010020 g       *ABS*	00000000 __flash_exceptions_start
00011c8c  w    F .text	00000068 _ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_
0001706c  w    O .rodata	00000010 _ZTIPKt
00017750  w    O .rwdata	00000003 _ZTSPa
00017ea0 g     O .bss	00000004 errno
00011c4c  w    F .text	00000040 _ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_
00017e85 g     O .bss	00000004 _ZN6Serial4UART7rx_dataE
000176f4  w    O .rwdata	00000004 _ZTSPKv
000144ac g     F .text	00000088 .hidden _Unwind_Backtrace
0001718c  w    O .rodata	00000010 _ZTIPKb
00017eac g     O .bss	00000004 alt_argv
0001f6b4 g       *ABS*	00000000 _gp
00013f84 g     F .text	00000038 _ZNSt10bad_typeidD0Ev
00013a28 g     F .text	00000010 _ZN10__cxxabiv123__fundamental_type_infoD1Ev
00017ed0 g     O .bss	00000010 pan_motor
00013f30 g     F .text	00000038 _ZNSt8bad_castD0Ev
00014d6c g     F .text	00000020 getpid
000128b0 g     F .text	0000017c __cxa_call_unexpected
00010e10  w    F .text	00000060 _ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE
00013810 g     F .text	00000008 __cxa_get_exception_ptr
0001779c  w    O .rwdata	00000004 _ZTSPKl
00017534 g     O .rwdata	00000180 alt_fd_list
00011be4  w    F .text	00000040 _ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_
00013a98 g     F .text	00000038 _ZN10__cxxabiv117__pbase_type_infoD0Ev
0001701c  w    O .rodata	00000010 _ZTIPl
000143cc g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
00014268 g     F .text	00000018 .hidden _Unwind_GetCFA
00017890  w    O .rwdata	00000008 _ZTIt
00012b2c g     F .text	00000024 _ZSt13set_terminatePFvvE
000165ec g     F .text	00000090 alt_find_dev
000176f0  w    O .rwdata	00000003 _ZTSPv
000136e4 g     F .text	00000044 __cxa_allocate_dependent_exception
00017ee0 g     O .bss	00000010 _ZN6Serial4UART8callbackE
00010d70  w    F .text	00000024 _ZSt11__addressofIKPFvRN6Serial10rx_messageEEEPT_RS6_
000132a4 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
000160b8 g     F .text	0000007c alt_io_redirect
00016b48 g       *ABS*	00000000 __DTOR_END__
000109fc  w    F .text	00000058 _ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E9_M_invokeERKSt9_Any_dataS2_
00017220  w    O .rodata	0000002e _ZTSN10__cxxabiv129__pointer_to_member_type_infoE
000171bc  w    O .rodata	00000010 _ZTIPv
000132bc g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
00011bc0  w    F .text	00000024 _ZSt12__niter_baseIPhET_S1_
000148cc g     F .text	00000010 puts
000178d8  w    O .rwdata	00000008 _ZTIb
000171f0  w    O .rodata	0000000c _ZTIN10__cxxabiv117__pbase_type_infoE
00015f4c g     F .text	00000098 alt_exception_cause_generated_bad_addr
00017738  w    O .rwdata	00000005 _ZTSPKDi
0001700c  w    O .rodata	00000010 _ZTIPKl
00012da4 g     F .text	00000038 _ZN10__cxxabiv119__pointer_type_infoD0Ev
00013ecc g     F .text	00000010 _ZNSt20bad_array_new_lengthD2Ev
000156c0 g     F .text	000000ec altera_avalon_jtag_uart_read
0001454c g     F .text	00000010 malloc
0001729c  w    O .rodata	00000019 _ZTSSt20bad_array_new_length
00011494  w    F .text	0000002c _ZNKSt14_Function_base8_M_emptyEv
000149f8 g     F .text	000000b4 _raise_r
00016f2c  w    O .rodata	00000010 _ZTIPKDn
00017774  w    O .rwdata	00000003 _ZTSPt
0001116c g     F .text	00000090 _ZN6Serial4UARTC1ESt8functionIFvRNS_10rx_messageEEE
00013a38 g     F .text	00000038 _ZN10__cxxabiv123__fundamental_type_infoD0Ev
00010ed8 g     F .text	00000034 _ZN5Plant7EncoderC1Em
00014bd8 g     F .text	00000004 _getpid_r
000139a4 g     F .text	0000001c _ZSt19uncaught_exceptionsv
00013634 g     F .text	00000030 _ZN9__gnu_cxx9__freeresEv
00017830  w    O .rwdata	00000008 _ZTIDd
00013370 g     F .text	0000009c _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
000177d8  w    O .rwdata	00000004 _ZTSPKd
00014aac g     F .text	000000a0 __sigtramp_r
000148dc g     F .text	00000048 _sbrk_r
000139c8 g     F .text	0000000c _ZGTtNKSt9exception4whatEv
00016cc8  w    O .rodata	00000020 _ZTVSt9type_info
00013a88 g     F .text	00000010 _ZN10__cxxabiv117__pbase_type_infoD1Ev
000139c8 g     F .text	0000000c _ZNKSt9exception4whatEv
000177a8  w    O .rwdata	00000004 _ZTSPKm
00017914 g     O .rwdata	00000004 alt_max_fd
0001711c  w    O .rodata	00000010 _ZTIPDi
00017374  w    O .rodata	0000000c _ZTISt9bad_alloc
00016f9c  w    O .rodata	00000010 _ZTIPf
00016c34  w    O .rodata	00000024 _ZTVN10__cxxabiv119__pointer_type_infoE
00016efc  w    O .rodata	00000010 _ZTIPDd
00016d14  w    O .rodata	0000000c _ZTISt17bad_function_call
00016c8c  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
00013f20 g     F .text	00000010 _ZNSt8bad_castD1Ev
00013304 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
000134d0 g     F .text	00000004 _ZdlPv
000178f4 g     O .rwdata	00000004 _global_impure_ptr
00018000 g       *ABS*	00000000 __bss_end
000177bc  w    O .rwdata	00000003 _ZTSPy
00017710  w    O .rwdata	00000003 _ZTSDu
00014f3c g     F .text	000000e8 alt_iic_isr_register
00017784  w    O .rwdata	00000004 _ZTSPKi
0001719c  w    O .rodata	00000010 _ZTIPb
000164c0 g     F .text	00000108 alt_tick
00014228 g     F .text	00000018 .hidden _Unwind_SjLj_Register
000118b4  w    F .text	00000034 _ZNSt5arrayIhLj4EE4dataEv
00011a7c  w    F .text	00000024 _ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_
00014534 g     F .text	00000018 abort
00017e7c g     O .bss	00000004 tilt_encoder
00017860  w    O .rwdata	00000008 _ZTIy
00016ecc  w    O .rodata	00000010 _ZTIPKDe
000138d0 g     F .text	000000b4 __cxa_end_catch
00014ef0 g     F .text	0000004c alt_ic_irq_enabled
000139c4 g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
00016f8c  w    O .rodata	00000010 _ZTIPKf
00010744  w    F .text	00000094 _ZN6Serial10tx_messageC1Ell
0001641c g     F .text	000000a4 alt_alarm_stop
000105c8  w    F .text	00000024 _ZNKSt9_Any_data9_M_accessEv
00016f7c  w    O .rodata	00000010 _ZTIPd
00017ea4 g     O .bss	00000004 alt_irq_active
00012af4 g     F .text	00000014 _ZSt9terminatev
00017764  w    O .rwdata	00000002 _ZTSs
000177ec  w    O .rwdata	00000004 _ZTSPDn
00010000 g       *ABS*	00000000 __alt_mem_onchip_mem
000171fc  w    O .rodata	00000024 _ZTVN10__cxxabiv117__pbase_type_infoE
000100fc g     F .exceptions	000000c8 alt_irq_handler
00010618  w    F .text	0000008c _ZNSt14_Function_baseD2Ev
0001750c g     O .rwdata	00000028 alt_dev_null
00011c24  w    F .text	00000028 _ZSt12__niter_wrapIPhET_RKS1_S1_
00017780  w    O .rwdata	00000003 _ZTSPi
000139fc g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
000177c8  w    O .rwdata	00000003 _ZTSPf
0001716c  w    O .rodata	00000010 _ZTIPKw
000177d4  w    O .rwdata	00000003 _ZTSPd
000177fc  w    O .rwdata	00000004 _ZTSPDf
00016d34  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
00015d34 g     F .text	00000020 alt_dcache_flush_all
00017868  w    O .rwdata	00000008 _ZTIx
00017708  w    O .rwdata	00000003 _ZTSPw
000176d0  w    O .rwdata	00000008 _ZTISt9exception
00017808  w    O .rwdata	00000003 _ZTSDd
00017800  w    O .rwdata	00000005 _ZTSPKDf
000177a0  w    O .rwdata	00000002 _ZTSm
00017924 g       *ABS*	00000000 __ram_rwdata_end
0001705c  w    O .rodata	00000010 _ZTIPi
00013148 g     F .text	00000004 _ZNSt9type_infoD1Ev
0001790c g     O .rwdata	00000008 alt_dev_list
000139fc g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
00015430 g     F .text	00000104 write
00012d54 g     F .text	00000038 _ZN10__cxxabiv120__function_type_infoD0Ev
00017724  w    O .rwdata	00000004 _ZTSPDs
0001315c g     F .text	00000008 _ZNSt9type_infoD0Ev
000173d0 g       *ABS*	00000000 __ram_rodata_end
000134d4 g     F .text	00000004 _ZdlPvj
00017858  w    O .rwdata	00000008 _ZTIf
00015060 g     F .text	0000012c kill
00017798  w    O .rwdata	00000003 _ZTSPl
00010aec  w    F .text	00000060 _ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE
00012d3c g     F .text	00000008 _ZNK10__cxxabiv120__function_type_info15__is_function_pEv
00017728  w    O .rwdata	00000005 _ZTSPKDs
0001709c  w    O .rodata	00000010 _ZTIPs
0001057c  w    F .text	00000028 _ZnwjPv
00013154 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
00017720  w    O .rwdata	00000003 _ZTSDs
000177b4  w    O .rwdata	00000004 _ZTSPKx
00012bf4 g     F .text	00000064 __cxa_init_primary_exception
00012b50 g     F .text	0000000c _ZSt13get_terminatev
00018000 g       *ABS*	00000000 end
000177f8  w    O .rwdata	00000003 _ZTSDf
000131b4 g     F .text	00000010 _ZNSt17bad_function_callD2Ev
00017740  w    O .rwdata	00000002 _ZTSc
00010bb0  w    F .text	00000064 _ZSt10__invoke_rIvRPFvRN6Serial10rx_messageEEJS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_
00015b3c g     F .text	000000e0 altera_avalon_uart_write
00014494 g     F .text	00000018 .hidden _Unwind_DeleteException
00017790  w    O .rwdata	00000004 _ZTSPKj
000101c4 g     F .exceptions	00000060 alt_instruction_exception_entry
0001340c g     F .text	000000c4 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
00016b35 g       *ABS*	00000000 __CTOR_LIST__
0001a000 g       *ABS*	00000000 __alt_stack_pointer
00016ffc  w    O .rodata	00000010 _ZTIPm
000158bc g     F .text	00000084 alt_avalon_timer_sc_init
000159a0 g     F .text	00000060 altera_avalon_uart_write_fd
0001322c g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
000157ac g     F .text	00000094 altera_avalon_jtag_uart_write
000107d8  w    F .text	00000038 _ZNSt8functionIFvRN6Serial10rx_messageEEED1Ev
00016dc4  w    O .rodata	00000012 _ZTSSt13bad_exception
00010810  w    F .text	00000150 _ZNSt8functionIFvRN6Serial10rx_messageEEEC1IPS3_vvEET_
00017758  w    O .rwdata	00000002 _ZTSh
00013ec0 g     F .text	0000000c _ZNKSt20bad_array_new_length4whatEv
000145ec g     F .text	00000100 _free_r
00013f14 g     F .text	0000000c _ZNKSt8bad_cast4whatEv
00010988  w    F .text	00000024 _ZSt4moveIRPFvRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOS7_
00017e80 g     O .bss	00000004 pan_encoder
000169bc g     F .text	0000012c __call_exitprocs
00010e70  w    F .text	00000038 _ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE
00010224 g     F .text	0000003c _start
00017eb8 g     O .bss	00000004 _alt_tick_rate
00010f38 g     F .text	00000064 _ZN5Plant5MotorC1Emm
00016cb8  w    O .rodata	0000000d _ZTSSt9type_info
00013a88 g     F .text	00000010 _ZN10__cxxabiv117__pbase_type_infoD2Ev
00013fbc g     F .text	0000000c _ZNKSt9bad_alloc4whatEv
00013e0c g     F .text	0000000c __cxa_pure_virtual
00017380  w    O .rodata	00000014 _ZTVSt9bad_alloc
00017ebc g     O .bss	00000004 _alt_nticks
00014b5c g     F .text	00000014 signal
000155a4 g     F .text	0000005c alt_sys_init
000176fc  w    O .rwdata	00000003 _ZTSPb
000178c0  w    O .rwdata	00000008 _ZTIDs
000170bc  w    O .rodata	00000010 _ZTIPh
0001717c  w    O .rodata	00000010 _ZTIPw
00017334  w    O .rodata	0000000c _ZTISt10bad_typeid
000168a0 g     F .text	0000011c __register_exitproc
00017364  w    O .rodata	0000000d _ZTSSt9bad_alloc
000172c4  w    O .rodata	00000014 _ZTVSt20bad_array_new_length
000139d4 g     F .text	0000000c _ZGTtNKSt13bad_exception4whatEv
00012ec8 g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
00010c74  w    F .text	000000cc _ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation
000118e8  w    F .text	00000024 _ZSt12__miter_baseIPhET_S1_
000178a0  w    O .rwdata	00000008 _ZTIh
00016fcc  w    O .rodata	00000010 _ZTIPKx
00010f0c g     F .text	0000002c _ZN5Plant7Encoder8readDataEv
000115ac  w    F .text	0000005c _ZNSt8functionIFvRN6Serial10rx_messageEEEaSERKS4_
000173d0 g       *ABS*	00000000 __ram_rwdata_start
00014304 g     F .text	000000c8 .hidden _Unwind_SjLj_RaiseException
00016b48 g       *ABS*	00000000 __ram_rodata_start
00014410 g     F .text	00000044 .hidden _Unwind_SjLj_Resume
000105ec  w    F .text	0000002c _ZNSt14_Function_baseC1Ev
00016e64  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
00017880  w    O .rwdata	00000008 _ZTIj
00013edc g     F .text	00000038 _ZNSt20bad_array_new_lengthD0Ev
00017850  w    O .rwdata	00000008 _ZTId
00013e8c g     F .text	00000034 __cxa_throw_bad_array_new_length
00013148 g     F .text	00000004 _ZNSt9type_infoD2Ev
00011838  w    F .text	0000007c _ZNSt8functionIFvRN6Serial10rx_messageEEE4swapERS4_
000177e8  w    O .rwdata	00000003 _ZTSDn
00013a00 g     F .text	00000008 _ZN10__cxxabiv119__foreign_exceptionD0Ev
00013d2c g     F .text	00000010 _ZN10__cxxabiv129__pointer_to_member_type_infoD2Ev
000130c4 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
0001702c  w    O .rodata	00000010 _ZTIPKj
00012d8c g     F .text	00000008 _ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv
00016ea0  w    O .rodata	0000000c _ZTIN10__cxxabiv123__fundamental_type_infoE
00015600 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00016784 g     F .text	000000b8 alt_get_fd
00010c44  w    F .text	00000030 _ZNSt9_Any_data9_M_accessIPPFvRN6Serial10rx_messageEEEERT_v
00010b4c  w    F .text	00000040 _ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE14_M_get_pointerERKSt9_Any_data
000177f0  w    O .rwdata	00000005 _ZTSPKDn
000176e0  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
00016bd8  w    O .rodata	0000000c _ZTIN10__cxxabiv120__function_type_infoE
000177cc  w    O .rwdata	00000004 _ZTSPKf
00017754  w    O .rwdata	00000004 _ZTSPKa
00016870 g     F .text	00000030 memcmp
00018000 g       *ABS*	00000000 __alt_stack_base
00013fd8 g     F .text	00000038 _ZNSt9bad_allocD0Ev
00012e80 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
00013a28 g     F .text	00000010 _ZN10__cxxabiv123__fundamental_type_infoD2Ev
00017714  w    O .rwdata	00000004 _ZTSPDu
00014454 g     F .text	00000040 .hidden _Unwind_SjLj_Resume_or_Rethrow
000172e8  w    O .rodata	0000000c _ZTSSt8bad_cast
0001314c g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
00012d94 g     F .text	00000010 _ZN10__cxxabiv119__pointer_type_infoD2Ev
00010ed8 g     F .text	00000034 _ZN5Plant7EncoderC2Em
000176b8  w    O .rwdata	00000008 _ZTIFvRN6Serial10rx_messageEE
000119f0  w    F .text	0000008c _ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_
00010d40  w    F .text	00000030 _ZNKSt9_Any_data9_M_accessIPFvRN6Serial10rx_messageEEEERKT_v
00016e28  w    O .rodata	00000014 _ZTVSt9exception
000139f4 g     F .text	00000008 _ZN10__cxxabiv115__forced_unwindD0Ev
0001667c g     F .text	00000108 alt_find_file
00015dbc g     F .text	000000a8 alt_dev_llist_insert
000152f4 g     F .text	00000024 __malloc_lock
000107d8  w    F .text	00000038 _ZNSt8functionIFvRN6Serial10rx_messageEEED2Ev
0001533c g     F .text	000000b8 sbrk
00013d3c g     F .text	00000038 _ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev
00016d64  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
00012c58 g     F .text	00000060 __cxa_throw
000142c8 g     F .text	00000010 .hidden _Unwind_SetIP
00016b78  w    O .rodata	0000001b _ZTSPFvRN6Serial10rx_messageEE
00016f1c  w    O .rodata	00000010 _ZTIPDf
00017888  w    O .rwdata	00000008 _ZTIi
00016fac  w    O .rodata	00000010 _ZTIPKy
00014c3c g     F .text	000000a8 __sfvwrite_small_dev
0001715c  w    O .rodata	00000010 _ZTIPDu
00011b30  w    F .text	0000006c _ZSt4swapIPFvRKSt9_Any_dataRN6Serial10rx_messageEEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_
00017e78 g       *ABS*	00000000 __bss_start
000145cc g     F .text	00000020 memset
0001030c g     F .text	000000a8 main
000177dc  w    O .rwdata	00000002 _ZTSe
00017e84 g     O .bss	00000001 _ZN6Serial4UART10uart_readyE
00017eb0 g     O .bss	00000004 alt_envp
00017340  w    O .rodata	00000014 _ZTVSt10bad_typeid
00015660 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00017848  w    O .rwdata	00000008 _ZTIe
00013a08 g     F .text	00000004 _ZGTtNKSt9exceptionD1Ev
00013a10 g     F .text	0000000c __cxa_get_globals_fast
00016b94  w    O .rodata	0000001a _ZTSFvRN6Serial10rx_messageEE
000131f8 g     F .text	00000034 _ZSt25__throw_bad_function_callv
00017300  w    O .rodata	00000014 _ZTVSt8bad_cast
0001a000 g       *ABS*	00000000 __alt_heap_limit
000177c4  w    O .rwdata	00000002 _ZTSf
00013f68 g     F .text	0000000c _ZNKSt10bad_typeid4whatEv
000170ec  w    O .rodata	00000010 _ZTIPKc
000146ec g     F .text	00000160 _malloc_r
000131a8 g     F .text	0000000c _ZNKSt17bad_function_call4whatEv
00016fec  w    O .rodata	00000010 _ZTIPKm
000139d4 g     F .text	0000000c _ZNKSt13bad_exception4whatEv
00017918 g     O .rwdata	00000004 alt_errno
00014b70 g     F .text	0000000c _init_signal
00016d58  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
0001710c  w    O .rodata	00000010 _ZTIPKDi
000139c4 g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
000172b8  w    O .rodata	0000000c _ZTISt20bad_array_new_length
00013d2c g     F .text	00000010 _ZN10__cxxabiv129__pointer_to_member_type_infoD1Ev
00016f4c  w    O .rodata	00000010 _ZTIPKe
00016b44 g       *ABS*	00000000 __CTOR_END__
00010618  w    F .text	0000008c _ZNSt14_Function_baseD1Ev
00017730  w    O .rwdata	00000003 _ZTSDi
00017e89 g     O .bss	00000001 _ZN6Serial4UART6rx_lenE
00014bdc g     F .text	00000044 strcmp
0001708c  w    O .rodata	00000010 _ZTIPKs
000170fc  w    O .rodata	00000010 _ZTIPc
00017840  w    O .rwdata	00000008 _ZTIDn
00016b48 g       *ABS*	00000000 __flash_rodata_start
00016e50  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
000106a4  w    F .text	00000030 _ZN6Serial10rx_message12getFirstWordEv
00016b44 g       *ABS*	00000000 __DTOR_LIST__
00017838  w    O .rwdata	00000008 _ZTIDf
00013f20 g     F .text	00000010 _ZNSt8bad_castD2Ev
000177e0  w    O .rwdata	00000003 _ZTSPe
00017704  w    O .rwdata	00000002 _ZTSw
00015568 g     F .text	0000003c alt_irq_init
00017744  w    O .rwdata	00000003 _ZTSPc
000163ac g     F .text	00000070 alt_release_fd
00012e90 g     F .text	00000038 _ZN10__cxxabiv120__si_class_type_infoD0Ev
00013ad0 g     F .text	0000025c _ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj
000114c0  w    F .text	00000038 _ZNSt8functionIFvRN6Serial10rx_messageEEEC1Ev
00016f0c  w    O .rodata	00000010 _ZTIPKDf
00017820  w    O .rwdata	00000005 _ZTSPKDe
000116f8  w    F .text	00000140 _ZNSt8functionIFvRN6Serial10rx_messageEEEC2ERKS4_
00010960  w    F .text	00000028 _ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE21_M_not_empty_functionIS4_EEbPT_
0001683c g     F .text	00000014 atexit
00014ce4 g     F .text	00000050 _write_r
00013e24 g     F .text	00000034 __cxa_bad_cast
000142fc g     F .text	00000008 .hidden _Unwind_GetTextRelBase
000137b8 g     F .text	00000058 __cxa_call_terminate
00017870  w    O .rwdata	00000008 _ZTIm
00011b0c  w    F .text	00000024 _ZSt4moveIRPFvRKSt9_Any_dataRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOSA_
000178f8 g     O .rwdata	00000004 _impure_ptr
000176d8  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
00016be4  w    O .rodata	00000020 _ZTVN10__cxxabiv120__function_type_infoE
00017ea8 g     O .bss	00000004 alt_argc
00016eac  w    O .rodata	00000020 _ZTVN10__cxxabiv123__fundamental_type_infoE
00015ec8 g     F .text	00000064 _do_dtors
00010a54  w    F .text	00000098 _ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation
00017250  w    O .rodata	0000000c _ZTIN10__cxxabiv129__pointer_to_member_type_infoE
000109ac  w    F .text	00000050 _ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE15_M_init_functorERSt9_Any_dataOS5_
00011608  w    F .text	00000030 _ZNSt5arrayIhLj4EE5beginEv
0001714c  w    O .rodata	00000010 _ZTIPKDu
00011534  w    F .text	00000078 _ZNKSt8functionIFvRN6Serial10rx_messageEEEclES2_
00012b80 g     F .text	0000000c _ZSt14get_unexpectedv
00010020 g       .exceptions	00000000 alt_irq_entry
00017818  w    O .rwdata	00000003 _ZTSDe
000142ec g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
000170cc  w    O .rodata	00000010 _ZTIPKa
00011aa0  w    F .text	0000006c _ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_
00017904 g     O .rwdata	00000008 alt_fs_list
00016e04  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
000178c8  w    O .rwdata	00000008 _ZTIDu
0001703c  w    O .rodata	00000010 _ZTIPj
000142d8 g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
0001781c  w    O .rwdata	00000004 _ZTSPDe
00013818 g     F .text	000000b8 __cxa_begin_catch
00017760  w    O .rwdata	00000004 _ZTSPKh
0001116c g     F .text	00000090 _ZN6Serial4UARTC2ESt8functionIFvRNS_10rx_messageEEE
000132bc g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
00012b08 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
000171ac  w    O .rodata	00000010 _ZTIPKv
000177e4  w    O .rwdata	00000004 _ZTSPKe
000131c4 g     F .text	00000034 _ZNSt17bad_function_callD0Ev
000116c8  w    F .text	00000030 _ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj
00010020 g       *ABS*	00000000 __ram_exceptions_start
00016cfc  w    O .rodata	00000016 _ZTSSt17bad_function_call
000176ec  w    O .rwdata	00000002 _ZTSv
000131b4 g     F .text	00000010 _ZNSt17bad_function_callD1Ev
000139e8 g     F .text	00000008 _ZNSt13bad_exceptionD0Ev
000105ec  w    F .text	0000002c _ZNSt14_Function_baseC2Ev
000176e8 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
00017770  w    O .rwdata	00000002 _ZTSt
00012ddc g     F .text	000000a4 _ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj
0001707c  w    O .rodata	00000010 _ZTIPt
00014d8c g     F .text	00000050 alt_ic_isr_register
00013664 g     F .text	00000058 __cxa_allocate_exception
00016f6c  w    O .rodata	00000010 _ZTIPKd
00016c80  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
000170ac  w    O .rodata	00000010 _ZTIPKh
00017924 g       *ABS*	00000000 _edata
00015940 g     F .text	00000060 altera_avalon_uart_read_fd
00018000 g       *ABS*	00000000 _end
00012218 g     F .text	00000698 __gxx_personality_sj0
00010224 g       *ABS*	00000000 __ram_exceptions_end
0001777c  w    O .rwdata	00000002 _ZTSi
00010d94  w    F .text	00000024 _ZSt7forwardIRPFvRN6Serial10rx_messageEEEOT_RNSt16remove_referenceIS6_E4typeE
000177b8  w    O .rwdata	00000002 _ZTSy
000139c0 g     F .text	00000004 _ZNSt9exceptionD1Ev
000171cc  w    O .rodata	00000022 _ZTSN10__cxxabiv117__pbase_type_infoE
00014e64 g     F .text	0000008c alt_ic_irq_disable
00017794  w    O .rwdata	00000002 _ZTSl
000178e0  w    O .rwdata	00000008 _ZTIv
00017768  w    O .rwdata	00000003 _ZTSPs
00016850 g     F .text	00000020 exit
00014280 g     F .text	00000018 .hidden _Unwind_SetGR
00013028 g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
00012a2c g     F .text	000000c8 _ZN10__cxxabiv111__terminateEPFvvE
00016bb0  w    O .rodata	00000025 _ZTSN10__cxxabiv120__function_type_infoE
00013fc8 g     F .text	00000010 _ZNSt9bad_allocD1Ev
00010c14  w    F .text	00000030 _ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v
0001104c g     F .text	00000044 _ZN5Plant5Motor4stopEv
0001a000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00017e78 g     O .bss	00000001 uart
000177d0  w    O .rwdata	00000002 _ZTSd
00017878  w    O .rwdata	00000008 _ZTIl
0001780c  w    O .rwdata	00000004 _ZTSPDd
00016dd8  w    O .rodata	0000000c _ZTISt13bad_exception
00016edc  w    O .rodata	00000010 _ZTIPDe
000114c0  w    F .text	00000038 _ZNSt8functionIFvRN6Serial10rx_messageEEEC2Ev
000105a4  w    F .text	00000024 _ZNSt9_Any_data9_M_accessEv
00013a70  w    F .text	00000018 _ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj
00012d44 g     F .text	00000010 _ZN10__cxxabiv120__function_type_infoD2Ev
00016fdc  w    O .rodata	00000010 _ZTIPx
00014d34 g     F .text	00000038 _exit
00014250 g     F .text	00000018 .hidden _Unwind_GetGR
00013a1c g     F .text	0000000c __cxa_get_globals
000176c4 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
00014c20 g     F .text	0000001c strlen
00014924 g     F .text	0000005c _init_signal_r
000176c8  w    O .rwdata	00000008 _ZTISt9type_info
0001624c g     F .text	00000160 open
00016f5c  w    O .rodata	00000010 _ZTIPe
00013a0c g     F .text	00000004 _ZGTtNKSt13bad_exceptionD1Ev
00016db4  w    O .rodata	0000000d _ZTSSt9exception
00017e98 g     O .bss	00000004 __malloc_sbrk_start
00017324  w    O .rodata	0000000f _ZTSSt10bad_typeid
00017828  w    O .rwdata	00000008 _ZTIDe
00017ec0 g     O .bss	00000010 tilt_motor
00013e58 g     F .text	00000034 __cxa_bad_typeid
000139e0 g     F .text	00000008 _ZNSt9exceptionD0Ev
00010f9c g     F .text	00000058 _ZN5Plant5Motor12setFrequencyEm
00015f2c g     F .text	00000020 alt_icache_flush_all
000177ac  w    O .rwdata	00000002 _ZTSx
00013f74 g     F .text	00000010 _ZNSt10bad_typeidD1Ev
000142f4 g     F .text	00000008 .hidden _Unwind_GetDataRelBase
00011b9c  w    F .text	00000024 _ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh
000178fc g     O .rwdata	00000004 alt_priority_mask
00017e9c g     O .bss	00000004 __malloc_free_list
00014ddc g     F .text	00000088 alt_ic_irq_enable
00017898  w    O .rwdata	00000008 _ZTIs
00015a3c g     F .text	000000c4 altera_avalon_uart_read
000170dc  w    O .rodata	00000010 _ZTIPa
0001770c  w    O .rwdata	00000004 _ZTSPKw
00012d44 g     F .text	00000010 _ZN10__cxxabiv120__function_type_infoD1Ev
00013f74 g     F .text	00000010 _ZNSt10bad_typeidD2Ev
0001713c  w    O .rodata	00000010 _ZTIPDs
00016eec  w    O .rodata	00000010 _ZTIPKDd
0001791c g     O .rwdata	00000008 alt_alarm_list
00016e78  w    O .rodata	00000028 _ZTSN10__cxxabiv123__fundamental_type_infoE
00015e64 g     F .text	00000064 _do_ctors
00014b7c g     F .text	00000010 __sigtramp
00010ea8  w    F .text	00000030 _ZNSt9_Any_data9_M_accessIPFvRN6Serial10rx_messageEEEERT_v
00016c28  w    O .rodata	0000000c _ZTIN10__cxxabiv119__pointer_type_infoE
00015c58 g     F .text	000000dc close
0001775c  w    O .rwdata	00000003 _ZTSPh
00016de4  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
000151f4 g     F .text	00000084 alt_load
00013164 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
0001776c  w    O .rwdata	00000004 _ZTSPKs
00013d74 g     F .text	00000098 _ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj
00014b4c g     F .text	00000010 raise
00017778  w    O .rwdata	00000004 _ZTSPKt
0001455c g     F .text	00000010 free
000132cc g     F .text	00000038 _ZN10__cxxabiv117__class_type_infoD0Ev
000111fc g     F .text	000000ec _ZN6Serial4UART8sendDataENS_10tx_messageE
00016b68  w    O .rodata	00000010 _ZTIPFvRN6Serial10rx_messageEE



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408914 	ori	at,at,548
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101c40 	call	101c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffc15 	stw	r2,-16(fp)

  return active;
   10118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0ffff17 	ldw	r3,-4(fp)
   10130:	e0bffe17 	ldw	r2,-8(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001126 	beq	r2,zero,10180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	e0bffd17 	ldw	r2,-12(fp)
   10140:	100690fa 	slli	r3,r2,3
   10144:	00800074 	movhi	r2,1
   10148:	1885883a 	add	r2,r3,r2
   1014c:	10dfc017 	ldw	r3,32512(r2)
   10150:	e0bffd17 	ldw	r2,-12(fp)
   10154:	100890fa 	slli	r4,r2,3
   10158:	00800074 	movhi	r2,1
   1015c:	2085883a 	add	r2,r4,r2
   10160:	109fc117 	ldw	r2,32516(r2)
   10164:	1009883a 	mov	r4,r2
   10168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   1016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
   10170:	0005313a 	rdctl	r2,ipending
   10174:	e0bffb15 	stw	r2,-20(fp)
  return active;
   10178:	e0bffb17 	ldw	r2,-20(fp)
   1017c:	00000706 	br	1019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
   10180:	e0bffe17 	ldw	r2,-8(fp)
   10184:	1085883a 	add	r2,r2,r2
   10188:	e0bffe15 	stw	r2,-8(fp)
      i++;
   1018c:	e0bffd17 	ldw	r2,-12(fp)
   10190:	10800044 	addi	r2,r2,1
   10194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
   10198:	003fe406 	br	1012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
   1019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   101a0:	e0bfff17 	ldw	r2,-4(fp)
   101a4:	103fde1e 	bne	r2,zero,10120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101a8:	0001883a 	nop
}
   101ac:	0001883a 	nop
   101b0:	e037883a 	mov	sp,fp
   101b4:	dfc00117 	ldw	ra,4(sp)
   101b8:	df000017 	ldw	fp,0(sp)
   101bc:	dec00204 	addi	sp,sp,8
   101c0:	f800283a 	ret

000101c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101c4:	defffb04 	addi	sp,sp,-20
   101c8:	dfc00415 	stw	ra,16(sp)
   101cc:	df000315 	stw	fp,12(sp)
   101d0:	df000304 	addi	fp,sp,12
   101d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101d8:	00bfffc4 	movi	r2,-1
   101dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
   101e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101e4:	d0a20017 	ldw	r2,-30720(gp)
   101e8:	10000726 	beq	r2,zero,10208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101ec:	d0a20017 	ldw	r2,-30720(gp)
   101f0:	e0ffff17 	ldw	r3,-4(fp)
   101f4:	e1bffe17 	ldw	r6,-8(fp)
   101f8:	e17ffd17 	ldw	r5,-12(fp)
   101fc:	1809883a 	mov	r4,r3
   10200:	103ee83a 	callr	r2
   10204:	00000206 	br	10210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   1020c:	0005883a 	mov	r2,zero
}
   10210:	e037883a 	mov	sp,fp
   10214:	dfc00117 	ldw	ra,4(sp)
   10218:	df000017 	ldw	fp,0(sp)
   1021c:	dec00204 	addi	sp,sp,8
   10220:	f800283a 	ret

Disassembly of section .text:

00010224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10224:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10228:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
   1022c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   10230:	d6bdad14 	ori	gp,gp,63156
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10234:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10238:	109f9e14 	ori	r2,r2,32376

    movhi r3, %hi(__bss_end)
   1023c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10240:	18e00014 	ori	r3,r3,32768

    beq r2, r3, 1f
   10244:	10c00326 	beq	r2,r3,10254 <_start+0x30>

0:
    stw zero, (r2)
   10248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   1024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10250:	10fffd36 	bltu	r2,r3,10248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10254:	00151f40 	call	151f4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10258:	00152780 	call	15278 <alt_main>

0001025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   1025c:	003fff06 	br	1025c <alt_after_alt_main>

00010260 <_Z17handleUartMessageRN6Serial10rx_messageE>:
// Setup Motors.
Plant::Motor tilt_motor = Plant::Motor(MOTOR_PWM_0_SLAVE_1_BASE, MOTOR_PWM_0_SLAVE_2_BASE);
Plant::Motor pan_motor = Plant::Motor(MOTOR_PWM_1_SLAVE_1_BASE, MOTOR_PWM_1_SLAVE_2_BASE);

void handleUartMessage(Serial::rx_message &received_message)
{
   10260:	defffd04 	addi	sp,sp,-12
   10264:	dfc00215 	stw	ra,8(sp)
   10268:	df000115 	stw	fp,4(sp)
   1026c:	df000104 	addi	fp,sp,4
   10270:	e13fff15 	stw	r4,-4(fp)
	// Determine for which motor this message is intended.
	switch (received_message.motor)
   10274:	e0bfff17 	ldw	r2,-4(fp)
   10278:	10800017 	ldw	r2,0(r2)
   1027c:	1004d7fa 	srli	r2,r2,31
   10280:	10803fcc 	andi	r2,r2,255
   10284:	10800060 	cmpeqi	r2,r2,1
   10288:	10000d1e 	bne	r2,zero,102c0 <_Z17handleUartMessageRN6Serial10rx_messageE+0x60>
	{
		case 0:
		{
			tilt_motor.setFrequency(received_message.getFirstWord());
   1028c:	e13fff17 	ldw	r4,-4(fp)
   10290:	00106a40 	call	106a4 <_ZN6Serial10rx_message12getFirstWordEv>
   10294:	100b883a 	mov	r5,r2
   10298:	01000074 	movhi	r4,1
   1029c:	211fb004 	addi	r4,r4,32448
   102a0:	0010f9c0 	call	10f9c <_ZN5Plant5Motor12setFrequencyEm>
			tilt_motor.setSecondWord(received_message.getSecondWord());
   102a4:	e13fff17 	ldw	r4,-4(fp)
   102a8:	00106d40 	call	106d4 <_ZN6Serial10rx_message13getSecondWordEv>
   102ac:	100b883a 	mov	r5,r2
   102b0:	01000074 	movhi	r4,1
   102b4:	211fb004 	addi	r4,r4,32448
   102b8:	0010ff40 	call	10ff4 <_ZN5Plant5Motor13setSecondWordEm>
			break;
   102bc:	00000d06 	br	102f4 <_Z17handleUartMessageRN6Serial10rx_messageE+0x94>
		}

		case 1:
		{
			pan_motor.setFrequency(received_message.getFirstWord());
   102c0:	e13fff17 	ldw	r4,-4(fp)
   102c4:	00106a40 	call	106a4 <_ZN6Serial10rx_message12getFirstWordEv>
   102c8:	100b883a 	mov	r5,r2
   102cc:	01000074 	movhi	r4,1
   102d0:	211fb404 	addi	r4,r4,32464
   102d4:	0010f9c0 	call	10f9c <_ZN5Plant5Motor12setFrequencyEm>
			pan_motor.setSecondWord(received_message.getSecondWord());
   102d8:	e13fff17 	ldw	r4,-4(fp)
   102dc:	00106d40 	call	106d4 <_ZN6Serial10rx_message13getSecondWordEv>
   102e0:	100b883a 	mov	r5,r2
   102e4:	01000074 	movhi	r4,1
   102e8:	211fb404 	addi	r4,r4,32464
   102ec:	0010ff40 	call	10ff4 <_ZN5Plant5Motor13setSecondWordEm>
			break;
   102f0:	0001883a 	nop
		}
	}
}
   102f4:	0001883a 	nop
   102f8:	e037883a 	mov	sp,fp
   102fc:	dfc00117 	ldw	ra,4(sp)
   10300:	df000017 	ldw	fp,0(sp)
   10304:	dec00204 	addi	sp,sp,8
   10308:	f800283a 	ret

0001030c <main>:
/**
 * Motor 0 = tilt
 * Motor 1 = pan
 */
int main()
{
   1030c:	defff804 	addi	sp,sp,-32
   10310:	dfc00715 	stw	ra,28(sp)
   10314:	df000615 	stw	fp,24(sp)
   10318:	df000604 	addi	fp,sp,24
	// Print startup message.
	printf("JIWY motor controller running..\n");
   1031c:	01000074 	movhi	r4,1
   10320:	211ad204 	addi	r4,r4,27464
   10324:	00148cc0 	call	148cc <puts>

	int32_t prev_tilt = 0;
   10328:	e03fff15 	stw	zero,-4(fp)
	int32_t prev_pan = 0;
   1032c:	e03ffe15 	stw	zero,-8(fp)

	while(1)
	{
		int32_t tilt = tilt_encoder.readData();
   10330:	d121f204 	addi	r4,gp,-30776
   10334:	0010f0c0 	call	10f0c <_ZN5Plant7Encoder8readDataEv>
   10338:	e0bffd15 	stw	r2,-12(fp)

		if (tilt != prev_tilt)
   1033c:	e0fffd17 	ldw	r3,-12(fp)
   10340:	e0bfff17 	ldw	r2,-4(fp)
   10344:	18800a26 	beq	r3,r2,10370 <main+0x64>
		{
			prev_tilt = tilt;
   10348:	e0bffd17 	ldw	r2,-12(fp)
   1034c:	e0bfff15 	stw	r2,-4(fp)
			Serial::tx_message message(tilt, 0);
   10350:	e0bffb04 	addi	r2,fp,-20
   10354:	000d883a 	mov	r6,zero
   10358:	e17ffd17 	ldw	r5,-12(fp)
   1035c:	1009883a 	mov	r4,r2
   10360:	00107440 	call	10744 <_ZN6Serial10tx_messageC1Ell>
			uart.sendData(message);
   10364:	e17ffb17 	ldw	r5,-20(fp)
   10368:	d121f104 	addi	r4,gp,-30780
   1036c:	00111fc0 	call	111fc <_ZN6Serial4UART8sendDataENS_10tx_messageE>
		}

		int32_t pan = pan_encoder.readData();
   10370:	d121f304 	addi	r4,gp,-30772
   10374:	0010f0c0 	call	10f0c <_ZN5Plant7Encoder8readDataEv>
   10378:	e0bffc15 	stw	r2,-16(fp)

		if (pan != prev_pan)
   1037c:	e0fffc17 	ldw	r3,-16(fp)
   10380:	e0bffe17 	ldw	r2,-8(fp)
   10384:	18bfea26 	beq	r3,r2,10330 <main+0x24>
		{
			prev_pan = pan;
   10388:	e0bffc17 	ldw	r2,-16(fp)
   1038c:	e0bffe15 	stw	r2,-8(fp)
			Serial::tx_message message(pan, 1);
   10390:	e0bffa04 	addi	r2,fp,-24
   10394:	01800044 	movi	r6,1
   10398:	e17ffc17 	ldw	r5,-16(fp)
   1039c:	1009883a 	mov	r4,r2
   103a0:	00107440 	call	10744 <_ZN6Serial10tx_messageC1Ell>
			uart.sendData(message);
   103a4:	e17ffa17 	ldw	r5,-24(fp)
   103a8:	d121f104 	addi	r4,gp,-30780
   103ac:	00111fc0 	call	111fc <_ZN6Serial4UART8sendDataENS_10tx_messageE>
		}

		//usleep(10);
	}
   103b0:	003fdf06 	br	10330 <main+0x24>

000103b4 <_Z41__static_initialization_and_destruction_0ii>:

	return 0;
}
   103b4:	deffe204 	addi	sp,sp,-120
   103b8:	dfc01d15 	stw	ra,116(sp)
   103bc:	df001c15 	stw	fp,112(sp)
   103c0:	ddc01b15 	stw	r23,108(sp)
   103c4:	dd801a15 	stw	r22,104(sp)
   103c8:	dd401915 	stw	r21,100(sp)
   103cc:	dd001815 	stw	r20,96(sp)
   103d0:	dcc01715 	stw	r19,92(sp)
   103d4:	dc801615 	stw	r18,88(sp)
   103d8:	dc401515 	stw	r17,84(sp)
   103dc:	dc001415 	stw	r16,80(sp)
   103e0:	df001c04 	addi	fp,sp,112
   103e4:	e13ff315 	stw	r4,-52(fp)
   103e8:	e17ff215 	stw	r5,-56(fp)
   103ec:	00800074 	movhi	r2,1
   103f0:	10888604 	addi	r2,r2,8728
   103f4:	e0bfeb15 	stw	r2,-84(fp)
   103f8:	00800074 	movhi	r2,1
   103fc:	109abc84 	addi	r2,r2,27378
   10400:	e0bfec15 	stw	r2,-80(fp)
   10404:	e0bfed04 	addi	r2,fp,-76
   10408:	17000015 	stw	fp,0(r2)
   1040c:	00c00074 	movhi	r3,1
   10410:	18c13904 	addi	r3,r3,1252
   10414:	10c00115 	stw	r3,4(r2)
   10418:	16c00215 	stw	sp,8(r2)
   1041c:	e0bfe504 	addi	r2,fp,-108
   10420:	1009883a 	mov	r4,r2
   10424:	00142280 	call	14228 <_Unwind_SjLj_Register>
   10428:	e0bff317 	ldw	r2,-52(fp)
   1042c:	10800058 	cmpnei	r2,r2,1
   10430:	1000361e 	bne	r2,zero,1050c <_Z41__static_initialization_and_destruction_0ii+0x158>
   10434:	e0fff217 	ldw	r3,-56(fp)
   10438:	00bfffd4 	movui	r2,65535
   1043c:	1880331e 	bne	r3,r2,1050c <_Z41__static_initialization_and_destruction_0ii+0x158>
Serial::UART uart = Serial::UART(handleUartMessage);
   10440:	e0fff404 	addi	r3,fp,-48
   10444:	00bfffc4 	movi	r2,-1
   10448:	e0bfe615 	stw	r2,-104(fp)
   1044c:	01400074 	movhi	r5,1
   10450:	29409804 	addi	r5,r5,608
   10454:	1809883a 	mov	r4,r3
   10458:	00108100 	call	10810 <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1IPS3_vvEET_>
   1045c:	e0fff404 	addi	r3,fp,-48
   10460:	00800044 	movi	r2,1
   10464:	e0bfe615 	stw	r2,-104(fp)
   10468:	180b883a 	mov	r5,r3
   1046c:	d121f104 	addi	r4,gp,-30780
   10470:	001116c0 	call	1116c <_ZN6Serial4UARTC1ESt8functionIFvRNS_10rx_messageEEE>
   10474:	e0bff404 	addi	r2,fp,-48
   10478:	1009883a 	mov	r4,r2
   1047c:	00107d80 	call	107d8 <_ZNSt8functionIFvRN6Serial10rx_messageEEED1Ev>
Plant::Encoder tilt_encoder = Plant::Encoder(QUADRATURE_ENCODER_0_BASE);
   10480:	014000b4 	movhi	r5,2
   10484:	00bfffc4 	movi	r2,-1
   10488:	e0bfe615 	stw	r2,-104(fp)
   1048c:	29490004 	addi	r5,r5,9216
   10490:	d121f204 	addi	r4,gp,-30776
   10494:	0010ed80 	call	10ed8 <_ZN5Plant7EncoderC1Em>
Plant::Encoder pan_encoder = Plant::Encoder(QUADRATURE_ENCODER_1_BASE);
   10498:	014000b4 	movhi	r5,2
   1049c:	29480004 	addi	r5,r5,8192
   104a0:	d121f304 	addi	r4,gp,-30772
   104a4:	0010ed80 	call	10ed8 <_ZN5Plant7EncoderC1Em>
Plant::Motor tilt_motor = Plant::Motor(MOTOR_PWM_0_SLAVE_1_BASE, MOTOR_PWM_0_SLAVE_2_BASE);
   104a8:	018000b4 	movhi	r6,2
   104ac:	31850004 	addi	r6,r6,5120
   104b0:	014000b4 	movhi	r5,2
   104b4:	29470004 	addi	r5,r5,7168
   104b8:	01000074 	movhi	r4,1
   104bc:	211fb004 	addi	r4,r4,32448
   104c0:	0010f380 	call	10f38 <_ZN5Plant5MotorC1Emm>
Plant::Motor pan_motor = Plant::Motor(MOTOR_PWM_1_SLAVE_1_BASE, MOTOR_PWM_1_SLAVE_2_BASE);
   104c4:	018000b4 	movhi	r6,2
   104c8:	31840004 	addi	r6,r6,4096
   104cc:	014000b4 	movhi	r5,2
   104d0:	29460004 	addi	r5,r5,6144
   104d4:	01000074 	movhi	r4,1
   104d8:	211fb404 	addi	r4,r4,32464
   104dc:	0010f380 	call	10f38 <_ZN5Plant5MotorC1Emm>
}
   104e0:	00000a06 	br	1050c <_Z41__static_initialization_and_destruction_0ii+0x158>
Serial::UART uart = Serial::UART(handleUartMessage);
   104e4:	e0bfe717 	ldw	r2,-100(fp)
   104e8:	e0bfe415 	stw	r2,-112(fp)
   104ec:	e0bff404 	addi	r2,fp,-48
   104f0:	1009883a 	mov	r4,r2
   104f4:	00107d80 	call	107d8 <_ZNSt8functionIFvRN6Serial10rx_messageEEED1Ev>
   104f8:	e0ffe417 	ldw	r3,-112(fp)
   104fc:	00bfffc4 	movi	r2,-1
   10500:	e0bfe615 	stw	r2,-104(fp)
   10504:	1809883a 	mov	r4,r3
   10508:	00144100 	call	14410 <_Unwind_SjLj_Resume>
   1050c:	e0bfe504 	addi	r2,fp,-108
   10510:	1009883a 	mov	r4,r2
   10514:	00142400 	call	14240 <_Unwind_SjLj_Unregister>
}
   10518:	e6fff804 	addi	sp,fp,-32
   1051c:	dfc00917 	ldw	ra,36(sp)
   10520:	df000817 	ldw	fp,32(sp)
   10524:	ddc00717 	ldw	r23,28(sp)
   10528:	dd800617 	ldw	r22,24(sp)
   1052c:	dd400517 	ldw	r21,20(sp)
   10530:	dd000417 	ldw	r20,16(sp)
   10534:	dcc00317 	ldw	r19,12(sp)
   10538:	dc800217 	ldw	r18,8(sp)
   1053c:	dc400117 	ldw	r17,4(sp)
   10540:	dc000017 	ldw	r16,0(sp)
   10544:	dec00a04 	addi	sp,sp,40
   10548:	f800283a 	ret

0001054c <_GLOBAL__sub_I_uart>:
   1054c:	defffe04 	addi	sp,sp,-8
   10550:	dfc00115 	stw	ra,4(sp)
   10554:	df000015 	stw	fp,0(sp)
   10558:	d839883a 	mov	fp,sp
   1055c:	017fffd4 	movui	r5,65535
   10560:	01000044 	movi	r4,1
   10564:	00103b40 	call	103b4 <_Z41__static_initialization_and_destruction_0ii>
   10568:	e037883a 	mov	sp,fp
   1056c:	dfc00117 	ldw	ra,4(sp)
   10570:	df000017 	ldw	fp,0(sp)
   10574:	dec00204 	addi	sp,sp,8
   10578:	f800283a 	ret

0001057c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
   1057c:	defffd04 	addi	sp,sp,-12
   10580:	df000215 	stw	fp,8(sp)
   10584:	df000204 	addi	fp,sp,8
   10588:	e13fff15 	stw	r4,-4(fp)
   1058c:	e17ffe15 	stw	r5,-8(fp)
   10590:	e0bffe17 	ldw	r2,-8(fp)
   10594:	e037883a 	mov	sp,fp
   10598:	df000017 	ldw	fp,0(sp)
   1059c:	dec00104 	addi	sp,sp,4
   105a0:	f800283a 	ret

000105a4 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
   105a4:	defffe04 	addi	sp,sp,-8
   105a8:	df000115 	stw	fp,4(sp)
   105ac:	df000104 	addi	fp,sp,4
   105b0:	e13fff15 	stw	r4,-4(fp)
   105b4:	e0bfff17 	ldw	r2,-4(fp)
   105b8:	e037883a 	mov	sp,fp
   105bc:	df000017 	ldw	fp,0(sp)
   105c0:	dec00104 	addi	sp,sp,4
   105c4:	f800283a 	ret

000105c8 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
   105c8:	defffe04 	addi	sp,sp,-8
   105cc:	df000115 	stw	fp,4(sp)
   105d0:	df000104 	addi	fp,sp,4
   105d4:	e13fff15 	stw	r4,-4(fp)
   105d8:	e0bfff17 	ldw	r2,-4(fp)
   105dc:	e037883a 	mov	sp,fp
   105e0:	df000017 	ldw	fp,0(sp)
   105e4:	dec00104 	addi	sp,sp,4
   105e8:	f800283a 	ret

000105ec <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   105ec:	defffe04 	addi	sp,sp,-8
   105f0:	df000115 	stw	fp,4(sp)
   105f4:	df000104 	addi	fp,sp,4
   105f8:	e13fff15 	stw	r4,-4(fp)
   105fc:	e0bfff17 	ldw	r2,-4(fp)
   10600:	10000215 	stw	zero,8(r2)
   10604:	0001883a 	nop
   10608:	e037883a 	mov	sp,fp
   1060c:	df000017 	ldw	fp,0(sp)
   10610:	dec00104 	addi	sp,sp,4
   10614:	f800283a 	ret

00010618 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
   10618:	defff004 	addi	sp,sp,-64
   1061c:	dfc00f15 	stw	ra,60(sp)
   10620:	df000e15 	stw	fp,56(sp)
   10624:	df000e04 	addi	fp,sp,56
   10628:	e13fff15 	stw	r4,-4(fp)
   1062c:	00800074 	movhi	r2,1
   10630:	10888604 	addi	r2,r2,8728
   10634:	e0bff815 	stw	r2,-32(fp)
   10638:	00800074 	movhi	r2,1
   1063c:	109aba04 	addi	r2,r2,27368
   10640:	e0bff915 	stw	r2,-28(fp)
   10644:	e0bff204 	addi	r2,fp,-56
   10648:	1009883a 	mov	r4,r2
   1064c:	00142280 	call	14228 <_Unwind_SjLj_Register>
    {
      if (_M_manager)
   10650:	e0bfff17 	ldw	r2,-4(fp)
   10654:	10800217 	ldw	r2,8(r2)
   10658:	10000926 	beq	r2,zero,10680 <_ZNSt14_Function_baseD1Ev+0x68>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   1065c:	e0bfff17 	ldw	r2,-4(fp)
   10660:	10800217 	ldw	r2,8(r2)
   10664:	e0ffff17 	ldw	r3,-4(fp)
   10668:	e13fff17 	ldw	r4,-4(fp)
   1066c:	e03ff315 	stw	zero,-52(fp)
   10670:	018000c4 	movi	r6,3
   10674:	200b883a 	mov	r5,r4
   10678:	1809883a 	mov	r4,r3
   1067c:	103ee83a 	callr	r2
    }
   10680:	0001883a 	nop
   10684:	e0bff204 	addi	r2,fp,-56
   10688:	1009883a 	mov	r4,r2
   1068c:	00142400 	call	14240 <_Unwind_SjLj_Unregister>
   10690:	e037883a 	mov	sp,fp
   10694:	dfc00117 	ldw	ra,4(sp)
   10698:	df000017 	ldw	fp,0(sp)
   1069c:	dec00204 	addi	sp,sp,8
   106a0:	f800283a 	ret

000106a4 <_ZN6Serial10rx_message12getFirstWordEv>:
		uint32_t getFullField()
		{
			return (freq << 18) | (duty << 4) | (direction << 2) | (enable << 1) | motor;
		}

		uint32_t getFirstWord()
   106a4:	defffe04 	addi	sp,sp,-8
   106a8:	df000115 	stw	fp,4(sp)
   106ac:	df000104 	addi	fp,sp,4
   106b0:	e13fff15 	stw	r4,-4(fp)
		{
			return freq;
   106b4:	e0bfff17 	ldw	r2,-4(fp)
   106b8:	10800017 	ldw	r2,0(r2)
   106bc:	108fffcc 	andi	r2,r2,16383
   106c0:	10bfffcc 	andi	r2,r2,65535
		}
   106c4:	e037883a 	mov	sp,fp
   106c8:	df000017 	ldw	fp,0(sp)
   106cc:	dec00104 	addi	sp,sp,4
   106d0:	f800283a 	ret

000106d4 <_ZN6Serial10rx_message13getSecondWordEv>:

		uint32_t getSecondWord()
   106d4:	defffe04 	addi	sp,sp,-8
   106d8:	df000115 	stw	fp,4(sp)
   106dc:	df000104 	addi	fp,sp,4
   106e0:	e13fff15 	stw	r4,-4(fp)
		{
			return (duty << 16) | (direction << 14) | enable << 13;
   106e4:	e0bfff17 	ldw	r2,-4(fp)
   106e8:	10800017 	ldw	r2,0(r2)
   106ec:	1004d3ba 	srli	r2,r2,14
   106f0:	108fffcc 	andi	r2,r2,16383
   106f4:	10bfffcc 	andi	r2,r2,65535
   106f8:	1006943a 	slli	r3,r2,16
   106fc:	e0bfff17 	ldw	r2,-4(fp)
   10700:	10800017 	ldw	r2,0(r2)
   10704:	1004d73a 	srli	r2,r2,28
   10708:	108000cc 	andi	r2,r2,3
   1070c:	10803fcc 	andi	r2,r2,255
   10710:	100493ba 	slli	r2,r2,14
   10714:	1886b03a 	or	r3,r3,r2
   10718:	e0bfff17 	ldw	r2,-4(fp)
   1071c:	10800017 	ldw	r2,0(r2)
   10720:	1004d7ba 	srli	r2,r2,30
   10724:	1080004c 	andi	r2,r2,1
   10728:	10803fcc 	andi	r2,r2,255
   1072c:	1004937a 	slli	r2,r2,13
   10730:	1884b03a 	or	r2,r3,r2
		}
   10734:	e037883a 	mov	sp,fp
   10738:	df000017 	ldw	fp,0(sp)
   1073c:	dec00104 	addi	sp,sp,4
   10740:	f800283a 	ret

00010744 <_ZN6Serial10tx_messageC1Ell>:
	struct tx_message
	{
		int32_t encoder_value : 31;
		int32_t motor : 1;

		tx_message(int32_t encoder_value, int32_t motor_value) :
   10744:	defffc04 	addi	sp,sp,-16
   10748:	df000315 	stw	fp,12(sp)
   1074c:	df000304 	addi	fp,sp,12
   10750:	e13fff15 	stw	r4,-4(fp)
   10754:	e17ffe15 	stw	r5,-8(fp)
   10758:	e1bffd15 	stw	r6,-12(fp)
				encoder_value(encoder_value),
   1075c:	e0bffe17 	ldw	r2,-8(fp)
   10760:	1085883a 	add	r2,r2,r2
   10764:	1009d07a 	srai	r4,r2,1
				motor (motor_value)
   10768:	e0ffff17 	ldw	r3,-4(fp)
   1076c:	00a00034 	movhi	r2,32768
   10770:	10bfffc4 	addi	r2,r2,-1
   10774:	2084703a 	and	r2,r4,r2
   10778:	19000017 	ldw	r4,0(r3)
   1077c:	2120002c 	andhi	r4,r4,32768
   10780:	2084b03a 	or	r2,r4,r2
   10784:	18800015 	stw	r2,0(r3)
   10788:	e0bffd17 	ldw	r2,-12(fp)
   1078c:	100491fa 	slli	r2,r2,7
   10790:	10803fcc 	andi	r2,r2,255
   10794:	1080201c 	xori	r2,r2,128
   10798:	10bfe004 	addi	r2,r2,-128
   1079c:	1005d1fa 	srai	r2,r2,7
   107a0:	e0ffff17 	ldw	r3,-4(fp)
   107a4:	10803fcc 	andi	r2,r2,255
   107a8:	100897fa 	slli	r4,r2,31
   107ac:	19400017 	ldw	r5,0(r3)
   107b0:	00a00034 	movhi	r2,32768
   107b4:	10bfffc4 	addi	r2,r2,-1
   107b8:	2884703a 	and	r2,r5,r2
   107bc:	1104b03a 	or	r2,r2,r4
   107c0:	18800015 	stw	r2,0(r3)
		{}
   107c4:	0001883a 	nop
   107c8:	e037883a 	mov	sp,fp
   107cc:	df000017 	ldw	fp,0(sp)
   107d0:	dec00104 	addi	sp,sp,4
   107d4:	f800283a 	ret

000107d8 <_ZNSt8functionIFvRN6Serial10rx_messageEEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   107d8:	defffd04 	addi	sp,sp,-12
   107dc:	dfc00215 	stw	ra,8(sp)
   107e0:	df000115 	stw	fp,4(sp)
   107e4:	df000104 	addi	fp,sp,4
   107e8:	e13fff15 	stw	r4,-4(fp)
   107ec:	e0bfff17 	ldw	r2,-4(fp)
   107f0:	1009883a 	mov	r4,r2
   107f4:	00106180 	call	10618 <_ZNSt14_Function_baseD1Ev>
   107f8:	0001883a 	nop
   107fc:	e037883a 	mov	sp,fp
   10800:	dfc00117 	ldw	ra,4(sp)
   10804:	df000017 	ldw	fp,0(sp)
   10808:	dec00204 	addi	sp,sp,8
   1080c:	f800283a 	ret

00010810 <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1IPS3_vvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
   10810:	deffe604 	addi	sp,sp,-104
   10814:	dfc01915 	stw	ra,100(sp)
   10818:	df001815 	stw	fp,96(sp)
   1081c:	ddc01715 	stw	r23,92(sp)
   10820:	dd801615 	stw	r22,88(sp)
   10824:	dd401515 	stw	r21,84(sp)
   10828:	dd001415 	stw	r20,80(sp)
   1082c:	dcc01315 	stw	r19,76(sp)
   10830:	dc801215 	stw	r18,72(sp)
   10834:	dc401115 	stw	r17,68(sp)
   10838:	dc001015 	stw	r16,64(sp)
   1083c:	df001804 	addi	fp,sp,96
   10840:	e13ff715 	stw	r4,-36(fp)
   10844:	e17ff615 	stw	r5,-40(fp)
   10848:	00800074 	movhi	r2,1
   1084c:	10888604 	addi	r2,r2,8728
   10850:	e0bfef15 	stw	r2,-68(fp)
   10854:	00800074 	movhi	r2,1
   10858:	109abb04 	addi	r2,r2,27372
   1085c:	e0bff015 	stw	r2,-64(fp)
   10860:	e0bff104 	addi	r2,fp,-60
   10864:	17000015 	stw	fp,0(r2)
   10868:	00c00074 	movhi	r3,1
   1086c:	18c23d04 	addi	r3,r3,2292
   10870:	10c00115 	stw	r3,4(r2)
   10874:	16c00215 	stw	sp,8(r2)
   10878:	e0bfe904 	addi	r2,fp,-92
   1087c:	1009883a 	mov	r4,r2
   10880:	00142280 	call	14228 <_Unwind_SjLj_Register>
      function(_Functor __f)
      : _Function_base()
   10884:	e0bff717 	ldw	r2,-36(fp)
   10888:	1009883a 	mov	r4,r2
   1088c:	00105ec0 	call	105ec <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
   10890:	e0bff617 	ldw	r2,-40(fp)
   10894:	1009883a 	mov	r4,r2
   10898:	00109600 	call	10960 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE21_M_not_empty_functionIS4_EEbPT_>
   1089c:	10803fcc 	andi	r2,r2,255
   108a0:	10001e26 	beq	r2,zero,1091c <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1IPS3_vvEET_+0x10c>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
   108a4:	e0bff717 	ldw	r2,-36(fp)
   108a8:	e0bfe815 	stw	r2,-96(fp)
   108ac:	e0bff604 	addi	r2,fp,-40
   108b0:	1009883a 	mov	r4,r2
   108b4:	00109880 	call	10988 <_ZSt4moveIRPFvRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOS7_>
   108b8:	1007883a 	mov	r3,r2
   108bc:	00800044 	movi	r2,1
   108c0:	e0bfea15 	stw	r2,-88(fp)
   108c4:	180b883a 	mov	r5,r3
   108c8:	e13fe817 	ldw	r4,-96(fp)
   108cc:	00109ac0 	call	109ac <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE15_M_init_functorERSt9_Any_dataOS5_>
	    _M_invoker = &_My_handler::_M_invoke;
   108d0:	e0fff717 	ldw	r3,-36(fp)
   108d4:	00800074 	movhi	r2,1
   108d8:	10827f04 	addi	r2,r2,2556
   108dc:	18800315 	stw	r2,12(r3)
	    _M_manager = &_My_handler::_M_manager;
   108e0:	e0fff717 	ldw	r3,-36(fp)
   108e4:	00800074 	movhi	r2,1
   108e8:	10829504 	addi	r2,r2,2644
   108ec:	18800215 	stw	r2,8(r3)
	  }
      }
   108f0:	00000a06 	br	1091c <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1IPS3_vvEET_+0x10c>
      : _Function_base()
   108f4:	e0bfeb17 	ldw	r2,-84(fp)
   108f8:	e0bfe815 	stw	r2,-96(fp)
   108fc:	e0bff717 	ldw	r2,-36(fp)
   10900:	1009883a 	mov	r4,r2
   10904:	00106180 	call	10618 <_ZNSt14_Function_baseD1Ev>
   10908:	e0ffe817 	ldw	r3,-96(fp)
   1090c:	00bfffc4 	movi	r2,-1
   10910:	e0bfea15 	stw	r2,-88(fp)
   10914:	1809883a 	mov	r4,r3
   10918:	00144100 	call	14410 <_Unwind_SjLj_Resume>
      }
   1091c:	0001883a 	nop
   10920:	e0bfe904 	addi	r2,fp,-92
   10924:	1009883a 	mov	r4,r2
   10928:	00142400 	call	14240 <_Unwind_SjLj_Unregister>
   1092c:	e6fff804 	addi	sp,fp,-32
   10930:	dfc00917 	ldw	ra,36(sp)
   10934:	df000817 	ldw	fp,32(sp)
   10938:	ddc00717 	ldw	r23,28(sp)
   1093c:	dd800617 	ldw	r22,24(sp)
   10940:	dd400517 	ldw	r21,20(sp)
   10944:	dd000417 	ldw	r20,16(sp)
   10948:	dcc00317 	ldw	r19,12(sp)
   1094c:	dc800217 	ldw	r18,8(sp)
   10950:	dc400117 	ldw	r17,4(sp)
   10954:	dc000017 	ldw	r16,0(sp)
   10958:	dec00a04 	addi	sp,sp,40
   1095c:	f800283a 	ret

00010960 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE21_M_not_empty_functionIS4_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
   10960:	defffe04 	addi	sp,sp,-8
   10964:	df000115 	stw	fp,4(sp)
   10968:	df000104 	addi	fp,sp,4
   1096c:	e13fff15 	stw	r4,-4(fp)
	  { return __fp != nullptr; }
   10970:	e0bfff17 	ldw	r2,-4(fp)
   10974:	1004c03a 	cmpne	r2,r2,zero
   10978:	e037883a 	mov	sp,fp
   1097c:	df000017 	ldw	fp,0(sp)
   10980:	dec00104 	addi	sp,sp,4
   10984:	f800283a 	ret

00010988 <_ZSt4moveIRPFvRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
   10988:	defffe04 	addi	sp,sp,-8
   1098c:	df000115 	stw	fp,4(sp)
   10990:	df000104 	addi	fp,sp,4
   10994:	e13fff15 	stw	r4,-4(fp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   10998:	e0bfff17 	ldw	r2,-4(fp)
   1099c:	e037883a 	mov	sp,fp
   109a0:	df000017 	ldw	fp,0(sp)
   109a4:	dec00104 	addi	sp,sp,4
   109a8:	f800283a 	ret

000109ac <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE15_M_init_functorERSt9_Any_dataOS5_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
   109ac:	defffb04 	addi	sp,sp,-20
   109b0:	dfc00415 	stw	ra,16(sp)
   109b4:	df000315 	stw	fp,12(sp)
   109b8:	dc000215 	stw	r16,8(sp)
   109bc:	df000304 	addi	fp,sp,12
   109c0:	e13ffe15 	stw	r4,-8(fp)
   109c4:	e17ffd15 	stw	r5,-12(fp)
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
   109c8:	e13ffd17 	ldw	r4,-12(fp)
   109cc:	00109880 	call	10988 <_ZSt4moveIRPFvRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOS7_>
   109d0:	800d883a 	mov	r6,r16
   109d4:	100b883a 	mov	r5,r2
   109d8:	e13ffe17 	ldw	r4,-8(fp)
   109dc:	0010aec0 	call	10aec <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>
   109e0:	0001883a 	nop
   109e4:	e6ffff04 	addi	sp,fp,-4
   109e8:	dfc00217 	ldw	ra,8(sp)
   109ec:	df000117 	ldw	fp,4(sp)
   109f0:	dc000017 	ldw	r16,0(sp)
   109f4:	dec00304 	addi	sp,sp,12
   109f8:	f800283a 	ret

000109fc <_ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E9_M_invokeERKSt9_Any_dataS2_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   109fc:	defffb04 	addi	sp,sp,-20
   10a00:	dfc00415 	stw	ra,16(sp)
   10a04:	df000315 	stw	fp,12(sp)
   10a08:	dc000215 	stw	r16,8(sp)
   10a0c:	df000304 	addi	fp,sp,12
   10a10:	e13ffe15 	stw	r4,-8(fp)
   10a14:	e17ffd15 	stw	r5,-12(fp)
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
   10a18:	e13ffe17 	ldw	r4,-8(fp)
   10a1c:	0010b4c0 	call	10b4c <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE14_M_get_pointerERKSt9_Any_data>
   10a20:	1021883a 	mov	r16,r2
   10a24:	e13ffd17 	ldw	r4,-12(fp)
   10a28:	0010b8c0 	call	10b8c <_ZSt7forwardIRN6Serial10rx_messageEEOT_RNSt16remove_referenceIS3_E4typeE>
   10a2c:	100b883a 	mov	r5,r2
   10a30:	8009883a 	mov	r4,r16
   10a34:	0010bb00 	call	10bb0 <_ZSt10__invoke_rIvRPFvRN6Serial10rx_messageEEJS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>
				     std::forward<_ArgTypes>(__args)...);
   10a38:	0001883a 	nop
      }
   10a3c:	e6ffff04 	addi	sp,fp,-4
   10a40:	dfc00217 	ldw	ra,8(sp)
   10a44:	df000117 	ldw	fp,4(sp)
   10a48:	dc000017 	ldw	r16,0(sp)
   10a4c:	dec00304 	addi	sp,sp,12
   10a50:	f800283a 	ret

00010a54 <_ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   10a54:	defffa04 	addi	sp,sp,-24
   10a58:	dfc00515 	stw	ra,20(sp)
   10a5c:	df000415 	stw	fp,16(sp)
   10a60:	dc000315 	stw	r16,12(sp)
   10a64:	df000404 	addi	fp,sp,16
   10a68:	e13ffe15 	stw	r4,-8(fp)
   10a6c:	e17ffd15 	stw	r5,-12(fp)
   10a70:	e1bffc15 	stw	r6,-16(fp)
	switch (__op)
   10a74:	e0bffc17 	ldw	r2,-16(fp)
   10a78:	10000326 	beq	r2,zero,10a88 <_ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x34>
   10a7c:	10800060 	cmpeqi	r2,r2,1
   10a80:	1000081e 	bne	r2,zero,10aa4 <_ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x50>
   10a84:	00000e06 	br	10ac0 <_ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6c>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
   10a88:	e13ffe17 	ldw	r4,-8(fp)
   10a8c:	0010c140 	call	10c14 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
   10a90:	1007883a 	mov	r3,r2
   10a94:	00800074 	movhi	r2,1
   10a98:	109ada04 	addi	r2,r2,27496
   10a9c:	18800015 	stw	r2,0(r3)
	    break;
   10aa0:	00000b06 	br	10ad0 <_ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x7c>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   10aa4:	e13ffe17 	ldw	r4,-8(fp)
   10aa8:	0010c440 	call	10c44 <_ZNSt9_Any_data9_M_accessIPPFvRN6Serial10rx_messageEEEERT_v>
   10aac:	1021883a 	mov	r16,r2
   10ab0:	e13ffd17 	ldw	r4,-12(fp)
   10ab4:	0010b4c0 	call	10b4c <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE14_M_get_pointerERKSt9_Any_data>
   10ab8:	80800015 	stw	r2,0(r16)
	    break;
   10abc:	00000406 	br	10ad0 <_ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x7c>
	    _Base::_M_manager(__dest, __source, __op);
   10ac0:	e1bffc17 	ldw	r6,-16(fp)
   10ac4:	e17ffd17 	ldw	r5,-12(fp)
   10ac8:	e13ffe17 	ldw	r4,-8(fp)
   10acc:	0010c740 	call	10c74 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
   10ad0:	0005883a 	mov	r2,zero
      }
   10ad4:	e6ffff04 	addi	sp,fp,-4
   10ad8:	dfc00217 	ldw	ra,8(sp)
   10adc:	df000117 	ldw	fp,4(sp)
   10ae0:	dc000017 	ldw	r16,0(sp)
   10ae4:	dec00304 	addi	sp,sp,12
   10ae8:	f800283a 	ret

00010aec <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
   10aec:	defffa04 	addi	sp,sp,-24
   10af0:	dfc00515 	stw	ra,20(sp)
   10af4:	df000415 	stw	fp,16(sp)
   10af8:	dc000315 	stw	r16,12(sp)
   10afc:	df000404 	addi	fp,sp,16
   10b00:	e13ffe15 	stw	r4,-8(fp)
   10b04:	e17ffd15 	stw	r5,-12(fp)
   10b08:	e1bffcc5 	stb	r6,-13(fp)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   10b0c:	e13ffd17 	ldw	r4,-12(fp)
   10b10:	00109880 	call	10988 <_ZSt4moveIRPFvRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOS7_>
   10b14:	14000017 	ldw	r16,0(r2)
   10b18:	e13ffe17 	ldw	r4,-8(fp)
   10b1c:	00105a40 	call	105a4 <_ZNSt9_Any_data9_M_accessEv>
   10b20:	100b883a 	mov	r5,r2
   10b24:	01000104 	movi	r4,4
   10b28:	001057c0 	call	1057c <_ZnwjPv>
   10b2c:	14000015 	stw	r16,0(r2)
   10b30:	0001883a 	nop
   10b34:	e6ffff04 	addi	sp,fp,-4
   10b38:	dfc00217 	ldw	ra,8(sp)
   10b3c:	df000117 	ldw	fp,4(sp)
   10b40:	dc000017 	ldw	r16,0(sp)
   10b44:	dec00304 	addi	sp,sp,12
   10b48:	f800283a 	ret

00010b4c <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
   10b4c:	defffc04 	addi	sp,sp,-16
   10b50:	dfc00315 	stw	ra,12(sp)
   10b54:	df000215 	stw	fp,8(sp)
   10b58:	df000204 	addi	fp,sp,8
   10b5c:	e13ffe15 	stw	r4,-8(fp)
	      const _Functor& __f = __source._M_access<_Functor>();
   10b60:	e13ffe17 	ldw	r4,-8(fp)
   10b64:	0010d400 	call	10d40 <_ZNKSt9_Any_data9_M_accessIPFvRN6Serial10rx_messageEEEERKT_v>
   10b68:	e0bfff15 	stw	r2,-4(fp)
	      return const_cast<_Functor*>(std::__addressof(__f));
   10b6c:	e13fff17 	ldw	r4,-4(fp)
   10b70:	0010d700 	call	10d70 <_ZSt11__addressofIKPFvRN6Serial10rx_messageEEEPT_RS6_>
   10b74:	0001883a 	nop
	}
   10b78:	e037883a 	mov	sp,fp
   10b7c:	dfc00117 	ldw	ra,4(sp)
   10b80:	df000017 	ldw	fp,0(sp)
   10b84:	dec00204 	addi	sp,sp,8
   10b88:	f800283a 	ret

00010b8c <_ZSt7forwardIRN6Serial10rx_messageEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   10b8c:	defffe04 	addi	sp,sp,-8
   10b90:	df000115 	stw	fp,4(sp)
   10b94:	df000104 	addi	fp,sp,4
   10b98:	e13fff15 	stw	r4,-4(fp)
    { return static_cast<_Tp&&>(__t); }
   10b9c:	e0bfff17 	ldw	r2,-4(fp)
   10ba0:	e037883a 	mov	sp,fp
   10ba4:	df000017 	ldw	fp,0(sp)
   10ba8:	dec00104 	addi	sp,sp,4
   10bac:	f800283a 	ret

00010bb0 <_ZSt10__invoke_rIvRPFvRN6Serial10rx_messageEEJS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
   10bb0:	defffa04 	addi	sp,sp,-24
   10bb4:	dfc00515 	stw	ra,20(sp)
   10bb8:	df000415 	stw	fp,16(sp)
   10bbc:	dc400315 	stw	r17,12(sp)
   10bc0:	dc000215 	stw	r16,8(sp)
   10bc4:	df000404 	addi	fp,sp,16
   10bc8:	e13ffd15 	stw	r4,-12(fp)
   10bcc:	e17ffc15 	stw	r5,-16(fp)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
   10bd0:	e13ffd17 	ldw	r4,-12(fp)
   10bd4:	0010d940 	call	10d94 <_ZSt7forwardIRPFvRN6Serial10rx_messageEEEOT_RNSt16remove_referenceIS6_E4typeE>
   10bd8:	1021883a 	mov	r16,r2
   10bdc:	e13ffc17 	ldw	r4,-16(fp)
   10be0:	0010b8c0 	call	10b8c <_ZSt7forwardIRN6Serial10rx_messageEEOT_RNSt16remove_referenceIS3_E4typeE>
   10be4:	100d883a 	mov	r6,r2
   10be8:	800b883a 	mov	r5,r16
   10bec:	8809883a 	mov	r4,r17
   10bf0:	0010db80 	call	10db8 <_ZSt13__invoke_implIvRPFvRN6Serial10rx_messageEEJS2_EET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
   10bf4:	0001883a 	nop
   10bf8:	e6fffe04 	addi	sp,fp,-8
   10bfc:	dfc00317 	ldw	ra,12(sp)
   10c00:	df000217 	ldw	fp,8(sp)
   10c04:	dc400117 	ldw	r17,4(sp)
   10c08:	dc000017 	ldw	r16,0(sp)
   10c0c:	dec00404 	addi	sp,sp,16
   10c10:	f800283a 	ret

00010c14 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
   10c14:	defffd04 	addi	sp,sp,-12
   10c18:	dfc00215 	stw	ra,8(sp)
   10c1c:	df000115 	stw	fp,4(sp)
   10c20:	df000104 	addi	fp,sp,4
   10c24:	e13fff15 	stw	r4,-4(fp)
      { return *static_cast<_Tp*>(_M_access()); }
   10c28:	e13fff17 	ldw	r4,-4(fp)
   10c2c:	00105a40 	call	105a4 <_ZNSt9_Any_data9_M_accessEv>
   10c30:	e037883a 	mov	sp,fp
   10c34:	dfc00117 	ldw	ra,4(sp)
   10c38:	df000017 	ldw	fp,0(sp)
   10c3c:	dec00204 	addi	sp,sp,8
   10c40:	f800283a 	ret

00010c44 <_ZNSt9_Any_data9_M_accessIPPFvRN6Serial10rx_messageEEEERT_v>:
      _M_access()
   10c44:	defffd04 	addi	sp,sp,-12
   10c48:	dfc00215 	stw	ra,8(sp)
   10c4c:	df000115 	stw	fp,4(sp)
   10c50:	df000104 	addi	fp,sp,4
   10c54:	e13fff15 	stw	r4,-4(fp)
      { return *static_cast<_Tp*>(_M_access()); }
   10c58:	e13fff17 	ldw	r4,-4(fp)
   10c5c:	00105a40 	call	105a4 <_ZNSt9_Any_data9_M_accessEv>
   10c60:	e037883a 	mov	sp,fp
   10c64:	dfc00117 	ldw	ra,4(sp)
   10c68:	df000017 	ldw	fp,0(sp)
   10c6c:	dec00204 	addi	sp,sp,8
   10c70:	f800283a 	ret

00010c74 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   10c74:	defffa04 	addi	sp,sp,-24
   10c78:	dfc00515 	stw	ra,20(sp)
   10c7c:	df000415 	stw	fp,16(sp)
   10c80:	dc000315 	stw	r16,12(sp)
   10c84:	df000404 	addi	fp,sp,16
   10c88:	e13ffe15 	stw	r4,-8(fp)
   10c8c:	e17ffd15 	stw	r5,-12(fp)
   10c90:	e1bffc15 	stw	r6,-16(fp)
	  switch (__op)
   10c94:	e0bffc17 	ldw	r2,-16(fp)
   10c98:	10c000e0 	cmpeqi	r3,r2,3
   10c9c:	18001d1e 	bne	r3,zero,10d14 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0xa0>
   10ca0:	10c00108 	cmpgei	r3,r2,4
   10ca4:	18001f1e 	bne	r3,zero,10d24 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0xb0>
   10ca8:	10c000a0 	cmpeqi	r3,r2,2
   10cac:	1800141e 	bne	r3,zero,10d00 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x8c>
   10cb0:	10c000c8 	cmpgei	r3,r2,3
   10cb4:	18001b1e 	bne	r3,zero,10d24 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0xb0>
   10cb8:	10000326 	beq	r2,zero,10cc8 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x54>
   10cbc:	10800060 	cmpeqi	r2,r2,1
   10cc0:	1000081e 	bne	r2,zero,10ce4 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x70>
   10cc4:	00001706 	br	10d24 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0xb0>
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
   10cc8:	e13ffe17 	ldw	r4,-8(fp)
   10ccc:	0010c140 	call	10c14 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
   10cd0:	1007883a 	mov	r3,r2
   10cd4:	00800074 	movhi	r2,1
   10cd8:	109ada04 	addi	r2,r2,27496
   10cdc:	18800015 	stw	r2,0(r3)
	      break;
   10ce0:	00001006 	br	10d24 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0xb0>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   10ce4:	e13ffe17 	ldw	r4,-8(fp)
   10ce8:	0010c440 	call	10c44 <_ZNSt9_Any_data9_M_accessIPPFvRN6Serial10rx_messageEEEERT_v>
   10cec:	1021883a 	mov	r16,r2
   10cf0:	e13ffd17 	ldw	r4,-12(fp)
   10cf4:	0010b4c0 	call	10b4c <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE14_M_get_pointerERKSt9_Any_data>
   10cf8:	80800015 	stw	r2,0(r16)
	      break;
   10cfc:	00000906 	br	10d24 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0xb0>
	      _M_clone(__dest, __source, _Local_storage());
   10d00:	400d883a 	mov	r6,r8
   10d04:	e17ffd17 	ldw	r5,-12(fp)
   10d08:	e13ffe17 	ldw	r4,-8(fp)
   10d0c:	0010e100 	call	10e10 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>
	      break;
   10d10:	00000406 	br	10d24 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0xb0>
	      _M_destroy(__dest, _Local_storage());
   10d14:	380b883a 	mov	r5,r7
   10d18:	e13ffe17 	ldw	r4,-8(fp)
   10d1c:	0010e700 	call	10e70 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
   10d20:	0001883a 	nop
	  return false;
   10d24:	0005883a 	mov	r2,zero
	}
   10d28:	e6ffff04 	addi	sp,fp,-4
   10d2c:	dfc00217 	ldw	ra,8(sp)
   10d30:	df000117 	ldw	fp,4(sp)
   10d34:	dc000017 	ldw	r16,0(sp)
   10d38:	dec00304 	addi	sp,sp,12
   10d3c:	f800283a 	ret

00010d40 <_ZNKSt9_Any_data9_M_accessIPFvRN6Serial10rx_messageEEEERKT_v>:
      _M_access() const
   10d40:	defffd04 	addi	sp,sp,-12
   10d44:	dfc00215 	stw	ra,8(sp)
   10d48:	df000115 	stw	fp,4(sp)
   10d4c:	df000104 	addi	fp,sp,4
   10d50:	e13fff15 	stw	r4,-4(fp)
      { return *static_cast<const _Tp*>(_M_access()); }
   10d54:	e13fff17 	ldw	r4,-4(fp)
   10d58:	00105c80 	call	105c8 <_ZNKSt9_Any_data9_M_accessEv>
   10d5c:	e037883a 	mov	sp,fp
   10d60:	dfc00117 	ldw	ra,4(sp)
   10d64:	df000017 	ldw	fp,0(sp)
   10d68:	dec00204 	addi	sp,sp,8
   10d6c:	f800283a 	ret

00010d70 <_ZSt11__addressofIKPFvRN6Serial10rx_messageEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   10d70:	defffe04 	addi	sp,sp,-8
   10d74:	df000115 	stw	fp,4(sp)
   10d78:	df000104 	addi	fp,sp,4
   10d7c:	e13fff15 	stw	r4,-4(fp)
    { return __builtin_addressof(__r); }
   10d80:	e0bfff17 	ldw	r2,-4(fp)
   10d84:	e037883a 	mov	sp,fp
   10d88:	df000017 	ldw	fp,0(sp)
   10d8c:	dec00104 	addi	sp,sp,4
   10d90:	f800283a 	ret

00010d94 <_ZSt7forwardIRPFvRN6Serial10rx_messageEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   10d94:	defffe04 	addi	sp,sp,-8
   10d98:	df000115 	stw	fp,4(sp)
   10d9c:	df000104 	addi	fp,sp,4
   10da0:	e13fff15 	stw	r4,-4(fp)
    { return static_cast<_Tp&&>(__t); }
   10da4:	e0bfff17 	ldw	r2,-4(fp)
   10da8:	e037883a 	mov	sp,fp
   10dac:	df000017 	ldw	fp,0(sp)
   10db0:	dec00104 	addi	sp,sp,4
   10db4:	f800283a 	ret

00010db8 <_ZSt13__invoke_implIvRPFvRN6Serial10rx_messageEEJS2_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
   10db8:	defffa04 	addi	sp,sp,-24
   10dbc:	dfc00515 	stw	ra,20(sp)
   10dc0:	df000415 	stw	fp,16(sp)
   10dc4:	dc000315 	stw	r16,12(sp)
   10dc8:	df000404 	addi	fp,sp,16
   10dcc:	e13ffec5 	stb	r4,-5(fp)
   10dd0:	e17ffd15 	stw	r5,-12(fp)
   10dd4:	e1bffc15 	stw	r6,-16(fp)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   10dd8:	e13ffd17 	ldw	r4,-12(fp)
   10ddc:	0010d940 	call	10d94 <_ZSt7forwardIRPFvRN6Serial10rx_messageEEEOT_RNSt16remove_referenceIS6_E4typeE>
   10de0:	14000017 	ldw	r16,0(r2)
   10de4:	e13ffc17 	ldw	r4,-16(fp)
   10de8:	0010b8c0 	call	10b8c <_ZSt7forwardIRN6Serial10rx_messageEEOT_RNSt16remove_referenceIS3_E4typeE>
   10dec:	1009883a 	mov	r4,r2
   10df0:	803ee83a 	callr	r16
   10df4:	0001883a 	nop
   10df8:	e6ffff04 	addi	sp,fp,-4
   10dfc:	dfc00217 	ldw	ra,8(sp)
   10e00:	df000117 	ldw	fp,4(sp)
   10e04:	dc000017 	ldw	r16,0(sp)
   10e08:	dec00304 	addi	sp,sp,12
   10e0c:	f800283a 	ret

00010e10 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
   10e10:	defffa04 	addi	sp,sp,-24
   10e14:	dfc00515 	stw	ra,20(sp)
   10e18:	df000415 	stw	fp,16(sp)
   10e1c:	dc000315 	stw	r16,12(sp)
   10e20:	df000404 	addi	fp,sp,16
   10e24:	e13ffe15 	stw	r4,-8(fp)
   10e28:	e17ffd15 	stw	r5,-12(fp)
   10e2c:	e1bffcc5 	stb	r6,-13(fp)
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   10e30:	e13ffd17 	ldw	r4,-12(fp)
   10e34:	0010d400 	call	10d40 <_ZNKSt9_Any_data9_M_accessIPFvRN6Serial10rx_messageEEEERKT_v>
   10e38:	14000017 	ldw	r16,0(r2)
   10e3c:	e13ffe17 	ldw	r4,-8(fp)
   10e40:	00105a40 	call	105a4 <_ZNSt9_Any_data9_M_accessEv>
   10e44:	100b883a 	mov	r5,r2
   10e48:	01000104 	movi	r4,4
   10e4c:	001057c0 	call	1057c <_ZnwjPv>
   10e50:	14000015 	stw	r16,0(r2)
	}
   10e54:	0001883a 	nop
   10e58:	e6ffff04 	addi	sp,fp,-4
   10e5c:	dfc00217 	ldw	ra,8(sp)
   10e60:	df000117 	ldw	fp,4(sp)
   10e64:	dc000017 	ldw	r16,0(sp)
   10e68:	dec00304 	addi	sp,sp,12
   10e6c:	f800283a 	ret

00010e70 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
   10e70:	defffc04 	addi	sp,sp,-16
   10e74:	dfc00315 	stw	ra,12(sp)
   10e78:	df000215 	stw	fp,8(sp)
   10e7c:	df000204 	addi	fp,sp,8
   10e80:	e13fff15 	stw	r4,-4(fp)
   10e84:	e17ffec5 	stb	r5,-5(fp)
	  __victim._M_access<_Functor>().~_Functor();
   10e88:	e13fff17 	ldw	r4,-4(fp)
   10e8c:	0010ea80 	call	10ea8 <_ZNSt9_Any_data9_M_accessIPFvRN6Serial10rx_messageEEEERT_v>
	}
   10e90:	0001883a 	nop
   10e94:	e037883a 	mov	sp,fp
   10e98:	dfc00117 	ldw	ra,4(sp)
   10e9c:	df000017 	ldw	fp,0(sp)
   10ea0:	dec00204 	addi	sp,sp,8
   10ea4:	f800283a 	ret

00010ea8 <_ZNSt9_Any_data9_M_accessIPFvRN6Serial10rx_messageEEEERT_v>:
      _M_access()
   10ea8:	defffd04 	addi	sp,sp,-12
   10eac:	dfc00215 	stw	ra,8(sp)
   10eb0:	df000115 	stw	fp,4(sp)
   10eb4:	df000104 	addi	fp,sp,4
   10eb8:	e13fff15 	stw	r4,-4(fp)
      { return *static_cast<_Tp*>(_M_access()); }
   10ebc:	e13fff17 	ldw	r4,-4(fp)
   10ec0:	00105a40 	call	105a4 <_ZNSt9_Any_data9_M_accessEv>
   10ec4:	e037883a 	mov	sp,fp
   10ec8:	dfc00117 	ldw	ra,4(sp)
   10ecc:	df000017 	ldw	fp,0(sp)
   10ed0:	dec00204 	addi	sp,sp,8
   10ed4:	f800283a 	ret

00010ed8 <_ZN5Plant7EncoderC1Em>:
#include "encoder.hpp"

Plant::Encoder::Encoder(uint32_t base_address) :
   10ed8:	defffd04 	addi	sp,sp,-12
   10edc:	df000215 	stw	fp,8(sp)
   10ee0:	df000204 	addi	fp,sp,8
   10ee4:	e13fff15 	stw	r4,-4(fp)
   10ee8:	e17ffe15 	stw	r5,-8(fp)
	base_address(base_address)
   10eec:	e0bfff17 	ldw	r2,-4(fp)
   10ef0:	e0fffe17 	ldw	r3,-8(fp)
   10ef4:	10c00015 	stw	r3,0(r2)
{}
   10ef8:	0001883a 	nop
   10efc:	e037883a 	mov	sp,fp
   10f00:	df000017 	ldw	fp,0(sp)
   10f04:	dec00104 	addi	sp,sp,4
   10f08:	f800283a 	ret

00010f0c <_ZN5Plant7Encoder8readDataEv>:

int32_t Plant::Encoder::readData()
{
   10f0c:	defffe04 	addi	sp,sp,-8
   10f10:	df000115 	stw	fp,4(sp)
   10f14:	df000104 	addi	fp,sp,4
   10f18:	e13fff15 	stw	r4,-4(fp)
	return IORD_32DIRECT(base_address, 0);
   10f1c:	e0bfff17 	ldw	r2,-4(fp)
   10f20:	10800017 	ldw	r2,0(r2)
   10f24:	10800037 	ldwio	r2,0(r2)
}
   10f28:	e037883a 	mov	sp,fp
   10f2c:	df000017 	ldw	fp,0(sp)
   10f30:	dec00104 	addi	sp,sp,4
   10f34:	f800283a 	ret

00010f38 <_ZN5Plant5MotorC1Emm>:
#include "motor.hpp"

Plant::Motor::Motor(uint32_t base_address_first_word, uint32_t base_address_second_word) :
   10f38:	defffb04 	addi	sp,sp,-20
   10f3c:	dfc00415 	stw	ra,16(sp)
   10f40:	df000315 	stw	fp,12(sp)
   10f44:	df000304 	addi	fp,sp,12
   10f48:	e13fff15 	stw	r4,-4(fp)
   10f4c:	e17ffe15 	stw	r5,-8(fp)
   10f50:	e1bffd15 	stw	r6,-12(fp)
	base_address_first_word(base_address_first_word),
	base_address_second_word(base_address_second_word)
   10f54:	e0bfff17 	ldw	r2,-4(fp)
   10f58:	e0fffe17 	ldw	r3,-8(fp)
   10f5c:	10c00015 	stw	r3,0(r2)
   10f60:	e0bfff17 	ldw	r2,-4(fp)
   10f64:	e0fffd17 	ldw	r3,-12(fp)
   10f68:	10c00115 	stw	r3,4(r2)
   10f6c:	e0bfff17 	ldw	r2,-4(fp)
   10f70:	10000215 	stw	zero,8(r2)
   10f74:	e0bfff17 	ldw	r2,-4(fp)
   10f78:	10000315 	stw	zero,12(r2)
{
	stop();
   10f7c:	e13fff17 	ldw	r4,-4(fp)
   10f80:	001104c0 	call	1104c <_ZN5Plant5Motor4stopEv>
}
   10f84:	0001883a 	nop
   10f88:	e037883a 	mov	sp,fp
   10f8c:	dfc00117 	ldw	ra,4(sp)
   10f90:	df000017 	ldw	fp,0(sp)
   10f94:	dec00204 	addi	sp,sp,8
   10f98:	f800283a 	ret

00010f9c <_ZN5Plant5Motor12setFrequencyEm>:

void Plant::Motor::setFrequency(uint32_t new_frequency)
{
   10f9c:	defffd04 	addi	sp,sp,-12
   10fa0:	df000215 	stw	fp,8(sp)
   10fa4:	df000204 	addi	fp,sp,8
   10fa8:	e13fff15 	stw	r4,-4(fp)
   10fac:	e17ffe15 	stw	r5,-8(fp)
	if (frequency != new_frequency)
   10fb0:	e0bfff17 	ldw	r2,-4(fp)
   10fb4:	10800217 	ldw	r2,8(r2)
   10fb8:	e0fffe17 	ldw	r3,-8(fp)
   10fbc:	18800826 	beq	r3,r2,10fe0 <_ZN5Plant5Motor12setFrequencyEm+0x44>
	{
		IOWR_32DIRECT(base_address_first_word, 0, new_frequency);
   10fc0:	e0bfff17 	ldw	r2,-4(fp)
   10fc4:	10800017 	ldw	r2,0(r2)
   10fc8:	1007883a 	mov	r3,r2
   10fcc:	e0bffe17 	ldw	r2,-8(fp)
   10fd0:	18800035 	stwio	r2,0(r3)
		frequency = new_frequency;
   10fd4:	e0bfff17 	ldw	r2,-4(fp)
   10fd8:	e0fffe17 	ldw	r3,-8(fp)
   10fdc:	10c00215 	stw	r3,8(r2)
	}
}
   10fe0:	0001883a 	nop
   10fe4:	e037883a 	mov	sp,fp
   10fe8:	df000017 	ldw	fp,0(sp)
   10fec:	dec00104 	addi	sp,sp,4
   10ff0:	f800283a 	ret

00010ff4 <_ZN5Plant5Motor13setSecondWordEm>:

void  Plant::Motor::setSecondWord(uint32_t new_word)
{
   10ff4:	defffd04 	addi	sp,sp,-12
   10ff8:	df000215 	stw	fp,8(sp)
   10ffc:	df000204 	addi	fp,sp,8
   11000:	e13fff15 	stw	r4,-4(fp)
   11004:	e17ffe15 	stw	r5,-8(fp)
	if (second_word != new_word)
   11008:	e0bfff17 	ldw	r2,-4(fp)
   1100c:	10800317 	ldw	r2,12(r2)
   11010:	e0fffe17 	ldw	r3,-8(fp)
   11014:	18800826 	beq	r3,r2,11038 <_ZN5Plant5Motor13setSecondWordEm+0x44>
	{
		IOWR_32DIRECT(base_address_second_word, 0, new_word);
   11018:	e0bfff17 	ldw	r2,-4(fp)
   1101c:	10800117 	ldw	r2,4(r2)
   11020:	1007883a 	mov	r3,r2
   11024:	e0bffe17 	ldw	r2,-8(fp)
   11028:	18800035 	stwio	r2,0(r3)
		second_word = new_word;
   1102c:	e0bfff17 	ldw	r2,-4(fp)
   11030:	e0fffe17 	ldw	r3,-8(fp)
   11034:	10c00315 	stw	r3,12(r2)
	}
}
   11038:	0001883a 	nop
   1103c:	e037883a 	mov	sp,fp
   11040:	df000017 	ldw	fp,0(sp)
   11044:	dec00104 	addi	sp,sp,4
   11048:	f800283a 	ret

0001104c <_ZN5Plant5Motor4stopEv>:

void Plant::Motor::stop()
{
   1104c:	defffe04 	addi	sp,sp,-8
   11050:	df000115 	stw	fp,4(sp)
   11054:	df000104 	addi	fp,sp,4
   11058:	e13fff15 	stw	r4,-4(fp)
	// Set all values to zero.
	IOWR_32DIRECT(base_address_first_word, 0, 0);
   1105c:	e0bfff17 	ldw	r2,-4(fp)
   11060:	10800017 	ldw	r2,0(r2)
   11064:	0007883a 	mov	r3,zero
   11068:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(base_address_second_word, 0, 0);
   1106c:	e0bfff17 	ldw	r2,-4(fp)
   11070:	10800117 	ldw	r2,4(r2)
   11074:	0007883a 	mov	r3,zero
   11078:	10c00035 	stwio	r3,0(r2)
}
   1107c:	0001883a 	nop
   11080:	e037883a 	mov	sp,fp
   11084:	df000017 	ldw	fp,0(sp)
   11088:	dec00104 	addi	sp,sp,4
   1108c:	f800283a 	ret

00011090 <_ZN6Serial4UART10uart_0_isrEPv>:
std::array<uint8_t, Serial::MESSAGE_SIZE> Serial::UART::rx_data;
alt_u8 Serial::UART::rx_len = 0;
std::function<void(Serial::rx_message &received_message)> Serial::UART::callback;

void Serial::UART::uart_0_isr(void *)
{
   11090:	defffa04 	addi	sp,sp,-24
   11094:	dfc00515 	stw	ra,20(sp)
   11098:	df000415 	stw	fp,16(sp)
   1109c:	dc000315 	stw	r16,12(sp)
   110a0:	df000404 	addi	fp,sp,16
   110a4:	e13ffc15 	stw	r4,-16(fp)
	// Check if the UART buffer is empty or if there are more messages waiting.
	alt_u16 status = IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE);
   110a8:	008000b4 	movhi	r2,2
   110ac:	108a0237 	ldwio	r2,10248(r2)
   110b0:	e0bffe8d 	sth	r2,-6(fp)

	if(status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   110b4:	e0bffe8b 	ldhu	r2,-6(fp)
   110b8:	1080200c 	andi	r2,r2,128
   110bc:	10001326 	beq	r2,zero,1110c <_ZN6Serial4UART10uart_0_isrEPv+0x7c>
	{
		rx_data[rx_len] = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);
   110c0:	008000b4 	movhi	r2,2
   110c4:	140a0037 	ldwio	r16,10240(r2)
   110c8:	d0a1f543 	ldbu	r2,-30763(gp)
   110cc:	10803fcc 	andi	r2,r2,255
   110d0:	100b883a 	mov	r5,r2
   110d4:	d121f444 	addi	r4,gp,-30767
   110d8:	00114f80 	call	114f8 <_ZNSt5arrayIhLj4EEixEj>
   110dc:	8007883a 	mov	r3,r16
   110e0:	10c00005 	stb	r3,0(r2)
		rx_len ++ ;
   110e4:	d0a1f543 	ldbu	r2,-30763(gp)
   110e8:	10800044 	addi	r2,r2,1
   110ec:	d0a1f545 	stb	r2,-30763(gp)

		if (rx_len >= MESSAGE_SIZE)
   110f0:	d0a1f543 	ldbu	r2,-30763(gp)
   110f4:	10803fcc 	andi	r2,r2,255
   110f8:	10800130 	cmpltui	r2,r2,4
   110fc:	1000031e 	bne	r2,zero,1110c <_ZN6Serial4UART10uart_0_isrEPv+0x7c>
		{
			uart_ready = true;
   11100:	00800044 	movi	r2,1
   11104:	d0a1f405 	stb	r2,-30768(gp)
			rx_len = 0;
   11108:	d021f545 	stb	zero,-30763(gp)
		}
	}

	if (uart_ready)
   1110c:	d0a1f403 	ldbu	r2,-30768(gp)
   11110:	10803fcc 	andi	r2,r2,255
   11114:	10000e26 	beq	r2,zero,11150 <_ZN6Serial4UART10uart_0_isrEPv+0xc0>
	{
		uart_ready = 0;
   11118:	d021f405 	stb	zero,-30768(gp)

		Serial::rx_message received_message;
		std::memcpy(&received_message, &rx_data, MESSAGE_SIZE);
   1111c:	d0a1f443 	ldbu	r2,-30767(gp)
   11120:	e0bffd05 	stb	r2,-12(fp)
   11124:	d0a1f483 	ldbu	r2,-30766(gp)
   11128:	e0bffd45 	stb	r2,-11(fp)
   1112c:	d0a1f4c3 	ldbu	r2,-30765(gp)
   11130:	e0bffd85 	stb	r2,-10(fp)
   11134:	d0a1f503 	ldbu	r2,-30764(gp)
   11138:	e0bffdc5 	stb	r2,-9(fp)

		callback(received_message);
   1113c:	e0bffd04 	addi	r2,fp,-12
   11140:	100b883a 	mov	r5,r2
   11144:	01000074 	movhi	r4,1
   11148:	211fb804 	addi	r4,r4,32480
   1114c:	00115340 	call	11534 <_ZNKSt8functionIFvRN6Serial10rx_messageEEEclES2_>
	}
}
   11150:	0001883a 	nop
   11154:	e6ffff04 	addi	sp,fp,-4
   11158:	dfc00217 	ldw	ra,8(sp)
   1115c:	df000117 	ldw	fp,4(sp)
   11160:	dc000017 	ldw	r16,0(sp)
   11164:	dec00304 	addi	sp,sp,12
   11168:	f800283a 	ret

0001116c <_ZN6Serial4UARTC1ESt8functionIFvRNS_10rx_messageEEE>:

Serial::UART::UART(std::function<void(Serial::rx_message &received_message)> func)
   1116c:	defffa04 	addi	sp,sp,-24
   11170:	dfc00515 	stw	ra,20(sp)
   11174:	df000415 	stw	fp,16(sp)
   11178:	df000404 	addi	fp,sp,16
   1117c:	e13ffe15 	stw	r4,-8(fp)
   11180:	e17ffd15 	stw	r5,-12(fp)
{
	callback = func;
   11184:	e17ffd17 	ldw	r5,-12(fp)
   11188:	01000074 	movhi	r4,1
   1118c:	211fb804 	addi	r4,r4,32480
   11190:	00115ac0 	call	115ac <_ZNSt8functionIFvRN6Serial10rx_messageEEEaSERKS4_>

	// Clear status flag.
	IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE, 0x00);
   11194:	0007883a 	mov	r3,zero
   11198:	008000b4 	movhi	r2,2
   1119c:	10ca0235 	stwio	r3,10248(r2)

	// Read the useless value in the empty receive register.
	IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);
   111a0:	008000b4 	movhi	r2,2
   111a4:	108a0037 	ldwio	r2,10240(r2)

	// Setup RX IRQ routine.
	alt_u16 control = ALTERA_AVALON_UART_CONTROL_RRDY_MSK | ALTERA_AVALON_UART_CONTROL_E_MSK;
   111a8:	00806004 	movi	r2,384
   111ac:	e0bfff8d 	sth	r2,-2(fp)
	IOWR_ALTERA_AVALON_UART_CONTROL (UART_0_BASE, control);
   111b0:	e0ffff8b 	ldhu	r3,-2(fp)
   111b4:	008000b4 	movhi	r2,2
   111b8:	10ca0335 	stwio	r3,10252(r2)

	// Install IRQ service routine.
    alt_ic_isr_register(UART_0_IRQ_INTERRUPT_CONTROLLER_ID, UART_0_IRQ, uart_0_isr, NULL, NULL);
   111bc:	d8000015 	stw	zero,0(sp)
   111c0:	000f883a 	mov	r7,zero
   111c4:	01800074 	movhi	r6,1
   111c8:	31842404 	addi	r6,r6,4240
   111cc:	014000c4 	movi	r5,3
   111d0:	0009883a 	mov	r4,zero
   111d4:	0014d8c0 	call	14d8c <alt_ic_isr_register>

    // Enable interrupt.
	IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
   111d8:	00c02004 	movi	r3,128
   111dc:	008000b4 	movhi	r2,2
   111e0:	10ca0335 	stwio	r3,10252(r2)
}
   111e4:	0001883a 	nop
   111e8:	e037883a 	mov	sp,fp
   111ec:	dfc00117 	ldw	ra,4(sp)
   111f0:	df000017 	ldw	fp,0(sp)
   111f4:	dec00204 	addi	sp,sp,8
   111f8:	f800283a 	ret

000111fc <_ZN6Serial4UART8sendDataENS_10tx_messageE>:


void Serial::UART::sendData(tx_message msg)
{
   111fc:	defff604 	addi	sp,sp,-40
   11200:	dfc00915 	stw	ra,36(sp)
   11204:	df000815 	stw	fp,32(sp)
   11208:	df000804 	addi	fp,sp,32
   1120c:	e13ff915 	stw	r4,-28(fp)
   11210:	e17ff815 	stw	r5,-32(fp)
	// Convert the message to an array.
	std::array<uint8_t, 4> data	= convertToArray(msg);
   11214:	e17ff817 	ldw	r5,-32(fp)
   11218:	e13ff917 	ldw	r4,-28(fp)
   1121c:	00112e80 	call	112e8 <_ZN6Serial4UART14convertToArrayENS_10tx_messageE>
   11220:	e0bffac5 	stb	r2,-21(fp)
   11224:	1006d23a 	srli	r3,r2,8
   11228:	1809883a 	mov	r4,r3
   1122c:	00ffffc4 	movi	r3,-1
   11230:	20c6703a 	and	r3,r4,r3
   11234:	e0fffb05 	stb	r3,-20(fp)
   11238:	1006d43a 	srli	r3,r2,16
   1123c:	1809883a 	mov	r4,r3
   11240:	00ffffc4 	movi	r3,-1
   11244:	20c6703a 	and	r3,r4,r3
   11248:	e0fffb45 	stb	r3,-19(fp)
   1124c:	1004d63a 	srli	r2,r2,24
   11250:	e0bffb85 	stb	r2,-18(fp)

	for (uint8_t data_byte : data)
   11254:	e0bffac4 	addi	r2,fp,-21
   11258:	e0bffd15 	stw	r2,-12(fp)
   1125c:	e13ffd17 	ldw	r4,-12(fp)
   11260:	00116080 	call	11608 <_ZNSt5arrayIhLj4EE5beginEv>
   11264:	e0bfff15 	stw	r2,-4(fp)
   11268:	e13ffd17 	ldw	r4,-12(fp)
   1126c:	00116380 	call	11638 <_ZNSt5arrayIhLj4EE3endEv>
   11270:	e0bffc15 	stw	r2,-16(fp)
   11274:	e0ffff17 	ldw	r3,-4(fp)
   11278:	e0bffc17 	ldw	r2,-16(fp)
   1127c:	18801426 	beq	r3,r2,112d0 <_ZN6Serial4UART8sendDataENS_10tx_messageE+0xd4>
   11280:	e0bfff17 	ldw	r2,-4(fp)
   11284:	10800003 	ldbu	r2,0(r2)
   11288:	e0bffbc5 	stb	r2,-17(fp)
	{
		alt_u8 status = IORD_ALTERA_AVALON_UART_STATUS (UART_0_BASE);
   1128c:	008000b4 	movhi	r2,2
   11290:	108a0237 	ldwio	r2,10248(r2)
   11294:	e0bffec5 	stb	r2,-5(fp)

		// Wait for sending to finish.
		while (! (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK))
   11298:	e0bffec3 	ldbu	r2,-5(fp)
   1129c:	1080100c 	andi	r2,r2,64
   112a0:	1000041e 	bne	r2,zero,112b4 <_ZN6Serial4UART8sendDataENS_10tx_messageE+0xb8>
		{
			status = IORD_ALTERA_AVALON_UART_STATUS (UART_0_BASE);
   112a4:	008000b4 	movhi	r2,2
   112a8:	108a0237 	ldwio	r2,10248(r2)
   112ac:	e0bffec5 	stb	r2,-5(fp)
		while (! (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK))
   112b0:	003ff906 	br	11298 <_ZN6Serial4UART8sendDataENS_10tx_messageE+0x9c>
		}

		IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, data_byte);
   112b4:	e0fffbc3 	ldbu	r3,-17(fp)
   112b8:	008000b4 	movhi	r2,2
   112bc:	10ca0135 	stwio	r3,10244(r2)
	for (uint8_t data_byte : data)
   112c0:	e0bfff17 	ldw	r2,-4(fp)
   112c4:	10800044 	addi	r2,r2,1
   112c8:	e0bfff15 	stw	r2,-4(fp)
   112cc:	003fe906 	br	11274 <_ZN6Serial4UART8sendDataENS_10tx_messageE+0x78>
	}
}
   112d0:	0001883a 	nop
   112d4:	e037883a 	mov	sp,fp
   112d8:	dfc00117 	ldw	ra,4(sp)
   112dc:	df000017 	ldw	fp,0(sp)
   112e0:	dec00204 	addi	sp,sp,8
   112e4:	f800283a 	ret

000112e8 <_ZN6Serial4UART14convertToArrayENS_10tx_messageE>:

std::array<uint8_t, 4> Serial::UART::convertToArray(tx_message msg)
{
   112e8:	defff904 	addi	sp,sp,-28
   112ec:	dfc00615 	stw	ra,24(sp)
   112f0:	df000515 	stw	fp,20(sp)
   112f4:	dc000415 	stw	r16,16(sp)
   112f8:	df000504 	addi	fp,sp,20
   112fc:	e13ffc15 	stw	r4,-16(fp)
   11300:	e17ffb15 	stw	r5,-20(fp)
    std::array<uint8_t, 4> temp{};
   11304:	e03ffd15 	stw	zero,-12(fp)
    std::copy(
   11308:	e43ffb04 	addi	r16,fp,-20
   1130c:	84000104 	addi	r16,r16,4
            reinterpret_cast<uint8_t *>(&msg),
            reinterpret_cast<uint8_t *>(&msg) + 4,
            &temp[0]
   11310:	e0bffd04 	addi	r2,fp,-12
   11314:	000b883a 	mov	r5,zero
   11318:	1009883a 	mov	r4,r2
   1131c:	00114f80 	call	114f8 <_ZNSt5arrayIhLj4EEixEj>
   11320:	1007883a 	mov	r3,r2
    std::copy(
   11324:	e0bffb04 	addi	r2,fp,-20
   11328:	180d883a 	mov	r6,r3
   1132c:	800b883a 	mov	r5,r16
   11330:	1009883a 	mov	r4,r2
   11334:	001166c0 	call	1166c <_ZSt4copyIPhS0_ET0_T_S2_S1_>
    );
    return temp;
   11338:	e0bffd17 	ldw	r2,-12(fp)
   1133c:	e0bffe15 	stw	r2,-8(fp)
   11340:	0005883a 	mov	r2,zero
   11344:	e0fffe03 	ldbu	r3,-8(fp)
   11348:	18c03fcc 	andi	r3,r3,255
   1134c:	013fc004 	movi	r4,-256
   11350:	1104703a 	and	r2,r2,r4
   11354:	10c4b03a 	or	r2,r2,r3
   11358:	e0fffe43 	ldbu	r3,-7(fp)
   1135c:	18c03fcc 	andi	r3,r3,255
   11360:	1808923a 	slli	r4,r3,8
   11364:	00fffff4 	movhi	r3,65535
   11368:	18c03fc4 	addi	r3,r3,255
   1136c:	10c4703a 	and	r2,r2,r3
   11370:	1104b03a 	or	r2,r2,r4
   11374:	e0fffe83 	ldbu	r3,-6(fp)
   11378:	18c03fcc 	andi	r3,r3,255
   1137c:	1808943a 	slli	r4,r3,16
   11380:	00ffc074 	movhi	r3,65281
   11384:	18ffffc4 	addi	r3,r3,-1
   11388:	10c4703a 	and	r2,r2,r3
   1138c:	1104b03a 	or	r2,r2,r4
   11390:	e0fffec3 	ldbu	r3,-5(fp)
   11394:	1808963a 	slli	r4,r3,24
   11398:	00c04034 	movhi	r3,256
   1139c:	18ffffc4 	addi	r3,r3,-1
   113a0:	10c4703a 	and	r2,r2,r3
   113a4:	1104b03a 	or	r2,r2,r4
}
   113a8:	e6ffff04 	addi	sp,fp,-4
   113ac:	dfc00217 	ldw	ra,8(sp)
   113b0:	df000117 	ldw	fp,4(sp)
   113b4:	dc000017 	ldw	r16,0(sp)
   113b8:	dec00304 	addi	sp,sp,12
   113bc:	f800283a 	ret

000113c0 <_Z41__static_initialization_and_destruction_0ii>:
   113c0:	defffc04 	addi	sp,sp,-16
   113c4:	dfc00315 	stw	ra,12(sp)
   113c8:	df000215 	stw	fp,8(sp)
   113cc:	df000204 	addi	fp,sp,8
   113d0:	e13fff15 	stw	r4,-4(fp)
   113d4:	e17ffe15 	stw	r5,-8(fp)
   113d8:	e0bfff17 	ldw	r2,-4(fp)
   113dc:	10800058 	cmpnei	r2,r2,1
   113e0:	1000061e 	bne	r2,zero,113fc <_Z41__static_initialization_and_destruction_0ii+0x3c>
   113e4:	e0fffe17 	ldw	r3,-8(fp)
   113e8:	00bfffd4 	movui	r2,65535
   113ec:	1880031e 	bne	r3,r2,113fc <_Z41__static_initialization_and_destruction_0ii+0x3c>
std::function<void(Serial::rx_message &received_message)> Serial::UART::callback;
   113f0:	01000074 	movhi	r4,1
   113f4:	211fb804 	addi	r4,r4,32480
   113f8:	00114c00 	call	114c0 <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1Ev>
   113fc:	e0bfff17 	ldw	r2,-4(fp)
   11400:	1000061e 	bne	r2,zero,1141c <_Z41__static_initialization_and_destruction_0ii+0x5c>
   11404:	e0fffe17 	ldw	r3,-8(fp)
   11408:	00bfffd4 	movui	r2,65535
   1140c:	1880031e 	bne	r3,r2,1141c <_Z41__static_initialization_and_destruction_0ii+0x5c>
   11410:	01000074 	movhi	r4,1
   11414:	211fb804 	addi	r4,r4,32480
   11418:	00107d80 	call	107d8 <_ZNSt8functionIFvRN6Serial10rx_messageEEED1Ev>
}
   1141c:	0001883a 	nop
   11420:	e037883a 	mov	sp,fp
   11424:	dfc00117 	ldw	ra,4(sp)
   11428:	df000017 	ldw	fp,0(sp)
   1142c:	dec00204 	addi	sp,sp,8
   11430:	f800283a 	ret

00011434 <_GLOBAL__sub_I__ZN6Serial4UART10uart_readyE>:
   11434:	defffe04 	addi	sp,sp,-8
   11438:	dfc00115 	stw	ra,4(sp)
   1143c:	df000015 	stw	fp,0(sp)
   11440:	d839883a 	mov	fp,sp
   11444:	017fffd4 	movui	r5,65535
   11448:	01000044 	movi	r4,1
   1144c:	00113c00 	call	113c0 <_Z41__static_initialization_and_destruction_0ii>
   11450:	e037883a 	mov	sp,fp
   11454:	dfc00117 	ldw	ra,4(sp)
   11458:	df000017 	ldw	fp,0(sp)
   1145c:	dec00204 	addi	sp,sp,8
   11460:	f800283a 	ret

00011464 <_GLOBAL__sub_D__ZN6Serial4UART10uart_readyE>:
   11464:	defffe04 	addi	sp,sp,-8
   11468:	dfc00115 	stw	ra,4(sp)
   1146c:	df000015 	stw	fp,0(sp)
   11470:	d839883a 	mov	fp,sp
   11474:	017fffd4 	movui	r5,65535
   11478:	0009883a 	mov	r4,zero
   1147c:	00113c00 	call	113c0 <_Z41__static_initialization_and_destruction_0ii>
   11480:	e037883a 	mov	sp,fp
   11484:	dfc00117 	ldw	ra,4(sp)
   11488:	df000017 	ldw	fp,0(sp)
   1148c:	dec00204 	addi	sp,sp,8
   11490:	f800283a 	ret

00011494 <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
   11494:	defffe04 	addi	sp,sp,-8
   11498:	df000115 	stw	fp,4(sp)
   1149c:	df000104 	addi	fp,sp,4
   114a0:	e13fff15 	stw	r4,-4(fp)
   114a4:	e0bfff17 	ldw	r2,-4(fp)
   114a8:	10800217 	ldw	r2,8(r2)
   114ac:	1005003a 	cmpeq	r2,r2,zero
   114b0:	e037883a 	mov	sp,fp
   114b4:	df000017 	ldw	fp,0(sp)
   114b8:	dec00104 	addi	sp,sp,4
   114bc:	f800283a 	ret

000114c0 <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1Ev>:
      function() noexcept
   114c0:	defffd04 	addi	sp,sp,-12
   114c4:	dfc00215 	stw	ra,8(sp)
   114c8:	df000115 	stw	fp,4(sp)
   114cc:	df000104 	addi	fp,sp,4
   114d0:	e13fff15 	stw	r4,-4(fp)
      : _Function_base() { }
   114d4:	e0bfff17 	ldw	r2,-4(fp)
   114d8:	1009883a 	mov	r4,r2
   114dc:	00105ec0 	call	105ec <_ZNSt14_Function_baseC1Ev>
   114e0:	0001883a 	nop
   114e4:	e037883a 	mov	sp,fp
   114e8:	dfc00117 	ldw	ra,4(sp)
   114ec:	df000017 	ldw	fp,0(sp)
   114f0:	dec00204 	addi	sp,sp,8
   114f4:	f800283a 	ret

000114f8 <_ZNSt5arrayIhLj4EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
   114f8:	defffc04 	addi	sp,sp,-16
   114fc:	dfc00315 	stw	ra,12(sp)
   11500:	df000215 	stw	fp,8(sp)
   11504:	df000204 	addi	fp,sp,8
   11508:	e13fff15 	stw	r4,-4(fp)
   1150c:	e17ffe15 	stw	r5,-8(fp)
      { return _AT_Type::_S_ref(_M_elems, __n); }
   11510:	e0bfff17 	ldw	r2,-4(fp)
   11514:	e17ffe17 	ldw	r5,-8(fp)
   11518:	1009883a 	mov	r4,r2
   1151c:	00116c80 	call	116c8 <_ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj>
   11520:	e037883a 	mov	sp,fp
   11524:	dfc00117 	ldw	ra,4(sp)
   11528:	df000017 	ldw	fp,0(sp)
   1152c:	dec00204 	addi	sp,sp,8
   11530:	f800283a 	ret

00011534 <_ZNKSt8functionIFvRN6Serial10rx_messageEEEclES2_>:

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   11534:	defffa04 	addi	sp,sp,-24
   11538:	dfc00515 	stw	ra,20(sp)
   1153c:	df000415 	stw	fp,16(sp)
   11540:	dc400315 	stw	r17,12(sp)
   11544:	dc000215 	stw	r16,8(sp)
   11548:	df000404 	addi	fp,sp,16
   1154c:	e13ffd15 	stw	r4,-12(fp)
   11550:	e17ffc15 	stw	r5,-16(fp)
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   11554:	e0bffd17 	ldw	r2,-12(fp)
   11558:	1009883a 	mov	r4,r2
   1155c:	00114940 	call	11494 <_ZNKSt14_Function_base8_M_emptyEv>
   11560:	10803fcc 	andi	r2,r2,255
   11564:	10000126 	beq	r2,zero,1156c <_ZNKSt8functionIFvRN6Serial10rx_messageEEEclES2_+0x38>
	__throw_bad_function_call();
   11568:	00131f80 	call	131f8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   1156c:	e0bffd17 	ldw	r2,-12(fp)
   11570:	14000317 	ldw	r16,12(r2)
   11574:	e47ffd17 	ldw	r17,-12(fp)
   11578:	e13ffc17 	ldw	r4,-16(fp)
   1157c:	0010b8c0 	call	10b8c <_ZSt7forwardIRN6Serial10rx_messageEEOT_RNSt16remove_referenceIS3_E4typeE>
   11580:	100b883a 	mov	r5,r2
   11584:	8809883a 	mov	r4,r17
   11588:	803ee83a 	callr	r16
   1158c:	0001883a 	nop
    }
   11590:	e6fffe04 	addi	sp,fp,-8
   11594:	dfc00317 	ldw	ra,12(sp)
   11598:	df000217 	ldw	fp,8(sp)
   1159c:	dc400117 	ldw	r17,4(sp)
   115a0:	dc000017 	ldw	r16,0(sp)
   115a4:	dec00404 	addi	sp,sp,16
   115a8:	f800283a 	ret

000115ac <_ZNSt8functionIFvRN6Serial10rx_messageEEEaSERKS4_>:
      operator=(const function& __x)
   115ac:	defff804 	addi	sp,sp,-32
   115b0:	dfc00715 	stw	ra,28(sp)
   115b4:	df000615 	stw	fp,24(sp)
   115b8:	df000604 	addi	fp,sp,24
   115bc:	e13ffb15 	stw	r4,-20(fp)
   115c0:	e17ffa15 	stw	r5,-24(fp)
	function(__x).swap(*this);
   115c4:	e0bffc04 	addi	r2,fp,-16
   115c8:	e17ffa17 	ldw	r5,-24(fp)
   115cc:	1009883a 	mov	r4,r2
   115d0:	00116f80 	call	116f8 <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1ERKS4_>
   115d4:	e0bffc04 	addi	r2,fp,-16
   115d8:	e17ffb17 	ldw	r5,-20(fp)
   115dc:	1009883a 	mov	r4,r2
   115e0:	00118380 	call	11838 <_ZNSt8functionIFvRN6Serial10rx_messageEEE4swapERS4_>
   115e4:	e0bffc04 	addi	r2,fp,-16
   115e8:	1009883a 	mov	r4,r2
   115ec:	00107d80 	call	107d8 <_ZNSt8functionIFvRN6Serial10rx_messageEEED1Ev>
	return *this;
   115f0:	e0bffb17 	ldw	r2,-20(fp)
      }
   115f4:	e037883a 	mov	sp,fp
   115f8:	dfc00117 	ldw	ra,4(sp)
   115fc:	df000017 	ldw	fp,0(sp)
   11600:	dec00204 	addi	sp,sp,8
   11604:	f800283a 	ret

00011608 <_ZNSt5arrayIhLj4EE5beginEv>:
      begin() noexcept
   11608:	defffd04 	addi	sp,sp,-12
   1160c:	dfc00215 	stw	ra,8(sp)
   11610:	df000115 	stw	fp,4(sp)
   11614:	df000104 	addi	fp,sp,4
   11618:	e13fff15 	stw	r4,-4(fp)
      { return iterator(data()); }
   1161c:	e13fff17 	ldw	r4,-4(fp)
   11620:	00118b40 	call	118b4 <_ZNSt5arrayIhLj4EE4dataEv>
   11624:	e037883a 	mov	sp,fp
   11628:	dfc00117 	ldw	ra,4(sp)
   1162c:	df000017 	ldw	fp,0(sp)
   11630:	dec00204 	addi	sp,sp,8
   11634:	f800283a 	ret

00011638 <_ZNSt5arrayIhLj4EE3endEv>:
      end() noexcept
   11638:	defffd04 	addi	sp,sp,-12
   1163c:	dfc00215 	stw	ra,8(sp)
   11640:	df000115 	stw	fp,4(sp)
   11644:	df000104 	addi	fp,sp,4
   11648:	e13fff15 	stw	r4,-4(fp)
      { return iterator(data() + _Nm); }
   1164c:	e13fff17 	ldw	r4,-4(fp)
   11650:	00118b40 	call	118b4 <_ZNSt5arrayIhLj4EE4dataEv>
   11654:	10800104 	addi	r2,r2,4
   11658:	e037883a 	mov	sp,fp
   1165c:	dfc00117 	ldw	ra,4(sp)
   11660:	df000017 	ldw	fp,0(sp)
   11664:	dec00204 	addi	sp,sp,8
   11668:	f800283a 	ret

0001166c <_ZSt4copyIPhS0_ET0_T_S2_S1_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
   1166c:	defffa04 	addi	sp,sp,-24
   11670:	dfc00515 	stw	ra,20(sp)
   11674:	df000415 	stw	fp,16(sp)
   11678:	dc000315 	stw	r16,12(sp)
   1167c:	df000404 	addi	fp,sp,16
   11680:	e13ffe15 	stw	r4,-8(fp)
   11684:	e17ffd15 	stw	r5,-12(fp)
   11688:	e1bffc15 	stw	r6,-16(fp)
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
   1168c:	e13ffe17 	ldw	r4,-8(fp)
   11690:	00118e80 	call	118e8 <_ZSt12__miter_baseIPhET_S1_>
   11694:	1021883a 	mov	r16,r2
   11698:	e13ffd17 	ldw	r4,-12(fp)
   1169c:	00118e80 	call	118e8 <_ZSt12__miter_baseIPhET_S1_>
   116a0:	e1bffc17 	ldw	r6,-16(fp)
   116a4:	100b883a 	mov	r5,r2
   116a8:	8009883a 	mov	r4,r16
   116ac:	001190c0 	call	1190c <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>
    }
   116b0:	e6ffff04 	addi	sp,fp,-4
   116b4:	dfc00217 	ldw	ra,8(sp)
   116b8:	df000117 	ldw	fp,4(sp)
   116bc:	dc000017 	ldw	r16,0(sp)
   116c0:	dec00304 	addi	sp,sp,12
   116c4:	f800283a 	ret

000116c8 <_ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
   116c8:	defffd04 	addi	sp,sp,-12
   116cc:	df000215 	stw	fp,8(sp)
   116d0:	df000204 	addi	fp,sp,8
   116d4:	e13fff15 	stw	r4,-4(fp)
   116d8:	e17ffe15 	stw	r5,-8(fp)
      { return const_cast<_Tp&>(__t[__n]); }
   116dc:	e0ffff17 	ldw	r3,-4(fp)
   116e0:	e0bffe17 	ldw	r2,-8(fp)
   116e4:	1885883a 	add	r2,r3,r2
   116e8:	e037883a 	mov	sp,fp
   116ec:	df000017 	ldw	fp,0(sp)
   116f0:	dec00104 	addi	sp,sp,4
   116f4:	f800283a 	ret

000116f8 <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1ERKS4_>:
    function<_Res(_ArgTypes...)>::
   116f8:	deffe604 	addi	sp,sp,-104
   116fc:	dfc01915 	stw	ra,100(sp)
   11700:	df001815 	stw	fp,96(sp)
   11704:	ddc01715 	stw	r23,92(sp)
   11708:	dd801615 	stw	r22,88(sp)
   1170c:	dd401515 	stw	r21,84(sp)
   11710:	dd001415 	stw	r20,80(sp)
   11714:	dcc01315 	stw	r19,76(sp)
   11718:	dc801215 	stw	r18,72(sp)
   1171c:	dc401115 	stw	r17,68(sp)
   11720:	dc001015 	stw	r16,64(sp)
   11724:	df001804 	addi	fp,sp,96
   11728:	e13ff715 	stw	r4,-36(fp)
   1172c:	e17ff615 	stw	r5,-40(fp)
   11730:	00800074 	movhi	r2,1
   11734:	10888604 	addi	r2,r2,8728
   11738:	e0bfef15 	stw	r2,-68(fp)
   1173c:	00800074 	movhi	r2,1
   11740:	109abe04 	addi	r2,r2,27384
   11744:	e0bff015 	stw	r2,-64(fp)
   11748:	e0bff104 	addi	r2,fp,-60
   1174c:	17000015 	stw	fp,0(r2)
   11750:	00c00074 	movhi	r3,1
   11754:	18c5f304 	addi	r3,r3,6092
   11758:	10c00115 	stw	r3,4(r2)
   1175c:	16c00215 	stw	sp,8(r2)
   11760:	e0bfe904 	addi	r2,fp,-92
   11764:	1009883a 	mov	r4,r2
   11768:	00142280 	call	14228 <_Unwind_SjLj_Register>
    : _Function_base()
   1176c:	e0bff717 	ldw	r2,-36(fp)
   11770:	1009883a 	mov	r4,r2
   11774:	00105ec0 	call	105ec <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
   11778:	e13ff617 	ldw	r4,-40(fp)
   1177c:	00119940 	call	11994 <_ZNKSt8functionIFvRN6Serial10rx_messageEEEcvbEv>
   11780:	10803fcc 	andi	r2,r2,255
   11784:	10001b26 	beq	r2,zero,117f4 <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1ERKS4_+0xfc>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   11788:	e0bff617 	ldw	r2,-40(fp)
   1178c:	10800217 	ldw	r2,8(r2)
   11790:	e13ff717 	ldw	r4,-36(fp)
   11794:	e17ff617 	ldw	r5,-40(fp)
   11798:	00c00044 	movi	r3,1
   1179c:	e0ffea15 	stw	r3,-88(fp)
   117a0:	01800084 	movi	r6,2
   117a4:	103ee83a 	callr	r2
	  _M_invoker = __x._M_invoker;
   117a8:	e0bff617 	ldw	r2,-40(fp)
   117ac:	10c00317 	ldw	r3,12(r2)
   117b0:	e0bff717 	ldw	r2,-36(fp)
   117b4:	10c00315 	stw	r3,12(r2)
	  _M_manager = __x._M_manager;
   117b8:	e0bff617 	ldw	r2,-40(fp)
   117bc:	10c00217 	ldw	r3,8(r2)
   117c0:	e0bff717 	ldw	r2,-36(fp)
   117c4:	10c00215 	stw	r3,8(r2)
    }
   117c8:	00000a06 	br	117f4 <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1ERKS4_+0xfc>
    : _Function_base()
   117cc:	e0bfeb17 	ldw	r2,-84(fp)
   117d0:	e0bfe815 	stw	r2,-96(fp)
   117d4:	e0bff717 	ldw	r2,-36(fp)
   117d8:	1009883a 	mov	r4,r2
   117dc:	00106180 	call	10618 <_ZNSt14_Function_baseD1Ev>
   117e0:	e0ffe817 	ldw	r3,-96(fp)
   117e4:	00bfffc4 	movi	r2,-1
   117e8:	e0bfea15 	stw	r2,-88(fp)
   117ec:	1809883a 	mov	r4,r3
   117f0:	00144100 	call	14410 <_Unwind_SjLj_Resume>
    }
   117f4:	0001883a 	nop
   117f8:	e0bfe904 	addi	r2,fp,-92
   117fc:	1009883a 	mov	r4,r2
   11800:	00142400 	call	14240 <_Unwind_SjLj_Unregister>
   11804:	e6fff804 	addi	sp,fp,-32
   11808:	dfc00917 	ldw	ra,36(sp)
   1180c:	df000817 	ldw	fp,32(sp)
   11810:	ddc00717 	ldw	r23,28(sp)
   11814:	dd800617 	ldw	r22,24(sp)
   11818:	dd400517 	ldw	r21,20(sp)
   1181c:	dd000417 	ldw	r20,16(sp)
   11820:	dcc00317 	ldw	r19,12(sp)
   11824:	dc800217 	ldw	r18,8(sp)
   11828:	dc400117 	ldw	r17,4(sp)
   1182c:	dc000017 	ldw	r16,0(sp)
   11830:	dec00a04 	addi	sp,sp,40
   11834:	f800283a 	ret

00011838 <_ZNSt8functionIFvRN6Serial10rx_messageEEE4swapERS4_>:
      void swap(function& __x) noexcept
   11838:	defffc04 	addi	sp,sp,-16
   1183c:	dfc00315 	stw	ra,12(sp)
   11840:	df000215 	stw	fp,8(sp)
   11844:	df000204 	addi	fp,sp,8
   11848:	e13fff15 	stw	r4,-4(fp)
   1184c:	e17ffe15 	stw	r5,-8(fp)
	std::swap(_M_functor, __x._M_functor);
   11850:	e0bfff17 	ldw	r2,-4(fp)
   11854:	e0fffe17 	ldw	r3,-8(fp)
   11858:	180b883a 	mov	r5,r3
   1185c:	1009883a 	mov	r4,r2
   11860:	00119f00 	call	119f0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
   11864:	e0bfff17 	ldw	r2,-4(fp)
   11868:	10c00204 	addi	r3,r2,8
   1186c:	e0bffe17 	ldw	r2,-8(fp)
   11870:	10800204 	addi	r2,r2,8
   11874:	100b883a 	mov	r5,r2
   11878:	1809883a 	mov	r4,r3
   1187c:	0011aa00 	call	11aa0 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
   11880:	e0bfff17 	ldw	r2,-4(fp)
   11884:	10c00304 	addi	r3,r2,12
   11888:	e0bffe17 	ldw	r2,-8(fp)
   1188c:	10800304 	addi	r2,r2,12
   11890:	100b883a 	mov	r5,r2
   11894:	1809883a 	mov	r4,r3
   11898:	0011b300 	call	11b30 <_ZSt4swapIPFvRKSt9_Any_dataRN6Serial10rx_messageEEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
   1189c:	0001883a 	nop
   118a0:	e037883a 	mov	sp,fp
   118a4:	dfc00117 	ldw	ra,4(sp)
   118a8:	df000017 	ldw	fp,0(sp)
   118ac:	dec00204 	addi	sp,sp,8
   118b0:	f800283a 	ret

000118b4 <_ZNSt5arrayIhLj4EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
   118b4:	defffd04 	addi	sp,sp,-12
   118b8:	dfc00215 	stw	ra,8(sp)
   118bc:	df000115 	stw	fp,4(sp)
   118c0:	df000104 	addi	fp,sp,4
   118c4:	e13fff15 	stw	r4,-4(fp)
      { return _AT_Type::_S_ptr(_M_elems); }
   118c8:	e0bfff17 	ldw	r2,-4(fp)
   118cc:	1009883a 	mov	r4,r2
   118d0:	0011b9c0 	call	11b9c <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>
   118d4:	e037883a 	mov	sp,fp
   118d8:	dfc00117 	ldw	ra,4(sp)
   118dc:	df000017 	ldw	fp,0(sp)
   118e0:	dec00204 	addi	sp,sp,8
   118e4:	f800283a 	ret

000118e8 <_ZSt12__miter_baseIPhET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
   118e8:	defffe04 	addi	sp,sp,-8
   118ec:	df000115 	stw	fp,4(sp)
   118f0:	df000104 	addi	fp,sp,4
   118f4:	e13fff15 	stw	r4,-4(fp)
    { return __it; }
   118f8:	e0bfff17 	ldw	r2,-4(fp)
   118fc:	e037883a 	mov	sp,fp
   11900:	df000017 	ldw	fp,0(sp)
   11904:	dec00104 	addi	sp,sp,4
   11908:	f800283a 	ret

0001190c <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
   1190c:	defff904 	addi	sp,sp,-28
   11910:	dfc00615 	stw	ra,24(sp)
   11914:	df000515 	stw	fp,20(sp)
   11918:	dc400415 	stw	r17,16(sp)
   1191c:	dc000315 	stw	r16,12(sp)
   11920:	df000504 	addi	fp,sp,20
   11924:	e13ffd15 	stw	r4,-12(fp)
   11928:	e17ffc15 	stw	r5,-16(fp)
   1192c:	e1bffb15 	stw	r6,-20(fp)
      return std::__niter_wrap(__result,
   11930:	e13ffd17 	ldw	r4,-12(fp)
   11934:	0011bc00 	call	11bc0 <_ZSt12__niter_baseIPhET_S1_>
   11938:	1021883a 	mov	r16,r2
   1193c:	e13ffc17 	ldw	r4,-16(fp)
   11940:	0011bc00 	call	11bc0 <_ZSt12__niter_baseIPhET_S1_>
   11944:	1023883a 	mov	r17,r2
   11948:	e0bffb17 	ldw	r2,-20(fp)
   1194c:	1009883a 	mov	r4,r2
   11950:	0011bc00 	call	11bc0 <_ZSt12__niter_baseIPhET_S1_>
   11954:	100d883a 	mov	r6,r2
   11958:	880b883a 	mov	r5,r17
   1195c:	8009883a 	mov	r4,r16
   11960:	0011be40 	call	11be4 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>
   11964:	1007883a 	mov	r3,r2
   11968:	e0bffb04 	addi	r2,fp,-20
   1196c:	180b883a 	mov	r5,r3
   11970:	1009883a 	mov	r4,r2
   11974:	0011c240 	call	11c24 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
    }
   11978:	e6fffe04 	addi	sp,fp,-8
   1197c:	dfc00317 	ldw	ra,12(sp)
   11980:	df000217 	ldw	fp,8(sp)
   11984:	dc400117 	ldw	r17,4(sp)
   11988:	dc000017 	ldw	r16,0(sp)
   1198c:	dec00404 	addi	sp,sp,16
   11990:	f800283a 	ret

00011994 <_ZNKSt8functionIFvRN6Serial10rx_messageEEEcvbEv>:
      explicit operator bool() const noexcept
   11994:	defffd04 	addi	sp,sp,-12
   11998:	dfc00215 	stw	ra,8(sp)
   1199c:	df000115 	stw	fp,4(sp)
   119a0:	df000104 	addi	fp,sp,4
   119a4:	e13fff15 	stw	r4,-4(fp)
      { return !_M_empty(); }
   119a8:	e0bfff17 	ldw	r2,-4(fp)
   119ac:	1009883a 	mov	r4,r2
   119b0:	00114940 	call	11494 <_ZNKSt14_Function_base8_M_emptyEv>
   119b4:	1080005c 	xori	r2,r2,1
   119b8:	e037883a 	mov	sp,fp
   119bc:	dfc00117 	ldw	ra,4(sp)
   119c0:	df000017 	ldw	fp,0(sp)
   119c4:	dec00204 	addi	sp,sp,8
   119c8:	f800283a 	ret

000119cc <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
   119cc:	defffe04 	addi	sp,sp,-8
   119d0:	df000115 	stw	fp,4(sp)
   119d4:	df000104 	addi	fp,sp,4
   119d8:	e13fff15 	stw	r4,-4(fp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   119dc:	e0bfff17 	ldw	r2,-4(fp)
   119e0:	e037883a 	mov	sp,fp
   119e4:	df000017 	ldw	fp,0(sp)
   119e8:	dec00104 	addi	sp,sp,4
   119ec:	f800283a 	ret

000119f0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   119f0:	defffa04 	addi	sp,sp,-24
   119f4:	dfc00515 	stw	ra,20(sp)
   119f8:	df000415 	stw	fp,16(sp)
   119fc:	df000404 	addi	fp,sp,16
   11a00:	e13ffd15 	stw	r4,-12(fp)
   11a04:	e17ffc15 	stw	r5,-16(fp)
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   11a08:	e13ffd17 	ldw	r4,-12(fp)
   11a0c:	00119cc0 	call	119cc <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
   11a10:	10c00017 	ldw	r3,0(r2)
   11a14:	e0fffe15 	stw	r3,-8(fp)
   11a18:	10800117 	ldw	r2,4(r2)
   11a1c:	e0bfff15 	stw	r2,-4(fp)
      __a = _GLIBCXX_MOVE(__b);
   11a20:	e13ffc17 	ldw	r4,-16(fp)
   11a24:	00119cc0 	call	119cc <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
   11a28:	1007883a 	mov	r3,r2
   11a2c:	e0bffd17 	ldw	r2,-12(fp)
   11a30:	19000017 	ldw	r4,0(r3)
   11a34:	11000015 	stw	r4,0(r2)
   11a38:	18c00117 	ldw	r3,4(r3)
   11a3c:	10c00115 	stw	r3,4(r2)
      __b = _GLIBCXX_MOVE(__tmp);
   11a40:	e0bffe04 	addi	r2,fp,-8
   11a44:	1009883a 	mov	r4,r2
   11a48:	00119cc0 	call	119cc <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
   11a4c:	1007883a 	mov	r3,r2
   11a50:	e0bffc17 	ldw	r2,-16(fp)
   11a54:	19000017 	ldw	r4,0(r3)
   11a58:	11000015 	stw	r4,0(r2)
   11a5c:	18c00117 	ldw	r3,4(r3)
   11a60:	10c00115 	stw	r3,4(r2)
    }
   11a64:	0001883a 	nop
   11a68:	e037883a 	mov	sp,fp
   11a6c:	dfc00117 	ldw	ra,4(sp)
   11a70:	df000017 	ldw	fp,0(sp)
   11a74:	dec00204 	addi	sp,sp,8
   11a78:	f800283a 	ret

00011a7c <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
   11a7c:	defffe04 	addi	sp,sp,-8
   11a80:	df000115 	stw	fp,4(sp)
   11a84:	df000104 	addi	fp,sp,4
   11a88:	e13fff15 	stw	r4,-4(fp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   11a8c:	e0bfff17 	ldw	r2,-4(fp)
   11a90:	e037883a 	mov	sp,fp
   11a94:	df000017 	ldw	fp,0(sp)
   11a98:	dec00104 	addi	sp,sp,4
   11a9c:	f800283a 	ret

00011aa0 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
   11aa0:	defffb04 	addi	sp,sp,-20
   11aa4:	dfc00415 	stw	ra,16(sp)
   11aa8:	df000315 	stw	fp,12(sp)
   11aac:	df000304 	addi	fp,sp,12
   11ab0:	e13ffe15 	stw	r4,-8(fp)
   11ab4:	e17ffd15 	stw	r5,-12(fp)
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   11ab8:	e13ffe17 	ldw	r4,-8(fp)
   11abc:	0011a7c0 	call	11a7c <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
   11ac0:	10800017 	ldw	r2,0(r2)
   11ac4:	e0bfff15 	stw	r2,-4(fp)
      __a = _GLIBCXX_MOVE(__b);
   11ac8:	e13ffd17 	ldw	r4,-12(fp)
   11acc:	0011a7c0 	call	11a7c <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
   11ad0:	10c00017 	ldw	r3,0(r2)
   11ad4:	e0bffe17 	ldw	r2,-8(fp)
   11ad8:	10c00015 	stw	r3,0(r2)
      __b = _GLIBCXX_MOVE(__tmp);
   11adc:	e0bfff04 	addi	r2,fp,-4
   11ae0:	1009883a 	mov	r4,r2
   11ae4:	0011a7c0 	call	11a7c <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
   11ae8:	10c00017 	ldw	r3,0(r2)
   11aec:	e0bffd17 	ldw	r2,-12(fp)
   11af0:	10c00015 	stw	r3,0(r2)
    }
   11af4:	0001883a 	nop
   11af8:	e037883a 	mov	sp,fp
   11afc:	dfc00117 	ldw	ra,4(sp)
   11b00:	df000017 	ldw	fp,0(sp)
   11b04:	dec00204 	addi	sp,sp,8
   11b08:	f800283a 	ret

00011b0c <_ZSt4moveIRPFvRKSt9_Any_dataRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
   11b0c:	defffe04 	addi	sp,sp,-8
   11b10:	df000115 	stw	fp,4(sp)
   11b14:	df000104 	addi	fp,sp,4
   11b18:	e13fff15 	stw	r4,-4(fp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   11b1c:	e0bfff17 	ldw	r2,-4(fp)
   11b20:	e037883a 	mov	sp,fp
   11b24:	df000017 	ldw	fp,0(sp)
   11b28:	dec00104 	addi	sp,sp,4
   11b2c:	f800283a 	ret

00011b30 <_ZSt4swapIPFvRKSt9_Any_dataRN6Serial10rx_messageEEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
   11b30:	defffb04 	addi	sp,sp,-20
   11b34:	dfc00415 	stw	ra,16(sp)
   11b38:	df000315 	stw	fp,12(sp)
   11b3c:	df000304 	addi	fp,sp,12
   11b40:	e13ffe15 	stw	r4,-8(fp)
   11b44:	e17ffd15 	stw	r5,-12(fp)
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   11b48:	e13ffe17 	ldw	r4,-8(fp)
   11b4c:	0011b0c0 	call	11b0c <_ZSt4moveIRPFvRKSt9_Any_dataRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOSA_>
   11b50:	10800017 	ldw	r2,0(r2)
   11b54:	e0bfff15 	stw	r2,-4(fp)
      __a = _GLIBCXX_MOVE(__b);
   11b58:	e13ffd17 	ldw	r4,-12(fp)
   11b5c:	0011b0c0 	call	11b0c <_ZSt4moveIRPFvRKSt9_Any_dataRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOSA_>
   11b60:	10c00017 	ldw	r3,0(r2)
   11b64:	e0bffe17 	ldw	r2,-8(fp)
   11b68:	10c00015 	stw	r3,0(r2)
      __b = _GLIBCXX_MOVE(__tmp);
   11b6c:	e0bfff04 	addi	r2,fp,-4
   11b70:	1009883a 	mov	r4,r2
   11b74:	0011b0c0 	call	11b0c <_ZSt4moveIRPFvRKSt9_Any_dataRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOSA_>
   11b78:	10c00017 	ldw	r3,0(r2)
   11b7c:	e0bffd17 	ldw	r2,-12(fp)
   11b80:	10c00015 	stw	r3,0(r2)
    }
   11b84:	0001883a 	nop
   11b88:	e037883a 	mov	sp,fp
   11b8c:	dfc00117 	ldw	ra,4(sp)
   11b90:	df000017 	ldw	fp,0(sp)
   11b94:	dec00204 	addi	sp,sp,8
   11b98:	f800283a 	ret

00011b9c <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>:
      _S_ptr(const _Type& __t) noexcept
   11b9c:	defffe04 	addi	sp,sp,-8
   11ba0:	df000115 	stw	fp,4(sp)
   11ba4:	df000104 	addi	fp,sp,4
   11ba8:	e13fff15 	stw	r4,-4(fp)
      { return const_cast<_Tp*>(__t); }
   11bac:	e0bfff17 	ldw	r2,-4(fp)
   11bb0:	e037883a 	mov	sp,fp
   11bb4:	df000017 	ldw	fp,0(sp)
   11bb8:	dec00104 	addi	sp,sp,4
   11bbc:	f800283a 	ret

00011bc0 <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
   11bc0:	defffe04 	addi	sp,sp,-8
   11bc4:	df000115 	stw	fp,4(sp)
   11bc8:	df000104 	addi	fp,sp,4
   11bcc:	e13fff15 	stw	r4,-4(fp)
    { return __it; }
   11bd0:	e0bfff17 	ldw	r2,-4(fp)
   11bd4:	e037883a 	mov	sp,fp
   11bd8:	df000017 	ldw	fp,0(sp)
   11bdc:	dec00104 	addi	sp,sp,4
   11be0:	f800283a 	ret

00011be4 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
   11be4:	defffb04 	addi	sp,sp,-20
   11be8:	dfc00415 	stw	ra,16(sp)
   11bec:	df000315 	stw	fp,12(sp)
   11bf0:	df000304 	addi	fp,sp,12
   11bf4:	e13fff15 	stw	r4,-4(fp)
   11bf8:	e17ffe15 	stw	r5,-8(fp)
   11bfc:	e1bffd15 	stw	r6,-12(fp)
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
   11c00:	e1bffd17 	ldw	r6,-12(fp)
   11c04:	e17ffe17 	ldw	r5,-8(fp)
   11c08:	e13fff17 	ldw	r4,-4(fp)
   11c0c:	0011c4c0 	call	11c4c <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>
   11c10:	e037883a 	mov	sp,fp
   11c14:	dfc00117 	ldw	ra,4(sp)
   11c18:	df000017 	ldw	fp,0(sp)
   11c1c:	dec00204 	addi	sp,sp,8
   11c20:	f800283a 	ret

00011c24 <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
   11c24:	defffd04 	addi	sp,sp,-12
   11c28:	df000215 	stw	fp,8(sp)
   11c2c:	df000204 	addi	fp,sp,8
   11c30:	e13fff15 	stw	r4,-4(fp)
   11c34:	e17ffe15 	stw	r5,-8(fp)
    { return __res; }
   11c38:	e0bffe17 	ldw	r2,-8(fp)
   11c3c:	e037883a 	mov	sp,fp
   11c40:	df000017 	ldw	fp,0(sp)
   11c44:	dec00104 	addi	sp,sp,4
   11c48:	f800283a 	ret

00011c4c <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
   11c4c:	defffb04 	addi	sp,sp,-20
   11c50:	dfc00415 	stw	ra,16(sp)
   11c54:	df000315 	stw	fp,12(sp)
   11c58:	df000304 	addi	fp,sp,12
   11c5c:	e13fff15 	stw	r4,-4(fp)
   11c60:	e17ffe15 	stw	r5,-8(fp)
   11c64:	e1bffd15 	stw	r6,-12(fp)
			      _Category>::__copy_m(__first, __last, __result);
   11c68:	e1bffd17 	ldw	r6,-12(fp)
   11c6c:	e17ffe17 	ldw	r5,-8(fp)
   11c70:	e13fff17 	ldw	r4,-4(fp)
   11c74:	0011c8c0 	call	11c8c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
    }
   11c78:	e037883a 	mov	sp,fp
   11c7c:	dfc00117 	ldw	ra,4(sp)
   11c80:	df000017 	ldw	fp,0(sp)
   11c84:	dec00204 	addi	sp,sp,8
   11c88:	f800283a 	ret

00011c8c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   11c8c:	defffa04 	addi	sp,sp,-24
   11c90:	dfc00515 	stw	ra,20(sp)
   11c94:	df000415 	stw	fp,16(sp)
   11c98:	df000404 	addi	fp,sp,16
   11c9c:	e13ffe15 	stw	r4,-8(fp)
   11ca0:	e17ffd15 	stw	r5,-12(fp)
   11ca4:	e1bffc15 	stw	r6,-16(fp)
	  const ptrdiff_t _Num = __last - __first;
   11ca8:	e0fffd17 	ldw	r3,-12(fp)
   11cac:	e0bffe17 	ldw	r2,-8(fp)
   11cb0:	1885c83a 	sub	r2,r3,r2
   11cb4:	e0bfff15 	stw	r2,-4(fp)
	  if (_Num)
   11cb8:	e0bfff17 	ldw	r2,-4(fp)
   11cbc:	10000526 	beq	r2,zero,11cd4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x48>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   11cc0:	e0bfff17 	ldw	r2,-4(fp)
   11cc4:	100d883a 	mov	r6,r2
   11cc8:	e17ffe17 	ldw	r5,-8(fp)
   11ccc:	e13ffc17 	ldw	r4,-16(fp)
   11cd0:	001456c0 	call	1456c <memmove>
	  return __result + _Num;
   11cd4:	e0bfff17 	ldw	r2,-4(fp)
   11cd8:	e0fffc17 	ldw	r3,-16(fp)
   11cdc:	1885883a 	add	r2,r3,r2
	}
   11ce0:	e037883a 	mov	sp,fp
   11ce4:	dfc00117 	ldw	ra,4(sp)
   11ce8:	df000017 	ldw	fp,0(sp)
   11cec:	dec00204 	addi	sp,sp,8
   11cf0:	f800283a 	ret

00011cf4 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>:
   11cf4:	28800017 	ldw	r2,0(r5)
   11cf8:	30c00017 	ldw	r3,0(r6)
   11cfc:	defffb04 	addi	sp,sp,-20
   11d00:	10800217 	ldw	r2,8(r2)
   11d04:	dc800315 	stw	r18,12(sp)
   11d08:	dc400215 	stw	r17,8(sp)
   11d0c:	dc000115 	stw	r16,4(sp)
   11d10:	dfc00415 	stw	ra,16(sp)
   11d14:	2023883a 	mov	r17,r4
   11d18:	d8c00015 	stw	r3,0(sp)
   11d1c:	2809883a 	mov	r4,r5
   11d20:	2821883a 	mov	r16,r5
   11d24:	3025883a 	mov	r18,r6
   11d28:	103ee83a 	callr	r2
   11d2c:	10803fcc 	andi	r2,r2,255
   11d30:	10000326 	beq	r2,zero,11d40 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x4c>
   11d34:	d8800017 	ldw	r2,0(sp)
   11d38:	10800017 	ldw	r2,0(r2)
   11d3c:	d8800015 	stw	r2,0(sp)
   11d40:	88800017 	ldw	r2,0(r17)
   11d44:	01c00044 	movi	r7,1
   11d48:	d80d883a 	mov	r6,sp
   11d4c:	10800417 	ldw	r2,16(r2)
   11d50:	800b883a 	mov	r5,r16
   11d54:	8809883a 	mov	r4,r17
   11d58:	103ee83a 	callr	r2
   11d5c:	10c03fcc 	andi	r3,r2,255
   11d60:	18000226 	beq	r3,zero,11d6c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x78>
   11d64:	d8c00017 	ldw	r3,0(sp)
   11d68:	90c00015 	stw	r3,0(r18)
   11d6c:	dfc00417 	ldw	ra,16(sp)
   11d70:	dc800317 	ldw	r18,12(sp)
   11d74:	dc400217 	ldw	r17,8(sp)
   11d78:	dc000117 	ldw	r16,4(sp)
   11d7c:	dec00504 	addi	sp,sp,20
   11d80:	f800283a 	ret

00011d84 <_ZL28read_encoded_value_with_basehjPKhPj>:
   11d84:	20803fcc 	andi	r2,r4,255
   11d88:	10801418 	cmpnei	r2,r2,80
   11d8c:	10002c26 	beq	r2,zero,11e40 <_ZL28read_encoded_value_with_basehjPKhPj+0xbc>
   11d90:	208003cc 	andi	r2,r4,15
   11d94:	10c00368 	cmpgeui	r3,r2,13
   11d98:	1800711e 	bne	r3,zero,11f60 <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
   11d9c:	100490ba 	slli	r2,r2,2
   11da0:	00c00074 	movhi	r3,1
   11da4:	10c7883a 	add	r3,r2,r3
   11da8:	18876c17 	ldw	r2,7600(r3)
   11dac:	1000683a 	jmp	r2
   11db0:	00011de4 	muli	zero,zero,1143
   11db4:	00011ed4 	movui	zero,1147
   11db8:	00011e98 	cmpnei	zero,zero,1146
   11dbc:	00011de4 	muli	zero,zero,1143
   11dc0:	00011e68 	cmpgeui	zero,zero,1145
   11dc4:	00011f60 	cmpeqi	zero,zero,1149
   11dc8:	00011f60 	cmpeqi	zero,zero,1149
   11dcc:	00011f60 	cmpeqi	zero,zero,1149
   11dd0:	00011f60 	cmpeqi	zero,zero,1149
   11dd4:	00011f0c 	andi	zero,zero,1148
   11dd8:	00011eb0 	cmpltui	zero,zero,1146
   11ddc:	00011de4 	muli	zero,zero,1143
   11de0:	00011e68 	cmpgeui	zero,zero,1145
   11de4:	32000043 	ldbu	r8,1(r6)
   11de8:	30800083 	ldbu	r2,2(r6)
   11dec:	30c000c3 	ldbu	r3,3(r6)
   11df0:	32400003 	ldbu	r9,0(r6)
   11df4:	4010923a 	slli	r8,r8,8
   11df8:	1004943a 	slli	r2,r2,16
   11dfc:	1806963a 	slli	r3,r3,24
   11e00:	4250b03a 	or	r8,r8,r9
   11e04:	1204b03a 	or	r2,r2,r8
   11e08:	1886b03a 	or	r3,r3,r2
   11e0c:	30800104 	addi	r2,r6,4
   11e10:	18000926 	beq	r3,zero,11e38 <_ZL28read_encoded_value_with_basehjPKhPj+0xb4>
   11e14:	22001c0c 	andi	r8,r4,112
   11e18:	42000418 	cmpnei	r8,r8,16
   11e1c:	4000011e 	bne	r8,zero,11e24 <_ZL28read_encoded_value_with_basehjPKhPj+0xa0>
   11e20:	300b883a 	mov	r5,r6
   11e24:	21003fcc 	andi	r4,r4,255
   11e28:	2100201c 	xori	r4,r4,128
   11e2c:	213fe004 	addi	r4,r4,-128
   11e30:	1947883a 	add	r3,r3,r5
   11e34:	20000916 	blt	r4,zero,11e5c <_ZL28read_encoded_value_with_basehjPKhPj+0xd8>
   11e38:	38c00015 	stw	r3,0(r7)
   11e3c:	f800283a 	ret
   11e40:	308000c4 	addi	r2,r6,3
   11e44:	01bfff04 	movi	r6,-4
   11e48:	1184703a 	and	r2,r2,r6
   11e4c:	10c00017 	ldw	r3,0(r2)
   11e50:	10800104 	addi	r2,r2,4
   11e54:	38c00015 	stw	r3,0(r7)
   11e58:	f800283a 	ret
   11e5c:	18c00017 	ldw	r3,0(r3)
   11e60:	38c00015 	stw	r3,0(r7)
   11e64:	f800283a 	ret
   11e68:	32000043 	ldbu	r8,1(r6)
   11e6c:	30800083 	ldbu	r2,2(r6)
   11e70:	30c000c3 	ldbu	r3,3(r6)
   11e74:	32400003 	ldbu	r9,0(r6)
   11e78:	4010923a 	slli	r8,r8,8
   11e7c:	1004943a 	slli	r2,r2,16
   11e80:	1806963a 	slli	r3,r3,24
   11e84:	4250b03a 	or	r8,r8,r9
   11e88:	1204b03a 	or	r2,r2,r8
   11e8c:	1886b03a 	or	r3,r3,r2
   11e90:	30800204 	addi	r2,r6,8
   11e94:	003fde06 	br	11e10 <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
   11e98:	30c00043 	ldbu	r3,1(r6)
   11e9c:	32000003 	ldbu	r8,0(r6)
   11ea0:	30800084 	addi	r2,r6,2
   11ea4:	1806923a 	slli	r3,r3,8
   11ea8:	1a06b03a 	or	r3,r3,r8
   11eac:	003fd806 	br	11e10 <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
   11eb0:	30c00043 	ldbu	r3,1(r6)
   11eb4:	32000003 	ldbu	r8,0(r6)
   11eb8:	30800084 	addi	r2,r6,2
   11ebc:	1806923a 	slli	r3,r3,8
   11ec0:	1a06b03a 	or	r3,r3,r8
   11ec4:	18ffffcc 	andi	r3,r3,65535
   11ec8:	18e0001c 	xori	r3,r3,32768
   11ecc:	18e00004 	addi	r3,r3,-32768
   11ed0:	003fcf06 	br	11e10 <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
   11ed4:	3005883a 	mov	r2,r6
   11ed8:	0007883a 	mov	r3,zero
   11edc:	0015883a 	mov	r10,zero
   11ee0:	12000003 	ldbu	r8,0(r2)
   11ee4:	10800044 	addi	r2,r2,1
   11ee8:	42401fcc 	andi	r9,r8,127
   11eec:	4a92983a 	sll	r9,r9,r10
   11ef0:	42003fcc 	andi	r8,r8,255
   11ef4:	4200201c 	xori	r8,r8,128
   11ef8:	423fe004 	addi	r8,r8,-128
   11efc:	1a46b03a 	or	r3,r3,r9
   11f00:	528001c4 	addi	r10,r10,7
   11f04:	403ff616 	blt	r8,zero,11ee0 <_ZL28read_encoded_value_with_basehjPKhPj+0x15c>
   11f08:	003fc106 	br	11e10 <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
   11f0c:	3005883a 	mov	r2,r6
   11f10:	0007883a 	mov	r3,zero
   11f14:	0013883a 	mov	r9,zero
   11f18:	12800003 	ldbu	r10,0(r2)
   11f1c:	10800044 	addi	r2,r2,1
   11f20:	52001fcc 	andi	r8,r10,127
   11f24:	4250983a 	sll	r8,r8,r9
   11f28:	52c03fcc 	andi	r11,r10,255
   11f2c:	5ac0201c 	xori	r11,r11,128
   11f30:	5affe004 	addi	r11,r11,-128
   11f34:	1a06b03a 	or	r3,r3,r8
   11f38:	4a4001c4 	addi	r9,r9,7
   11f3c:	583ff616 	blt	r11,zero,11f18 <_ZL28read_encoded_value_with_basehjPKhPj+0x194>
   11f40:	4a000828 	cmpgeui	r8,r9,32
   11f44:	403fb21e 	bne	r8,zero,11e10 <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
   11f48:	5280100c 	andi	r10,r10,64
   11f4c:	503fb026 	beq	r10,zero,11e10 <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
   11f50:	023fffc4 	movi	r8,-1
   11f54:	4252983a 	sll	r9,r8,r9
   11f58:	1a46b03a 	or	r3,r3,r9
   11f5c:	003fad06 	br	11e14 <_ZL28read_encoded_value_with_basehjPKhPj+0x90>
   11f60:	deffff04 	addi	sp,sp,-4
   11f64:	dfc00015 	stw	ra,0(sp)
   11f68:	00145340 	call	14534 <abort>

00011f6c <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   11f6c:	20803fcc 	andi	r2,r4,255
   11f70:	10803fe0 	cmpeqi	r2,r2,255
   11f74:	1000161e 	bne	r2,zero,11fd0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x64>
   11f78:	2007883a 	mov	r3,r4
   11f7c:	18801c0c 	andi	r2,r3,112
   11f80:	2809883a 	mov	r4,r5
   11f84:	11400c20 	cmpeqi	r5,r2,48
   11f88:	2800131e 	bne	r5,zero,11fd8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
   11f8c:	11400c68 	cmpgeui	r5,r2,49
   11f90:	2800031e 	bne	r5,zero,11fa0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x34>
   11f94:	11400820 	cmpeqi	r5,r2,32
   11f98:	28000426 	beq	r5,zero,11fac <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
   11f9c:	00142fc1 	jmpi	142fc <_Unwind_GetTextRelBase>
   11fa0:	10c01020 	cmpeqi	r3,r2,64
   11fa4:	18000826 	beq	r3,zero,11fc8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
   11fa8:	00142e41 	jmpi	142e4 <_Unwind_GetRegionStart>
   11fac:	10800868 	cmpgeui	r2,r2,33
   11fb0:	1000021e 	bne	r2,zero,11fbc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x50>
   11fb4:	18c0180c 	andi	r3,r3,96
   11fb8:	18000526 	beq	r3,zero,11fd0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x64>
   11fbc:	deffff04 	addi	sp,sp,-4
   11fc0:	dfc00015 	stw	ra,0(sp)
   11fc4:	00145340 	call	14534 <abort>
   11fc8:	10801420 	cmpeqi	r2,r2,80
   11fcc:	103ffb26 	beq	r2,zero,11fbc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x50>
   11fd0:	0005883a 	mov	r2,zero
   11fd4:	f800283a 	ret
   11fd8:	00142f41 	jmpi	142f4 <_Unwind_GetDataRelBase>

00011fdc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   11fdc:	defffb04 	addi	sp,sp,-20
   11fe0:	dc800215 	stw	r18,8(sp)
   11fe4:	dc400115 	stw	r17,4(sp)
   11fe8:	dc000015 	stw	r16,0(sp)
   11fec:	dfc00415 	stw	ra,16(sp)
   11ff0:	dcc00315 	stw	r19,12(sp)
   11ff4:	2025883a 	mov	r18,r4
   11ff8:	2821883a 	mov	r16,r5
   11ffc:	3023883a 	mov	r17,r6
   12000:	20003d26 	beq	r4,zero,120f8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
   12004:	00142e40 	call	142e4 <_Unwind_GetRegionStart>
   12008:	88800015 	stw	r2,0(r17)
   1200c:	84c00003 	ldbu	r19,0(r16)
   12010:	84000044 	addi	r16,r16,1
   12014:	98c03fe0 	cmpeqi	r3,r19,255
   12018:	18002d26 	beq	r3,zero,120d0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xf4>
   1201c:	88800115 	stw	r2,4(r17)
   12020:	81000003 	ldbu	r4,0(r16)
   12024:	80800044 	addi	r2,r16,1
   12028:	20c03fcc 	andi	r3,r4,255
   1202c:	89000505 	stb	r4,20(r17)
   12030:	18c03fe0 	cmpeqi	r3,r3,255
   12034:	1800321e 	bne	r3,zero,12100 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
   12038:	000d883a 	mov	r6,zero
   1203c:	000b883a 	mov	r5,zero
   12040:	10c00003 	ldbu	r3,0(r2)
   12044:	10800044 	addi	r2,r2,1
   12048:	19001fcc 	andi	r4,r3,127
   1204c:	2148983a 	sll	r4,r4,r5
   12050:	18c03fcc 	andi	r3,r3,255
   12054:	18c0201c 	xori	r3,r3,128
   12058:	18ffe004 	addi	r3,r3,-128
   1205c:	310cb03a 	or	r6,r6,r4
   12060:	294001c4 	addi	r5,r5,7
   12064:	183ff616 	blt	r3,zero,12040 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x64>
   12068:	118d883a 	add	r6,r2,r6
   1206c:	89800315 	stw	r6,12(r17)
   12070:	10c00003 	ldbu	r3,0(r2)
   12074:	000f883a 	mov	r7,zero
   12078:	10800044 	addi	r2,r2,1
   1207c:	88c00545 	stb	r3,21(r17)
   12080:	000b883a 	mov	r5,zero
   12084:	10c00003 	ldbu	r3,0(r2)
   12088:	10800044 	addi	r2,r2,1
   1208c:	19001fcc 	andi	r4,r3,127
   12090:	2148983a 	sll	r4,r4,r5
   12094:	18c03fcc 	andi	r3,r3,255
   12098:	18c0201c 	xori	r3,r3,128
   1209c:	18ffe004 	addi	r3,r3,-128
   120a0:	390eb03a 	or	r7,r7,r4
   120a4:	294001c4 	addi	r5,r5,7
   120a8:	183ff616 	blt	r3,zero,12084 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xa8>
   120ac:	11cf883a 	add	r7,r2,r7
   120b0:	89c00415 	stw	r7,16(r17)
   120b4:	dfc00417 	ldw	ra,16(sp)
   120b8:	dcc00317 	ldw	r19,12(sp)
   120bc:	dc800217 	ldw	r18,8(sp)
   120c0:	dc400117 	ldw	r17,4(sp)
   120c4:	dc000017 	ldw	r16,0(sp)
   120c8:	dec00504 	addi	sp,sp,20
   120cc:	f800283a 	ret
   120d0:	900b883a 	mov	r5,r18
   120d4:	9809883a 	mov	r4,r19
   120d8:	0011f6c0 	call	11f6c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   120dc:	800d883a 	mov	r6,r16
   120e0:	89c00104 	addi	r7,r17,4
   120e4:	100b883a 	mov	r5,r2
   120e8:	9809883a 	mov	r4,r19
   120ec:	0011d840 	call	11d84 <_ZL28read_encoded_value_with_basehjPKhPj>
   120f0:	1021883a 	mov	r16,r2
   120f4:	003fca06 	br	12020 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x44>
   120f8:	0005883a 	mov	r2,zero
   120fc:	003fc206 	br	12008 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x2c>
   12100:	88000315 	stw	zero,12(r17)
   12104:	003fda06 	br	12070 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x94>

00012108 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
   12108:	defffa04 	addi	sp,sp,-24
   1210c:	dc000215 	stw	r16,8(sp)
   12110:	24000317 	ldw	r16,12(r4)
   12114:	01ce303a 	nor	r7,zero,r7
   12118:	dc800415 	stw	r18,16(sp)
   1211c:	dc400315 	stw	r17,12(sp)
   12120:	dfc00515 	stw	ra,20(sp)
   12124:	2025883a 	mov	r18,r4
   12128:	2823883a 	mov	r17,r5
   1212c:	d9800015 	stw	r6,0(sp)
   12130:	81e1883a 	add	r16,r16,r7
   12134:	000f883a 	mov	r7,zero
   12138:	000d883a 	mov	r6,zero
   1213c:	80800003 	ldbu	r2,0(r16)
   12140:	84000044 	addi	r16,r16,1
   12144:	10c01fcc 	andi	r3,r2,127
   12148:	1986983a 	sll	r3,r3,r6
   1214c:	10803fcc 	andi	r2,r2,255
   12150:	1080201c 	xori	r2,r2,128
   12154:	10bfe004 	addi	r2,r2,-128
   12158:	38ceb03a 	or	r7,r7,r3
   1215c:	318001c4 	addi	r6,r6,7
   12160:	103ff616 	blt	r2,zero,1213c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x34>
   12164:	38002926 	beq	r7,zero,1220c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x104>
   12168:	90800503 	ldbu	r2,20(r18)
   1216c:	11003fcc 	andi	r4,r2,255
   12170:	20c03fe0 	cmpeqi	r3,r4,255
   12174:	1800231e 	bne	r3,zero,12204 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xfc>
   12178:	108001cc 	andi	r2,r2,7
   1217c:	10c000a0 	cmpeqi	r3,r2,2
   12180:	18001d1e 	bne	r3,zero,121f8 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xf0>
   12184:	10c000e8 	cmpgeui	r3,r2,3
   12188:	18001726 	beq	r3,zero,121e8 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xe0>
   1218c:	10c000e0 	cmpeqi	r3,r2,3
   12190:	1800161e 	bne	r3,zero,121ec <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xe4>
   12194:	10800120 	cmpeqi	r2,r2,4
   12198:	10001e26 	beq	r2,zero,12214 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x10c>
   1219c:	380e90fa 	slli	r7,r7,3
   121a0:	01c5c83a 	sub	r2,zero,r7
   121a4:	91800317 	ldw	r6,12(r18)
   121a8:	91400217 	ldw	r5,8(r18)
   121ac:	d9c00104 	addi	r7,sp,4
   121b0:	308d883a 	add	r6,r6,r2
   121b4:	0011d840 	call	11d84 <_ZL28read_encoded_value_with_basehjPKhPj>
   121b8:	d9000117 	ldw	r4,4(sp)
   121bc:	d80d883a 	mov	r6,sp
   121c0:	880b883a 	mov	r5,r17
   121c4:	0011cf40 	call	11cf4 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
   121c8:	10c03fcc 	andi	r3,r2,255
   121cc:	183fd926 	beq	r3,zero,12134 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x2c>
   121d0:	dfc00517 	ldw	ra,20(sp)
   121d4:	dc800417 	ldw	r18,16(sp)
   121d8:	dc400317 	ldw	r17,12(sp)
   121dc:	dc000217 	ldw	r16,8(sp)
   121e0:	dec00604 	addi	sp,sp,24
   121e4:	f800283a 	ret
   121e8:	10000a1e 	bne	r2,zero,12214 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x10c>
   121ec:	380e90ba 	slli	r7,r7,2
   121f0:	01c5c83a 	sub	r2,zero,r7
   121f4:	003feb06 	br	121a4 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x9c>
   121f8:	39cf883a 	add	r7,r7,r7
   121fc:	01c5c83a 	sub	r2,zero,r7
   12200:	003fe806 	br	121a4 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x9c>
   12204:	0005883a 	mov	r2,zero
   12208:	003fe606 	br	121a4 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x9c>
   1220c:	0005883a 	mov	r2,zero
   12210:	003fef06 	br	121d0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xc8>
   12214:	00145340 	call	14534 <abort>

00012218 <__gxx_personality_sj0>:
   12218:	deffdb04 	addi	sp,sp,-148
   1221c:	02000074 	movhi	r8,1
   12220:	00c00074 	movhi	r3,1
   12224:	00800074 	movhi	r2,1
   12228:	108a2304 	addi	r2,r2,10380
   1222c:	d9000015 	stw	r4,0(sp)
   12230:	42088604 	addi	r8,r8,8728
   12234:	18dac004 	addi	r3,r3,27392
   12238:	d9000d04 	addi	r4,sp,52
   1223c:	d8801615 	stw	r2,88(sp)
   12240:	dfc02415 	stw	ra,144(sp)
   12244:	df002315 	stw	fp,140(sp)
   12248:	d9400315 	stw	r5,12(sp)
   1224c:	d9800115 	stw	r6,4(sp)
   12250:	d9c00215 	stw	r7,8(sp)
   12254:	da001315 	stw	r8,76(sp)
   12258:	d8c01415 	stw	r3,80(sp)
   1225c:	df001515 	stw	fp,84(sp)
   12260:	dec01715 	stw	sp,92(sp)
   12264:	00142280 	call	14228 <_Unwind_SjLj_Register>
   12268:	d8800017 	ldw	r2,0(sp)
   1226c:	d8001a15 	stw	zero,104(sp)
   12270:	d8001b15 	stw	zero,108(sp)
   12274:	10800058 	cmpnei	r2,r2,1
   12278:	1000471e 	bne	r2,zero,12398 <__gxx_personality_sj0+0x180>
   1227c:	d9800117 	ldw	r6,4(sp)
   12280:	00af3574 	movhi	r2,48341
   12284:	10b54004 	addi	r2,r2,-11008
   12288:	3085883a 	add	r2,r6,r2
   1228c:	d8800715 	stw	r2,28(sp)
   12290:	1185803a 	cmpltu	r2,r2,r6
   12294:	d9800217 	ldw	r6,8(sp)
   12298:	00ee2cb4 	movhi	r3,47282
   1229c:	d9000317 	ldw	r4,12(sp)
   122a0:	18eaaf04 	addi	r3,r3,-21828
   122a4:	30c7883a 	add	r3,r6,r3
   122a8:	10c7883a 	add	r3,r2,r3
   122ac:	21000198 	cmpnei	r4,r4,6
   122b0:	d8c00615 	stw	r3,24(sp)
   122b4:	2000011e 	bne	r4,zero,122bc <__gxx_personality_sj0+0xa4>
   122b8:	1800d026 	beq	r3,zero,125fc <__gxx_personality_sj0+0x3e4>
   122bc:	d9002617 	ldw	r4,152(sp)
   122c0:	00bfffc4 	movi	r2,-1
   122c4:	d8800e15 	stw	r2,56(sp)
   122c8:	00142d80 	call	142d8 <_Unwind_GetLanguageSpecificData>
   122cc:	d8800515 	stw	r2,20(sp)
   122d0:	10005d26 	beq	r2,zero,12448 <__gxx_personality_sj0+0x230>
   122d4:	d9400517 	ldw	r5,20(sp)
   122d8:	d9002617 	ldw	r4,152(sp)
   122dc:	d9801d04 	addi	r6,sp,116
   122e0:	00bfffc4 	movi	r2,-1
   122e4:	d8800e15 	stw	r2,56(sp)
   122e8:	0011fdc0 	call	11fdc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   122ec:	d9002203 	ldbu	r4,136(sp)
   122f0:	d9402617 	ldw	r5,152(sp)
   122f4:	d8800015 	stw	r2,0(sp)
   122f8:	0011f6c0 	call	11f6c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   122fc:	d9002617 	ldw	r4,152(sp)
   12300:	d9401b04 	addi	r5,sp,108
   12304:	d8801f15 	stw	r2,124(sp)
   12308:	00142a80 	call	142a8 <_Unwind_GetIPInfo>
   1230c:	d8c01b17 	ldw	r3,108(sp)
   12310:	d8800115 	stw	r2,4(sp)
   12314:	18004f26 	beq	r3,zero,12454 <__gxx_personality_sj0+0x23c>
   12318:	d8800117 	ldw	r2,4(sp)
   1231c:	10004a16 	blt	r2,zero,12448 <__gxx_personality_sj0+0x230>
   12320:	1000381e 	bne	r2,zero,12404 <__gxx_personality_sj0+0x1ec>
   12324:	d8000415 	stw	zero,16(sp)
   12328:	d8000215 	stw	zero,8(sp)
   1232c:	00800044 	movi	r2,1
   12330:	d8c00317 	ldw	r3,12(sp)
   12334:	18c0004c 	andi	r3,r3,1
   12338:	1801061e 	bne	r3,zero,12754 <__gxx_personality_sj0+0x53c>
   1233c:	d8c00317 	ldw	r3,12(sp)
   12340:	18c0020c 	andi	r3,r3,8
   12344:	18010a26 	beq	r3,zero,12770 <__gxx_personality_sj0+0x558>
   12348:	10800058 	cmpnei	r2,r2,1
   1234c:	10015126 	beq	r2,zero,12894 <__gxx_personality_sj0+0x67c>
   12350:	d8800417 	ldw	r2,16(sp)
   12354:	10014a16 	blt	r2,zero,12880 <__gxx_personality_sj0+0x668>
   12358:	d9002617 	ldw	r4,152(sp)
   1235c:	d9802517 	ldw	r6,148(sp)
   12360:	00bfffc4 	movi	r2,-1
   12364:	000b883a 	mov	r5,zero
   12368:	d8800e15 	stw	r2,56(sp)
   1236c:	00142800 	call	14280 <_Unwind_SetGR>
   12370:	d9800417 	ldw	r6,16(sp)
   12374:	d9002617 	ldw	r4,152(sp)
   12378:	01400044 	movi	r5,1
   1237c:	00142800 	call	14280 <_Unwind_SetGR>
   12380:	d9400117 	ldw	r5,4(sp)
   12384:	d9002617 	ldw	r4,152(sp)
   12388:	00142c80 	call	142c8 <_Unwind_SetIP>
   1238c:	008001c4 	movi	r2,7
   12390:	d8800015 	stw	r2,0(sp)
   12394:	00000206 	br	123a0 <__gxx_personality_sj0+0x188>
   12398:	008000c4 	movi	r2,3
   1239c:	d8800015 	stw	r2,0(sp)
   123a0:	d9000d04 	addi	r4,sp,52
   123a4:	00142400 	call	14240 <_Unwind_SjLj_Unregister>
   123a8:	d8800017 	ldw	r2,0(sp)
   123ac:	dfc02417 	ldw	ra,144(sp)
   123b0:	df002317 	ldw	fp,140(sp)
   123b4:	dec02504 	addi	sp,sp,148
   123b8:	f800283a 	ret
   123bc:	000b883a 	mov	r5,zero
   123c0:	0009883a 	mov	r4,zero
   123c4:	d8c00017 	ldw	r3,0(sp)
   123c8:	18800003 	ldbu	r2,0(r3)
   123cc:	18c00044 	addi	r3,r3,1
   123d0:	d8c00015 	stw	r3,0(sp)
   123d4:	10c01fcc 	andi	r3,r2,127
   123d8:	1906983a 	sll	r3,r3,r4
   123dc:	10803fcc 	andi	r2,r2,255
   123e0:	1080201c 	xori	r2,r2,128
   123e4:	10bfe004 	addi	r2,r2,-128
   123e8:	28cab03a 	or	r5,r5,r3
   123ec:	210001c4 	addi	r4,r4,7
   123f0:	103ff416 	blt	r2,zero,123c4 <__gxx_personality_sj0+0x1ac>
   123f4:	d8800117 	ldw	r2,4(sp)
   123f8:	10bfffc4 	addi	r2,r2,-1
   123fc:	d8800115 	stw	r2,4(sp)
   12400:	10001726 	beq	r2,zero,12460 <__gxx_personality_sj0+0x248>
   12404:	000d883a 	mov	r6,zero
   12408:	0009883a 	mov	r4,zero
   1240c:	d8c00017 	ldw	r3,0(sp)
   12410:	18800003 	ldbu	r2,0(r3)
   12414:	18c00044 	addi	r3,r3,1
   12418:	d8c00015 	stw	r3,0(sp)
   1241c:	10c01fcc 	andi	r3,r2,127
   12420:	1906983a 	sll	r3,r3,r4
   12424:	10803fcc 	andi	r2,r2,255
   12428:	1080201c 	xori	r2,r2,128
   1242c:	10bfe004 	addi	r2,r2,-128
   12430:	30ccb03a 	or	r6,r6,r3
   12434:	210001c4 	addi	r4,r4,7
   12438:	103ff416 	blt	r2,zero,1240c <__gxx_personality_sj0+0x1f4>
   1243c:	003fdf06 	br	123bc <__gxx_personality_sj0+0x1a4>
   12440:	d88008c3 	ldbu	r2,35(sp)
   12444:	10008c1e 	bne	r2,zero,12678 <__gxx_personality_sj0+0x460>
   12448:	00800204 	movi	r2,8
   1244c:	d8800015 	stw	r2,0(sp)
   12450:	003fd306 	br	123a0 <__gxx_personality_sj0+0x188>
   12454:	10bfffc4 	addi	r2,r2,-1
   12458:	d8800115 	stw	r2,4(sp)
   1245c:	003fae06 	br	12318 <__gxx_personality_sj0+0x100>
   12460:	30800044 	addi	r2,r6,1
   12464:	d8800a15 	stw	r2,40(sp)
   12468:	283ff626 	beq	r5,zero,12444 <__gxx_personality_sj0+0x22c>
   1246c:	d8800a17 	ldw	r2,40(sp)
   12470:	103ff526 	beq	r2,zero,12448 <__gxx_personality_sj0+0x230>
   12474:	d8802117 	ldw	r2,132(sp)
   12478:	297fffc4 	addi	r5,r5,-1
   1247c:	1145883a 	add	r2,r2,r5
   12480:	d8800215 	stw	r2,8(sp)
   12484:	10007c26 	beq	r2,zero,12678 <__gxx_personality_sj0+0x460>
   12488:	d8800317 	ldw	r2,12(sp)
   1248c:	1080020c 	andi	r2,r2,8
   12490:	d8800b15 	stw	r2,44(sp)
   12494:	1000bf1e 	bne	r2,zero,12794 <__gxx_personality_sj0+0x57c>
   12498:	d8800617 	ldw	r2,24(sp)
   1249c:	1000e526 	beq	r2,zero,12834 <__gxx_personality_sj0+0x61c>
   124a0:	00800074 	movhi	r2,1
   124a4:	109db804 	addi	r2,r2,30432
   124a8:	d8800915 	stw	r2,36(sp)
   124ac:	d8800717 	ldw	r2,28(sp)
   124b0:	d80008c5 	stb	zero,35(sp)
   124b4:	108000a8 	cmpgeui	r2,r2,2
   124b8:	d8800c15 	stw	r2,48(sp)
   124bc:	d8800217 	ldw	r2,8(sp)
   124c0:	000f883a 	mov	r7,zero
   124c4:	0007883a 	mov	r3,zero
   124c8:	d8800015 	stw	r2,0(sp)
   124cc:	d8800017 	ldw	r2,0(sp)
   124d0:	11000003 	ldbu	r4,0(r2)
   124d4:	10800044 	addi	r2,r2,1
   124d8:	d8800015 	stw	r2,0(sp)
   124dc:	20801fcc 	andi	r2,r4,127
   124e0:	10c4983a 	sll	r2,r2,r3
   124e4:	21403fcc 	andi	r5,r4,255
   124e8:	2940201c 	xori	r5,r5,128
   124ec:	297fe004 	addi	r5,r5,-128
   124f0:	388eb03a 	or	r7,r7,r2
   124f4:	18c001c4 	addi	r3,r3,7
   124f8:	283ff416 	blt	r5,zero,124cc <__gxx_personality_sj0+0x2b4>
   124fc:	18800828 	cmpgeui	r2,r3,32
   12500:	1000061e 	bne	r2,zero,1251c <__gxx_personality_sj0+0x304>
   12504:	2100100c 	andi	r4,r4,64
   12508:	20000426 	beq	r4,zero,1251c <__gxx_personality_sj0+0x304>
   1250c:	00800044 	movi	r2,1
   12510:	10c6983a 	sll	r3,r2,r3
   12514:	00c7c83a 	sub	r3,zero,r3
   12518:	38ceb03a 	or	r7,r7,r3
   1251c:	d9400017 	ldw	r5,0(sp)
   12520:	d9c00415 	stw	r7,16(sp)
   12524:	d8000115 	stw	zero,4(sp)
   12528:	0007883a 	mov	r3,zero
   1252c:	29000003 	ldbu	r4,0(r5)
   12530:	da000117 	ldw	r8,4(sp)
   12534:	29400044 	addi	r5,r5,1
   12538:	20801fcc 	andi	r2,r4,127
   1253c:	10c4983a 	sll	r2,r2,r3
   12540:	21803fcc 	andi	r6,r4,255
   12544:	3180201c 	xori	r6,r6,128
   12548:	4084b03a 	or	r2,r8,r2
   1254c:	31bfe004 	addi	r6,r6,-128
   12550:	d8800115 	stw	r2,4(sp)
   12554:	18c001c4 	addi	r3,r3,7
   12558:	303ff416 	blt	r6,zero,1252c <__gxx_personality_sj0+0x314>
   1255c:	18800828 	cmpgeui	r2,r3,32
   12560:	1000081e 	bne	r2,zero,12584 <__gxx_personality_sj0+0x36c>
   12564:	2100100c 	andi	r4,r4,64
   12568:	20000626 	beq	r4,zero,12584 <__gxx_personality_sj0+0x36c>
   1256c:	00800044 	movi	r2,1
   12570:	10c6983a 	sll	r3,r2,r3
   12574:	d8800117 	ldw	r2,4(sp)
   12578:	00c7c83a 	sub	r3,zero,r3
   1257c:	10c4b03a 	or	r2,r2,r3
   12580:	d8800115 	stw	r2,4(sp)
   12584:	38004726 	beq	r7,zero,126a4 <__gxx_personality_sj0+0x48c>
   12588:	01c04916 	blt	zero,r7,126b0 <__gxx_personality_sj0+0x498>
   1258c:	d8800917 	ldw	r2,36(sp)
   12590:	10000426 	beq	r2,zero,125a4 <__gxx_personality_sj0+0x38c>
   12594:	d8800b17 	ldw	r2,44(sp)
   12598:	1000021e 	bne	r2,zero,125a4 <__gxx_personality_sj0+0x38c>
   1259c:	d8800617 	ldw	r2,24(sp)
   125a0:	10008026 	beq	r2,zero,127a4 <__gxx_personality_sj0+0x58c>
   125a4:	d8802017 	ldw	r2,128(sp)
   125a8:	01ce303a 	nor	r7,zero,r7
   125ac:	000b883a 	mov	r5,zero
   125b0:	11cf883a 	add	r7,r2,r7
   125b4:	0009883a 	mov	r4,zero
   125b8:	38800003 	ldbu	r2,0(r7)
   125bc:	39c00044 	addi	r7,r7,1
   125c0:	10c01fcc 	andi	r3,r2,127
   125c4:	1906983a 	sll	r3,r3,r4
   125c8:	10803fcc 	andi	r2,r2,255
   125cc:	1080201c 	xori	r2,r2,128
   125d0:	10bfe004 	addi	r2,r2,-128
   125d4:	28cab03a 	or	r5,r5,r3
   125d8:	210001c4 	addi	r4,r4,7
   125dc:	103ff616 	blt	r2,zero,125b8 <__gxx_personality_sj0+0x3a0>
   125e0:	28005126 	beq	r5,zero,12728 <__gxx_personality_sj0+0x510>
   125e4:	d8800117 	ldw	r2,4(sp)
   125e8:	103f9526 	beq	r2,zero,12440 <__gxx_personality_sj0+0x228>
   125ec:	d8c00017 	ldw	r3,0(sp)
   125f0:	1885883a 	add	r2,r3,r2
   125f4:	d8800215 	stw	r2,8(sp)
   125f8:	003fb006 	br	124bc <__gxx_personality_sj0+0x2a4>
   125fc:	d8800717 	ldw	r2,28(sp)
   12600:	108000a8 	cmpgeui	r2,r2,2
   12604:	103f2d1e 	bne	r2,zero,122bc <__gxx_personality_sj0+0xa4>
   12608:	d8802517 	ldw	r2,148(sp)
   1260c:	10bffe17 	ldw	r2,-8(r2)
   12610:	d8800115 	stw	r2,4(sp)
   12614:	10005d26 	beq	r2,zero,1278c <__gxx_personality_sj0+0x574>
   12618:	d8802517 	ldw	r2,148(sp)
   1261c:	10bffb17 	ldw	r2,-20(r2)
   12620:	d8800415 	stw	r2,16(sp)
   12624:	d8802517 	ldw	r2,148(sp)
   12628:	10bffd17 	ldw	r2,-12(r2)
   1262c:	d8800515 	stw	r2,20(sp)
   12630:	d8800417 	ldw	r2,16(sp)
   12634:	103f480e 	bge	r2,zero,12358 <__gxx_personality_sj0+0x140>
   12638:	d9002617 	ldw	r4,152(sp)
   1263c:	d9400517 	ldw	r5,20(sp)
   12640:	d9801d04 	addi	r6,sp,116
   12644:	00bfffc4 	movi	r2,-1
   12648:	d8800e15 	stw	r2,56(sp)
   1264c:	0011fdc0 	call	11fdc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   12650:	d9402617 	ldw	r5,152(sp)
   12654:	d9002203 	ldbu	r4,136(sp)
   12658:	0011f6c0 	call	11f6c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1265c:	d9002203 	ldbu	r4,136(sp)
   12660:	d9402617 	ldw	r5,152(sp)
   12664:	d8801f15 	stw	r2,124(sp)
   12668:	0011f6c0 	call	11f6c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1266c:	d8c02517 	ldw	r3,148(sp)
   12670:	18bffe15 	stw	r2,-8(r3)
   12674:	003f3806 	br	12358 <__gxx_personality_sj0+0x140>
   12678:	d8800317 	ldw	r2,12(sp)
   1267c:	1080004c 	andi	r2,r2,1
   12680:	103f711e 	bne	r2,zero,12448 <__gxx_personality_sj0+0x230>
   12684:	d8800317 	ldw	r2,12(sp)
   12688:	1080020c 	andi	r2,r2,8
   1268c:	d8800415 	stw	r2,16(sp)
   12690:	10008126 	beq	r2,zero,12898 <__gxx_personality_sj0+0x680>
   12694:	d8800a17 	ldw	r2,40(sp)
   12698:	d8000415 	stw	zero,16(sp)
   1269c:	d8800115 	stw	r2,4(sp)
   126a0:	003f2d06 	br	12358 <__gxx_personality_sj0+0x140>
   126a4:	00800044 	movi	r2,1
   126a8:	d88008c5 	stb	r2,35(sp)
   126ac:	003fcd06 	br	125e4 <__gxx_personality_sj0+0x3cc>
   126b0:	d8802203 	ldbu	r2,136(sp)
   126b4:	11003fcc 	andi	r4,r2,255
   126b8:	20c03fe0 	cmpeqi	r3,r4,255
   126bc:	18002a1e 	bne	r3,zero,12768 <__gxx_personality_sj0+0x550>
   126c0:	108001cc 	andi	r2,r2,7
   126c4:	10c000a0 	cmpeqi	r3,r2,2
   126c8:	18001f1e 	bne	r3,zero,12748 <__gxx_personality_sj0+0x530>
   126cc:	10c000e8 	cmpgeui	r3,r2,3
   126d0:	18001926 	beq	r3,zero,12738 <__gxx_personality_sj0+0x520>
   126d4:	10c000e0 	cmpeqi	r3,r2,3
   126d8:	1800181e 	bne	r3,zero,1273c <__gxx_personality_sj0+0x524>
   126dc:	10800120 	cmpeqi	r2,r2,4
   126e0:	10007026 	beq	r2,zero,128a4 <__gxx_personality_sj0+0x68c>
   126e4:	380490fa 	slli	r2,r7,3
   126e8:	0085c83a 	sub	r2,zero,r2
   126ec:	d9802017 	ldw	r6,128(sp)
   126f0:	d9401f17 	ldw	r5,124(sp)
   126f4:	d9c01c04 	addi	r7,sp,112
   126f8:	308d883a 	add	r6,r6,r2
   126fc:	00bfffc4 	movi	r2,-1
   12700:	d8800e15 	stw	r2,56(sp)
   12704:	0011d840 	call	11d84 <_ZL28read_encoded_value_with_basehjPKhPj>
   12708:	d9001c17 	ldw	r4,112(sp)
   1270c:	20000626 	beq	r4,zero,12728 <__gxx_personality_sj0+0x510>
   12710:	d9400917 	ldw	r5,36(sp)
   12714:	283fb326 	beq	r5,zero,125e4 <__gxx_personality_sj0+0x3cc>
   12718:	d9801a04 	addi	r6,sp,104
   1271c:	0011cf40 	call	11cf4 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
   12720:	10803fcc 	andi	r2,r2,255
   12724:	103faf26 	beq	r2,zero,125e4 <__gxx_personality_sj0+0x3cc>
   12728:	d8800a17 	ldw	r2,40(sp)
   1272c:	d8800115 	stw	r2,4(sp)
   12730:	008000c4 	movi	r2,3
   12734:	003efe06 	br	12330 <__gxx_personality_sj0+0x118>
   12738:	10005a1e 	bne	r2,zero,128a4 <__gxx_personality_sj0+0x68c>
   1273c:	380490ba 	slli	r2,r7,2
   12740:	0085c83a 	sub	r2,zero,r2
   12744:	003fe906 	br	126ec <__gxx_personality_sj0+0x4d4>
   12748:	39cf883a 	add	r7,r7,r7
   1274c:	01c5c83a 	sub	r2,zero,r7
   12750:	003fe606 	br	126ec <__gxx_personality_sj0+0x4d4>
   12754:	d8800617 	ldw	r2,24(sp)
   12758:	10002326 	beq	r2,zero,127e8 <__gxx_personality_sj0+0x5d0>
   1275c:	00800184 	movi	r2,6
   12760:	d8800015 	stw	r2,0(sp)
   12764:	003f0e06 	br	123a0 <__gxx_personality_sj0+0x188>
   12768:	0005883a 	mov	r2,zero
   1276c:	003fdf06 	br	126ec <__gxx_personality_sj0+0x4d4>
   12770:	d8c00617 	ldw	r3,24(sp)
   12774:	183ef41e 	bne	r3,zero,12348 <__gxx_personality_sj0+0x130>
   12778:	d8c00717 	ldw	r3,28(sp)
   1277c:	18c000a8 	cmpgeui	r3,r3,2
   12780:	183ef11e 	bne	r3,zero,12348 <__gxx_personality_sj0+0x130>
   12784:	10800060 	cmpeqi	r2,r2,1
   12788:	103fa926 	beq	r2,zero,12630 <__gxx_personality_sj0+0x418>
   1278c:	d9002517 	ldw	r4,148(sp)
   12790:	00137b80 	call	137b8 <__cxa_call_terminate>
   12794:	00800074 	movhi	r2,1
   12798:	109db604 	addi	r2,r2,30424
   1279c:	d8800915 	stw	r2,36(sp)
   127a0:	003f4206 	br	124ac <__gxx_personality_sj0+0x294>
   127a4:	d8800c17 	ldw	r2,48(sp)
   127a8:	103f7e1e 	bne	r2,zero,125a4 <__gxx_personality_sj0+0x38c>
   127ac:	d9801a17 	ldw	r6,104(sp)
   127b0:	d9400917 	ldw	r5,36(sp)
   127b4:	00bfffc4 	movi	r2,-1
   127b8:	d9001d04 	addi	r4,sp,116
   127bc:	d8800e15 	stw	r2,56(sp)
   127c0:	00121080 	call	12108 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   127c4:	10803fcc 	andi	r2,r2,255
   127c8:	103f861e 	bne	r2,zero,125e4 <__gxx_personality_sj0+0x3cc>
   127cc:	d8800317 	ldw	r2,12(sp)
   127d0:	1080004c 	andi	r2,r2,1
   127d4:	1000271e 	bne	r2,zero,12874 <__gxx_personality_sj0+0x65c>
   127d8:	d8800a17 	ldw	r2,40(sp)
   127dc:	d8800115 	stw	r2,4(sp)
   127e0:	008000c4 	movi	r2,3
   127e4:	003fe406 	br	12778 <__gxx_personality_sj0+0x560>
   127e8:	d8800717 	ldw	r2,28(sp)
   127ec:	108000a8 	cmpgeui	r2,r2,2
   127f0:	103fda1e 	bne	r2,zero,1275c <__gxx_personality_sj0+0x544>
   127f4:	d8802517 	ldw	r2,148(sp)
   127f8:	d8c00417 	ldw	r3,16(sp)
   127fc:	10fffb15 	stw	r3,-20(r2)
   12800:	d8c00217 	ldw	r3,8(sp)
   12804:	10fffc15 	stw	r3,-16(r2)
   12808:	d8c00517 	ldw	r3,20(sp)
   1280c:	10fffd15 	stw	r3,-12(r2)
   12810:	d8c02517 	ldw	r3,148(sp)
   12814:	d8801a17 	ldw	r2,104(sp)
   12818:	18bfff15 	stw	r2,-4(r3)
   1281c:	1805883a 	mov	r2,r3
   12820:	d8c00117 	ldw	r3,4(sp)
   12824:	10fffe15 	stw	r3,-8(r2)
   12828:	00800184 	movi	r2,6
   1282c:	d8800015 	stw	r2,0(sp)
   12830:	003edb06 	br	123a0 <__gxx_personality_sj0+0x188>
   12834:	d8800717 	ldw	r2,28(sp)
   12838:	108000a8 	cmpgeui	r2,r2,2
   1283c:	103f181e 	bne	r2,zero,124a0 <__gxx_personality_sj0+0x288>
   12840:	d8802517 	ldw	r2,148(sp)
   12844:	10800003 	ldbu	r2,0(r2)
   12848:	1080004c 	andi	r2,r2,1
   1284c:	10000626 	beq	r2,zero,12868 <__gxx_personality_sj0+0x650>
   12850:	d8802517 	ldw	r2,148(sp)
   12854:	10bff517 	ldw	r2,-44(r2)
   12858:	10fff017 	ldw	r3,-64(r2)
   1285c:	d8801a15 	stw	r2,104(sp)
   12860:	d8c00915 	stw	r3,36(sp)
   12864:	003f1106 	br	124ac <__gxx_personality_sj0+0x294>
   12868:	d8802517 	ldw	r2,148(sp)
   1286c:	10800504 	addi	r2,r2,20
   12870:	003ff906 	br	12858 <__gxx_personality_sj0+0x640>
   12874:	d8800a17 	ldw	r2,40(sp)
   12878:	d8800115 	stw	r2,4(sp)
   1287c:	003fdd06 	br	127f4 <__gxx_personality_sj0+0x5dc>
   12880:	00800044 	movi	r2,1
   12884:	d8800e15 	stw	r2,56(sp)
   12888:	0012b180 	call	12b18 <_ZSt10unexpectedv>
   1288c:	d9000f17 	ldw	r4,60(sp)
   12890:	00138180 	call	13818 <__cxa_begin_catch>
   12894:	0012af40 	call	12af4 <_ZSt9terminatev>
   12898:	d8800a17 	ldw	r2,40(sp)
   1289c:	d8800115 	stw	r2,4(sp)
   128a0:	003ead06 	br	12358 <__gxx_personality_sj0+0x140>
   128a4:	00bfffc4 	movi	r2,-1
   128a8:	d8800e15 	stw	r2,56(sp)
   128ac:	00145340 	call	14534 <abort>

000128b0 <__cxa_call_unexpected>:
   128b0:	deffe704 	addi	sp,sp,-100
   128b4:	01400074 	movhi	r5,1
   128b8:	00c00074 	movhi	r3,1
   128bc:	00800074 	movhi	r2,1
   128c0:	29488604 	addi	r5,r5,8728
   128c4:	18dac404 	addi	r3,r3,27408
   128c8:	108a4c04 	addi	r2,r2,10544
   128cc:	d9000015 	stw	r4,0(sp)
   128d0:	d9000404 	addi	r4,sp,16
   128d4:	d9400a15 	stw	r5,40(sp)
   128d8:	d8c00b15 	stw	r3,44(sp)
   128dc:	dfc01815 	stw	ra,96(sp)
   128e0:	d8800d15 	stw	r2,52(sp)
   128e4:	df001715 	stw	fp,92(sp)
   128e8:	df000c15 	stw	fp,48(sp)
   128ec:	dec00e15 	stw	sp,56(sp)
   128f0:	00142280 	call	14228 <_Unwind_SjLj_Register>
   128f4:	d9000017 	ldw	r4,0(sp)
   128f8:	00138180 	call	13818 <__cxa_begin_catch>
   128fc:	d8c00017 	ldw	r3,0(sp)
   12900:	197ffd17 	ldw	r5,-12(r3)
   12904:	18bffe17 	ldw	r2,-8(r3)
   12908:	193ff717 	ldw	r4,-36(r3)
   1290c:	d9400115 	stw	r5,4(sp)
   12910:	197ffb17 	ldw	r5,-20(r3)
   12914:	18fff817 	ldw	r3,-32(r3)
   12918:	d8801315 	stw	r2,76(sp)
   1291c:	00800044 	movi	r2,1
   12920:	d9400015 	stw	r5,0(sp)
   12924:	d8c00215 	stw	r3,8(sp)
   12928:	d8800515 	stw	r2,20(sp)
   1292c:	0012b080 	call	12b08 <_ZN10__cxxabiv112__unexpectedEPFvvE>
   12930:	d8c00617 	ldw	r3,24(sp)
   12934:	d8800517 	ldw	r2,20(sp)
   12938:	d8c00315 	stw	r3,12(sp)
   1293c:	10002b1e 	bne	r2,zero,129ec <__cxa_call_unexpected+0x13c>
   12940:	d9000317 	ldw	r4,12(sp)
   12944:	00138180 	call	13818 <__cxa_begin_catch>
   12948:	0013a100 	call	13a10 <__cxa_get_globals_fast>
   1294c:	10800017 	ldw	r2,0(r2)
   12950:	10c00b03 	ldbu	r3,44(r2)
   12954:	18c0004c 	andi	r3,r3,1
   12958:	18002e26 	beq	r3,zero,12a14 <__cxa_call_unexpected+0x164>
   1295c:	10800017 	ldw	r2,0(r2)
   12960:	d8800315 	stw	r2,12(sp)
   12964:	d9400117 	ldw	r5,4(sp)
   12968:	00800084 	movi	r2,2
   1296c:	d9801104 	addi	r6,sp,68
   12970:	0009883a 	mov	r4,zero
   12974:	d8800515 	stw	r2,20(sp)
   12978:	0011fdc0 	call	11fdc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   1297c:	d9800317 	ldw	r6,12(sp)
   12980:	d9c00017 	ldw	r7,0(sp)
   12984:	d9001104 	addi	r4,sp,68
   12988:	317ff017 	ldw	r5,-64(r6)
   1298c:	00121080 	call	12108 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   12990:	10803fcc 	andi	r2,r2,255
   12994:	1000221e 	bne	r2,zero,12a20 <__cxa_call_unexpected+0x170>
   12998:	d9c00017 	ldw	r7,0(sp)
   1299c:	01400074 	movhi	r5,1
   129a0:	00800084 	movi	r2,2
   129a4:	000d883a 	mov	r6,zero
   129a8:	295b7604 	addi	r5,r5,28120
   129ac:	d9001104 	addi	r4,sp,68
   129b0:	d8800515 	stw	r2,20(sp)
   129b4:	00121080 	call	12108 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   129b8:	10803fcc 	andi	r2,r2,255
   129bc:	10001926 	beq	r2,zero,12a24 <__cxa_call_unexpected+0x174>
   129c0:	01000104 	movi	r4,4
   129c4:	00136640 	call	13664 <__cxa_allocate_exception>
   129c8:	1009883a 	mov	r4,r2
   129cc:	00800074 	movhi	r2,1
   129d0:	01800074 	movhi	r6,1
   129d4:	01400074 	movhi	r5,1
   129d8:	109b9104 	addi	r2,r2,28228
   129dc:	318e7104 	addi	r6,r6,14788
   129e0:	295b7604 	addi	r5,r5,28120
   129e4:	20800015 	stw	r2,0(r4)
   129e8:	0012c580 	call	12c58 <__cxa_throw>
   129ec:	10bfffc4 	addi	r2,r2,-1
   129f0:	10000126 	beq	r2,zero,129f8 <__cxa_call_unexpected+0x148>
   129f4:	003b68fa 	trap	3
   129f8:	d8000515 	stw	zero,20(sp)
   129fc:	00138d00 	call	138d0 <__cxa_end_catch>
   12a00:	00138d00 	call	138d0 <__cxa_end_catch>
   12a04:	d9000317 	ldw	r4,12(sp)
   12a08:	00bfffc4 	movi	r2,-1
   12a0c:	d8800515 	stw	r2,20(sp)
   12a10:	00144100 	call	14410 <_Unwind_SjLj_Resume>
   12a14:	10801004 	addi	r2,r2,64
   12a18:	d8800315 	stw	r2,12(sp)
   12a1c:	003fd106 	br	12964 <__cxa_call_unexpected+0xb4>
   12a20:	0012cb80 	call	12cb8 <__cxa_rethrow>
   12a24:	d9000217 	ldw	r4,8(sp)
   12a28:	0012a2c0 	call	12a2c <_ZN10__cxxabiv111__terminateEPFvvE>

00012a2c <_ZN10__cxxabiv111__terminateEPFvvE>:
   12a2c:	deffef04 	addi	sp,sp,-68
   12a30:	01400074 	movhi	r5,1
   12a34:	00c00074 	movhi	r3,1
   12a38:	00800074 	movhi	r2,1
   12a3c:	200d883a 	mov	r6,r4
   12a40:	108aa204 	addi	r2,r2,10888
   12a44:	29488604 	addi	r5,r5,8728
   12a48:	18dac804 	addi	r3,r3,27424
   12a4c:	d9000204 	addi	r4,sp,8
   12a50:	d8800b15 	stw	r2,44(sp)
   12a54:	dfc01015 	stw	ra,64(sp)
   12a58:	df000f15 	stw	fp,60(sp)
   12a5c:	d9800015 	stw	r6,0(sp)
   12a60:	d9400815 	stw	r5,32(sp)
   12a64:	d8c00915 	stw	r3,36(sp)
   12a68:	df000a15 	stw	fp,40(sp)
   12a6c:	dec00c15 	stw	sp,48(sp)
   12a70:	00142280 	call	14228 <_Unwind_SjLj_Register>
   12a74:	00800044 	movi	r2,1
   12a78:	d8800315 	stw	r2,12(sp)
   12a7c:	d8800017 	ldw	r2,0(sp)
   12a80:	103ee83a 	callr	r2
   12a84:	00145340 	call	14534 <abort>
   12a88:	d8c00417 	ldw	r3,16(sp)
   12a8c:	d8800317 	ldw	r2,12(sp)
   12a90:	d8c00015 	stw	r3,0(sp)
   12a94:	d8c00517 	ldw	r3,20(sp)
   12a98:	d8c00115 	stw	r3,4(sp)
   12a9c:	1000051e 	bne	r2,zero,12ab4 <_ZN10__cxxabiv111__terminateEPFvvE+0x88>
   12aa0:	d9000017 	ldw	r4,0(sp)
   12aa4:	00138180 	call	13818 <__cxa_begin_catch>
   12aa8:	00800084 	movi	r2,2
   12aac:	d8800315 	stw	r2,12(sp)
   12ab0:	00145340 	call	14534 <abort>
   12ab4:	10bfffc4 	addi	r2,r2,-1
   12ab8:	10000126 	beq	r2,zero,12ac0 <_ZN10__cxxabiv111__terminateEPFvvE+0x94>
   12abc:	003b68fa 	trap	3
   12ac0:	d8000315 	stw	zero,12(sp)
   12ac4:	00138d00 	call	138d0 <__cxa_end_catch>
   12ac8:	d8c00117 	ldw	r3,4(sp)
   12acc:	18bfffe0 	cmpeqi	r2,r3,-1
   12ad0:	10000426 	beq	r2,zero,12ae4 <_ZN10__cxxabiv111__terminateEPFvvE+0xb8>
   12ad4:	d8800117 	ldw	r2,4(sp)
   12ad8:	d9000017 	ldw	r4,0(sp)
   12adc:	d8800315 	stw	r2,12(sp)
   12ae0:	00128b00 	call	128b0 <__cxa_call_unexpected>
   12ae4:	d9000017 	ldw	r4,0(sp)
   12ae8:	00bfffc4 	movi	r2,-1
   12aec:	d8800315 	stw	r2,12(sp)
   12af0:	00144100 	call	14410 <_Unwind_SjLj_Resume>

00012af4 <_ZSt9terminatev>:
   12af4:	00800074 	movhi	r2,1
   12af8:	111dba17 	ldw	r4,30440(r2)
   12afc:	deffff04 	addi	sp,sp,-4
   12b00:	dfc00015 	stw	ra,0(sp)
   12b04:	0012a2c0 	call	12a2c <_ZN10__cxxabiv111__terminateEPFvvE>

00012b08 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   12b08:	deffff04 	addi	sp,sp,-4
   12b0c:	dfc00015 	stw	ra,0(sp)
   12b10:	203ee83a 	callr	r4
   12b14:	0012af40 	call	12af4 <_ZSt9terminatev>

00012b18 <_ZSt10unexpectedv>:
   12b18:	00800074 	movhi	r2,1
   12b1c:	111db117 	ldw	r4,30404(r2)
   12b20:	deffff04 	addi	sp,sp,-4
   12b24:	dfc00015 	stw	ra,0(sp)
   12b28:	0012b080 	call	12b08 <_ZN10__cxxabiv112__unexpectedEPFvvE>

00012b2c <_ZSt13set_terminatePFvvE>:
   12b2c:	20000526 	beq	r4,zero,12b44 <_ZSt13set_terminatePFvvE+0x18>
   12b30:	00c00074 	movhi	r3,1
   12b34:	00800074 	movhi	r2,1
   12b38:	109dba17 	ldw	r2,30440(r2)
   12b3c:	191dba15 	stw	r4,30440(r3)
   12b40:	f800283a 	ret
   12b44:	01000074 	movhi	r4,1
   12b48:	21114d04 	addi	r4,r4,17716
   12b4c:	003ff806 	br	12b30 <_ZSt13set_terminatePFvvE+0x4>

00012b50 <_ZSt13get_terminatev>:
   12b50:	00800074 	movhi	r2,1
   12b54:	109dba17 	ldw	r2,30440(r2)
   12b58:	f800283a 	ret

00012b5c <_ZSt14set_unexpectedPFvvE>:
   12b5c:	20000526 	beq	r4,zero,12b74 <_ZSt14set_unexpectedPFvvE+0x18>
   12b60:	00c00074 	movhi	r3,1
   12b64:	00800074 	movhi	r2,1
   12b68:	109db117 	ldw	r2,30404(r2)
   12b6c:	191db115 	stw	r4,30404(r3)
   12b70:	f800283a 	ret
   12b74:	01000074 	movhi	r4,1
   12b78:	210abd04 	addi	r4,r4,10996
   12b7c:	003ff806 	br	12b60 <_ZSt14set_unexpectedPFvvE+0x4>

00012b80 <_ZSt14get_unexpectedv>:
   12b80:	00800074 	movhi	r2,1
   12b84:	109db117 	ldw	r2,30404(r2)
   12b88:	f800283a 	ret

00012b8c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
   12b8c:	defffe04 	addi	sp,sp,-8
   12b90:	dfc00115 	stw	ra,4(sp)
   12b94:	dc000015 	stw	r16,0(sp)
   12b98:	210000b0 	cmpltui	r4,r4,2
   12b9c:	20001326 	beq	r4,zero,12bec <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x60>
   12ba0:	28bff417 	ldw	r2,-48(r5)
   12ba4:	10ffffc4 	addi	r3,r2,-1
   12ba8:	28fff415 	stw	r3,-48(r5)
   12bac:	10800058 	cmpnei	r2,r2,1
   12bb0:	10000426 	beq	r2,zero,12bc4 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x38>
   12bb4:	dfc00117 	ldw	ra,4(sp)
   12bb8:	dc000017 	ldw	r16,0(sp)
   12bbc:	dec00204 	addi	sp,sp,8
   12bc0:	f800283a 	ret
   12bc4:	28bff617 	ldw	r2,-40(r5)
   12bc8:	2c000504 	addi	r16,r5,20
   12bcc:	10000226 	beq	r2,zero,12bd8 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x4c>
   12bd0:	8009883a 	mov	r4,r16
   12bd4:	103ee83a 	callr	r2
   12bd8:	8009883a 	mov	r4,r16
   12bdc:	dfc00117 	ldw	ra,4(sp)
   12be0:	dc000017 	ldw	r16,0(sp)
   12be4:	dec00204 	addi	sp,sp,8
   12be8:	00136bc1 	jmpi	136bc <__cxa_free_exception>
   12bec:	293ff817 	ldw	r4,-32(r5)
   12bf0:	0012a2c0 	call	12a2c <_ZN10__cxxabiv111__terminateEPFvvE>

00012bf4 <__cxa_init_primary_exception>:
   12bf4:	defffe04 	addi	sp,sp,-8
   12bf8:	dfc00115 	stw	ra,4(sp)
   12bfc:	dc000015 	stw	r16,0(sp)
   12c00:	217ff015 	stw	r5,-64(r4)
   12c04:	21bff115 	stw	r6,-60(r4)
   12c08:	203fef15 	stw	zero,-68(r4)
   12c0c:	2021883a 	mov	r16,r4
   12c10:	0012b800 	call	12b80 <_ZSt14get_unexpectedv>
   12c14:	80bff215 	stw	r2,-56(r16)
   12c18:	0012b500 	call	12b50 <_ZSt13get_terminatev>
   12c1c:	0150caf4 	movhi	r5,17195
   12c20:	0111d3b4 	movhi	r4,18254
   12c24:	00c00074 	movhi	r3,1
   12c28:	294ac004 	addi	r5,r5,11008
   12c2c:	211550c4 	addi	r4,r4,21827
   12c30:	18cae304 	addi	r3,r3,11148
   12c34:	80bff315 	stw	r2,-52(r16)
   12c38:	80bfef04 	addi	r2,r16,-68
   12c3c:	817ffb15 	stw	r5,-20(r16)
   12c40:	813ffc15 	stw	r4,-16(r16)
   12c44:	80fffd15 	stw	r3,-12(r16)
   12c48:	dfc00117 	ldw	ra,4(sp)
   12c4c:	dc000017 	ldw	r16,0(sp)
   12c50:	dec00204 	addi	sp,sp,8
   12c54:	f800283a 	ret

00012c58 <__cxa_throw>:
   12c58:	defffc04 	addi	sp,sp,-16
   12c5c:	dfc00315 	stw	ra,12(sp)
   12c60:	dc800215 	stw	r18,8(sp)
   12c64:	dc400115 	stw	r17,4(sp)
   12c68:	dc000015 	stw	r16,0(sp)
   12c6c:	2823883a 	mov	r17,r5
   12c70:	2021883a 	mov	r16,r4
   12c74:	3025883a 	mov	r18,r6
   12c78:	0013a1c0 	call	13a1c <__cxa_get_globals>
   12c7c:	10c00117 	ldw	r3,4(r2)
   12c80:	900d883a 	mov	r6,r18
   12c84:	880b883a 	mov	r5,r17
   12c88:	18c00044 	addi	r3,r3,1
   12c8c:	8009883a 	mov	r4,r16
   12c90:	10c00115 	stw	r3,4(r2)
   12c94:	0012bf40 	call	12bf4 <__cxa_init_primary_exception>
   12c98:	14000c04 	addi	r16,r2,48
   12c9c:	00c00044 	movi	r3,1
   12ca0:	10c00015 	stw	r3,0(r2)
   12ca4:	8009883a 	mov	r4,r16
   12ca8:	00143040 	call	14304 <_Unwind_SjLj_RaiseException>
   12cac:	8009883a 	mov	r4,r16
   12cb0:	00138180 	call	13818 <__cxa_begin_catch>
   12cb4:	0012af40 	call	12af4 <_ZSt9terminatev>

00012cb8 <__cxa_rethrow>:
   12cb8:	defffe04 	addi	sp,sp,-8
   12cbc:	dfc00115 	stw	ra,4(sp)
   12cc0:	dc000015 	stw	r16,0(sp)
   12cc4:	0013a1c0 	call	13a1c <__cxa_get_globals>
   12cc8:	10c00117 	ldw	r3,4(r2)
   12ccc:	11000017 	ldw	r4,0(r2)
   12cd0:	18c00044 	addi	r3,r3,1
   12cd4:	10c00115 	stw	r3,4(r2)
   12cd8:	20001126 	beq	r4,zero,12d20 <__cxa_rethrow+0x68>
   12cdc:	20c00b17 	ldw	r3,44(r4)
   12ce0:	21800c17 	ldw	r6,48(r4)
   12ce4:	016f3574 	movhi	r5,48341
   12ce8:	29754004 	addi	r5,r5,-11008
   12cec:	01ee2cb4 	movhi	r7,47282
   12cf0:	39eaaf04 	addi	r7,r7,-21828
   12cf4:	194b883a 	add	r5,r3,r5
   12cf8:	28c7803a 	cmpltu	r3,r5,r3
   12cfc:	31cd883a 	add	r6,r6,r7
   12d00:	1987883a 	add	r3,r3,r6
   12d04:	18000726 	beq	r3,zero,12d24 <__cxa_rethrow+0x6c>
   12d08:	10000015 	stw	zero,0(r2)
   12d0c:	24000b04 	addi	r16,r4,44
   12d10:	8009883a 	mov	r4,r16
   12d14:	00144540 	call	14454 <_Unwind_SjLj_Resume_or_Rethrow>
   12d18:	8009883a 	mov	r4,r16
   12d1c:	00138180 	call	13818 <__cxa_begin_catch>
   12d20:	0012af40 	call	12af4 <_ZSt9terminatev>
   12d24:	294000a8 	cmpgeui	r5,r5,2
   12d28:	283ff71e 	bne	r5,zero,12d08 <__cxa_rethrow+0x50>
   12d2c:	20800517 	ldw	r2,20(r4)
   12d30:	0085c83a 	sub	r2,zero,r2
   12d34:	20800515 	stw	r2,20(r4)
   12d38:	003ff406 	br	12d0c <__cxa_rethrow+0x54>

00012d3c <_ZNK10__cxxabiv120__function_type_info15__is_function_pEv>:
   12d3c:	00800044 	movi	r2,1
   12d40:	f800283a 	ret

00012d44 <_ZN10__cxxabiv120__function_type_infoD1Ev>:
   12d44:	00800074 	movhi	r2,1
   12d48:	109afb04 	addi	r2,r2,27628
   12d4c:	20800015 	stw	r2,0(r4)
   12d50:	00131481 	jmpi	13148 <_ZNSt9type_infoD1Ev>

00012d54 <_ZN10__cxxabiv120__function_type_infoD0Ev>:
   12d54:	defffe04 	addi	sp,sp,-8
   12d58:	00800074 	movhi	r2,1
   12d5c:	dc000015 	stw	r16,0(sp)
   12d60:	dfc00115 	stw	ra,4(sp)
   12d64:	109afb04 	addi	r2,r2,27628
   12d68:	20800015 	stw	r2,0(r4)
   12d6c:	2021883a 	mov	r16,r4
   12d70:	00131480 	call	13148 <_ZNSt9type_infoD1Ev>
   12d74:	01400204 	movi	r5,8
   12d78:	8009883a 	mov	r4,r16
   12d7c:	dfc00117 	ldw	ra,4(sp)
   12d80:	dc000017 	ldw	r16,0(sp)
   12d84:	dec00204 	addi	sp,sp,8
   12d88:	00134d41 	jmpi	134d4 <_ZdlPvj>

00012d8c <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
   12d8c:	00800044 	movi	r2,1
   12d90:	f800283a 	ret

00012d94 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
   12d94:	00800074 	movhi	r2,1
   12d98:	109b0f04 	addi	r2,r2,27708
   12d9c:	20800015 	stw	r2,0(r4)
   12da0:	0013a881 	jmpi	13a88 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>

00012da4 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
   12da4:	defffe04 	addi	sp,sp,-8
   12da8:	00800074 	movhi	r2,1
   12dac:	dc000015 	stw	r16,0(sp)
   12db0:	dfc00115 	stw	ra,4(sp)
   12db4:	109b0f04 	addi	r2,r2,27708
   12db8:	20800015 	stw	r2,0(r4)
   12dbc:	2021883a 	mov	r16,r4
   12dc0:	0013a880 	call	13a88 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
   12dc4:	01400404 	movi	r5,16
   12dc8:	8009883a 	mov	r4,r16
   12dcc:	dfc00117 	ldw	ra,4(sp)
   12dd0:	dc000017 	ldw	r16,0(sp)
   12dd4:	dec00204 	addi	sp,sp,8
   12dd8:	00134d41 	jmpi	134d4 <_ZdlPvj>

00012ddc <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
   12ddc:	defffb04 	addi	sp,sp,-20
   12de0:	dc800315 	stw	r18,12(sp)
   12de4:	dc400215 	stw	r17,8(sp)
   12de8:	dfc00415 	stw	ra,16(sp)
   12dec:	388000a8 	cmpgeui	r2,r7,2
   12df0:	24800317 	ldw	r18,12(r4)
   12df4:	2823883a 	mov	r17,r5
   12df8:	10000a26 	beq	r2,zero,12e24 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x48>
   12dfc:	90800017 	ldw	r2,0(r18)
   12e00:	89400317 	ldw	r5,12(r17)
   12e04:	39c00084 	addi	r7,r7,2
   12e08:	10800417 	ldw	r2,16(r2)
   12e0c:	9009883a 	mov	r4,r18
   12e10:	dfc00417 	ldw	ra,16(sp)
   12e14:	dc800317 	ldw	r18,12(sp)
   12e18:	dc400217 	ldw	r17,8(sp)
   12e1c:	dec00504 	addi	sp,sp,20
   12e20:	1000683a 	jmp	r2
   12e24:	00800074 	movhi	r2,1
   12e28:	91000117 	ldw	r4,4(r18)
   12e2c:	115e3917 	ldw	r5,30948(r2)
   12e30:	21400926 	beq	r4,r5,12e58 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x7c>
   12e34:	20800007 	ldb	r2,0(r4)
   12e38:	10800aa0 	cmpeqi	r2,r2,42
   12e3c:	103fef1e 	bne	r2,zero,12dfc <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x20>
   12e40:	d9c00115 	stw	r7,4(sp)
   12e44:	d9800015 	stw	r6,0(sp)
   12e48:	0014bdc0 	call	14bdc <strcmp>
   12e4c:	d9800017 	ldw	r6,0(sp)
   12e50:	d9c00117 	ldw	r7,4(sp)
   12e54:	103fe91e 	bne	r2,zero,12dfc <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x20>
   12e58:	89000317 	ldw	r4,12(r17)
   12e5c:	20800017 	ldw	r2,0(r4)
   12e60:	10800317 	ldw	r2,12(r2)
   12e64:	103ee83a 	callr	r2
   12e68:	1080005c 	xori	r2,r2,1
   12e6c:	dfc00417 	ldw	ra,16(sp)
   12e70:	dc800317 	ldw	r18,12(sp)
   12e74:	dc400217 	ldw	r17,8(sp)
   12e78:	dec00504 	addi	sp,sp,20
   12e7c:	f800283a 	ret

00012e80 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   12e80:	00800074 	movhi	r2,1
   12e84:	109b2504 	addi	r2,r2,27796
   12e88:	20800015 	stw	r2,0(r4)
   12e8c:	00132bc1 	jmpi	132bc <_ZN10__cxxabiv117__class_type_infoD1Ev>

00012e90 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   12e90:	defffe04 	addi	sp,sp,-8
   12e94:	00800074 	movhi	r2,1
   12e98:	dc000015 	stw	r16,0(sp)
   12e9c:	dfc00115 	stw	ra,4(sp)
   12ea0:	109b2504 	addi	r2,r2,27796
   12ea4:	20800015 	stw	r2,0(r4)
   12ea8:	2021883a 	mov	r16,r4
   12eac:	00132bc0 	call	132bc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   12eb0:	01400304 	movi	r5,12
   12eb4:	8009883a 	mov	r4,r16
   12eb8:	dfc00117 	ldw	ra,4(sp)
   12ebc:	dc000017 	ldw	r16,0(sp)
   12ec0:	dec00204 	addi	sp,sp,8
   12ec4:	00134d41 	jmpi	134d4 <_ZdlPvj>

00012ec8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   12ec8:	defff504 	addi	sp,sp,-44
   12ecc:	dcc00415 	stw	r19,16(sp)
   12ed0:	38800117 	ldw	r2,4(r7)
   12ed4:	24c00117 	ldw	r19,4(r4)
   12ed8:	df000915 	stw	fp,36(sp)
   12edc:	dd800715 	stw	r22,28(sp)
   12ee0:	dd400615 	stw	r21,24(sp)
   12ee4:	dd000515 	stw	r20,20(sp)
   12ee8:	dc000115 	stw	r16,4(sp)
   12eec:	dfc00a15 	stw	ra,40(sp)
   12ef0:	ddc00815 	stw	r23,32(sp)
   12ef4:	dc800315 	stw	r18,12(sp)
   12ef8:	dc400215 	stw	r17,8(sp)
   12efc:	dd000b17 	ldw	r20,44(sp)
   12f00:	df000c17 	ldw	fp,48(sp)
   12f04:	dd800d17 	ldw	r22,52(sp)
   12f08:	dd400e17 	ldw	r21,56(sp)
   12f0c:	2821883a 	mov	r16,r5
   12f10:	98800b26 	beq	r19,r2,12f40 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
   12f14:	9dc00007 	ldb	r23,0(r19)
   12f18:	2025883a 	mov	r18,r4
   12f1c:	3823883a 	mov	r17,r7
   12f20:	b8c00aa0 	cmpeqi	r3,r23,42
   12f24:	18001a1e 	bne	r3,zero,12f90 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xc8>
   12f28:	100b883a 	mov	r5,r2
   12f2c:	9809883a 	mov	r4,r19
   12f30:	d9800015 	stw	r6,0(sp)
   12f34:	0014bdc0 	call	14bdc <strcmp>
   12f38:	d9800017 	ldw	r6,0(sp)
   12f3c:	1000141e 	bne	r2,zero,12f90 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xc8>
   12f40:	ad000015 	stw	r20,0(r21)
   12f44:	a9800115 	stw	r6,4(r21)
   12f48:	80003416 	blt	r16,zero,1301c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x154>
   12f4c:	a421883a 	add	r16,r20,r16
   12f50:	b4003026 	beq	r22,r16,13014 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x14c>
   12f54:	00800044 	movi	r2,1
   12f58:	a8800315 	stw	r2,12(r21)
   12f5c:	0005883a 	mov	r2,zero
   12f60:	dfc00a17 	ldw	ra,40(sp)
   12f64:	df000917 	ldw	fp,36(sp)
   12f68:	ddc00817 	ldw	r23,32(sp)
   12f6c:	dd800717 	ldw	r22,28(sp)
   12f70:	dd400617 	ldw	r21,24(sp)
   12f74:	dd000517 	ldw	r20,20(sp)
   12f78:	dcc00417 	ldw	r19,16(sp)
   12f7c:	dc800317 	ldw	r18,12(sp)
   12f80:	dc400217 	ldw	r17,8(sp)
   12f84:	dc000117 	ldw	r16,4(sp)
   12f88:	dec00b04 	addi	sp,sp,44
   12f8c:	f800283a 	ret
   12f90:	a5801526 	beq	r20,r22,12fe8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x120>
   12f94:	91000217 	ldw	r4,8(r18)
   12f98:	880f883a 	mov	r7,r17
   12f9c:	800b883a 	mov	r5,r16
   12fa0:	20800017 	ldw	r2,0(r4)
   12fa4:	dd400e15 	stw	r21,56(sp)
   12fa8:	dd800d15 	stw	r22,52(sp)
   12fac:	df000c15 	stw	fp,48(sp)
   12fb0:	dd000b15 	stw	r20,44(sp)
   12fb4:	10800717 	ldw	r2,28(r2)
   12fb8:	dfc00a17 	ldw	ra,40(sp)
   12fbc:	df000917 	ldw	fp,36(sp)
   12fc0:	ddc00817 	ldw	r23,32(sp)
   12fc4:	dd800717 	ldw	r22,28(sp)
   12fc8:	dd400617 	ldw	r21,24(sp)
   12fcc:	dd000517 	ldw	r20,20(sp)
   12fd0:	dcc00417 	ldw	r19,16(sp)
   12fd4:	dc800317 	ldw	r18,12(sp)
   12fd8:	dc400217 	ldw	r17,8(sp)
   12fdc:	dc000117 	ldw	r16,4(sp)
   12fe0:	dec00b04 	addi	sp,sp,44
   12fe4:	1000683a 	jmp	r2
   12fe8:	e1400117 	ldw	r5,4(fp)
   12fec:	99400726 	beq	r19,r5,1300c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x144>
   12ff0:	bdc00aa0 	cmpeqi	r23,r23,42
   12ff4:	b83fe71e 	bne	r23,zero,12f94 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
   12ff8:	9809883a 	mov	r4,r19
   12ffc:	d9800015 	stw	r6,0(sp)
   13000:	0014bdc0 	call	14bdc <strcmp>
   13004:	d9800017 	ldw	r6,0(sp)
   13008:	103fe21e 	bne	r2,zero,12f94 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
   1300c:	a9800215 	stw	r6,8(r21)
   13010:	003fd206 	br	12f5c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x94>
   13014:	00800184 	movi	r2,6
   13018:	003fcf06 	br	12f58 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x90>
   1301c:	843fff98 	cmpnei	r16,r16,-2
   13020:	803fce1e 	bne	r16,zero,12f5c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x94>
   13024:	003fcb06 	br	12f54 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>

00013028 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   13028:	defffa04 	addi	sp,sp,-24
   1302c:	dc800415 	stw	r18,16(sp)
   13030:	dc800617 	ldw	r18,24(sp)
   13034:	dc400315 	stw	r17,12(sp)
   13038:	dc000215 	stw	r16,8(sp)
   1303c:	dfc00515 	stw	ra,20(sp)
   13040:	2021883a 	mov	r16,r4
   13044:	2823883a 	mov	r17,r5
   13048:	91800b26 	beq	r18,r6,13078 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
   1304c:	81000217 	ldw	r4,8(r16)
   13050:	880b883a 	mov	r5,r17
   13054:	20800017 	ldw	r2,0(r4)
   13058:	dc800615 	stw	r18,24(sp)
   1305c:	10800817 	ldw	r2,32(r2)
   13060:	dfc00517 	ldw	ra,20(sp)
   13064:	dc800417 	ldw	r18,16(sp)
   13068:	dc400317 	ldw	r17,12(sp)
   1306c:	dc000217 	ldw	r16,8(sp)
   13070:	dec00604 	addi	sp,sp,24
   13074:	1000683a 	jmp	r2
   13078:	21000117 	ldw	r4,4(r4)
   1307c:	39400117 	ldw	r5,4(r7)
   13080:	21400926 	beq	r4,r5,130a8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
   13084:	20800007 	ldb	r2,0(r4)
   13088:	10800aa0 	cmpeqi	r2,r2,42
   1308c:	103fef1e 	bne	r2,zero,1304c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   13090:	d9c00115 	stw	r7,4(sp)
   13094:	d9800015 	stw	r6,0(sp)
   13098:	0014bdc0 	call	14bdc <strcmp>
   1309c:	d9800017 	ldw	r6,0(sp)
   130a0:	d9c00117 	ldw	r7,4(sp)
   130a4:	103fe91e 	bne	r2,zero,1304c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   130a8:	00800184 	movi	r2,6
   130ac:	dfc00517 	ldw	ra,20(sp)
   130b0:	dc800417 	ldw	r18,16(sp)
   130b4:	dc400317 	ldw	r17,12(sp)
   130b8:	dc000217 	ldw	r16,8(sp)
   130bc:	dec00604 	addi	sp,sp,24
   130c0:	f800283a 	ret

000130c4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   130c4:	defffb04 	addi	sp,sp,-20
   130c8:	dcc00315 	stw	r19,12(sp)
   130cc:	dc800215 	stw	r18,8(sp)
   130d0:	dc400115 	stw	r17,4(sp)
   130d4:	dc000015 	stw	r16,0(sp)
   130d8:	dfc00415 	stw	ra,16(sp)
   130dc:	2025883a 	mov	r18,r4
   130e0:	2827883a 	mov	r19,r5
   130e4:	3021883a 	mov	r16,r6
   130e8:	3823883a 	mov	r17,r7
   130ec:	00133040 	call	13304 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   130f0:	10c03fcc 	andi	r3,r2,255
   130f4:	18000d1e 	bne	r3,zero,1312c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x68>
   130f8:	91000217 	ldw	r4,8(r18)
   130fc:	880f883a 	mov	r7,r17
   13100:	800d883a 	mov	r6,r16
   13104:	20800017 	ldw	r2,0(r4)
   13108:	980b883a 	mov	r5,r19
   1310c:	10800617 	ldw	r2,24(r2)
   13110:	dfc00417 	ldw	ra,16(sp)
   13114:	dcc00317 	ldw	r19,12(sp)
   13118:	dc800217 	ldw	r18,8(sp)
   1311c:	dc400117 	ldw	r17,4(sp)
   13120:	dc000017 	ldw	r16,0(sp)
   13124:	dec00504 	addi	sp,sp,20
   13128:	1000683a 	jmp	r2
   1312c:	dfc00417 	ldw	ra,16(sp)
   13130:	dcc00317 	ldw	r19,12(sp)
   13134:	dc800217 	ldw	r18,8(sp)
   13138:	dc400117 	ldw	r17,4(sp)
   1313c:	dc000017 	ldw	r16,0(sp)
   13140:	dec00504 	addi	sp,sp,20
   13144:	f800283a 	ret

00013148 <_ZNSt9type_infoD1Ev>:
   13148:	f800283a 	ret

0001314c <_ZNKSt9type_info14__is_pointer_pEv>:
   1314c:	0005883a 	mov	r2,zero
   13150:	f800283a 	ret

00013154 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
   13154:	0005883a 	mov	r2,zero
   13158:	f800283a 	ret

0001315c <_ZNSt9type_infoD0Ev>:
   1315c:	01400204 	movi	r5,8
   13160:	00134d41 	jmpi	134d4 <_ZdlPvj>

00013164 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
   13164:	21000117 	ldw	r4,4(r4)
   13168:	29400117 	ldw	r5,4(r5)
   1316c:	21400c26 	beq	r4,r5,131a0 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
   13170:	20800007 	ldb	r2,0(r4)
   13174:	10800aa0 	cmpeqi	r2,r2,42
   13178:	1000071e 	bne	r2,zero,13198 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
   1317c:	deffff04 	addi	sp,sp,-4
   13180:	dfc00015 	stw	ra,0(sp)
   13184:	0014bdc0 	call	14bdc <strcmp>
   13188:	1005003a 	cmpeq	r2,r2,zero
   1318c:	dfc00017 	ldw	ra,0(sp)
   13190:	dec00104 	addi	sp,sp,4
   13194:	f800283a 	ret
   13198:	0005883a 	mov	r2,zero
   1319c:	f800283a 	ret
   131a0:	00800044 	movi	r2,1
   131a4:	f800283a 	ret

000131a8 <_ZNKSt17bad_function_call4whatEv>:
   131a8:	00800074 	movhi	r2,1
   131ac:	109b3a04 	addi	r2,r2,27880
   131b0:	f800283a 	ret

000131b4 <_ZNSt17bad_function_callD1Ev>:
   131b4:	00800074 	movhi	r2,1
   131b8:	109b4a04 	addi	r2,r2,27944
   131bc:	20800015 	stw	r2,0(r4)
   131c0:	00139c01 	jmpi	139c0 <_ZNSt9exceptionD1Ev>

000131c4 <_ZNSt17bad_function_callD0Ev>:
   131c4:	defffe04 	addi	sp,sp,-8
   131c8:	00800074 	movhi	r2,1
   131cc:	dc000015 	stw	r16,0(sp)
   131d0:	dfc00115 	stw	ra,4(sp)
   131d4:	109b4a04 	addi	r2,r2,27944
   131d8:	20800015 	stw	r2,0(r4)
   131dc:	2021883a 	mov	r16,r4
   131e0:	00139c00 	call	139c0 <_ZNSt9exceptionD1Ev>
   131e4:	8009883a 	mov	r4,r16
   131e8:	dfc00117 	ldw	ra,4(sp)
   131ec:	dc000017 	ldw	r16,0(sp)
   131f0:	dec00204 	addi	sp,sp,8
   131f4:	00134d01 	jmpi	134d0 <_ZdlPv>

000131f8 <_ZSt25__throw_bad_function_callv>:
   131f8:	deffff04 	addi	sp,sp,-4
   131fc:	01000104 	movi	r4,4
   13200:	dfc00015 	stw	ra,0(sp)
   13204:	00136640 	call	13664 <__cxa_allocate_exception>
   13208:	1009883a 	mov	r4,r2
   1320c:	00800074 	movhi	r2,1
   13210:	01800074 	movhi	r6,1
   13214:	01400074 	movhi	r5,1
   13218:	109b4a04 	addi	r2,r2,27944
   1321c:	318c6d04 	addi	r6,r6,12724
   13220:	295b4504 	addi	r5,r5,27924
   13224:	20800015 	stw	r2,0(r4)
   13228:	0012c580 	call	12c58 <__cxa_throw>

0001322c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   1322c:	20800017 	ldw	r2,0(r4)
   13230:	defffa04 	addi	sp,sp,-24
   13234:	dc000415 	stw	r16,16(sp)
   13238:	10800617 	ldw	r2,24(r2)
   1323c:	3021883a 	mov	r16,r6
   13240:	31800017 	ldw	r6,0(r6)
   13244:	00c00404 	movi	r3,16
   13248:	dfc00515 	stw	ra,20(sp)
   1324c:	d8000015 	stw	zero,0(sp)
   13250:	d8000115 	stw	zero,4(sp)
   13254:	d8c00215 	stw	r3,8(sp)
   13258:	d8000315 	stw	zero,12(sp)
   1325c:	d80f883a 	mov	r7,sp
   13260:	103ee83a 	callr	r2
   13264:	d8800117 	ldw	r2,4(sp)
   13268:	1080018c 	andi	r2,r2,6
   1326c:	10800198 	cmpnei	r2,r2,6
   13270:	1000071e 	bne	r2,zero,13290 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x64>
   13274:	d8c00017 	ldw	r3,0(sp)
   13278:	00800044 	movi	r2,1
   1327c:	80c00015 	stw	r3,0(r16)
   13280:	dfc00517 	ldw	ra,20(sp)
   13284:	dc000417 	ldw	r16,16(sp)
   13288:	dec00604 	addi	sp,sp,24
   1328c:	f800283a 	ret
   13290:	0005883a 	mov	r2,zero
   13294:	dfc00517 	ldw	ra,20(sp)
   13298:	dc000417 	ldw	r16,16(sp)
   1329c:	dec00604 	addi	sp,sp,24
   132a0:	f800283a 	ret

000132a4 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   132a4:	d8c00017 	ldw	r3,0(sp)
   132a8:	00800044 	movi	r2,1
   132ac:	19800126 	beq	r3,r6,132b4 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
   132b0:	f800283a 	ret
   132b4:	00800184 	movi	r2,6
   132b8:	f800283a 	ret

000132bc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   132bc:	00800074 	movhi	r2,1
   132c0:	109b5b04 	addi	r2,r2,28012
   132c4:	20800015 	stw	r2,0(r4)
   132c8:	00131481 	jmpi	13148 <_ZNSt9type_infoD1Ev>

000132cc <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   132cc:	defffe04 	addi	sp,sp,-8
   132d0:	00800074 	movhi	r2,1
   132d4:	dc000015 	stw	r16,0(sp)
   132d8:	dfc00115 	stw	ra,4(sp)
   132dc:	109b5b04 	addi	r2,r2,28012
   132e0:	20800015 	stw	r2,0(r4)
   132e4:	2021883a 	mov	r16,r4
   132e8:	00131480 	call	13148 <_ZNSt9type_infoD1Ev>
   132ec:	01400204 	movi	r5,8
   132f0:	8009883a 	mov	r4,r16
   132f4:	dfc00117 	ldw	ra,4(sp)
   132f8:	dc000017 	ldw	r16,0(sp)
   132fc:	dec00204 	addi	sp,sp,8
   13300:	00134d41 	jmpi	134d4 <_ZdlPvj>

00013304 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   13304:	21000117 	ldw	r4,4(r4)
   13308:	29400117 	ldw	r5,4(r5)
   1330c:	defffd04 	addi	sp,sp,-12
   13310:	dc400115 	stw	r17,4(sp)
   13314:	dc000015 	stw	r16,0(sp)
   13318:	dfc00215 	stw	ra,8(sp)
   1331c:	3023883a 	mov	r17,r6
   13320:	3821883a 	mov	r16,r7
   13324:	21400526 	beq	r4,r5,1333c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
   13328:	20800007 	ldb	r2,0(r4)
   1332c:	10800aa0 	cmpeqi	r2,r2,42
   13330:	10000d1e 	bne	r2,zero,13368 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
   13334:	0014bdc0 	call	14bdc <strcmp>
   13338:	10000b1e 	bne	r2,zero,13368 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
   1333c:	00800204 	movi	r2,8
   13340:	80800315 	stw	r2,12(r16)
   13344:	00800184 	movi	r2,6
   13348:	80800115 	stw	r2,4(r16)
   1334c:	84400015 	stw	r17,0(r16)
   13350:	00800044 	movi	r2,1
   13354:	dfc00217 	ldw	ra,8(sp)
   13358:	dc400117 	ldw	r17,4(sp)
   1335c:	dc000017 	ldw	r16,0(sp)
   13360:	dec00304 	addi	sp,sp,12
   13364:	f800283a 	ret
   13368:	0005883a 	mov	r2,zero
   1336c:	003ff906 	br	13354 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x50>

00013370 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   13370:	defffb04 	addi	sp,sp,-20
   13374:	dc800315 	stw	r18,12(sp)
   13378:	dc400215 	stw	r17,8(sp)
   1337c:	2025883a 	mov	r18,r4
   13380:	2823883a 	mov	r17,r5
   13384:	21000117 	ldw	r4,4(r4)
   13388:	29400117 	ldw	r5,4(r5)
   1338c:	dfc00415 	stw	ra,16(sp)
   13390:	dc000115 	stw	r16,4(sp)
   13394:	21400826 	beq	r4,r5,133b8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x48>
   13398:	20800007 	ldb	r2,0(r4)
   1339c:	3821883a 	mov	r16,r7
   133a0:	10800aa0 	cmpeqi	r2,r2,42
   133a4:	10000b1e 	bne	r2,zero,133d4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
   133a8:	d9800015 	stw	r6,0(sp)
   133ac:	0014bdc0 	call	14bdc <strcmp>
   133b0:	d9800017 	ldw	r6,0(sp)
   133b4:	1000071e 	bne	r2,zero,133d4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
   133b8:	00800044 	movi	r2,1
   133bc:	dfc00417 	ldw	ra,16(sp)
   133c0:	dc800317 	ldw	r18,12(sp)
   133c4:	dc400217 	ldw	r17,8(sp)
   133c8:	dc000117 	ldw	r16,4(sp)
   133cc:	dec00504 	addi	sp,sp,20
   133d0:	f800283a 	ret
   133d4:	81c00128 	cmpgeui	r7,r16,4
   133d8:	38000a1e 	bne	r7,zero,13404 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x94>
   133dc:	88800017 	ldw	r2,0(r17)
   133e0:	900b883a 	mov	r5,r18
   133e4:	8809883a 	mov	r4,r17
   133e8:	10800517 	ldw	r2,20(r2)
   133ec:	dfc00417 	ldw	ra,16(sp)
   133f0:	dc800317 	ldw	r18,12(sp)
   133f4:	dc400217 	ldw	r17,8(sp)
   133f8:	dc000117 	ldw	r16,4(sp)
   133fc:	dec00504 	addi	sp,sp,20
   13400:	1000683a 	jmp	r2
   13404:	0005883a 	mov	r2,zero
   13408:	003fec06 	br	133bc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x4c>

0001340c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   1340c:	defffa04 	addi	sp,sp,-24
   13410:	dc400315 	stw	r17,12(sp)
   13414:	d8800817 	ldw	r2,32(sp)
   13418:	dc400617 	ldw	r17,24(sp)
   1341c:	dc800415 	stw	r18,16(sp)
   13420:	dc000215 	stw	r16,8(sp)
   13424:	dfc00515 	stw	ra,20(sp)
   13428:	dc800917 	ldw	r18,36(sp)
   1342c:	21000117 	ldw	r4,4(r4)
   13430:	3021883a 	mov	r16,r6
   13434:	88801226 	beq	r17,r2,13480 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x74>
   13438:	39400117 	ldw	r5,4(r7)
   1343c:	21400526 	beq	r4,r5,13454 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x48>
   13440:	20800007 	ldb	r2,0(r4)
   13444:	10800aa0 	cmpeqi	r2,r2,42
   13448:	1000061e 	bne	r2,zero,13464 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x58>
   1344c:	0014bdc0 	call	14bdc <strcmp>
   13450:	1000041e 	bne	r2,zero,13464 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x58>
   13454:	00800044 	movi	r2,1
   13458:	94400015 	stw	r17,0(r18)
   1345c:	94000115 	stw	r16,4(r18)
   13460:	90800315 	stw	r2,12(r18)
   13464:	0005883a 	mov	r2,zero
   13468:	dfc00517 	ldw	ra,20(sp)
   1346c:	dc800417 	ldw	r18,16(sp)
   13470:	dc400317 	ldw	r17,12(sp)
   13474:	dc000217 	ldw	r16,8(sp)
   13478:	dec00604 	addi	sp,sp,24
   1347c:	f800283a 	ret
   13480:	d8800717 	ldw	r2,28(sp)
   13484:	11400117 	ldw	r5,4(r2)
   13488:	21400f26 	beq	r4,r5,134c8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xbc>
   1348c:	20800007 	ldb	r2,0(r4)
   13490:	10800aa0 	cmpeqi	r2,r2,42
   13494:	1000091e 	bne	r2,zero,134bc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
   13498:	d9c00115 	stw	r7,4(sp)
   1349c:	d9000015 	stw	r4,0(sp)
   134a0:	0014bdc0 	call	14bdc <strcmp>
   134a4:	d9000017 	ldw	r4,0(sp)
   134a8:	d9c00117 	ldw	r7,4(sp)
   134ac:	10000626 	beq	r2,zero,134c8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xbc>
   134b0:	39400117 	ldw	r5,4(r7)
   134b4:	217fe51e 	bne	r4,r5,1344c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x40>
   134b8:	003fe606 	br	13454 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x48>
   134bc:	38800117 	ldw	r2,4(r7)
   134c0:	20bfe81e 	bne	r4,r2,13464 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x58>
   134c4:	003fe306 	br	13454 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x48>
   134c8:	94000215 	stw	r16,8(r18)
   134cc:	003fe506 	br	13464 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x58>

000134d0 <_ZdlPv>:
   134d0:	001455c1 	jmpi	1455c <free>

000134d4 <_ZdlPvj>:
   134d4:	00134d01 	jmpi	134d0 <_ZdlPv>

000134d8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>:
   134d8:	01400074 	movhi	r5,1
   134dc:	295fbc04 	addi	r5,r5,32496
   134e0:	28c00117 	ldw	r3,4(r5)
   134e4:	223fff04 	addi	r8,r4,-4
   134e8:	18001a26 	beq	r3,zero,13554 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x7c>
   134ec:	227fff17 	ldw	r9,-4(r4)
   134f0:	424d883a 	add	r6,r8,r9
   134f4:	30c01736 	bltu	r6,r3,13554 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x7c>
   134f8:	18800117 	ldw	r2,4(r3)
   134fc:	19802326 	beq	r3,r6,1358c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xb4>
   13500:	01c00074 	movhi	r7,1
   13504:	39dfbd04 	addi	r7,r7,32500
   13508:	10000726 	beq	r2,zero,13528 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x50>
   1350c:	3080062e 	bgeu	r6,r2,13528 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x50>
   13510:	11400117 	ldw	r5,4(r2)
   13514:	19c00104 	addi	r7,r3,4
   13518:	1007883a 	mov	r3,r2
   1351c:	28001826 	beq	r5,zero,13580 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xa8>
   13520:	2805883a 	mov	r2,r5
   13524:	30bffa36 	bltu	r6,r2,13510 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x38>
   13528:	30801026 	beq	r6,r2,1356c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x94>
   1352c:	38800017 	ldw	r2,0(r7)
   13530:	10c00017 	ldw	r3,0(r2)
   13534:	10cb883a 	add	r5,r2,r3
   13538:	41400926 	beq	r8,r5,13560 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x88>
   1353c:	10800117 	ldw	r2,4(r2)
   13540:	227fff15 	stw	r9,-4(r4)
   13544:	20800015 	stw	r2,0(r4)
   13548:	38800017 	ldw	r2,0(r7)
   1354c:	12000115 	stw	r8,4(r2)
   13550:	f800283a 	ret
   13554:	20c00015 	stw	r3,0(r4)
   13558:	2a000115 	stw	r8,4(r5)
   1355c:	f800283a 	ret
   13560:	1a47883a 	add	r3,r3,r9
   13564:	10c00015 	stw	r3,0(r2)
   13568:	f800283a 	ret
   1356c:	31400017 	ldw	r5,0(r6)
   13570:	30800117 	ldw	r2,4(r6)
   13574:	4953883a 	add	r9,r9,r5
   13578:	18800115 	stw	r2,4(r3)
   1357c:	003feb06 	br	1352c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x54>
   13580:	0005883a 	mov	r2,zero
   13584:	30bfe91e 	bne	r6,r2,1352c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x54>
   13588:	003ff806 	br	1356c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x94>
   1358c:	18c00017 	ldw	r3,0(r3)
   13590:	20800015 	stw	r2,0(r4)
   13594:	1a53883a 	add	r9,r3,r9
   13598:	227fff15 	stw	r9,-4(r4)
   1359c:	2a000115 	stw	r8,4(r5)
   135a0:	f800283a 	ret

000135a4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>:
   135a4:	21000104 	addi	r4,r4,4
   135a8:	20800228 	cmpgeui	r2,r4,8
   135ac:	1000011e 	bne	r2,zero,135b4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x10>
   135b0:	01000204 	movi	r4,8
   135b4:	00800074 	movhi	r2,1
   135b8:	109fbd17 	ldw	r2,32500(r2)
   135bc:	210000c4 	addi	r4,r4,3
   135c0:	00ffff04 	movi	r3,-4
   135c4:	20c8703a 	and	r4,r4,r3
   135c8:	10001026 	beq	r2,zero,1360c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x68>
   135cc:	01800074 	movhi	r6,1
   135d0:	319fbd04 	addi	r6,r6,32500
   135d4:	00000206 	br	135e0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x3c>
   135d8:	19800104 	addi	r6,r3,4
   135dc:	10001426 	beq	r2,zero,13630 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x8c>
   135e0:	11400017 	ldw	r5,0(r2)
   135e4:	1007883a 	mov	r3,r2
   135e8:	10800117 	ldw	r2,4(r2)
   135ec:	293ffa36 	bltu	r5,r4,135d8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x34>
   135f0:	290fc83a 	sub	r7,r5,r4
   135f4:	3a000228 	cmpgeui	r8,r7,8
   135f8:	4000051e 	bne	r8,zero,13610 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x6c>
   135fc:	19400015 	stw	r5,0(r3)
   13600:	30800015 	stw	r2,0(r6)
   13604:	18800104 	addi	r2,r3,4
   13608:	f800283a 	ret
   1360c:	f800283a 	ret
   13610:	190b883a 	add	r5,r3,r4
   13614:	28800115 	stw	r2,4(r5)
   13618:	30c00017 	ldw	r3,0(r6)
   1361c:	29c00015 	stw	r7,0(r5)
   13620:	19000015 	stw	r4,0(r3)
   13624:	31400015 	stw	r5,0(r6)
   13628:	18800104 	addi	r2,r3,4
   1362c:	f800283a 	ret
   13630:	f800283a 	ret

00013634 <_ZN9__gnu_cxx9__freeresEv>:
   13634:	00800074 	movhi	r2,1
   13638:	111fbe17 	ldw	r4,32504(r2)
   1363c:	20000826 	beq	r4,zero,13660 <_ZN9__gnu_cxx9__freeresEv+0x2c>
   13640:	deffff04 	addi	sp,sp,-4
   13644:	dfc00015 	stw	ra,0(sp)
   13648:	001455c0 	call	1455c <free>
   1364c:	00800074 	movhi	r2,1
   13650:	101fbe15 	stw	zero,32504(r2)
   13654:	dfc00017 	ldw	ra,0(sp)
   13658:	dec00104 	addi	sp,sp,4
   1365c:	f800283a 	ret
   13660:	f800283a 	ret

00013664 <__cxa_allocate_exception>:
   13664:	defffe04 	addi	sp,sp,-8
   13668:	dc000015 	stw	r16,0(sp)
   1366c:	24001104 	addi	r16,r4,68
   13670:	8009883a 	mov	r4,r16
   13674:	dfc00115 	stw	ra,4(sp)
   13678:	001454c0 	call	1454c <malloc>
   1367c:	1007883a 	mov	r3,r2
   13680:	10000926 	beq	r2,zero,136a8 <__cxa_allocate_exception+0x44>
   13684:	01801104 	movi	r6,68
   13688:	000b883a 	mov	r5,zero
   1368c:	1809883a 	mov	r4,r3
   13690:	00145cc0 	call	145cc <memset>
   13694:	10801104 	addi	r2,r2,68
   13698:	dfc00117 	ldw	ra,4(sp)
   1369c:	dc000017 	ldw	r16,0(sp)
   136a0:	dec00204 	addi	sp,sp,8
   136a4:	f800283a 	ret
   136a8:	8009883a 	mov	r4,r16
   136ac:	00135a40 	call	135a4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>
   136b0:	1007883a 	mov	r3,r2
   136b4:	103ff31e 	bne	r2,zero,13684 <__cxa_allocate_exception+0x20>
   136b8:	0012af40 	call	12af4 <_ZSt9terminatev>

000136bc <__cxa_free_exception>:
   136bc:	00800074 	movhi	r2,1
   136c0:	109fbc04 	addi	r2,r2,32496
   136c4:	10c00217 	ldw	r3,8(r2)
   136c8:	213fef04 	addi	r4,r4,-68
   136cc:	1900042e 	bgeu	r3,r4,136e0 <__cxa_free_exception+0x24>
   136d0:	10800317 	ldw	r2,12(r2)
   136d4:	1887883a 	add	r3,r3,r2
   136d8:	20c0012e 	bgeu	r4,r3,136e0 <__cxa_free_exception+0x24>
   136dc:	00134d81 	jmpi	134d8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
   136e0:	001455c1 	jmpi	1455c <free>

000136e4 <__cxa_allocate_dependent_exception>:
   136e4:	deffff04 	addi	sp,sp,-4
   136e8:	01001004 	movi	r4,64
   136ec:	dfc00015 	stw	ra,0(sp)
   136f0:	001454c0 	call	1454c <malloc>
   136f4:	1009883a 	mov	r4,r2
   136f8:	10000626 	beq	r2,zero,13714 <__cxa_allocate_dependent_exception+0x30>
   136fc:	01801004 	movi	r6,64
   13700:	000b883a 	mov	r5,zero
   13704:	00145cc0 	call	145cc <memset>
   13708:	dfc00017 	ldw	ra,0(sp)
   1370c:	dec00104 	addi	sp,sp,4
   13710:	f800283a 	ret
   13714:	01001004 	movi	r4,64
   13718:	00135a40 	call	135a4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>
   1371c:	1009883a 	mov	r4,r2
   13720:	103ff61e 	bne	r2,zero,136fc <__cxa_allocate_dependent_exception+0x18>
   13724:	0012af40 	call	12af4 <_ZSt9terminatev>

00013728 <__cxa_free_dependent_exception>:
   13728:	00c00074 	movhi	r3,1
   1372c:	18dfbc04 	addi	r3,r3,32496
   13730:	19400217 	ldw	r5,8(r3)
   13734:	2005883a 	mov	r2,r4
   13738:	2900042e 	bgeu	r5,r4,1374c <__cxa_free_dependent_exception+0x24>
   1373c:	18c00317 	ldw	r3,12(r3)
   13740:	28cb883a 	add	r5,r5,r3
   13744:	2140012e 	bgeu	r4,r5,1374c <__cxa_free_dependent_exception+0x24>
   13748:	00134d81 	jmpi	134d8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
   1374c:	1009883a 	mov	r4,r2
   13750:	001455c1 	jmpi	1455c <free>

00013754 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
   13754:	defffd04 	addi	sp,sp,-12
   13758:	dc000015 	stw	r16,0(sp)
   1375c:	04000074 	movhi	r16,1
   13760:	dc400115 	stw	r17,4(sp)
   13764:	841fbc04 	addi	r16,r16,32496
   13768:	04424004 	movi	r17,2304
   1376c:	01024004 	movi	r4,2304
   13770:	dfc00215 	stw	ra,8(sp)
   13774:	84400315 	stw	r17,12(r16)
   13778:	001454c0 	call	1454c <malloc>
   1377c:	80800215 	stw	r2,8(r16)
   13780:	10000826 	beq	r2,zero,137a4 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x50>
   13784:	80800115 	stw	r2,4(r16)
   13788:	14400015 	stw	r17,0(r2)
   1378c:	10000115 	stw	zero,4(r2)
   13790:	dfc00217 	ldw	ra,8(sp)
   13794:	dc400117 	ldw	r17,4(sp)
   13798:	dc000017 	ldw	r16,0(sp)
   1379c:	dec00304 	addi	sp,sp,12
   137a0:	f800283a 	ret
   137a4:	00800074 	movhi	r2,1
   137a8:	101fbf15 	stw	zero,32508(r2)
   137ac:	00800074 	movhi	r2,1
   137b0:	101fbd15 	stw	zero,32500(r2)
   137b4:	003ff606 	br	13790 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x3c>

000137b8 <__cxa_call_terminate>:
   137b8:	defffe04 	addi	sp,sp,-8
   137bc:	dfc00115 	stw	ra,4(sp)
   137c0:	dc000015 	stw	r16,0(sp)
   137c4:	20000d26 	beq	r4,zero,137fc <__cxa_call_terminate+0x44>
   137c8:	2021883a 	mov	r16,r4
   137cc:	00138180 	call	13818 <__cxa_begin_catch>
   137d0:	80800017 	ldw	r2,0(r16)
   137d4:	81000117 	ldw	r4,4(r16)
   137d8:	00ef3574 	movhi	r3,48341
   137dc:	18f54004 	addi	r3,r3,-11008
   137e0:	016e2cb4 	movhi	r5,47282
   137e4:	296aaf04 	addi	r5,r5,-21828
   137e8:	10c7883a 	add	r3,r2,r3
   137ec:	1885803a 	cmpltu	r2,r3,r2
   137f0:	2149883a 	add	r4,r4,r5
   137f4:	1105883a 	add	r2,r2,r4
   137f8:	10000126 	beq	r2,zero,13800 <__cxa_call_terminate+0x48>
   137fc:	0012af40 	call	12af4 <_ZSt9terminatev>
   13800:	18c000a8 	cmpgeui	r3,r3,2
   13804:	183ffd1e 	bne	r3,zero,137fc <__cxa_call_terminate+0x44>
   13808:	813ff817 	ldw	r4,-32(r16)
   1380c:	0012a2c0 	call	12a2c <_ZN10__cxxabiv111__terminateEPFvvE>

00013810 <__cxa_get_exception_ptr>:
   13810:	20bfff17 	ldw	r2,-4(r4)
   13814:	f800283a 	ret

00013818 <__cxa_begin_catch>:
   13818:	defffe04 	addi	sp,sp,-8
   1381c:	dc000015 	stw	r16,0(sp)
   13820:	dfc00115 	stw	ra,4(sp)
   13824:	2021883a 	mov	r16,r4
   13828:	0013a1c0 	call	13a1c <__cxa_get_globals>
   1382c:	80c00017 	ldw	r3,0(r16)
   13830:	81800117 	ldw	r6,4(r16)
   13834:	012f3574 	movhi	r4,48341
   13838:	21354004 	addi	r4,r4,-11008
   1383c:	016e2cb4 	movhi	r5,47282
   13840:	296aaf04 	addi	r5,r5,-21828
   13844:	1909883a 	add	r4,r3,r4
   13848:	314d883a 	add	r6,r6,r5
   1384c:	20c7803a 	cmpltu	r3,r4,r3
   13850:	1987883a 	add	r3,r3,r6
   13854:	100b883a 	mov	r5,r2
   13858:	81bff504 	addi	r6,r16,-44
   1385c:	10800017 	ldw	r2,0(r2)
   13860:	18000626 	beq	r3,zero,1387c <__cxa_begin_catch+0x64>
   13864:	1000191e 	bne	r2,zero,138cc <__cxa_begin_catch+0xb4>
   13868:	29800015 	stw	r6,0(r5)
   1386c:	dfc00117 	ldw	ra,4(sp)
   13870:	dc000017 	ldw	r16,0(sp)
   13874:	dec00204 	addi	sp,sp,8
   13878:	f800283a 	ret
   1387c:	210000a8 	cmpgeui	r4,r4,2
   13880:	203ff81e 	bne	r4,zero,13864 <__cxa_begin_catch+0x4c>
   13884:	80fffa17 	ldw	r3,-24(r16)
   13888:	18000d16 	blt	r3,zero,138c0 <__cxa_begin_catch+0xa8>
   1388c:	18c00044 	addi	r3,r3,1
   13890:	29000117 	ldw	r4,4(r5)
   13894:	80fffa15 	stw	r3,-24(r16)
   13898:	20ffffc4 	addi	r3,r4,-1
   1389c:	28c00115 	stw	r3,4(r5)
   138a0:	11800226 	beq	r2,r6,138ac <__cxa_begin_catch+0x94>
   138a4:	80bff915 	stw	r2,-28(r16)
   138a8:	29800015 	stw	r6,0(r5)
   138ac:	80bfff17 	ldw	r2,-4(r16)
   138b0:	dfc00117 	ldw	ra,4(sp)
   138b4:	dc000017 	ldw	r16,0(sp)
   138b8:	dec00204 	addi	sp,sp,8
   138bc:	f800283a 	ret
   138c0:	01000044 	movi	r4,1
   138c4:	20c7c83a 	sub	r3,r4,r3
   138c8:	003ff106 	br	13890 <__cxa_begin_catch+0x78>
   138cc:	0012af40 	call	12af4 <_ZSt9terminatev>

000138d0 <__cxa_end_catch>:
   138d0:	deffff04 	addi	sp,sp,-4
   138d4:	dfc00015 	stw	ra,0(sp)
   138d8:	0013a100 	call	13a10 <__cxa_get_globals_fast>
   138dc:	11000017 	ldw	r4,0(r2)
   138e0:	20001426 	beq	r4,zero,13934 <__cxa_end_catch+0x64>
   138e4:	20c00b17 	ldw	r3,44(r4)
   138e8:	21800c17 	ldw	r6,48(r4)
   138ec:	016f3574 	movhi	r5,48341
   138f0:	29754004 	addi	r5,r5,-11008
   138f4:	01ee2cb4 	movhi	r7,47282
   138f8:	39eaaf04 	addi	r7,r7,-21828
   138fc:	194b883a 	add	r5,r3,r5
   13900:	28c7803a 	cmpltu	r3,r5,r3
   13904:	31cd883a 	add	r6,r6,r7
   13908:	1987883a 	add	r3,r3,r6
   1390c:	1800111e 	bne	r3,zero,13954 <__cxa_end_catch+0x84>
   13910:	294000a8 	cmpgeui	r5,r5,2
   13914:	28000f1e 	bne	r5,zero,13954 <__cxa_end_catch+0x84>
   13918:	20c00517 	ldw	r3,20(r4)
   1391c:	18000816 	blt	r3,zero,13940 <__cxa_end_catch+0x70>
   13920:	18ffffc4 	addi	r3,r3,-1
   13924:	18001026 	beq	r3,zero,13968 <__cxa_end_catch+0x98>
   13928:	18bfffd8 	cmpnei	r2,r3,-1
   1392c:	10001426 	beq	r2,zero,13980 <__cxa_end_catch+0xb0>
   13930:	20c00515 	stw	r3,20(r4)
   13934:	dfc00017 	ldw	ra,0(sp)
   13938:	dec00104 	addi	sp,sp,4
   1393c:	f800283a 	ret
   13940:	18c00044 	addi	r3,r3,1
   13944:	183ffa1e 	bne	r3,zero,13930 <__cxa_end_catch+0x60>
   13948:	21400417 	ldw	r5,16(r4)
   1394c:	11400015 	stw	r5,0(r2)
   13950:	003ff706 	br	13930 <__cxa_end_catch+0x60>
   13954:	21000b04 	addi	r4,r4,44
   13958:	10000015 	stw	zero,0(r2)
   1395c:	dfc00017 	ldw	ra,0(sp)
   13960:	dec00104 	addi	sp,sp,4
   13964:	00144941 	jmpi	14494 <_Unwind_DeleteException>
   13968:	20c00417 	ldw	r3,16(r4)
   1396c:	21000b04 	addi	r4,r4,44
   13970:	10c00015 	stw	r3,0(r2)
   13974:	dfc00017 	ldw	ra,0(sp)
   13978:	dec00104 	addi	sp,sp,4
   1397c:	00144941 	jmpi	14494 <_Unwind_DeleteException>
   13980:	0012af40 	call	12af4 <_ZSt9terminatev>

00013984 <_ZSt18uncaught_exceptionv>:
   13984:	deffff04 	addi	sp,sp,-4
   13988:	dfc00015 	stw	ra,0(sp)
   1398c:	0013a1c0 	call	13a1c <__cxa_get_globals>
   13990:	10800117 	ldw	r2,4(r2)
   13994:	1004c03a 	cmpne	r2,r2,zero
   13998:	dfc00017 	ldw	ra,0(sp)
   1399c:	dec00104 	addi	sp,sp,4
   139a0:	f800283a 	ret

000139a4 <_ZSt19uncaught_exceptionsv>:
   139a4:	deffff04 	addi	sp,sp,-4
   139a8:	dfc00015 	stw	ra,0(sp)
   139ac:	0013a1c0 	call	13a1c <__cxa_get_globals>
   139b0:	10800117 	ldw	r2,4(r2)
   139b4:	dfc00017 	ldw	ra,0(sp)
   139b8:	dec00104 	addi	sp,sp,4
   139bc:	f800283a 	ret

000139c0 <_ZNSt9exceptionD1Ev>:
   139c0:	f800283a 	ret

000139c4 <_ZNSt13bad_exceptionD1Ev>:
   139c4:	f800283a 	ret

000139c8 <_ZGTtNKSt9exception4whatEv>:
   139c8:	00800074 	movhi	r2,1
   139cc:	109b6404 	addi	r2,r2,28048
   139d0:	f800283a 	ret

000139d4 <_ZGTtNKSt13bad_exception4whatEv>:
   139d4:	00800074 	movhi	r2,1
   139d8:	109b6804 	addi	r2,r2,28064
   139dc:	f800283a 	ret

000139e0 <_ZNSt9exceptionD0Ev>:
   139e0:	01400104 	movi	r5,4
   139e4:	00134d41 	jmpi	134d4 <_ZdlPvj>

000139e8 <_ZNSt13bad_exceptionD0Ev>:
   139e8:	01400104 	movi	r5,4
   139ec:	00134d41 	jmpi	134d4 <_ZdlPvj>

000139f0 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
   139f0:	f800283a 	ret

000139f4 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
   139f4:	01400104 	movi	r5,4
   139f8:	00134d41 	jmpi	134d4 <_ZdlPvj>

000139fc <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
   139fc:	f800283a 	ret

00013a00 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
   13a00:	01400104 	movi	r5,4
   13a04:	00134d41 	jmpi	134d4 <_ZdlPvj>

00013a08 <_ZGTtNKSt9exceptionD1Ev>:
   13a08:	f800283a 	ret

00013a0c <_ZGTtNKSt13bad_exceptionD1Ev>:
   13a0c:	f800283a 	ret

00013a10 <__cxa_get_globals_fast>:
   13a10:	00800074 	movhi	r2,1
   13a14:	109fa304 	addi	r2,r2,32396
   13a18:	f800283a 	ret

00013a1c <__cxa_get_globals>:
   13a1c:	00800074 	movhi	r2,1
   13a20:	109fa304 	addi	r2,r2,32396
   13a24:	f800283a 	ret

00013a28 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
   13a28:	00800074 	movhi	r2,1
   13a2c:	109bad04 	addi	r2,r2,28340
   13a30:	20800015 	stw	r2,0(r4)
   13a34:	00131481 	jmpi	13148 <_ZNSt9type_infoD1Ev>

00013a38 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
   13a38:	defffe04 	addi	sp,sp,-8
   13a3c:	00800074 	movhi	r2,1
   13a40:	dc000015 	stw	r16,0(sp)
   13a44:	dfc00115 	stw	ra,4(sp)
   13a48:	109bad04 	addi	r2,r2,28340
   13a4c:	20800015 	stw	r2,0(r4)
   13a50:	2021883a 	mov	r16,r4
   13a54:	00131480 	call	13148 <_ZNSt9type_infoD1Ev>
   13a58:	01400204 	movi	r5,8
   13a5c:	8009883a 	mov	r4,r16
   13a60:	dfc00117 	ldw	ra,4(sp)
   13a64:	dc000017 	ldw	r16,0(sp)
   13a68:	dec00204 	addi	sp,sp,8
   13a6c:	00134d41 	jmpi	134d4 <_ZdlPvj>

00013a70 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
   13a70:	21000317 	ldw	r4,12(r4)
   13a74:	29400317 	ldw	r5,12(r5)
   13a78:	39c00084 	addi	r7,r7,2
   13a7c:	20800017 	ldw	r2,0(r4)
   13a80:	10800417 	ldw	r2,16(r2)
   13a84:	1000683a 	jmp	r2

00013a88 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
   13a88:	00800074 	movhi	r2,1
   13a8c:	109c8104 	addi	r2,r2,29188
   13a90:	20800015 	stw	r2,0(r4)
   13a94:	00131481 	jmpi	13148 <_ZNSt9type_infoD1Ev>

00013a98 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
   13a98:	defffe04 	addi	sp,sp,-8
   13a9c:	00800074 	movhi	r2,1
   13aa0:	dc000015 	stw	r16,0(sp)
   13aa4:	dfc00115 	stw	ra,4(sp)
   13aa8:	109c8104 	addi	r2,r2,29188
   13aac:	20800015 	stw	r2,0(r4)
   13ab0:	2021883a 	mov	r16,r4
   13ab4:	00131480 	call	13148 <_ZNSt9type_infoD1Ev>
   13ab8:	01400404 	movi	r5,16
   13abc:	8009883a 	mov	r4,r16
   13ac0:	dfc00117 	ldw	ra,4(sp)
   13ac4:	dc000017 	ldw	r16,0(sp)
   13ac8:	dec00204 	addi	sp,sp,8
   13acc:	00134d41 	jmpi	134d4 <_ZdlPvj>

00013ad0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
   13ad0:	defff804 	addi	sp,sp,-32
   13ad4:	dcc00315 	stw	r19,12(sp)
   13ad8:	dc400115 	stw	r17,4(sp)
   13adc:	2027883a 	mov	r19,r4
   13ae0:	2c400117 	ldw	r17,4(r5)
   13ae4:	21000117 	ldw	r4,4(r4)
   13ae8:	dfc00715 	stw	ra,28(sp)
   13aec:	dd800615 	stw	r22,24(sp)
   13af0:	dd400515 	stw	r21,20(sp)
   13af4:	dd000415 	stw	r20,16(sp)
   13af8:	dc800215 	stw	r18,8(sp)
   13afc:	dc000015 	stw	r16,0(sp)
   13b00:	24400926 	beq	r4,r17,13b28 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
   13b04:	20800007 	ldb	r2,0(r4)
   13b08:	2821883a 	mov	r16,r5
   13b0c:	3025883a 	mov	r18,r6
   13b10:	10800aa0 	cmpeqi	r2,r2,42
   13b14:	3829883a 	mov	r20,r7
   13b18:	10000e1e 	bne	r2,zero,13b54 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x84>
   13b1c:	880b883a 	mov	r5,r17
   13b20:	0014bdc0 	call	14bdc <strcmp>
   13b24:	10000b1e 	bne	r2,zero,13b54 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x84>
   13b28:	00800044 	movi	r2,1
   13b2c:	dfc00717 	ldw	ra,28(sp)
   13b30:	dd800617 	ldw	r22,24(sp)
   13b34:	dd400517 	ldw	r21,20(sp)
   13b38:	dd000417 	ldw	r20,16(sp)
   13b3c:	dcc00317 	ldw	r19,12(sp)
   13b40:	dc800217 	ldw	r18,8(sp)
   13b44:	dc400117 	ldw	r17,4(sp)
   13b48:	dc000017 	ldw	r16,0(sp)
   13b4c:	dec00804 	addi	sp,sp,32
   13b50:	f800283a 	ret
   13b54:	00800074 	movhi	r2,1
   13b58:	9d400017 	ldw	r21,0(r19)
   13b5c:	115e1117 	ldw	r5,30788(r2)
   13b60:	adbfff17 	ldw	r22,-4(r21)
   13b64:	89403726 	beq	r17,r5,13c44 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x174>
   13b68:	88800007 	ldb	r2,0(r17)
   13b6c:	10800aa0 	cmpeqi	r2,r2,42
   13b70:	1000031e 	bne	r2,zero,13b80 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
   13b74:	8809883a 	mov	r4,r17
   13b78:	0014bdc0 	call	14bdc <strcmp>
   13b7c:	10003126 	beq	r2,zero,13c44 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x174>
   13b80:	80006926 	beq	r16,zero,13d28 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x258>
   13b84:	80800017 	ldw	r2,0(r16)
   13b88:	b1000117 	ldw	r4,4(r22)
   13b8c:	10bfff17 	ldw	r2,-4(r2)
   13b90:	11400117 	ldw	r5,4(r2)
   13b94:	21400526 	beq	r4,r5,13bac <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xdc>
   13b98:	20800007 	ldb	r2,0(r4)
   13b9c:	10800aa0 	cmpeqi	r2,r2,42
   13ba0:	1000421e 	bne	r2,zero,13cac <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1dc>
   13ba4:	0014bdc0 	call	14bdc <strcmp>
   13ba8:	1000401e 	bne	r2,zero,13cac <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1dc>
   13bac:	a080004c 	andi	r2,r20,1
   13bb0:	10003e26 	beq	r2,zero,13cac <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1dc>
   13bb4:	99000217 	ldw	r4,8(r19)
   13bb8:	81800217 	ldw	r6,8(r16)
   13bbc:	21c0180c 	andi	r7,r4,96
   13bc0:	3080180c 	andi	r2,r6,96
   13bc4:	01ca303a 	nor	r5,zero,r7
   13bc8:	288a703a 	and	r5,r5,r2
   13bcc:	28000126 	beq	r5,zero,13bd4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x104>
   13bd0:	31cc703a 	and	r6,r6,r7
   13bd4:	0084303a 	nor	r2,zero,r2
   13bd8:	0106303a 	nor	r3,zero,r4
   13bdc:	11c4703a 	and	r2,r2,r7
   13be0:	1986703a 	and	r3,r3,r6
   13be4:	10c4b03a 	or	r2,r2,r3
   13be8:	1000301e 	bne	r2,zero,13cac <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1dc>
   13bec:	2100004c 	andi	r4,r4,1
   13bf0:	20003c26 	beq	r4,zero,13ce4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x214>
   13bf4:	a8c00617 	ldw	r3,24(r21)
   13bf8:	00800074 	movhi	r2,1
   13bfc:	108e9c04 	addi	r2,r2,14960
   13c00:	18803b1e 	bne	r3,r2,13cf0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x220>
   13c04:	99000317 	ldw	r4,12(r19)
   13c08:	81400317 	ldw	r5,12(r16)
   13c0c:	a1c00084 	addi	r7,r20,2
   13c10:	20800017 	ldw	r2,0(r4)
   13c14:	900d883a 	mov	r6,r18
   13c18:	10800417 	ldw	r2,16(r2)
   13c1c:	dfc00717 	ldw	ra,28(sp)
   13c20:	dd800617 	ldw	r22,24(sp)
   13c24:	dd400517 	ldw	r21,20(sp)
   13c28:	dd000417 	ldw	r20,16(sp)
   13c2c:	dcc00317 	ldw	r19,12(sp)
   13c30:	dc800217 	ldw	r18,8(sp)
   13c34:	dc400117 	ldw	r17,4(sp)
   13c38:	dc000017 	ldw	r16,0(sp)
   13c3c:	dec00804 	addi	sp,sp,32
   13c40:	1000683a 	jmp	r2
   13c44:	00800074 	movhi	r2,1
   13c48:	b4400117 	ldw	r17,4(r22)
   13c4c:	115b0b17 	ldw	r5,27692(r2)
   13c50:	89401c26 	beq	r17,r5,13cc4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1f4>
   13c54:	88800007 	ldb	r2,0(r17)
   13c58:	10800aa0 	cmpeqi	r2,r2,42
   13c5c:	1000151e 	bne	r2,zero,13cb4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1e4>
   13c60:	8809883a 	mov	r4,r17
   13c64:	0014bdc0 	call	14bdc <strcmp>
   13c68:	10001626 	beq	r2,zero,13cc4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1f4>
   13c6c:	00800074 	movhi	r2,1
   13c70:	115c9517 	ldw	r5,29268(r2)
   13c74:	89400326 	beq	r17,r5,13c84 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1b4>
   13c78:	8809883a 	mov	r4,r17
   13c7c:	0014bdc0 	call	14bdc <strcmp>
   13c80:	103fbf1e 	bne	r2,zero,13b80 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
   13c84:	99000317 	ldw	r4,12(r19)
   13c88:	20800017 	ldw	r2,0(r4)
   13c8c:	10800317 	ldw	r2,12(r2)
   13c90:	103ee83a 	callr	r2
   13c94:	10c03fcc 	andi	r3,r2,255
   13c98:	18000d26 	beq	r3,zero,13cd0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x200>
   13c9c:	00c00074 	movhi	r3,1
   13ca0:	18de3b04 	addi	r3,r3,30956
   13ca4:	90c00015 	stw	r3,0(r18)
   13ca8:	003fa006 	br	13b2c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x5c>
   13cac:	0005883a 	mov	r2,zero
   13cb0:	003f9e06 	br	13b2c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x5c>
   13cb4:	00800074 	movhi	r2,1
   13cb8:	109c9517 	ldw	r2,29268(r2)
   13cbc:	88bfb01e 	bne	r17,r2,13b80 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
   13cc0:	003ff006 	br	13c84 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1b4>
   13cc4:	90000015 	stw	zero,0(r18)
   13cc8:	00800044 	movi	r2,1
   13ccc:	003f9706 	br	13b2c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x5c>
   13cd0:	00800074 	movhi	r2,1
   13cd4:	109e3a04 	addi	r2,r2,30952
   13cd8:	90800015 	stw	r2,0(r18)
   13cdc:	00800044 	movi	r2,1
   13ce0:	003f9206 	br	13b2c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x5c>
   13ce4:	00bfff84 	movi	r2,-2
   13ce8:	a0a8703a 	and	r20,r20,r2
   13cec:	003fc106 	br	13bf4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x124>
   13cf0:	a00f883a 	mov	r7,r20
   13cf4:	900d883a 	mov	r6,r18
   13cf8:	800b883a 	mov	r5,r16
   13cfc:	9809883a 	mov	r4,r19
   13d00:	dfc00717 	ldw	ra,28(sp)
   13d04:	dd800617 	ldw	r22,24(sp)
   13d08:	dd400517 	ldw	r21,20(sp)
   13d0c:	dd000417 	ldw	r20,16(sp)
   13d10:	dcc00317 	ldw	r19,12(sp)
   13d14:	dc800217 	ldw	r18,8(sp)
   13d18:	dc400117 	ldw	r17,4(sp)
   13d1c:	dc000017 	ldw	r16,0(sp)
   13d20:	dec00804 	addi	sp,sp,32
   13d24:	1800683a 	jmp	r3
   13d28:	0013e580 	call	13e58 <__cxa_bad_typeid>

00013d2c <_ZN10__cxxabiv129__pointer_to_member_type_infoD1Ev>:
   13d2c:	00800074 	movhi	r2,1
   13d30:	109c9904 	addi	r2,r2,29284
   13d34:	20800015 	stw	r2,0(r4)
   13d38:	0013a881 	jmpi	13a88 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>

00013d3c <_ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev>:
   13d3c:	defffe04 	addi	sp,sp,-8
   13d40:	00800074 	movhi	r2,1
   13d44:	dc000015 	stw	r16,0(sp)
   13d48:	dfc00115 	stw	ra,4(sp)
   13d4c:	109c9904 	addi	r2,r2,29284
   13d50:	20800015 	stw	r2,0(r4)
   13d54:	2021883a 	mov	r16,r4
   13d58:	0013a880 	call	13a88 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
   13d5c:	01400504 	movi	r5,20
   13d60:	8009883a 	mov	r4,r16
   13d64:	dfc00117 	ldw	ra,4(sp)
   13d68:	dc000017 	ldw	r16,0(sp)
   13d6c:	dec00204 	addi	sp,sp,8
   13d70:	00134d41 	jmpi	134d4 <_ZdlPvj>

00013d74 <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
   13d74:	20c00417 	ldw	r3,16(r4)
   13d78:	28800417 	ldw	r2,16(r5)
   13d7c:	defffb04 	addi	sp,sp,-20
   13d80:	dc400215 	stw	r17,8(sp)
   13d84:	dc000115 	stw	r16,4(sp)
   13d88:	2023883a 	mov	r17,r4
   13d8c:	2821883a 	mov	r16,r5
   13d90:	19000117 	ldw	r4,4(r3)
   13d94:	11400117 	ldw	r5,4(r2)
   13d98:	dc800315 	stw	r18,12(sp)
   13d9c:	dfc00415 	stw	ra,16(sp)
   13da0:	3825883a 	mov	r18,r7
   13da4:	21400e26 	beq	r4,r5,13de0 <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x6c>
   13da8:	20800007 	ldb	r2,0(r4)
   13dac:	d9800015 	stw	r6,0(sp)
   13db0:	10800aa0 	cmpeqi	r2,r2,42
   13db4:	1000031e 	bne	r2,zero,13dc4 <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x50>
   13db8:	0014bdc0 	call	14bdc <strcmp>
   13dbc:	d9800017 	ldw	r6,0(sp)
   13dc0:	10000726 	beq	r2,zero,13de0 <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x6c>
   13dc4:	0005883a 	mov	r2,zero
   13dc8:	dfc00417 	ldw	ra,16(sp)
   13dcc:	dc800317 	ldw	r18,12(sp)
   13dd0:	dc400217 	ldw	r17,8(sp)
   13dd4:	dc000117 	ldw	r16,4(sp)
   13dd8:	dec00504 	addi	sp,sp,20
   13ddc:	f800283a 	ret
   13de0:	89000317 	ldw	r4,12(r17)
   13de4:	81400317 	ldw	r5,12(r16)
   13de8:	91c00084 	addi	r7,r18,2
   13dec:	20800017 	ldw	r2,0(r4)
   13df0:	10800417 	ldw	r2,16(r2)
   13df4:	dfc00417 	ldw	ra,16(sp)
   13df8:	dc800317 	ldw	r18,12(sp)
   13dfc:	dc400217 	ldw	r17,8(sp)
   13e00:	dc000117 	ldw	r16,4(sp)
   13e04:	dec00504 	addi	sp,sp,20
   13e08:	1000683a 	jmp	r2

00013e0c <__cxa_pure_virtual>:
   13e0c:	deffff04 	addi	sp,sp,-4
   13e10:	dfc00015 	stw	ra,0(sp)
   13e14:	0012af40 	call	12af4 <_ZSt9terminatev>

00013e18 <__cxa_deleted_virtual>:
   13e18:	deffff04 	addi	sp,sp,-4
   13e1c:	dfc00015 	stw	ra,0(sp)
   13e20:	0012af40 	call	12af4 <_ZSt9terminatev>

00013e24 <__cxa_bad_cast>:
   13e24:	deffff04 	addi	sp,sp,-4
   13e28:	01000104 	movi	r4,4
   13e2c:	dfc00015 	stw	ra,0(sp)
   13e30:	00136640 	call	13664 <__cxa_allocate_exception>
   13e34:	1009883a 	mov	r4,r2
   13e38:	00800074 	movhi	r2,1
   13e3c:	01800074 	movhi	r6,1
   13e40:	01400074 	movhi	r5,1
   13e44:	109cc204 	addi	r2,r2,29448
   13e48:	318fc804 	addi	r6,r6,16160
   13e4c:	295cbd04 	addi	r5,r5,29428
   13e50:	20800015 	stw	r2,0(r4)
   13e54:	0012c580 	call	12c58 <__cxa_throw>

00013e58 <__cxa_bad_typeid>:
   13e58:	deffff04 	addi	sp,sp,-4
   13e5c:	01000104 	movi	r4,4
   13e60:	dfc00015 	stw	ra,0(sp)
   13e64:	00136640 	call	13664 <__cxa_allocate_exception>
   13e68:	1009883a 	mov	r4,r2
   13e6c:	00800074 	movhi	r2,1
   13e70:	01800074 	movhi	r6,1
   13e74:	01400074 	movhi	r5,1
   13e78:	109cd204 	addi	r2,r2,29512
   13e7c:	318fdd04 	addi	r6,r6,16244
   13e80:	295ccd04 	addi	r5,r5,29492
   13e84:	20800015 	stw	r2,0(r4)
   13e88:	0012c580 	call	12c58 <__cxa_throw>

00013e8c <__cxa_throw_bad_array_new_length>:
   13e8c:	deffff04 	addi	sp,sp,-4
   13e90:	01000104 	movi	r4,4
   13e94:	dfc00015 	stw	ra,0(sp)
   13e98:	00136640 	call	13664 <__cxa_allocate_exception>
   13e9c:	1009883a 	mov	r4,r2
   13ea0:	00800074 	movhi	r2,1
   13ea4:	01800074 	movhi	r6,1
   13ea8:	01400074 	movhi	r5,1
   13eac:	109cb304 	addi	r2,r2,29388
   13eb0:	318fb304 	addi	r6,r6,16076
   13eb4:	295cae04 	addi	r5,r5,29368
   13eb8:	20800015 	stw	r2,0(r4)
   13ebc:	0012c580 	call	12c58 <__cxa_throw>

00013ec0 <_ZNKSt20bad_array_new_length4whatEv>:
   13ec0:	00800074 	movhi	r2,1
   13ec4:	109ca004 	addi	r2,r2,29312
   13ec8:	f800283a 	ret

00013ecc <_ZNSt20bad_array_new_lengthD1Ev>:
   13ecc:	00800074 	movhi	r2,1
   13ed0:	109cb304 	addi	r2,r2,29388
   13ed4:	20800015 	stw	r2,0(r4)
   13ed8:	0013fc81 	jmpi	13fc8 <_ZNSt9bad_allocD1Ev>

00013edc <_ZNSt20bad_array_new_lengthD0Ev>:
   13edc:	defffe04 	addi	sp,sp,-8
   13ee0:	00800074 	movhi	r2,1
   13ee4:	dc000015 	stw	r16,0(sp)
   13ee8:	dfc00115 	stw	ra,4(sp)
   13eec:	109cb304 	addi	r2,r2,29388
   13ef0:	20800015 	stw	r2,0(r4)
   13ef4:	2021883a 	mov	r16,r4
   13ef8:	0013fc80 	call	13fc8 <_ZNSt9bad_allocD1Ev>
   13efc:	01400104 	movi	r5,4
   13f00:	8009883a 	mov	r4,r16
   13f04:	dfc00117 	ldw	ra,4(sp)
   13f08:	dc000017 	ldw	r16,0(sp)
   13f0c:	dec00204 	addi	sp,sp,8
   13f10:	00134d41 	jmpi	134d4 <_ZdlPvj>

00013f14 <_ZNKSt8bad_cast4whatEv>:
   13f14:	00800074 	movhi	r2,1
   13f18:	109cb604 	addi	r2,r2,29400
   13f1c:	f800283a 	ret

00013f20 <_ZNSt8bad_castD1Ev>:
   13f20:	00800074 	movhi	r2,1
   13f24:	109cc204 	addi	r2,r2,29448
   13f28:	20800015 	stw	r2,0(r4)
   13f2c:	00139c01 	jmpi	139c0 <_ZNSt9exceptionD1Ev>

00013f30 <_ZNSt8bad_castD0Ev>:
   13f30:	defffe04 	addi	sp,sp,-8
   13f34:	00800074 	movhi	r2,1
   13f38:	dc000015 	stw	r16,0(sp)
   13f3c:	dfc00115 	stw	ra,4(sp)
   13f40:	109cc204 	addi	r2,r2,29448
   13f44:	20800015 	stw	r2,0(r4)
   13f48:	2021883a 	mov	r16,r4
   13f4c:	00139c00 	call	139c0 <_ZNSt9exceptionD1Ev>
   13f50:	01400104 	movi	r5,4
   13f54:	8009883a 	mov	r4,r16
   13f58:	dfc00117 	ldw	ra,4(sp)
   13f5c:	dc000017 	ldw	r16,0(sp)
   13f60:	dec00204 	addi	sp,sp,8
   13f64:	00134d41 	jmpi	134d4 <_ZdlPvj>

00013f68 <_ZNKSt10bad_typeid4whatEv>:
   13f68:	00800074 	movhi	r2,1
   13f6c:	109cc504 	addi	r2,r2,29460
   13f70:	f800283a 	ret

00013f74 <_ZNSt10bad_typeidD1Ev>:
   13f74:	00800074 	movhi	r2,1
   13f78:	109cd204 	addi	r2,r2,29512
   13f7c:	20800015 	stw	r2,0(r4)
   13f80:	00139c01 	jmpi	139c0 <_ZNSt9exceptionD1Ev>

00013f84 <_ZNSt10bad_typeidD0Ev>:
   13f84:	defffe04 	addi	sp,sp,-8
   13f88:	00800074 	movhi	r2,1
   13f8c:	dc000015 	stw	r16,0(sp)
   13f90:	dfc00115 	stw	ra,4(sp)
   13f94:	109cd204 	addi	r2,r2,29512
   13f98:	20800015 	stw	r2,0(r4)
   13f9c:	2021883a 	mov	r16,r4
   13fa0:	00139c00 	call	139c0 <_ZNSt9exceptionD1Ev>
   13fa4:	01400104 	movi	r5,4
   13fa8:	8009883a 	mov	r4,r16
   13fac:	dfc00117 	ldw	ra,4(sp)
   13fb0:	dc000017 	ldw	r16,0(sp)
   13fb4:	dec00204 	addi	sp,sp,8
   13fb8:	00134d41 	jmpi	134d4 <_ZdlPvj>

00013fbc <_ZNKSt9bad_alloc4whatEv>:
   13fbc:	00800074 	movhi	r2,1
   13fc0:	109cd504 	addi	r2,r2,29524
   13fc4:	f800283a 	ret

00013fc8 <_ZNSt9bad_allocD1Ev>:
   13fc8:	00800074 	movhi	r2,1
   13fcc:	109ce204 	addi	r2,r2,29576
   13fd0:	20800015 	stw	r2,0(r4)
   13fd4:	00139c01 	jmpi	139c0 <_ZNSt9exceptionD1Ev>

00013fd8 <_ZNSt9bad_allocD0Ev>:
   13fd8:	defffe04 	addi	sp,sp,-8
   13fdc:	00800074 	movhi	r2,1
   13fe0:	dc000015 	stw	r16,0(sp)
   13fe4:	dfc00115 	stw	ra,4(sp)
   13fe8:	109ce204 	addi	r2,r2,29576
   13fec:	20800015 	stw	r2,0(r4)
   13ff0:	2021883a 	mov	r16,r4
   13ff4:	00139c00 	call	139c0 <_ZNSt9exceptionD1Ev>
   13ff8:	01400104 	movi	r5,4
   13ffc:	8009883a 	mov	r4,r16
   14000:	dfc00117 	ldw	ra,4(sp)
   14004:	dc000017 	ldw	r16,0(sp)
   14008:	dec00204 	addi	sp,sp,8
   1400c:	00134d41 	jmpi	134d4 <_ZdlPvj>

00014010 <_Unwind_ForcedUnwind_Phase2>:
   14010:	28800017 	ldw	r2,0(r5)
   14014:	defff504 	addi	sp,sp,-44
   14018:	dd400815 	stw	r21,32(sp)
   1401c:	dd000715 	stw	r20,28(sp)
   14020:	dcc00615 	stw	r19,24(sp)
   14024:	dc800515 	stw	r18,20(sp)
   14028:	dc400415 	stw	r17,16(sp)
   1402c:	dc000315 	stw	r16,12(sp)
   14030:	dfc00a15 	stw	ra,40(sp)
   14034:	dd800915 	stw	r22,36(sp)
   14038:	302b883a 	mov	r21,r6
   1403c:	24c00317 	ldw	r19,12(r4)
   14040:	25000417 	ldw	r20,16(r4)
   14044:	21800017 	ldw	r6,0(r4)
   14048:	21c00117 	ldw	r7,4(r4)
   1404c:	2823883a 	mov	r17,r5
   14050:	2021883a 	mov	r16,r4
   14054:	04800044 	movi	r18,1
   14058:	10001d26 	beq	r2,zero,140d0 <_Unwind_ForcedUnwind_Phase2+0xc0>
   1405c:	15800617 	ldw	r22,24(r2)
   14060:	01400284 	movi	r5,10
   14064:	01000044 	movi	r4,1
   14068:	dd000215 	stw	r20,8(sp)
   1406c:	dc400115 	stw	r17,4(sp)
   14070:	dc000015 	stw	r16,0(sp)
   14074:	983ee83a 	callr	r19
   14078:	01400284 	movi	r5,10
   1407c:	01000044 	movi	r4,1
   14080:	10001a1e 	bne	r2,zero,140ec <_Unwind_ForcedUnwind_Phase2+0xdc>
   14084:	81800017 	ldw	r6,0(r16)
   14088:	81c00117 	ldw	r7,4(r16)
   1408c:	b0000926 	beq	r22,zero,140b4 <_Unwind_ForcedUnwind_Phase2+0xa4>
   14090:	dc400115 	stw	r17,4(sp)
   14094:	dc000015 	stw	r16,0(sp)
   14098:	b03ee83a 	callr	r22
   1409c:	10c001e0 	cmpeqi	r3,r2,7
   140a0:	11000218 	cmpnei	r4,r2,8
   140a4:	18001d1e 	bne	r3,zero,1411c <_Unwind_ForcedUnwind_Phase2+0x10c>
   140a8:	2000101e 	bne	r4,zero,140ec <_Unwind_ForcedUnwind_Phase2+0xdc>
   140ac:	81800017 	ldw	r6,0(r16)
   140b0:	81c00117 	ldw	r7,4(r16)
   140b4:	88800017 	ldw	r2,0(r17)
   140b8:	00c00074 	movhi	r3,1
   140bc:	94800044 	addi	r18,r18,1
   140c0:	10800017 	ldw	r2,0(r2)
   140c4:	189fa515 	stw	r2,32404(r3)
   140c8:	88800015 	stw	r2,0(r17)
   140cc:	103fe31e 	bne	r2,zero,1405c <_Unwind_ForcedUnwind_Phase2+0x4c>
   140d0:	dd000215 	stw	r20,8(sp)
   140d4:	dc400115 	stw	r17,4(sp)
   140d8:	dc000015 	stw	r16,0(sp)
   140dc:	01400684 	movi	r5,26
   140e0:	01000044 	movi	r4,1
   140e4:	983ee83a 	callr	r19
   140e8:	10000b26 	beq	r2,zero,14118 <_Unwind_ForcedUnwind_Phase2+0x108>
   140ec:	00800084 	movi	r2,2
   140f0:	dfc00a17 	ldw	ra,40(sp)
   140f4:	dd800917 	ldw	r22,36(sp)
   140f8:	dd400817 	ldw	r21,32(sp)
   140fc:	dd000717 	ldw	r20,28(sp)
   14100:	dcc00617 	ldw	r19,24(sp)
   14104:	dc800517 	ldw	r18,20(sp)
   14108:	dc400417 	ldw	r17,16(sp)
   1410c:	dc000317 	ldw	r16,12(sp)
   14110:	dec00b04 	addi	sp,sp,44
   14114:	f800283a 	ret
   14118:	00800144 	movi	r2,5
   1411c:	ac800015 	stw	r18,0(r21)
   14120:	003ff306 	br	140f0 <_Unwind_ForcedUnwind_Phase2+0xe0>

00014124 <_Unwind_RaiseException_Phase2>:
   14124:	28800017 	ldw	r2,0(r5)
   14128:	10002f26 	beq	r2,zero,141e8 <_Unwind_RaiseException_Phase2+0xc4>
   1412c:	defff804 	addi	sp,sp,-32
   14130:	dcc00515 	stw	r19,20(sp)
   14134:	dc800415 	stw	r18,16(sp)
   14138:	dc400315 	stw	r17,12(sp)
   1413c:	dc000215 	stw	r16,8(sp)
   14140:	dfc00715 	stw	ra,28(sp)
   14144:	dd000615 	stw	r20,24(sp)
   14148:	2823883a 	mov	r17,r5
   1414c:	2021883a 	mov	r16,r4
   14150:	3027883a 	mov	r19,r6
   14154:	04800044 	movi	r18,1
   14158:	00001306 	br	141a8 <_Unwind_RaiseException_Phase2+0x84>
   1415c:	18000e26 	beq	r3,zero,14198 <_Unwind_RaiseException_Phase2+0x74>
   14160:	01400084 	movi	r5,2
   14164:	0029883a 	mov	r20,zero
   14168:	81800017 	ldw	r6,0(r16)
   1416c:	81c00117 	ldw	r7,4(r16)
   14170:	01000044 	movi	r4,1
   14174:	dc400115 	stw	r17,4(sp)
   14178:	dc000015 	stw	r16,0(sp)
   1417c:	183ee83a 	callr	r3
   14180:	10c001e0 	cmpeqi	r3,r2,7
   14184:	18001a1e 	bne	r3,zero,141f0 <_Unwind_RaiseException_Phase2+0xcc>
   14188:	10800218 	cmpnei	r2,r2,8
   1418c:	10000d1e 	bne	r2,zero,141c4 <_Unwind_RaiseException_Phase2+0xa0>
   14190:	a000191e 	bne	r20,zero,141f8 <_Unwind_RaiseException_Phase2+0xd4>
   14194:	88800017 	ldw	r2,0(r17)
   14198:	10800017 	ldw	r2,0(r2)
   1419c:	94800044 	addi	r18,r18,1
   141a0:	88800015 	stw	r2,0(r17)
   141a4:	10000726 	beq	r2,zero,141c4 <_Unwind_RaiseException_Phase2+0xa0>
   141a8:	81000417 	ldw	r4,16(r16)
   141ac:	10c00617 	ldw	r3,24(r2)
   141b0:	113fea1e 	bne	r2,r4,1415c <_Unwind_RaiseException_Phase2+0x38>
   141b4:	18001026 	beq	r3,zero,141f8 <_Unwind_RaiseException_Phase2+0xd4>
   141b8:	01400184 	movi	r5,6
   141bc:	05000104 	movi	r20,4
   141c0:	003fe906 	br	14168 <_Unwind_RaiseException_Phase2+0x44>
   141c4:	00800084 	movi	r2,2
   141c8:	dfc00717 	ldw	ra,28(sp)
   141cc:	dd000617 	ldw	r20,24(sp)
   141d0:	dcc00517 	ldw	r19,20(sp)
   141d4:	dc800417 	ldw	r18,16(sp)
   141d8:	dc400317 	ldw	r17,12(sp)
   141dc:	dc000217 	ldw	r16,8(sp)
   141e0:	dec00804 	addi	sp,sp,32
   141e4:	f800283a 	ret
   141e8:	00800084 	movi	r2,2
   141ec:	f800283a 	ret
   141f0:	9c800015 	stw	r18,0(r19)
   141f4:	003ff406 	br	141c8 <_Unwind_RaiseException_Phase2+0xa4>
   141f8:	00145340 	call	14534 <abort>

000141fc <uw_install_context.constprop.0.isra.0>:
   141fc:	deffff04 	addi	sp,sp,-4
   14200:	df000015 	stw	fp,0(sp)
   14204:	20800804 	addi	r2,r4,32
   14208:	00c00074 	movhi	r3,1
   1420c:	191fa515 	stw	r4,32404(r3)
   14210:	d839883a 	mov	fp,sp
   14214:	20c00917 	ldw	r3,36(r4)
   14218:	21000817 	ldw	r4,32(r4)
   1421c:	16c00217 	ldw	sp,8(r2)
   14220:	2039883a 	mov	fp,r4
   14224:	1800683a 	jmp	r3

00014228 <_Unwind_SjLj_Register>:
   14228:	00800074 	movhi	r2,1
   1422c:	109fa517 	ldw	r2,32404(r2)
   14230:	20800015 	stw	r2,0(r4)
   14234:	00800074 	movhi	r2,1
   14238:	111fa515 	stw	r4,32404(r2)
   1423c:	f800283a 	ret

00014240 <_Unwind_SjLj_Unregister>:
   14240:	20c00017 	ldw	r3,0(r4)
   14244:	00800074 	movhi	r2,1
   14248:	10dfa515 	stw	r3,32404(r2)
   1424c:	f800283a 	ret

00014250 <_Unwind_GetGR>:
   14250:	29400084 	addi	r5,r5,2
   14254:	20800017 	ldw	r2,0(r4)
   14258:	280a90ba 	slli	r5,r5,2
   1425c:	114b883a 	add	r5,r2,r5
   14260:	28800017 	ldw	r2,0(r5)
   14264:	f800283a 	ret

00014268 <_Unwind_GetCFA>:
   14268:	20800017 	ldw	r2,0(r4)
   1426c:	10000226 	beq	r2,zero,14278 <_Unwind_GetCFA+0x10>
   14270:	10800a17 	ldw	r2,40(r2)
   14274:	f800283a 	ret
   14278:	0005883a 	mov	r2,zero
   1427c:	f800283a 	ret

00014280 <_Unwind_SetGR>:
   14280:	29400084 	addi	r5,r5,2
   14284:	20800017 	ldw	r2,0(r4)
   14288:	280a90ba 	slli	r5,r5,2
   1428c:	114b883a 	add	r5,r2,r5
   14290:	29800015 	stw	r6,0(r5)
   14294:	f800283a 	ret

00014298 <_Unwind_GetIP>:
   14298:	20800017 	ldw	r2,0(r4)
   1429c:	10800117 	ldw	r2,4(r2)
   142a0:	10800044 	addi	r2,r2,1
   142a4:	f800283a 	ret

000142a8 <_Unwind_GetIPInfo>:
   142a8:	20800017 	ldw	r2,0(r4)
   142ac:	28000015 	stw	zero,0(r5)
   142b0:	10000326 	beq	r2,zero,142c0 <_Unwind_GetIPInfo+0x18>
   142b4:	10800117 	ldw	r2,4(r2)
   142b8:	10800044 	addi	r2,r2,1
   142bc:	f800283a 	ret
   142c0:	0005883a 	mov	r2,zero
   142c4:	f800283a 	ret

000142c8 <_Unwind_SetIP>:
   142c8:	20800017 	ldw	r2,0(r4)
   142cc:	297fffc4 	addi	r5,r5,-1
   142d0:	11400115 	stw	r5,4(r2)
   142d4:	f800283a 	ret

000142d8 <_Unwind_GetLanguageSpecificData>:
   142d8:	20800017 	ldw	r2,0(r4)
   142dc:	10800717 	ldw	r2,28(r2)
   142e0:	f800283a 	ret

000142e4 <_Unwind_GetRegionStart>:
   142e4:	0005883a 	mov	r2,zero
   142e8:	f800283a 	ret

000142ec <_Unwind_FindEnclosingFunction>:
   142ec:	0005883a 	mov	r2,zero
   142f0:	f800283a 	ret

000142f4 <_Unwind_GetDataRelBase>:
   142f4:	0005883a 	mov	r2,zero
   142f8:	f800283a 	ret

000142fc <_Unwind_GetTextRelBase>:
   142fc:	0005883a 	mov	r2,zero
   14300:	f800283a 	ret

00014304 <_Unwind_SjLj_RaiseException>:
   14304:	defff804 	addi	sp,sp,-32
   14308:	00800074 	movhi	r2,1
   1430c:	dc400515 	stw	r17,20(sp)
   14310:	145fa517 	ldw	r17,32404(r2)
   14314:	dfc00715 	stw	ra,28(sp)
   14318:	dc800615 	stw	r18,24(sp)
   1431c:	dc000415 	stw	r16,16(sp)
   14320:	dc400215 	stw	r17,8(sp)
   14324:	88001426 	beq	r17,zero,14378 <_Unwind_SjLj_RaiseException+0x74>
   14328:	2021883a 	mov	r16,r4
   1432c:	8805883a 	mov	r2,r17
   14330:	dc800204 	addi	r18,sp,8
   14334:	10800617 	ldw	r2,24(r2)
   14338:	10000b26 	beq	r2,zero,14368 <_Unwind_SjLj_RaiseException+0x64>
   1433c:	81800017 	ldw	r6,0(r16)
   14340:	81c00117 	ldw	r7,4(r16)
   14344:	01400044 	movi	r5,1
   14348:	dc800115 	stw	r18,4(sp)
   1434c:	dc000015 	stw	r16,0(sp)
   14350:	01000044 	movi	r4,1
   14354:	103ee83a 	callr	r2
   14358:	10c001a0 	cmpeqi	r3,r2,6
   1435c:	18000d1e 	bne	r3,zero,14394 <_Unwind_SjLj_RaiseException+0x90>
   14360:	10800218 	cmpnei	r2,r2,8
   14364:	1000171e 	bne	r2,zero,143c4 <_Unwind_SjLj_RaiseException+0xc0>
   14368:	d8800217 	ldw	r2,8(sp)
   1436c:	10800017 	ldw	r2,0(r2)
   14370:	d8800215 	stw	r2,8(sp)
   14374:	103fef1e 	bne	r2,zero,14334 <_Unwind_SjLj_RaiseException+0x30>
   14378:	00800144 	movi	r2,5
   1437c:	dfc00717 	ldw	ra,28(sp)
   14380:	dc800617 	ldw	r18,24(sp)
   14384:	dc400517 	ldw	r17,20(sp)
   14388:	dc000417 	ldw	r16,16(sp)
   1438c:	dec00804 	addi	sp,sp,32
   14390:	f800283a 	ret
   14394:	d8800217 	ldw	r2,8(sp)
   14398:	80000315 	stw	zero,12(r16)
   1439c:	d9800304 	addi	r6,sp,12
   143a0:	80800415 	stw	r2,16(r16)
   143a4:	900b883a 	mov	r5,r18
   143a8:	8009883a 	mov	r4,r16
   143ac:	dc400215 	stw	r17,8(sp)
   143b0:	00141240 	call	14124 <_Unwind_RaiseException_Phase2>
   143b4:	10c001d8 	cmpnei	r3,r2,7
   143b8:	183ff01e 	bne	r3,zero,1437c <_Unwind_SjLj_RaiseException+0x78>
   143bc:	d9000217 	ldw	r4,8(sp)
   143c0:	00141fc0 	call	141fc <uw_install_context.constprop.0.isra.0>
   143c4:	008000c4 	movi	r2,3
   143c8:	003fec06 	br	1437c <_Unwind_SjLj_RaiseException+0x78>

000143cc <_Unwind_SjLj_ForcedUnwind>:
   143cc:	00800074 	movhi	r2,1
   143d0:	defffd04 	addi	sp,sp,-12
   143d4:	10dfa517 	ldw	r3,32404(r2)
   143d8:	dfc00215 	stw	ra,8(sp)
   143dc:	21400315 	stw	r5,12(r4)
   143e0:	21800415 	stw	r6,16(r4)
   143e4:	d80b883a 	mov	r5,sp
   143e8:	d9800104 	addi	r6,sp,4
   143ec:	d8c00015 	stw	r3,0(sp)
   143f0:	00140100 	call	14010 <_Unwind_ForcedUnwind_Phase2>
   143f4:	10c001e0 	cmpeqi	r3,r2,7
   143f8:	1800031e 	bne	r3,zero,14408 <_Unwind_SjLj_ForcedUnwind+0x3c>
   143fc:	dfc00217 	ldw	ra,8(sp)
   14400:	dec00304 	addi	sp,sp,12
   14404:	f800283a 	ret
   14408:	d9000017 	ldw	r4,0(sp)
   1440c:	00141fc0 	call	141fc <uw_install_context.constprop.0.isra.0>

00014410 <_Unwind_SjLj_Resume>:
   14410:	00800074 	movhi	r2,1
   14414:	10dfa517 	ldw	r3,32404(r2)
   14418:	20800317 	ldw	r2,12(r4)
   1441c:	defffd04 	addi	sp,sp,-12
   14420:	dfc00215 	stw	ra,8(sp)
   14424:	d8c00015 	stw	r3,0(sp)
   14428:	d9800104 	addi	r6,sp,4
   1442c:	d80b883a 	mov	r5,sp
   14430:	1000051e 	bne	r2,zero,14448 <_Unwind_SjLj_Resume+0x38>
   14434:	00141240 	call	14124 <_Unwind_RaiseException_Phase2>
   14438:	108001e0 	cmpeqi	r2,r2,7
   1443c:	10000426 	beq	r2,zero,14450 <_Unwind_SjLj_Resume+0x40>
   14440:	d9000017 	ldw	r4,0(sp)
   14444:	00141fc0 	call	141fc <uw_install_context.constprop.0.isra.0>
   14448:	00140100 	call	14010 <_Unwind_ForcedUnwind_Phase2>
   1444c:	003ffa06 	br	14438 <_Unwind_SjLj_Resume+0x28>
   14450:	00145340 	call	14534 <abort>

00014454 <_Unwind_SjLj_Resume_or_Rethrow>:
   14454:	20800317 	ldw	r2,12(r4)
   14458:	1000011e 	bne	r2,zero,14460 <_Unwind_SjLj_Resume_or_Rethrow+0xc>
   1445c:	00143041 	jmpi	14304 <_Unwind_SjLj_RaiseException>
   14460:	00800074 	movhi	r2,1
   14464:	109fa517 	ldw	r2,32404(r2)
   14468:	defffd04 	addi	sp,sp,-12
   1446c:	d9800104 	addi	r6,sp,4
   14470:	d80b883a 	mov	r5,sp
   14474:	dfc00215 	stw	ra,8(sp)
   14478:	d8800015 	stw	r2,0(sp)
   1447c:	00140100 	call	14010 <_Unwind_ForcedUnwind_Phase2>
   14480:	108001e0 	cmpeqi	r2,r2,7
   14484:	10000226 	beq	r2,zero,14490 <_Unwind_SjLj_Resume_or_Rethrow+0x3c>
   14488:	d9000017 	ldw	r4,0(sp)
   1448c:	00141fc0 	call	141fc <uw_install_context.constprop.0.isra.0>
   14490:	00145340 	call	14534 <abort>

00014494 <_Unwind_DeleteException>:
   14494:	20800217 	ldw	r2,8(r4)
   14498:	200b883a 	mov	r5,r4
   1449c:	10000226 	beq	r2,zero,144a8 <_Unwind_DeleteException+0x14>
   144a0:	01000044 	movi	r4,1
   144a4:	1000683a 	jmp	r2
   144a8:	f800283a 	ret

000144ac <_Unwind_Backtrace>:
   144ac:	00800074 	movhi	r2,1
   144b0:	109fa517 	ldw	r2,32404(r2)
   144b4:	defffb04 	addi	sp,sp,-20
   144b8:	dc800315 	stw	r18,12(sp)
   144bc:	dc400215 	stw	r17,8(sp)
   144c0:	dc000115 	stw	r16,4(sp)
   144c4:	dfc00415 	stw	ra,16(sp)
   144c8:	d8800015 	stw	r2,0(sp)
   144cc:	2021883a 	mov	r16,r4
   144d0:	2823883a 	mov	r17,r5
   144d4:	d825883a 	mov	r18,sp
   144d8:	10000826 	beq	r2,zero,144fc <_Unwind_Backtrace+0x50>
   144dc:	880b883a 	mov	r5,r17
   144e0:	9009883a 	mov	r4,r18
   144e4:	803ee83a 	callr	r16
   144e8:	1000101e 	bne	r2,zero,1452c <_Unwind_Backtrace+0x80>
   144ec:	d8800017 	ldw	r2,0(sp)
   144f0:	10800017 	ldw	r2,0(r2)
   144f4:	d8800015 	stw	r2,0(sp)
   144f8:	103ff81e 	bne	r2,zero,144dc <_Unwind_Backtrace+0x30>
   144fc:	880b883a 	mov	r5,r17
   14500:	9009883a 	mov	r4,r18
   14504:	803ee83a 	callr	r16
   14508:	00c00144 	movi	r3,5
   1450c:	1000071e 	bne	r2,zero,1452c <_Unwind_Backtrace+0x80>
   14510:	1805883a 	mov	r2,r3
   14514:	dfc00417 	ldw	ra,16(sp)
   14518:	dc800317 	ldw	r18,12(sp)
   1451c:	dc400217 	ldw	r17,8(sp)
   14520:	dc000117 	ldw	r16,4(sp)
   14524:	dec00504 	addi	sp,sp,20
   14528:	f800283a 	ret
   1452c:	00c000c4 	movi	r3,3
   14530:	003ff706 	br	14510 <_Unwind_Backtrace+0x64>

00014534 <abort>:
   14534:	deffff04 	addi	sp,sp,-4
   14538:	01000184 	movi	r4,6
   1453c:	dfc00015 	stw	ra,0(sp)
   14540:	0014b4c0 	call	14b4c <raise>
   14544:	01000044 	movi	r4,1
   14548:	0014d340 	call	14d34 <_exit>

0001454c <malloc>:
   1454c:	00800074 	movhi	r2,1
   14550:	200b883a 	mov	r5,r4
   14554:	111e3e17 	ldw	r4,30968(r2)
   14558:	00146ec1 	jmpi	146ec <_malloc_r>

0001455c <free>:
   1455c:	00800074 	movhi	r2,1
   14560:	200b883a 	mov	r5,r4
   14564:	111e3e17 	ldw	r4,30968(r2)
   14568:	00145ec1 	jmpi	145ec <_free_r>

0001456c <memmove>:
   1456c:	2005883a 	mov	r2,r4
   14570:	2900142e 	bgeu	r5,r4,145c4 <memmove+0x58>
   14574:	298f883a 	add	r7,r5,r6
   14578:	21c0122e 	bgeu	r4,r7,145c4 <memmove+0x58>
   1457c:	018a303a 	nor	r5,zero,r6
   14580:	0007883a 	mov	r3,zero
   14584:	18ffffc4 	addi	r3,r3,-1
   14588:	28c0011e 	bne	r5,r3,14590 <memmove+0x24>
   1458c:	f800283a 	ret
   14590:	38c9883a 	add	r4,r7,r3
   14594:	22000003 	ldbu	r8,0(r4)
   14598:	30c9883a 	add	r4,r6,r3
   1459c:	1109883a 	add	r4,r2,r4
   145a0:	22000005 	stb	r8,0(r4)
   145a4:	003ff706 	br	14584 <memmove+0x18>
   145a8:	28c9883a 	add	r4,r5,r3
   145ac:	21c00003 	ldbu	r7,0(r4)
   145b0:	10c9883a 	add	r4,r2,r3
   145b4:	18c00044 	addi	r3,r3,1
   145b8:	21c00005 	stb	r7,0(r4)
   145bc:	30fffa1e 	bne	r6,r3,145a8 <memmove+0x3c>
   145c0:	f800283a 	ret
   145c4:	0007883a 	mov	r3,zero
   145c8:	003ffc06 	br	145bc <memmove+0x50>

000145cc <memset>:
   145cc:	2005883a 	mov	r2,r4
   145d0:	218d883a 	add	r6,r4,r6
   145d4:	2007883a 	mov	r3,r4
   145d8:	1980011e 	bne	r3,r6,145e0 <memset+0x14>
   145dc:	f800283a 	ret
   145e0:	18c00044 	addi	r3,r3,1
   145e4:	197fffc5 	stb	r5,-1(r3)
   145e8:	003ffb06 	br	145d8 <memset+0xc>

000145ec <_free_r>:
   145ec:	28003e26 	beq	r5,zero,146e8 <_free_r+0xfc>
   145f0:	28bfff17 	ldw	r2,-4(r5)
   145f4:	defffd04 	addi	sp,sp,-12
   145f8:	dc000115 	stw	r16,4(sp)
   145fc:	dfc00215 	stw	ra,8(sp)
   14600:	2c3fff04 	addi	r16,r5,-4
   14604:	1000010e 	bge	r2,zero,1460c <_free_r+0x20>
   14608:	80a1883a 	add	r16,r16,r2
   1460c:	d9000015 	stw	r4,0(sp)
   14610:	00152f40 	call	152f4 <__malloc_lock>
   14614:	00800074 	movhi	r2,1
   14618:	109fa717 	ldw	r2,32412(r2)
   1461c:	d9000017 	ldw	r4,0(sp)
   14620:	1000071e 	bne	r2,zero,14640 <_free_r+0x54>
   14624:	80000115 	stw	zero,4(r16)
   14628:	00800074 	movhi	r2,1
   1462c:	141fa715 	stw	r16,32412(r2)
   14630:	dfc00217 	ldw	ra,8(sp)
   14634:	dc000117 	ldw	r16,4(sp)
   14638:	dec00304 	addi	sp,sp,12
   1463c:	00153181 	jmpi	15318 <__malloc_unlock>
   14640:	8080092e 	bgeu	r16,r2,14668 <_free_r+0x7c>
   14644:	81400017 	ldw	r5,0(r16)
   14648:	8147883a 	add	r3,r16,r5
   1464c:	10c0041e 	bne	r2,r3,14660 <_free_r+0x74>
   14650:	10c00017 	ldw	r3,0(r2)
   14654:	10800117 	ldw	r2,4(r2)
   14658:	1947883a 	add	r3,r3,r5
   1465c:	80c00015 	stw	r3,0(r16)
   14660:	80800115 	stw	r2,4(r16)
   14664:	003ff006 	br	14628 <_free_r+0x3c>
   14668:	1007883a 	mov	r3,r2
   1466c:	10800117 	ldw	r2,4(r2)
   14670:	10000126 	beq	r2,zero,14678 <_free_r+0x8c>
   14674:	80bffc2e 	bgeu	r16,r2,14668 <_free_r+0x7c>
   14678:	19400017 	ldw	r5,0(r3)
   1467c:	194d883a 	add	r6,r3,r5
   14680:	34000b1e 	bne	r6,r16,146b0 <_free_r+0xc4>
   14684:	81800017 	ldw	r6,0(r16)
   14688:	298b883a 	add	r5,r5,r6
   1468c:	19400015 	stw	r5,0(r3)
   14690:	194d883a 	add	r6,r3,r5
   14694:	11bfe61e 	bne	r2,r6,14630 <_free_r+0x44>
   14698:	11800017 	ldw	r6,0(r2)
   1469c:	10800117 	ldw	r2,4(r2)
   146a0:	314b883a 	add	r5,r6,r5
   146a4:	19400015 	stw	r5,0(r3)
   146a8:	18800115 	stw	r2,4(r3)
   146ac:	003fe006 	br	14630 <_free_r+0x44>
   146b0:	8180032e 	bgeu	r16,r6,146c0 <_free_r+0xd4>
   146b4:	00800304 	movi	r2,12
   146b8:	20800015 	stw	r2,0(r4)
   146bc:	003fdc06 	br	14630 <_free_r+0x44>
   146c0:	81800017 	ldw	r6,0(r16)
   146c4:	818b883a 	add	r5,r16,r6
   146c8:	1140041e 	bne	r2,r5,146dc <_free_r+0xf0>
   146cc:	11400017 	ldw	r5,0(r2)
   146d0:	10800117 	ldw	r2,4(r2)
   146d4:	298b883a 	add	r5,r5,r6
   146d8:	81400015 	stw	r5,0(r16)
   146dc:	80800115 	stw	r2,4(r16)
   146e0:	1c000115 	stw	r16,4(r3)
   146e4:	003fd206 	br	14630 <_free_r+0x44>
   146e8:	f800283a 	ret

000146ec <_malloc_r>:
   146ec:	defffc04 	addi	sp,sp,-16
   146f0:	00bfff04 	movi	r2,-4
   146f4:	dc400115 	stw	r17,4(sp)
   146f8:	2c4000c4 	addi	r17,r5,3
   146fc:	88a2703a 	and	r17,r17,r2
   14700:	8c400204 	addi	r17,r17,8
   14704:	dc800215 	stw	r18,8(sp)
   14708:	dfc00315 	stw	ra,12(sp)
   1470c:	dc000015 	stw	r16,0(sp)
   14710:	88800328 	cmpgeui	r2,r17,12
   14714:	2025883a 	mov	r18,r4
   14718:	10001a1e 	bne	r2,zero,14784 <_malloc_r+0x98>
   1471c:	04400304 	movi	r17,12
   14720:	89401936 	bltu	r17,r5,14788 <_malloc_r+0x9c>
   14724:	9009883a 	mov	r4,r18
   14728:	00152f40 	call	152f4 <__malloc_lock>
   1472c:	00800074 	movhi	r2,1
   14730:	10dfa717 	ldw	r3,32412(r2)
   14734:	1821883a 	mov	r16,r3
   14738:	80001c1e 	bne	r16,zero,147ac <_malloc_r+0xc0>
   1473c:	00800074 	movhi	r2,1
   14740:	109fa617 	ldw	r2,32408(r2)
   14744:	1000051e 	bne	r2,zero,1475c <_malloc_r+0x70>
   14748:	000b883a 	mov	r5,zero
   1474c:	9009883a 	mov	r4,r18
   14750:	00148dc0 	call	148dc <_sbrk_r>
   14754:	00c00074 	movhi	r3,1
   14758:	189fa615 	stw	r2,32408(r3)
   1475c:	880b883a 	mov	r5,r17
   14760:	9009883a 	mov	r4,r18
   14764:	00148dc0 	call	148dc <_sbrk_r>
   14768:	10ffffd8 	cmpnei	r3,r2,-1
   1476c:	18002d1e 	bne	r3,zero,14824 <_malloc_r+0x138>
   14770:	00800304 	movi	r2,12
   14774:	90800015 	stw	r2,0(r18)
   14778:	9009883a 	mov	r4,r18
   1477c:	00153180 	call	15318 <__malloc_unlock>
   14780:	00000306 	br	14790 <_malloc_r+0xa4>
   14784:	883fe60e 	bge	r17,zero,14720 <_malloc_r+0x34>
   14788:	00800304 	movi	r2,12
   1478c:	90800015 	stw	r2,0(r18)
   14790:	0005883a 	mov	r2,zero
   14794:	dfc00317 	ldw	ra,12(sp)
   14798:	dc800217 	ldw	r18,8(sp)
   1479c:	dc400117 	ldw	r17,4(sp)
   147a0:	dc000017 	ldw	r16,0(sp)
   147a4:	dec00404 	addi	sp,sp,16
   147a8:	f800283a 	ret
   147ac:	80800017 	ldw	r2,0(r16)
   147b0:	1445c83a 	sub	r2,r2,r17
   147b4:	10001816 	blt	r2,zero,14818 <_malloc_r+0x12c>
   147b8:	11000330 	cmpltui	r4,r2,12
   147bc:	2000041e 	bne	r4,zero,147d0 <_malloc_r+0xe4>
   147c0:	80800015 	stw	r2,0(r16)
   147c4:	80a1883a 	add	r16,r16,r2
   147c8:	84400015 	stw	r17,0(r16)
   147cc:	00000406 	br	147e0 <_malloc_r+0xf4>
   147d0:	80800117 	ldw	r2,4(r16)
   147d4:	1c000e1e 	bne	r3,r16,14810 <_malloc_r+0x124>
   147d8:	00c00074 	movhi	r3,1
   147dc:	189fa715 	stw	r2,32412(r3)
   147e0:	9009883a 	mov	r4,r18
   147e4:	00153180 	call	15318 <__malloc_unlock>
   147e8:	013ffe04 	movi	r4,-8
   147ec:	808002c4 	addi	r2,r16,11
   147f0:	80c00104 	addi	r3,r16,4
   147f4:	1104703a 	and	r2,r2,r4
   147f8:	10c9c83a 	sub	r4,r2,r3
   147fc:	10ffe526 	beq	r2,r3,14794 <_malloc_r+0xa8>
   14800:	8121883a 	add	r16,r16,r4
   14804:	1887c83a 	sub	r3,r3,r2
   14808:	80c00015 	stw	r3,0(r16)
   1480c:	003fe106 	br	14794 <_malloc_r+0xa8>
   14810:	18800115 	stw	r2,4(r3)
   14814:	003ff206 	br	147e0 <_malloc_r+0xf4>
   14818:	8007883a 	mov	r3,r16
   1481c:	84000117 	ldw	r16,4(r16)
   14820:	003fc506 	br	14738 <_malloc_r+0x4c>
   14824:	140000c4 	addi	r16,r2,3
   14828:	00ffff04 	movi	r3,-4
   1482c:	80e0703a 	and	r16,r16,r3
   14830:	143fe526 	beq	r2,r16,147c8 <_malloc_r+0xdc>
   14834:	808bc83a 	sub	r5,r16,r2
   14838:	9009883a 	mov	r4,r18
   1483c:	00148dc0 	call	148dc <_sbrk_r>
   14840:	10bfffe0 	cmpeqi	r2,r2,-1
   14844:	103fe026 	beq	r2,zero,147c8 <_malloc_r+0xdc>
   14848:	003fc906 	br	14770 <_malloc_r+0x84>

0001484c <_puts_r>:
   1484c:	defffd04 	addi	sp,sp,-12
   14850:	dc000015 	stw	r16,0(sp)
   14854:	2021883a 	mov	r16,r4
   14858:	2809883a 	mov	r4,r5
   1485c:	dfc00215 	stw	ra,8(sp)
   14860:	dc400115 	stw	r17,4(sp)
   14864:	2823883a 	mov	r17,r5
   14868:	0014c200 	call	14c20 <strlen>
   1486c:	81400217 	ldw	r5,8(r16)
   14870:	00c00074 	movhi	r3,1
   14874:	18d30f04 	addi	r3,r3,19516
   14878:	28c00115 	stw	r3,4(r5)
   1487c:	100f883a 	mov	r7,r2
   14880:	880d883a 	mov	r6,r17
   14884:	8009883a 	mov	r4,r16
   14888:	0014c3c0 	call	14c3c <__sfvwrite_small_dev>
   1488c:	10ffffe0 	cmpeqi	r3,r2,-1
   14890:	1800091e 	bne	r3,zero,148b8 <_puts_r+0x6c>
   14894:	81400217 	ldw	r5,8(r16)
   14898:	01800074 	movhi	r6,1
   1489c:	01c00044 	movi	r7,1
   148a0:	28800117 	ldw	r2,4(r5)
   148a4:	319ce504 	addi	r6,r6,29588
   148a8:	8009883a 	mov	r4,r16
   148ac:	103ee83a 	callr	r2
   148b0:	10bfffe0 	cmpeqi	r2,r2,-1
   148b4:	0085c83a 	sub	r2,zero,r2
   148b8:	dfc00217 	ldw	ra,8(sp)
   148bc:	dc400117 	ldw	r17,4(sp)
   148c0:	dc000017 	ldw	r16,0(sp)
   148c4:	dec00304 	addi	sp,sp,12
   148c8:	f800283a 	ret

000148cc <puts>:
   148cc:	00800074 	movhi	r2,1
   148d0:	200b883a 	mov	r5,r4
   148d4:	111e3e17 	ldw	r4,30968(r2)
   148d8:	001484c1 	jmpi	1484c <_puts_r>

000148dc <_sbrk_r>:
   148dc:	defffe04 	addi	sp,sp,-8
   148e0:	dc000015 	stw	r16,0(sp)
   148e4:	00800074 	movhi	r2,1
   148e8:	2021883a 	mov	r16,r4
   148ec:	2809883a 	mov	r4,r5
   148f0:	dfc00115 	stw	ra,4(sp)
   148f4:	101fa815 	stw	zero,32416(r2)
   148f8:	001533c0 	call	1533c <sbrk>
   148fc:	10ffffd8 	cmpnei	r3,r2,-1
   14900:	1800041e 	bne	r3,zero,14914 <_sbrk_r+0x38>
   14904:	00c00074 	movhi	r3,1
   14908:	18dfa817 	ldw	r3,32416(r3)
   1490c:	18000126 	beq	r3,zero,14914 <_sbrk_r+0x38>
   14910:	80c00015 	stw	r3,0(r16)
   14914:	dfc00117 	ldw	ra,4(sp)
   14918:	dc000017 	ldw	r16,0(sp)
   1491c:	dec00204 	addi	sp,sp,8
   14920:	f800283a 	ret

00014924 <_init_signal_r>:
   14924:	20800c17 	ldw	r2,48(r4)
   14928:	1000131e 	bne	r2,zero,14978 <_init_signal_r+0x54>
   1492c:	defffe04 	addi	sp,sp,-8
   14930:	01402004 	movi	r5,128
   14934:	dc000015 	stw	r16,0(sp)
   14938:	dfc00115 	stw	ra,4(sp)
   1493c:	2021883a 	mov	r16,r4
   14940:	00146ec0 	call	146ec <_malloc_r>
   14944:	80800c15 	stw	r2,48(r16)
   14948:	1009883a 	mov	r4,r2
   1494c:	10000826 	beq	r2,zero,14970 <_init_signal_r+0x4c>
   14950:	01802004 	movi	r6,128
   14954:	000b883a 	mov	r5,zero
   14958:	00145cc0 	call	145cc <memset>
   1495c:	0005883a 	mov	r2,zero
   14960:	dfc00117 	ldw	ra,4(sp)
   14964:	dc000017 	ldw	r16,0(sp)
   14968:	dec00204 	addi	sp,sp,8
   1496c:	f800283a 	ret
   14970:	00bfffc4 	movi	r2,-1
   14974:	003ffa06 	br	14960 <_init_signal_r+0x3c>
   14978:	0005883a 	mov	r2,zero
   1497c:	f800283a 	ret

00014980 <_signal_r>:
   14980:	defffc04 	addi	sp,sp,-16
   14984:	dc400115 	stw	r17,4(sp)
   14988:	dfc00315 	stw	ra,12(sp)
   1498c:	dc800215 	stw	r18,8(sp)
   14990:	dc000015 	stw	r16,0(sp)
   14994:	28800830 	cmpltui	r2,r5,32
   14998:	2023883a 	mov	r17,r4
   1499c:	1000041e 	bne	r2,zero,149b0 <_signal_r+0x30>
   149a0:	00800584 	movi	r2,22
   149a4:	20800015 	stw	r2,0(r4)
   149a8:	00bfffc4 	movi	r2,-1
   149ac:	00000906 	br	149d4 <_signal_r+0x54>
   149b0:	20800c17 	ldw	r2,48(r4)
   149b4:	2821883a 	mov	r16,r5
   149b8:	3025883a 	mov	r18,r6
   149bc:	10000b26 	beq	r2,zero,149ec <_signal_r+0x6c>
   149c0:	89400c17 	ldw	r5,48(r17)
   149c4:	802090ba 	slli	r16,r16,2
   149c8:	2c21883a 	add	r16,r5,r16
   149cc:	80800017 	ldw	r2,0(r16)
   149d0:	84800015 	stw	r18,0(r16)
   149d4:	dfc00317 	ldw	ra,12(sp)
   149d8:	dc800217 	ldw	r18,8(sp)
   149dc:	dc400117 	ldw	r17,4(sp)
   149e0:	dc000017 	ldw	r16,0(sp)
   149e4:	dec00404 	addi	sp,sp,16
   149e8:	f800283a 	ret
   149ec:	00149240 	call	14924 <_init_signal_r>
   149f0:	103ff326 	beq	r2,zero,149c0 <_signal_r+0x40>
   149f4:	003fec06 	br	149a8 <_signal_r+0x28>

000149f8 <_raise_r>:
   149f8:	defffd04 	addi	sp,sp,-12
   149fc:	dc000015 	stw	r16,0(sp)
   14a00:	dfc00215 	stw	ra,8(sp)
   14a04:	dc400115 	stw	r17,4(sp)
   14a08:	28800830 	cmpltui	r2,r5,32
   14a0c:	2021883a 	mov	r16,r4
   14a10:	1000081e 	bne	r2,zero,14a34 <_raise_r+0x3c>
   14a14:	00800584 	movi	r2,22
   14a18:	20800015 	stw	r2,0(r4)
   14a1c:	00bfffc4 	movi	r2,-1
   14a20:	dfc00217 	ldw	ra,8(sp)
   14a24:	dc400117 	ldw	r17,4(sp)
   14a28:	dc000017 	ldw	r16,0(sp)
   14a2c:	dec00304 	addi	sp,sp,12
   14a30:	f800283a 	ret
   14a34:	20800c17 	ldw	r2,48(r4)
   14a38:	2823883a 	mov	r17,r5
   14a3c:	10000426 	beq	r2,zero,14a50 <_raise_r+0x58>
   14a40:	280690ba 	slli	r3,r5,2
   14a44:	10c5883a 	add	r2,r2,r3
   14a48:	10c00017 	ldw	r3,0(r2)
   14a4c:	18000a1e 	bne	r3,zero,14a78 <_raise_r+0x80>
   14a50:	8009883a 	mov	r4,r16
   14a54:	0014bd80 	call	14bd8 <_getpid_r>
   14a58:	880d883a 	mov	r6,r17
   14a5c:	100b883a 	mov	r5,r2
   14a60:	8009883a 	mov	r4,r16
   14a64:	dfc00217 	ldw	ra,8(sp)
   14a68:	dc400117 	ldw	r17,4(sp)
   14a6c:	dc000017 	ldw	r16,0(sp)
   14a70:	dec00304 	addi	sp,sp,12
   14a74:	0014b8c1 	jmpi	14b8c <_kill_r>
   14a78:	19000060 	cmpeqi	r4,r3,1
   14a7c:	2000091e 	bne	r4,zero,14aa4 <_raise_r+0xac>
   14a80:	193fffd8 	cmpnei	r4,r3,-1
   14a84:	2000041e 	bne	r4,zero,14a98 <_raise_r+0xa0>
   14a88:	00800584 	movi	r2,22
   14a8c:	80800015 	stw	r2,0(r16)
   14a90:	00800044 	movi	r2,1
   14a94:	003fe206 	br	14a20 <_raise_r+0x28>
   14a98:	10000015 	stw	zero,0(r2)
   14a9c:	2809883a 	mov	r4,r5
   14aa0:	183ee83a 	callr	r3
   14aa4:	0005883a 	mov	r2,zero
   14aa8:	003fdd06 	br	14a20 <_raise_r+0x28>

00014aac <__sigtramp_r>:
   14aac:	28800830 	cmpltui	r2,r5,32
   14ab0:	1000021e 	bne	r2,zero,14abc <__sigtramp_r+0x10>
   14ab4:	00bfffc4 	movi	r2,-1
   14ab8:	f800283a 	ret
   14abc:	20800c17 	ldw	r2,48(r4)
   14ac0:	defffd04 	addi	sp,sp,-12
   14ac4:	dc400115 	stw	r17,4(sp)
   14ac8:	dc000015 	stw	r16,0(sp)
   14acc:	dfc00215 	stw	ra,8(sp)
   14ad0:	2023883a 	mov	r17,r4
   14ad4:	2821883a 	mov	r16,r5
   14ad8:	10000726 	beq	r2,zero,14af8 <__sigtramp_r+0x4c>
   14adc:	88800c17 	ldw	r2,48(r17)
   14ae0:	800690ba 	slli	r3,r16,2
   14ae4:	10c7883a 	add	r3,r2,r3
   14ae8:	18800017 	ldw	r2,0(r3)
   14aec:	10000a1e 	bne	r2,zero,14b18 <__sigtramp_r+0x6c>
   14af0:	00800044 	movi	r2,1
   14af4:	00000306 	br	14b04 <__sigtramp_r+0x58>
   14af8:	00149240 	call	14924 <_init_signal_r>
   14afc:	103ff726 	beq	r2,zero,14adc <__sigtramp_r+0x30>
   14b00:	00bfffc4 	movi	r2,-1
   14b04:	dfc00217 	ldw	ra,8(sp)
   14b08:	dc400117 	ldw	r17,4(sp)
   14b0c:	dc000017 	ldw	r16,0(sp)
   14b10:	dec00304 	addi	sp,sp,12
   14b14:	f800283a 	ret
   14b18:	113fffe0 	cmpeqi	r4,r2,-1
   14b1c:	2000071e 	bne	r4,zero,14b3c <__sigtramp_r+0x90>
   14b20:	11000060 	cmpeqi	r4,r2,1
   14b24:	2000071e 	bne	r4,zero,14b44 <__sigtramp_r+0x98>
   14b28:	18000015 	stw	zero,0(r3)
   14b2c:	8009883a 	mov	r4,r16
   14b30:	103ee83a 	callr	r2
   14b34:	0005883a 	mov	r2,zero
   14b38:	003ff206 	br	14b04 <__sigtramp_r+0x58>
   14b3c:	00800084 	movi	r2,2
   14b40:	003ff006 	br	14b04 <__sigtramp_r+0x58>
   14b44:	008000c4 	movi	r2,3
   14b48:	003fee06 	br	14b04 <__sigtramp_r+0x58>

00014b4c <raise>:
   14b4c:	00800074 	movhi	r2,1
   14b50:	200b883a 	mov	r5,r4
   14b54:	111e3e17 	ldw	r4,30968(r2)
   14b58:	00149f81 	jmpi	149f8 <_raise_r>

00014b5c <signal>:
   14b5c:	00800074 	movhi	r2,1
   14b60:	280d883a 	mov	r6,r5
   14b64:	200b883a 	mov	r5,r4
   14b68:	111e3e17 	ldw	r4,30968(r2)
   14b6c:	00149801 	jmpi	14980 <_signal_r>

00014b70 <_init_signal>:
   14b70:	00800074 	movhi	r2,1
   14b74:	111e3e17 	ldw	r4,30968(r2)
   14b78:	00149241 	jmpi	14924 <_init_signal_r>

00014b7c <__sigtramp>:
   14b7c:	00800074 	movhi	r2,1
   14b80:	200b883a 	mov	r5,r4
   14b84:	111e3e17 	ldw	r4,30968(r2)
   14b88:	0014aac1 	jmpi	14aac <__sigtramp_r>

00014b8c <_kill_r>:
   14b8c:	defffe04 	addi	sp,sp,-8
   14b90:	dc000015 	stw	r16,0(sp)
   14b94:	00800074 	movhi	r2,1
   14b98:	2021883a 	mov	r16,r4
   14b9c:	2809883a 	mov	r4,r5
   14ba0:	300b883a 	mov	r5,r6
   14ba4:	dfc00115 	stw	ra,4(sp)
   14ba8:	101fa815 	stw	zero,32416(r2)
   14bac:	00150600 	call	15060 <kill>
   14bb0:	10ffffd8 	cmpnei	r3,r2,-1
   14bb4:	1800041e 	bne	r3,zero,14bc8 <_kill_r+0x3c>
   14bb8:	00c00074 	movhi	r3,1
   14bbc:	18dfa817 	ldw	r3,32416(r3)
   14bc0:	18000126 	beq	r3,zero,14bc8 <_kill_r+0x3c>
   14bc4:	80c00015 	stw	r3,0(r16)
   14bc8:	dfc00117 	ldw	ra,4(sp)
   14bcc:	dc000017 	ldw	r16,0(sp)
   14bd0:	dec00204 	addi	sp,sp,8
   14bd4:	f800283a 	ret

00014bd8 <_getpid_r>:
   14bd8:	0014d6c1 	jmpi	14d6c <getpid>

00014bdc <strcmp>:
   14bdc:	20800003 	ldbu	r2,0(r4)
   14be0:	28c00003 	ldbu	r3,0(r5)
   14be4:	11803fcc 	andi	r6,r2,255
   14be8:	3180201c 	xori	r6,r6,128
   14bec:	31bfe004 	addi	r6,r6,-128
   14bf0:	30000426 	beq	r6,zero,14c04 <strcmp+0x28>
   14bf4:	19c03fcc 	andi	r7,r3,255
   14bf8:	39c0201c 	xori	r7,r7,128
   14bfc:	39ffe004 	addi	r7,r7,-128
   14c00:	31c00426 	beq	r6,r7,14c14 <strcmp+0x38>
   14c04:	18c03fcc 	andi	r3,r3,255
   14c08:	10803fcc 	andi	r2,r2,255
   14c0c:	10c5c83a 	sub	r2,r2,r3
   14c10:	f800283a 	ret
   14c14:	21000044 	addi	r4,r4,1
   14c18:	29400044 	addi	r5,r5,1
   14c1c:	003fef06 	br	14bdc <strcmp>

00014c20 <strlen>:
   14c20:	2005883a 	mov	r2,r4
   14c24:	10c00007 	ldb	r3,0(r2)
   14c28:	1800021e 	bne	r3,zero,14c34 <strlen+0x14>
   14c2c:	1105c83a 	sub	r2,r2,r4
   14c30:	f800283a 	ret
   14c34:	10800044 	addi	r2,r2,1
   14c38:	003ffa06 	br	14c24 <strlen+0x4>

00014c3c <__sfvwrite_small_dev>:
   14c3c:	2880000b 	ldhu	r2,0(r5)
   14c40:	1080020c 	andi	r2,r2,8
   14c44:	10002526 	beq	r2,zero,14cdc <__sfvwrite_small_dev+0xa0>
   14c48:	2880008f 	ldh	r2,2(r5)
   14c4c:	defffb04 	addi	sp,sp,-20
   14c50:	dcc00315 	stw	r19,12(sp)
   14c54:	dc800215 	stw	r18,8(sp)
   14c58:	dc400115 	stw	r17,4(sp)
   14c5c:	dc000015 	stw	r16,0(sp)
   14c60:	dfc00415 	stw	ra,16(sp)
   14c64:	2027883a 	mov	r19,r4
   14c68:	2821883a 	mov	r16,r5
   14c6c:	3025883a 	mov	r18,r6
   14c70:	3823883a 	mov	r17,r7
   14c74:	1000100e 	bge	r2,zero,14cb8 <__sfvwrite_small_dev+0x7c>
   14c78:	8080000b 	ldhu	r2,0(r16)
   14c7c:	10801014 	ori	r2,r2,64
   14c80:	8080000d 	sth	r2,0(r16)
   14c84:	00bfffc4 	movi	r2,-1
   14c88:	00000d06 	br	14cc0 <__sfvwrite_small_dev+0x84>
   14c8c:	88810050 	cmplti	r2,r17,1025
   14c90:	880f883a 	mov	r7,r17
   14c94:	1000011e 	bne	r2,zero,14c9c <__sfvwrite_small_dev+0x60>
   14c98:	01c10004 	movi	r7,1024
   14c9c:	8140008f 	ldh	r5,2(r16)
   14ca0:	900d883a 	mov	r6,r18
   14ca4:	9809883a 	mov	r4,r19
   14ca8:	0014ce40 	call	14ce4 <_write_r>
   14cac:	00bff20e 	bge	zero,r2,14c78 <__sfvwrite_small_dev+0x3c>
   14cb0:	88a3c83a 	sub	r17,r17,r2
   14cb4:	90a5883a 	add	r18,r18,r2
   14cb8:	047ff416 	blt	zero,r17,14c8c <__sfvwrite_small_dev+0x50>
   14cbc:	0005883a 	mov	r2,zero
   14cc0:	dfc00417 	ldw	ra,16(sp)
   14cc4:	dcc00317 	ldw	r19,12(sp)
   14cc8:	dc800217 	ldw	r18,8(sp)
   14ccc:	dc400117 	ldw	r17,4(sp)
   14cd0:	dc000017 	ldw	r16,0(sp)
   14cd4:	dec00504 	addi	sp,sp,20
   14cd8:	f800283a 	ret
   14cdc:	00bfffc4 	movi	r2,-1
   14ce0:	f800283a 	ret

00014ce4 <_write_r>:
   14ce4:	defffe04 	addi	sp,sp,-8
   14ce8:	dc000015 	stw	r16,0(sp)
   14cec:	00800074 	movhi	r2,1
   14cf0:	2021883a 	mov	r16,r4
   14cf4:	2809883a 	mov	r4,r5
   14cf8:	300b883a 	mov	r5,r6
   14cfc:	380d883a 	mov	r6,r7
   14d00:	dfc00115 	stw	ra,4(sp)
   14d04:	101fa815 	stw	zero,32416(r2)
   14d08:	00154300 	call	15430 <write>
   14d0c:	10ffffd8 	cmpnei	r3,r2,-1
   14d10:	1800041e 	bne	r3,zero,14d24 <_write_r+0x40>
   14d14:	00c00074 	movhi	r3,1
   14d18:	18dfa817 	ldw	r3,32416(r3)
   14d1c:	18000126 	beq	r3,zero,14d24 <_write_r+0x40>
   14d20:	80c00015 	stw	r3,0(r16)
   14d24:	dfc00117 	ldw	ra,4(sp)
   14d28:	dc000017 	ldw	r16,0(sp)
   14d2c:	dec00204 	addi	sp,sp,8
   14d30:	f800283a 	ret

00014d34 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   14d34:	defffd04 	addi	sp,sp,-12
   14d38:	df000215 	stw	fp,8(sp)
   14d3c:	df000204 	addi	fp,sp,8
   14d40:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   14d44:	0001883a 	nop
   14d48:	e0bffe17 	ldw	r2,-8(fp)
   14d4c:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   14d50:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   14d54:	10000226 	beq	r2,zero,14d60 <_exit+0x2c>
    ALT_SIM_FAIL();
   14d58:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   14d5c:	00000106 	br	14d64 <_exit+0x30>
    ALT_SIM_PASS();
   14d60:	002af0b0 	cmpltui	zero,zero,43970
}
   14d64:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   14d68:	003fff06 	br	14d68 <_exit+0x34>

00014d6c <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   14d6c:	deffff04 	addi	sp,sp,-4
   14d70:	df000015 	stw	fp,0(sp)
   14d74:	d839883a 	mov	fp,sp
  return 0;
   14d78:	0005883a 	mov	r2,zero
}
   14d7c:	e037883a 	mov	sp,fp
   14d80:	df000017 	ldw	fp,0(sp)
   14d84:	dec00104 	addi	sp,sp,4
   14d88:	f800283a 	ret

00014d8c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14d8c:	defff904 	addi	sp,sp,-28
   14d90:	dfc00615 	stw	ra,24(sp)
   14d94:	df000515 	stw	fp,20(sp)
   14d98:	df000504 	addi	fp,sp,20
   14d9c:	e13fff15 	stw	r4,-4(fp)
   14da0:	e17ffe15 	stw	r5,-8(fp)
   14da4:	e1bffd15 	stw	r6,-12(fp)
   14da8:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   14dac:	e0800217 	ldw	r2,8(fp)
   14db0:	d8800015 	stw	r2,0(sp)
   14db4:	e1fffc17 	ldw	r7,-16(fp)
   14db8:	e1bffd17 	ldw	r6,-12(fp)
   14dbc:	e17ffe17 	ldw	r5,-8(fp)
   14dc0:	e13fff17 	ldw	r4,-4(fp)
   14dc4:	0014f3c0 	call	14f3c <alt_iic_isr_register>
}  
   14dc8:	e037883a 	mov	sp,fp
   14dcc:	dfc00117 	ldw	ra,4(sp)
   14dd0:	df000017 	ldw	fp,0(sp)
   14dd4:	dec00204 	addi	sp,sp,8
   14dd8:	f800283a 	ret

00014ddc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   14ddc:	defff904 	addi	sp,sp,-28
   14de0:	df000615 	stw	fp,24(sp)
   14de4:	df000604 	addi	fp,sp,24
   14de8:	e13ffb15 	stw	r4,-20(fp)
   14dec:	e17ffa15 	stw	r5,-24(fp)
   14df0:	e0bffa17 	ldw	r2,-24(fp)
   14df4:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   14df8:	0005303a 	rdctl	r2,status
   14dfc:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14e00:	e0fffe17 	ldw	r3,-8(fp)
   14e04:	00bfff84 	movi	r2,-2
   14e08:	1884703a 	and	r2,r3,r2
   14e0c:	1001703a 	wrctl	status,r2
  return context;
   14e10:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   14e14:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   14e18:	00c00044 	movi	r3,1
   14e1c:	e0bfff17 	ldw	r2,-4(fp)
   14e20:	1884983a 	sll	r2,r3,r2
   14e24:	1007883a 	mov	r3,r2
   14e28:	d0a1fc17 	ldw	r2,-30736(gp)
   14e2c:	1884b03a 	or	r2,r3,r2
   14e30:	d0a1fc15 	stw	r2,-30736(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14e34:	d0a1fc17 	ldw	r2,-30736(gp)
   14e38:	100170fa 	wrctl	ienable,r2
   14e3c:	e0bffd17 	ldw	r2,-12(fp)
   14e40:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   14e44:	e0bffc17 	ldw	r2,-16(fp)
   14e48:	1001703a 	wrctl	status,r2
}
   14e4c:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
   14e50:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   14e54:	e037883a 	mov	sp,fp
   14e58:	df000017 	ldw	fp,0(sp)
   14e5c:	dec00104 	addi	sp,sp,4
   14e60:	f800283a 	ret

00014e64 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   14e64:	defff904 	addi	sp,sp,-28
   14e68:	df000615 	stw	fp,24(sp)
   14e6c:	df000604 	addi	fp,sp,24
   14e70:	e13ffb15 	stw	r4,-20(fp)
   14e74:	e17ffa15 	stw	r5,-24(fp)
   14e78:	e0bffa17 	ldw	r2,-24(fp)
   14e7c:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   14e80:	0005303a 	rdctl	r2,status
   14e84:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14e88:	e0fffe17 	ldw	r3,-8(fp)
   14e8c:	00bfff84 	movi	r2,-2
   14e90:	1884703a 	and	r2,r3,r2
   14e94:	1001703a 	wrctl	status,r2
  return context;
   14e98:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
   14e9c:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
   14ea0:	00c00044 	movi	r3,1
   14ea4:	e0bfff17 	ldw	r2,-4(fp)
   14ea8:	1884983a 	sll	r2,r3,r2
   14eac:	0084303a 	nor	r2,zero,r2
   14eb0:	1007883a 	mov	r3,r2
   14eb4:	d0a1fc17 	ldw	r2,-30736(gp)
   14eb8:	1884703a 	and	r2,r3,r2
   14ebc:	d0a1fc15 	stw	r2,-30736(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14ec0:	d0a1fc17 	ldw	r2,-30736(gp)
   14ec4:	100170fa 	wrctl	ienable,r2
   14ec8:	e0bffd17 	ldw	r2,-12(fp)
   14ecc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   14ed0:	e0bffc17 	ldw	r2,-16(fp)
   14ed4:	1001703a 	wrctl	status,r2
}
   14ed8:	0001883a 	nop
  return 0;
   14edc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   14ee0:	e037883a 	mov	sp,fp
   14ee4:	df000017 	ldw	fp,0(sp)
   14ee8:	dec00104 	addi	sp,sp,4
   14eec:	f800283a 	ret

00014ef0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   14ef0:	defffc04 	addi	sp,sp,-16
   14ef4:	df000315 	stw	fp,12(sp)
   14ef8:	df000304 	addi	fp,sp,12
   14efc:	e13ffe15 	stw	r4,-8(fp)
   14f00:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   14f04:	000530fa 	rdctl	r2,ienable
   14f08:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   14f0c:	00c00044 	movi	r3,1
   14f10:	e0bffd17 	ldw	r2,-12(fp)
   14f14:	1884983a 	sll	r2,r3,r2
   14f18:	1007883a 	mov	r3,r2
   14f1c:	e0bfff17 	ldw	r2,-4(fp)
   14f20:	1884703a 	and	r2,r3,r2
   14f24:	1004c03a 	cmpne	r2,r2,zero
   14f28:	10803fcc 	andi	r2,r2,255
}
   14f2c:	e037883a 	mov	sp,fp
   14f30:	df000017 	ldw	fp,0(sp)
   14f34:	dec00104 	addi	sp,sp,4
   14f38:	f800283a 	ret

00014f3c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14f3c:	defff504 	addi	sp,sp,-44
   14f40:	dfc00a15 	stw	ra,40(sp)
   14f44:	df000915 	stw	fp,36(sp)
   14f48:	df000904 	addi	fp,sp,36
   14f4c:	e13ffa15 	stw	r4,-24(fp)
   14f50:	e17ff915 	stw	r5,-28(fp)
   14f54:	e1bff815 	stw	r6,-32(fp)
   14f58:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
   14f5c:	00bffa84 	movi	r2,-22
   14f60:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   14f64:	e0bff917 	ldw	r2,-28(fp)
   14f68:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   14f6c:	e0bffe17 	ldw	r2,-8(fp)
   14f70:	10800808 	cmpgei	r2,r2,32
   14f74:	1000251e 	bne	r2,zero,1500c <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
   14f78:	0005303a 	rdctl	r2,status
   14f7c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14f80:	e0fffc17 	ldw	r3,-16(fp)
   14f84:	00bfff84 	movi	r2,-2
   14f88:	1884703a 	and	r2,r3,r2
   14f8c:	1001703a 	wrctl	status,r2
  return context;
   14f90:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   14f94:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
   14f98:	e0bffe17 	ldw	r2,-8(fp)
   14f9c:	100890fa 	slli	r4,r2,3
   14fa0:	e0fff817 	ldw	r3,-32(fp)
   14fa4:	00800074 	movhi	r2,1
   14fa8:	2085883a 	add	r2,r4,r2
   14fac:	10dfc015 	stw	r3,32512(r2)
    alt_irq[id].context = isr_context;
   14fb0:	e0bffe17 	ldw	r2,-8(fp)
   14fb4:	100890fa 	slli	r4,r2,3
   14fb8:	e0fff717 	ldw	r3,-36(fp)
   14fbc:	00800074 	movhi	r2,1
   14fc0:	2085883a 	add	r2,r4,r2
   14fc4:	10dfc115 	stw	r3,32516(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   14fc8:	e0bff817 	ldw	r2,-32(fp)
   14fcc:	10000526 	beq	r2,zero,14fe4 <alt_iic_isr_register+0xa8>
   14fd0:	e0bffe17 	ldw	r2,-8(fp)
   14fd4:	100b883a 	mov	r5,r2
   14fd8:	e13ffa17 	ldw	r4,-24(fp)
   14fdc:	0014ddc0 	call	14ddc <alt_ic_irq_enable>
   14fe0:	00000406 	br	14ff4 <alt_iic_isr_register+0xb8>
   14fe4:	e0bffe17 	ldw	r2,-8(fp)
   14fe8:	100b883a 	mov	r5,r2
   14fec:	e13ffa17 	ldw	r4,-24(fp)
   14ff0:	0014e640 	call	14e64 <alt_ic_irq_disable>
   14ff4:	e0bfff15 	stw	r2,-4(fp)
   14ff8:	e0bffd17 	ldw	r2,-12(fp)
   14ffc:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   15000:	e0bffb17 	ldw	r2,-20(fp)
   15004:	1001703a 	wrctl	status,r2
}
   15008:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
   1500c:	e0bfff17 	ldw	r2,-4(fp)
}
   15010:	e037883a 	mov	sp,fp
   15014:	dfc00117 	ldw	ra,4(sp)
   15018:	df000017 	ldw	fp,0(sp)
   1501c:	dec00204 	addi	sp,sp,8
   15020:	f800283a 	ret

00015024 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15024:	defffe04 	addi	sp,sp,-8
   15028:	dfc00115 	stw	ra,4(sp)
   1502c:	df000015 	stw	fp,0(sp)
   15030:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15034:	d0a09917 	ldw	r2,-32156(gp)
   15038:	10000326 	beq	r2,zero,15048 <alt_get_errno+0x24>
   1503c:	d0a09917 	ldw	r2,-32156(gp)
   15040:	103ee83a 	callr	r2
   15044:	00000106 	br	1504c <alt_get_errno+0x28>
   15048:	d0a1fb04 	addi	r2,gp,-30740
}
   1504c:	e037883a 	mov	sp,fp
   15050:	dfc00117 	ldw	ra,4(sp)
   15054:	df000017 	ldw	fp,0(sp)
   15058:	dec00204 	addi	sp,sp,8
   1505c:	f800283a 	ret

00015060 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   15060:	defffb04 	addi	sp,sp,-20
   15064:	dfc00415 	stw	ra,16(sp)
   15068:	df000315 	stw	fp,12(sp)
   1506c:	df000304 	addi	fp,sp,12
   15070:	e13ffe15 	stw	r4,-8(fp)
   15074:	e17ffd15 	stw	r5,-12(fp)
  int status = 0;
   15078:	e03fff15 	stw	zero,-4(fp)

  if (pid <= 0)
   1507c:	e0bffe17 	ldw	r2,-8(fp)
   15080:	00802e16 	blt	zero,r2,1513c <kill+0xdc>
   15084:	e0bffd17 	ldw	r2,-12(fp)
   15088:	10800828 	cmpgeui	r2,r2,32
   1508c:	1000281e 	bne	r2,zero,15130 <kill+0xd0>
   15090:	e0bffd17 	ldw	r2,-12(fp)
   15094:	100690ba 	slli	r3,r2,2
   15098:	00800074 	movhi	r2,1
   1509c:	1885883a 	add	r2,r3,r2
   150a0:	10942a17 	ldw	r2,20648(r2)
   150a4:	1000683a 	jmp	r2
   150a8:	00015150 	cmplti	zero,zero,1349
   150ac:	00015130 	cmpltui	zero,zero,1348
   150b0:	00015130 	cmpltui	zero,zero,1348
   150b4:	00015128 	cmpgeui	zero,zero,1348
   150b8:	00015128 	cmpgeui	zero,zero,1348
   150bc:	00015128 	cmpgeui	zero,zero,1348
   150c0:	00015128 	cmpgeui	zero,zero,1348
   150c4:	00015130 	cmpltui	zero,zero,1348
   150c8:	00015128 	cmpgeui	zero,zero,1348
   150cc:	00015128 	cmpgeui	zero,zero,1348
   150d0:	00015128 	cmpgeui	zero,zero,1348
   150d4:	00015128 	cmpgeui	zero,zero,1348
   150d8:	00015128 	cmpgeui	zero,zero,1348
   150dc:	00015128 	cmpgeui	zero,zero,1348
   150e0:	00015128 	cmpgeui	zero,zero,1348
   150e4:	00015128 	cmpgeui	zero,zero,1348
   150e8:	00015150 	cmplti	zero,zero,1349
   150ec:	00015130 	cmpltui	zero,zero,1348
   150f0:	00015130 	cmpltui	zero,zero,1348
   150f4:	00015130 	cmpltui	zero,zero,1348
   150f8:	00015150 	cmplti	zero,zero,1349
   150fc:	00015130 	cmpltui	zero,zero,1348
   15100:	00015130 	cmpltui	zero,zero,1348
   15104:	00015128 	cmpgeui	zero,zero,1348
   15108:	00015128 	cmpgeui	zero,zero,1348
   1510c:	00015128 	cmpgeui	zero,zero,1348
   15110:	00015128 	cmpgeui	zero,zero,1348
   15114:	00015128 	cmpgeui	zero,zero,1348
   15118:	00015130 	cmpltui	zero,zero,1348
   1511c:	00015130 	cmpltui	zero,zero,1348
   15120:	00015128 	cmpgeui	zero,zero,1348
   15124:	00015128 	cmpgeui	zero,zero,1348
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   15128:	0009883a 	mov	r4,zero
   1512c:	0014d340 	call	14d34 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   15130:	00800584 	movi	r2,22
   15134:	e0bfff15 	stw	r2,-4(fp)
   15138:	00000606 	br	15154 <kill+0xf4>
    }
  }

  else if (pid > 0)
   1513c:	e0bffe17 	ldw	r2,-8(fp)
   15140:	0080040e 	bge	zero,r2,15154 <kill+0xf4>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   15144:	008000c4 	movi	r2,3
   15148:	e0bfff15 	stw	r2,-4(fp)
   1514c:	00000106 	br	15154 <kill+0xf4>
      break;
   15150:	0001883a 	nop
  }

  if (status)
   15154:	e0bfff17 	ldw	r2,-4(fp)
   15158:	10000626 	beq	r2,zero,15174 <kill+0x114>
  {
    ALT_ERRNO = status;
   1515c:	00150240 	call	15024 <alt_get_errno>
   15160:	1007883a 	mov	r3,r2
   15164:	e0bfff17 	ldw	r2,-4(fp)
   15168:	18800015 	stw	r2,0(r3)
    return -1;
   1516c:	00bfffc4 	movi	r2,-1
   15170:	00000106 	br	15178 <kill+0x118>
  }

  return 0;
   15174:	0005883a 	mov	r2,zero
}
   15178:	e037883a 	mov	sp,fp
   1517c:	dfc00117 	ldw	ra,4(sp)
   15180:	df000017 	ldw	fp,0(sp)
   15184:	dec00204 	addi	sp,sp,8
   15188:	f800283a 	ret

0001518c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1518c:	defffc04 	addi	sp,sp,-16
   15190:	df000315 	stw	fp,12(sp)
   15194:	df000304 	addi	fp,sp,12
   15198:	e13fff15 	stw	r4,-4(fp)
   1519c:	e17ffe15 	stw	r5,-8(fp)
   151a0:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
   151a4:	e0fffe17 	ldw	r3,-8(fp)
   151a8:	e0bfff17 	ldw	r2,-4(fp)
   151ac:	18800c26 	beq	r3,r2,151e0 <alt_load_section+0x54>
  {
    while( to != end )
   151b0:	00000806 	br	151d4 <alt_load_section+0x48>
    {
      *to++ = *from++;
   151b4:	e0ffff17 	ldw	r3,-4(fp)
   151b8:	18800104 	addi	r2,r3,4
   151bc:	e0bfff15 	stw	r2,-4(fp)
   151c0:	e0bffe17 	ldw	r2,-8(fp)
   151c4:	11000104 	addi	r4,r2,4
   151c8:	e13ffe15 	stw	r4,-8(fp)
   151cc:	18c00017 	ldw	r3,0(r3)
   151d0:	10c00015 	stw	r3,0(r2)
    while( to != end )
   151d4:	e0fffe17 	ldw	r3,-8(fp)
   151d8:	e0bffd17 	ldw	r2,-12(fp)
   151dc:	18bff51e 	bne	r3,r2,151b4 <alt_load_section+0x28>
    }
  }
}
   151e0:	0001883a 	nop
   151e4:	e037883a 	mov	sp,fp
   151e8:	df000017 	ldw	fp,0(sp)
   151ec:	dec00104 	addi	sp,sp,4
   151f0:	f800283a 	ret

000151f4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   151f4:	defffe04 	addi	sp,sp,-8
   151f8:	dfc00115 	stw	ra,4(sp)
   151fc:	df000015 	stw	fp,0(sp)
   15200:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   15204:	01800074 	movhi	r6,1
   15208:	319e4904 	addi	r6,r6,31012
   1520c:	01400074 	movhi	r5,1
   15210:	295cf404 	addi	r5,r5,29648
   15214:	01000074 	movhi	r4,1
   15218:	211e4904 	addi	r4,r4,31012
   1521c:	001518c0 	call	1518c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   15220:	01800074 	movhi	r6,1
   15224:	31808904 	addi	r6,r6,548
   15228:	01400074 	movhi	r5,1
   1522c:	29400804 	addi	r5,r5,32
   15230:	01000074 	movhi	r4,1
   15234:	21000804 	addi	r4,r4,32
   15238:	001518c0 	call	1518c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1523c:	01800074 	movhi	r6,1
   15240:	319cf404 	addi	r6,r6,29648
   15244:	01400074 	movhi	r5,1
   15248:	295ad204 	addi	r5,r5,27464
   1524c:	01000074 	movhi	r4,1
   15250:	211ad204 	addi	r4,r4,27464
   15254:	001518c0 	call	1518c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   15258:	0015d340 	call	15d34 <alt_dcache_flush_all>
  alt_icache_flush_all();
   1525c:	0015f2c0 	call	15f2c <alt_icache_flush_all>
}
   15260:	0001883a 	nop
   15264:	e037883a 	mov	sp,fp
   15268:	dfc00117 	ldw	ra,4(sp)
   1526c:	df000017 	ldw	fp,0(sp)
   15270:	dec00204 	addi	sp,sp,8
   15274:	f800283a 	ret

00015278 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   15278:	defffd04 	addi	sp,sp,-12
   1527c:	dfc00215 	stw	ra,8(sp)
   15280:	df000115 	stw	fp,4(sp)
   15284:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   15288:	0009883a 	mov	r4,zero
   1528c:	00155680 	call	15568 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   15290:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   15294:	00155a40 	call	155a4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   15298:	01800074 	movhi	r6,1
   1529c:	319ce604 	addi	r6,r6,29592
   152a0:	01400074 	movhi	r5,1
   152a4:	295ce604 	addi	r5,r5,29592
   152a8:	01000074 	movhi	r4,1
   152ac:	211ce604 	addi	r4,r4,29592
   152b0:	00160b80 	call	160b8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   152b4:	0015e640 	call	15e64 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   152b8:	01000074 	movhi	r4,1
   152bc:	2117b204 	addi	r4,r4,24264
   152c0:	001683c0 	call	1683c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   152c4:	d0a1fd17 	ldw	r2,-30732(gp)
   152c8:	d0e1fe17 	ldw	r3,-30728(gp)
   152cc:	d121ff17 	ldw	r4,-30724(gp)
   152d0:	200d883a 	mov	r6,r4
   152d4:	180b883a 	mov	r5,r3
   152d8:	1009883a 	mov	r4,r2
   152dc:	001030c0 	call	1030c <main>
   152e0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   152e4:	01000044 	movi	r4,1
   152e8:	0015c580 	call	15c58 <close>
  exit (result);
   152ec:	e13fff17 	ldw	r4,-4(fp)
   152f0:	00168500 	call	16850 <exit>

000152f4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   152f4:	defffe04 	addi	sp,sp,-8
   152f8:	df000115 	stw	fp,4(sp)
   152fc:	df000104 	addi	fp,sp,4
   15300:	e13fff15 	stw	r4,-4(fp)
}
   15304:	0001883a 	nop
   15308:	e037883a 	mov	sp,fp
   1530c:	df000017 	ldw	fp,0(sp)
   15310:	dec00104 	addi	sp,sp,4
   15314:	f800283a 	ret

00015318 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   15318:	defffe04 	addi	sp,sp,-8
   1531c:	df000115 	stw	fp,4(sp)
   15320:	df000104 	addi	fp,sp,4
   15324:	e13fff15 	stw	r4,-4(fp)
}
   15328:	0001883a 	nop
   1532c:	e037883a 	mov	sp,fp
   15330:	df000017 	ldw	fp,0(sp)
   15334:	dec00104 	addi	sp,sp,4
   15338:	f800283a 	ret

0001533c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1533c:	defff904 	addi	sp,sp,-28
   15340:	df000615 	stw	fp,24(sp)
   15344:	df000604 	addi	fp,sp,24
   15348:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
   1534c:	0005303a 	rdctl	r2,status
   15350:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15354:	e0fffd17 	ldw	r3,-12(fp)
   15358:	00bfff84 	movi	r2,-2
   1535c:	1884703a 	and	r2,r3,r2
   15360:	1001703a 	wrctl	status,r2
  return context;
   15364:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   15368:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1536c:	d0a09317 	ldw	r2,-32180(gp)
   15370:	10c000c4 	addi	r3,r2,3
   15374:	00bfff04 	movi	r2,-4
   15378:	1884703a 	and	r2,r3,r2
   1537c:	d0a09315 	stw	r2,-32180(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   15380:	d0e09317 	ldw	r3,-32180(gp)
   15384:	e0bffa17 	ldw	r2,-24(fp)
   15388:	1887883a 	add	r3,r3,r2
   1538c:	008000b4 	movhi	r2,2
   15390:	10a80004 	addi	r2,r2,-24576
   15394:	10c0072e 	bgeu	r2,r3,153b4 <sbrk+0x78>
   15398:	e0bfff17 	ldw	r2,-4(fp)
   1539c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   153a0:	e0bffc17 	ldw	r2,-16(fp)
   153a4:	1001703a 	wrctl	status,r2
}
   153a8:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   153ac:	00bfffc4 	movi	r2,-1
   153b0:	00000c06 	br	153e4 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   153b4:	d0a09317 	ldw	r2,-32180(gp)
   153b8:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
   153bc:	d0e09317 	ldw	r3,-32180(gp)
   153c0:	e0bffa17 	ldw	r2,-24(fp)
   153c4:	1885883a 	add	r2,r3,r2
   153c8:	d0a09315 	stw	r2,-32180(gp)
   153cc:	e0bfff17 	ldw	r2,-4(fp)
   153d0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   153d4:	e0bffb17 	ldw	r2,-20(fp)
   153d8:	1001703a 	wrctl	status,r2
}
   153dc:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   153e0:	e0bffe17 	ldw	r2,-8(fp)
} 
   153e4:	e037883a 	mov	sp,fp
   153e8:	df000017 	ldw	fp,0(sp)
   153ec:	dec00104 	addi	sp,sp,4
   153f0:	f800283a 	ret

000153f4 <alt_get_errno>:
{
   153f4:	defffe04 	addi	sp,sp,-8
   153f8:	dfc00115 	stw	ra,4(sp)
   153fc:	df000015 	stw	fp,0(sp)
   15400:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15404:	d0a09917 	ldw	r2,-32156(gp)
   15408:	10000326 	beq	r2,zero,15418 <alt_get_errno+0x24>
   1540c:	d0a09917 	ldw	r2,-32156(gp)
   15410:	103ee83a 	callr	r2
   15414:	00000106 	br	1541c <alt_get_errno+0x28>
   15418:	d0a1fb04 	addi	r2,gp,-30740
}
   1541c:	e037883a 	mov	sp,fp
   15420:	dfc00117 	ldw	ra,4(sp)
   15424:	df000017 	ldw	fp,0(sp)
   15428:	dec00204 	addi	sp,sp,8
   1542c:	f800283a 	ret

00015430 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   15430:	defff904 	addi	sp,sp,-28
   15434:	dfc00615 	stw	ra,24(sp)
   15438:	df000515 	stw	fp,20(sp)
   1543c:	df000504 	addi	fp,sp,20
   15440:	e13ffd15 	stw	r4,-12(fp)
   15444:	e17ffc15 	stw	r5,-16(fp)
   15448:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1544c:	e0bffd17 	ldw	r2,-12(fp)
   15450:	10000916 	blt	r2,zero,15478 <write+0x48>
   15454:	e0fffd17 	ldw	r3,-12(fp)
   15458:	1805883a 	mov	r2,r3
   1545c:	1085883a 	add	r2,r2,r2
   15460:	10c5883a 	add	r2,r2,r3
   15464:	100490ba 	slli	r2,r2,2
   15468:	00c00074 	movhi	r3,1
   1546c:	18dd4d04 	addi	r3,r3,30004
   15470:	10c5883a 	add	r2,r2,r3
   15474:	00000106 	br	1547c <write+0x4c>
   15478:	0005883a 	mov	r2,zero
   1547c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   15480:	e0bfff17 	ldw	r2,-4(fp)
   15484:	10002126 	beq	r2,zero,1550c <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   15488:	e0bfff17 	ldw	r2,-4(fp)
   1548c:	10800217 	ldw	r2,8(r2)
   15490:	108000cc 	andi	r2,r2,3
   15494:	10001826 	beq	r2,zero,154f8 <write+0xc8>
   15498:	e0bfff17 	ldw	r2,-4(fp)
   1549c:	10800017 	ldw	r2,0(r2)
   154a0:	10800617 	ldw	r2,24(r2)
   154a4:	10001426 	beq	r2,zero,154f8 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   154a8:	e0bfff17 	ldw	r2,-4(fp)
   154ac:	10800017 	ldw	r2,0(r2)
   154b0:	10800617 	ldw	r2,24(r2)
   154b4:	e0fffb17 	ldw	r3,-20(fp)
   154b8:	180d883a 	mov	r6,r3
   154bc:	e17ffc17 	ldw	r5,-16(fp)
   154c0:	e13fff17 	ldw	r4,-4(fp)
   154c4:	103ee83a 	callr	r2
   154c8:	e0bffe15 	stw	r2,-8(fp)
   154cc:	e0bffe17 	ldw	r2,-8(fp)
   154d0:	1000070e 	bge	r2,zero,154f0 <write+0xc0>
      {
        ALT_ERRNO = -rval;
   154d4:	00153f40 	call	153f4 <alt_get_errno>
   154d8:	1007883a 	mov	r3,r2
   154dc:	e0bffe17 	ldw	r2,-8(fp)
   154e0:	0085c83a 	sub	r2,zero,r2
   154e4:	18800015 	stw	r2,0(r3)
        return -1;
   154e8:	00bfffc4 	movi	r2,-1
   154ec:	00000c06 	br	15520 <write+0xf0>
      }
      return rval;
   154f0:	e0bffe17 	ldw	r2,-8(fp)
   154f4:	00000a06 	br	15520 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
   154f8:	00153f40 	call	153f4 <alt_get_errno>
   154fc:	1007883a 	mov	r3,r2
   15500:	00800344 	movi	r2,13
   15504:	18800015 	stw	r2,0(r3)
   15508:	00000406 	br	1551c <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1550c:	00153f40 	call	153f4 <alt_get_errno>
   15510:	1007883a 	mov	r3,r2
   15514:	00801444 	movi	r2,81
   15518:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1551c:	00bfffc4 	movi	r2,-1
}
   15520:	e037883a 	mov	sp,fp
   15524:	dfc00117 	ldw	ra,4(sp)
   15528:	df000017 	ldw	fp,0(sp)
   1552c:	dec00204 	addi	sp,sp,8
   15530:	f800283a 	ret

00015534 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   15534:	defffd04 	addi	sp,sp,-12
   15538:	dfc00215 	stw	ra,8(sp)
   1553c:	df000115 	stw	fp,4(sp)
   15540:	df000104 	addi	fp,sp,4
   15544:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   15548:	d1609604 	addi	r5,gp,-32168
   1554c:	e13fff17 	ldw	r4,-4(fp)
   15550:	0015dbc0 	call	15dbc <alt_dev_llist_insert>
}
   15554:	e037883a 	mov	sp,fp
   15558:	dfc00117 	ldw	ra,4(sp)
   1555c:	df000017 	ldw	fp,0(sp)
   15560:	dec00204 	addi	sp,sp,8
   15564:	f800283a 	ret

00015568 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   15568:	defffd04 	addi	sp,sp,-12
   1556c:	dfc00215 	stw	ra,8(sp)
   15570:	df000115 	stw	fp,4(sp)
   15574:	df000104 	addi	fp,sp,4
   15578:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   1557c:	00165c80 	call	165c8 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   15580:	00800044 	movi	r2,1
   15584:	1001703a 	wrctl	status,r2
}
   15588:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
   1558c:	0001883a 	nop
   15590:	e037883a 	mov	sp,fp
   15594:	dfc00117 	ldw	ra,4(sp)
   15598:	df000017 	ldw	fp,0(sp)
   1559c:	dec00204 	addi	sp,sp,8
   155a0:	f800283a 	ret

000155a4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   155a4:	defffe04 	addi	sp,sp,-8
   155a8:	dfc00115 	stw	ra,4(sp)
   155ac:	df000015 	stw	fp,0(sp)
   155b0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
   155b4:	01c0fa04 	movi	r7,1000
   155b8:	01800044 	movi	r6,1
   155bc:	000b883a 	mov	r5,zero
   155c0:	010000b4 	movhi	r4,2
   155c4:	210a0804 	addi	r4,r4,10272
   155c8:	00158bc0 	call	158bc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   155cc:	01000074 	movhi	r4,1
   155d0:	211d2d04 	addi	r4,r4,29876
   155d4:	00155340 	call	15534 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   155d8:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
   155dc:	01000074 	movhi	r4,1
   155e0:	211d3804 	addi	r4,r4,29920
   155e4:	00155340 	call	15534 <alt_dev_reg>
}
   155e8:	0001883a 	nop
   155ec:	e037883a 	mov	sp,fp
   155f0:	dfc00117 	ldw	ra,4(sp)
   155f4:	df000017 	ldw	fp,0(sp)
   155f8:	dec00204 	addi	sp,sp,8
   155fc:	f800283a 	ret

00015600 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   15600:	defffa04 	addi	sp,sp,-24
   15604:	dfc00515 	stw	ra,20(sp)
   15608:	df000415 	stw	fp,16(sp)
   1560c:	df000404 	addi	fp,sp,16
   15610:	e13ffe15 	stw	r4,-8(fp)
   15614:	e17ffd15 	stw	r5,-12(fp)
   15618:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1561c:	e0bffe17 	ldw	r2,-8(fp)
   15620:	10800017 	ldw	r2,0(r2)
   15624:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   15628:	e0bfff17 	ldw	r2,-4(fp)
   1562c:	10c00a04 	addi	r3,r2,40
   15630:	e0bffe17 	ldw	r2,-8(fp)
   15634:	10800217 	ldw	r2,8(r2)
   15638:	100f883a 	mov	r7,r2
   1563c:	e1bffc17 	ldw	r6,-16(fp)
   15640:	e17ffd17 	ldw	r5,-12(fp)
   15644:	1809883a 	mov	r4,r3
   15648:	00156c00 	call	156c0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1564c:	e037883a 	mov	sp,fp
   15650:	dfc00117 	ldw	ra,4(sp)
   15654:	df000017 	ldw	fp,0(sp)
   15658:	dec00204 	addi	sp,sp,8
   1565c:	f800283a 	ret

00015660 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   15660:	defffa04 	addi	sp,sp,-24
   15664:	dfc00515 	stw	ra,20(sp)
   15668:	df000415 	stw	fp,16(sp)
   1566c:	df000404 	addi	fp,sp,16
   15670:	e13ffe15 	stw	r4,-8(fp)
   15674:	e17ffd15 	stw	r5,-12(fp)
   15678:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1567c:	e0bffe17 	ldw	r2,-8(fp)
   15680:	10800017 	ldw	r2,0(r2)
   15684:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   15688:	e0bfff17 	ldw	r2,-4(fp)
   1568c:	10c00a04 	addi	r3,r2,40
   15690:	e0bffe17 	ldw	r2,-8(fp)
   15694:	10800217 	ldw	r2,8(r2)
   15698:	100f883a 	mov	r7,r2
   1569c:	e1bffc17 	ldw	r6,-16(fp)
   156a0:	e17ffd17 	ldw	r5,-12(fp)
   156a4:	1809883a 	mov	r4,r3
   156a8:	00157ac0 	call	157ac <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   156ac:	e037883a 	mov	sp,fp
   156b0:	dfc00117 	ldw	ra,4(sp)
   156b4:	df000017 	ldw	fp,0(sp)
   156b8:	dec00204 	addi	sp,sp,8
   156bc:	f800283a 	ret

000156c0 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   156c0:	defff704 	addi	sp,sp,-36
   156c4:	df000815 	stw	fp,32(sp)
   156c8:	df000804 	addi	fp,sp,32
   156cc:	e13ffb15 	stw	r4,-20(fp)
   156d0:	e17ffa15 	stw	r5,-24(fp)
   156d4:	e1bff915 	stw	r6,-28(fp)
   156d8:	e1fff815 	stw	r7,-32(fp)
  unsigned int base = sp->base;
   156dc:	e0bffb17 	ldw	r2,-20(fp)
   156e0:	10800017 	ldw	r2,0(r2)
   156e4:	e0bffe15 	stw	r2,-8(fp)

  char * ptr = buffer;
   156e8:	e0bffa17 	ldw	r2,-24(fp)
   156ec:	e0bfff15 	stw	r2,-4(fp)
  char * end = buffer + space;
   156f0:	e0bff917 	ldw	r2,-28(fp)
   156f4:	e0fffa17 	ldw	r3,-24(fp)
   156f8:	1885883a 	add	r2,r3,r2
   156fc:	e0bffd15 	stw	r2,-12(fp)

  while (ptr < end)
   15700:	00001206 	br	1574c <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   15704:	e0bffe17 	ldw	r2,-8(fp)
   15708:	10800037 	ldwio	r2,0(r2)
   1570c:	e0bffc15 	stw	r2,-16(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   15710:	e0bffc17 	ldw	r2,-16(fp)
   15714:	10a0000c 	andi	r2,r2,32768
   15718:	10000626 	beq	r2,zero,15734 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1571c:	e0bfff17 	ldw	r2,-4(fp)
   15720:	10c00044 	addi	r3,r2,1
   15724:	e0ffff15 	stw	r3,-4(fp)
   15728:	e0fffc17 	ldw	r3,-16(fp)
   1572c:	10c00005 	stb	r3,0(r2)
   15730:	00000606 	br	1574c <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   15734:	e0ffff17 	ldw	r3,-4(fp)
   15738:	e0bffa17 	ldw	r2,-24(fp)
   1573c:	1880071e 	bne	r3,r2,1575c <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   15740:	e0bff817 	ldw	r2,-32(fp)
   15744:	1090000c 	andi	r2,r2,16384
   15748:	1000061e 	bne	r2,zero,15764 <altera_avalon_jtag_uart_read+0xa4>
  while (ptr < end)
   1574c:	e0ffff17 	ldw	r3,-4(fp)
   15750:	e0bffd17 	ldw	r2,-12(fp)
   15754:	18bfeb36 	bltu	r3,r2,15704 <altera_avalon_jtag_uart_read+0x44>
   15758:	00000306 	br	15768 <altera_avalon_jtag_uart_read+0xa8>
      break;
   1575c:	0001883a 	nop
   15760:	00000106 	br	15768 <altera_avalon_jtag_uart_read+0xa8>
      break;   
   15764:	0001883a 	nop
    
  }

  if (ptr != buffer)
   15768:	e0ffff17 	ldw	r3,-4(fp)
   1576c:	e0bffa17 	ldw	r2,-24(fp)
   15770:	18800426 	beq	r3,r2,15784 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   15774:	e0ffff17 	ldw	r3,-4(fp)
   15778:	e0bffa17 	ldw	r2,-24(fp)
   1577c:	1885c83a 	sub	r2,r3,r2
   15780:	00000606 	br	1579c <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   15784:	e0bff817 	ldw	r2,-32(fp)
   15788:	1090000c 	andi	r2,r2,16384
   1578c:	10000226 	beq	r2,zero,15798 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   15790:	00bffd44 	movi	r2,-11
   15794:	00000106 	br	1579c <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   15798:	00bffec4 	movi	r2,-5
}
   1579c:	e037883a 	mov	sp,fp
   157a0:	df000017 	ldw	fp,0(sp)
   157a4:	dec00104 	addi	sp,sp,4
   157a8:	f800283a 	ret

000157ac <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   157ac:	defff904 	addi	sp,sp,-28
   157b0:	df000615 	stw	fp,24(sp)
   157b4:	df000604 	addi	fp,sp,24
   157b8:	e13ffd15 	stw	r4,-12(fp)
   157bc:	e17ffc15 	stw	r5,-16(fp)
   157c0:	e1bffb15 	stw	r6,-20(fp)
   157c4:	e1fffa15 	stw	r7,-24(fp)
  unsigned int base = sp->base;
   157c8:	e0bffd17 	ldw	r2,-12(fp)
   157cc:	10800017 	ldw	r2,0(r2)
   157d0:	e0bfff15 	stw	r2,-4(fp)

  const char * end = ptr + count;
   157d4:	e0bffb17 	ldw	r2,-20(fp)
   157d8:	e0fffc17 	ldw	r3,-16(fp)
   157dc:	1885883a 	add	r2,r3,r2
   157e0:	e0bffe15 	stw	r2,-8(fp)

  while (ptr < end)
   157e4:	00000e06 	br	15820 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   157e8:	e0bfff17 	ldw	r2,-4(fp)
   157ec:	10800104 	addi	r2,r2,4
   157f0:	10800037 	ldwio	r2,0(r2)
   157f4:	10bfffec 	andhi	r2,r2,65535
   157f8:	10000926 	beq	r2,zero,15820 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   157fc:	e0ffff17 	ldw	r3,-4(fp)
   15800:	e0bffc17 	ldw	r2,-16(fp)
   15804:	11000044 	addi	r4,r2,1
   15808:	e13ffc15 	stw	r4,-16(fp)
   1580c:	10800003 	ldbu	r2,0(r2)
   15810:	10803fcc 	andi	r2,r2,255
   15814:	1080201c 	xori	r2,r2,128
   15818:	10bfe004 	addi	r2,r2,-128
   1581c:	18800035 	stwio	r2,0(r3)
  while (ptr < end)
   15820:	e0fffc17 	ldw	r3,-16(fp)
   15824:	e0bffe17 	ldw	r2,-8(fp)
   15828:	18bfef36 	bltu	r3,r2,157e8 <altera_avalon_jtag_uart_write+0x3c>

  return count;
   1582c:	e0bffb17 	ldw	r2,-20(fp)
}
   15830:	e037883a 	mov	sp,fp
   15834:	df000017 	ldw	fp,0(sp)
   15838:	dec00104 	addi	sp,sp,4
   1583c:	f800283a 	ret

00015840 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   15840:	defffa04 	addi	sp,sp,-24
   15844:	dfc00515 	stw	ra,20(sp)
   15848:	df000415 	stw	fp,16(sp)
   1584c:	df000404 	addi	fp,sp,16
   15850:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   15854:	0007883a 	mov	r3,zero
   15858:	e0bffc17 	ldw	r2,-16(fp)
   1585c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   15860:	e0bffc17 	ldw	r2,-16(fp)
   15864:	10800104 	addi	r2,r2,4
   15868:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
   1586c:	0005303a 	rdctl	r2,status
   15870:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15874:	e0fffd17 	ldw	r3,-12(fp)
   15878:	00bfff84 	movi	r2,-2
   1587c:	1884703a 	and	r2,r3,r2
   15880:	1001703a 	wrctl	status,r2
  return context;
   15884:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   15888:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
   1588c:	00164c00 	call	164c0 <alt_tick>
   15890:	e0bfff17 	ldw	r2,-4(fp)
   15894:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   15898:	e0bffe17 	ldw	r2,-8(fp)
   1589c:	1001703a 	wrctl	status,r2
}
   158a0:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
   158a4:	0001883a 	nop
   158a8:	e037883a 	mov	sp,fp
   158ac:	dfc00117 	ldw	ra,4(sp)
   158b0:	df000017 	ldw	fp,0(sp)
   158b4:	dec00204 	addi	sp,sp,8
   158b8:	f800283a 	ret

000158bc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   158bc:	defff804 	addi	sp,sp,-32
   158c0:	dfc00715 	stw	ra,28(sp)
   158c4:	df000615 	stw	fp,24(sp)
   158c8:	df000604 	addi	fp,sp,24
   158cc:	e13ffe15 	stw	r4,-8(fp)
   158d0:	e17ffd15 	stw	r5,-12(fp)
   158d4:	e1bffc15 	stw	r6,-16(fp)
   158d8:	e1fffb15 	stw	r7,-20(fp)
   158dc:	e0bffb17 	ldw	r2,-20(fp)
   158e0:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   158e4:	d0a20117 	ldw	r2,-30716(gp)
   158e8:	1000031e 	bne	r2,zero,158f8 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
   158ec:	e0bfff17 	ldw	r2,-4(fp)
   158f0:	d0a20115 	stw	r2,-30716(gp)
    return 0;
   158f4:	00000106 	br	158fc <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
   158f8:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   158fc:	e0bffe17 	ldw	r2,-8(fp)
   15900:	10800104 	addi	r2,r2,4
   15904:	00c001c4 	movi	r3,7
   15908:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   1590c:	d8000015 	stw	zero,0(sp)
   15910:	e1fffe17 	ldw	r7,-8(fp)
   15914:	01800074 	movhi	r6,1
   15918:	31961004 	addi	r6,r6,22592
   1591c:	e17ffc17 	ldw	r5,-16(fp)
   15920:	e13ffd17 	ldw	r4,-12(fp)
   15924:	0014d8c0 	call	14d8c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   15928:	0001883a 	nop
   1592c:	e037883a 	mov	sp,fp
   15930:	dfc00117 	ldw	ra,4(sp)
   15934:	df000017 	ldw	fp,0(sp)
   15938:	dec00204 	addi	sp,sp,8
   1593c:	f800283a 	ret

00015940 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   15940:	defffa04 	addi	sp,sp,-24
   15944:	dfc00515 	stw	ra,20(sp)
   15948:	df000415 	stw	fp,16(sp)
   1594c:	df000404 	addi	fp,sp,16
   15950:	e13ffe15 	stw	r4,-8(fp)
   15954:	e17ffd15 	stw	r5,-12(fp)
   15958:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   1595c:	e0bffe17 	ldw	r2,-8(fp)
   15960:	10800017 	ldw	r2,0(r2)
   15964:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   15968:	e0bfff17 	ldw	r2,-4(fp)
   1596c:	10c00a04 	addi	r3,r2,40
   15970:	e0bffe17 	ldw	r2,-8(fp)
   15974:	10800217 	ldw	r2,8(r2)
   15978:	100f883a 	mov	r7,r2
   1597c:	e1bffc17 	ldw	r6,-16(fp)
   15980:	e17ffd17 	ldw	r5,-12(fp)
   15984:	1809883a 	mov	r4,r3
   15988:	0015a3c0 	call	15a3c <altera_avalon_uart_read>
      fd->fd_flags);
}
   1598c:	e037883a 	mov	sp,fp
   15990:	dfc00117 	ldw	ra,4(sp)
   15994:	df000017 	ldw	fp,0(sp)
   15998:	dec00204 	addi	sp,sp,8
   1599c:	f800283a 	ret

000159a0 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   159a0:	defffa04 	addi	sp,sp,-24
   159a4:	dfc00515 	stw	ra,20(sp)
   159a8:	df000415 	stw	fp,16(sp)
   159ac:	df000404 	addi	fp,sp,16
   159b0:	e13ffe15 	stw	r4,-8(fp)
   159b4:	e17ffd15 	stw	r5,-12(fp)
   159b8:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   159bc:	e0bffe17 	ldw	r2,-8(fp)
   159c0:	10800017 	ldw	r2,0(r2)
   159c4:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   159c8:	e0bfff17 	ldw	r2,-4(fp)
   159cc:	10c00a04 	addi	r3,r2,40
   159d0:	e0bffe17 	ldw	r2,-8(fp)
   159d4:	10800217 	ldw	r2,8(r2)
   159d8:	100f883a 	mov	r7,r2
   159dc:	e1bffc17 	ldw	r6,-16(fp)
   159e0:	e17ffd17 	ldw	r5,-12(fp)
   159e4:	1809883a 	mov	r4,r3
   159e8:	0015b3c0 	call	15b3c <altera_avalon_uart_write>
      fd->fd_flags);
}
   159ec:	e037883a 	mov	sp,fp
   159f0:	dfc00117 	ldw	ra,4(sp)
   159f4:	df000017 	ldw	fp,0(sp)
   159f8:	dec00204 	addi	sp,sp,8
   159fc:	f800283a 	ret

00015a00 <alt_get_errno>:
{
   15a00:	defffe04 	addi	sp,sp,-8
   15a04:	dfc00115 	stw	ra,4(sp)
   15a08:	df000015 	stw	fp,0(sp)
   15a0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15a10:	d0a09917 	ldw	r2,-32156(gp)
   15a14:	10000326 	beq	r2,zero,15a24 <alt_get_errno+0x24>
   15a18:	d0a09917 	ldw	r2,-32156(gp)
   15a1c:	103ee83a 	callr	r2
   15a20:	00000106 	br	15a28 <alt_get_errno+0x28>
   15a24:	d0a1fb04 	addi	r2,gp,-30740
}
   15a28:	e037883a 	mov	sp,fp
   15a2c:	dfc00117 	ldw	ra,4(sp)
   15a30:	df000017 	ldw	fp,0(sp)
   15a34:	dec00204 	addi	sp,sp,8
   15a38:	f800283a 	ret

00015a3c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   15a3c:	defff804 	addi	sp,sp,-32
   15a40:	dfc00715 	stw	ra,28(sp)
   15a44:	df000615 	stw	fp,24(sp)
   15a48:	df000604 	addi	fp,sp,24
   15a4c:	e13ffd15 	stw	r4,-12(fp)
   15a50:	e17ffc15 	stw	r5,-16(fp)
   15a54:	e1bffb15 	stw	r6,-20(fp)
   15a58:	e1fffa15 	stw	r7,-24(fp)
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
   15a5c:	e0bffa17 	ldw	r2,-24(fp)
   15a60:	1090000c 	andi	r2,r2,16384
   15a64:	1005003a 	cmpeq	r2,r2,zero
   15a68:	10803fcc 	andi	r2,r2,255
   15a6c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   15a70:	e0bffd17 	ldw	r2,-12(fp)
   15a74:	10800017 	ldw	r2,0(r2)
   15a78:	10800204 	addi	r2,r2,8
   15a7c:	10800037 	ldwio	r2,0(r2)
   15a80:	e0bffe15 	stw	r2,-8(fp)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
   15a84:	e0bffd17 	ldw	r2,-12(fp)
   15a88:	10800017 	ldw	r2,0(r2)
   15a8c:	10800204 	addi	r2,r2,8
   15a90:	0007883a 	mov	r3,zero
   15a94:	10c00035 	stwio	r3,0(r2)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
   15a98:	e0bffe17 	ldw	r2,-8(fp)
   15a9c:	1080200c 	andi	r2,r2,128
   15aa0:	10000b26 	beq	r2,zero,15ad0 <altera_avalon_uart_read+0x94>
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   15aa4:	e0bffd17 	ldw	r2,-12(fp)
   15aa8:	10800017 	ldw	r2,0(r2)
   15aac:	10800037 	ldwio	r2,0(r2)
   15ab0:	1007883a 	mov	r3,r2
   15ab4:	e0bffc17 	ldw	r2,-16(fp)
   15ab8:	10c00005 	stb	r3,0(r2)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   15abc:	e0bffe17 	ldw	r2,-8(fp)
   15ac0:	108000cc 	andi	r2,r2,3
   15ac4:	1000021e 	bne	r2,zero,15ad0 <altera_avalon_uart_read+0x94>
      ALTERA_AVALON_UART_STATUS_FE_MSK)))
      {
        return 1;
   15ac8:	00800044 	movi	r2,1
   15acc:	00000706 	br	15aec <altera_avalon_uart_read+0xb0>
      }
    }
  }
  while (block);
   15ad0:	e0bfff17 	ldw	r2,-4(fp)
   15ad4:	103fe61e 	bne	r2,zero,15a70 <altera_avalon_uart_read+0x34>

  ALT_ERRNO = EWOULDBLOCK;
   15ad8:	0015a000 	call	15a00 <alt_get_errno>
   15adc:	1007883a 	mov	r3,r2
   15ae0:	008002c4 	movi	r2,11
   15ae4:	18800015 	stw	r2,0(r3)
 
  return 0;
   15ae8:	0005883a 	mov	r2,zero
}
   15aec:	e037883a 	mov	sp,fp
   15af0:	dfc00117 	ldw	ra,4(sp)
   15af4:	df000017 	ldw	fp,0(sp)
   15af8:	dec00204 	addi	sp,sp,8
   15afc:	f800283a 	ret

00015b00 <alt_get_errno>:
{
   15b00:	defffe04 	addi	sp,sp,-8
   15b04:	dfc00115 	stw	ra,4(sp)
   15b08:	df000015 	stw	fp,0(sp)
   15b0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15b10:	d0a09917 	ldw	r2,-32156(gp)
   15b14:	10000326 	beq	r2,zero,15b24 <alt_get_errno+0x24>
   15b18:	d0a09917 	ldw	r2,-32156(gp)
   15b1c:	103ee83a 	callr	r2
   15b20:	00000106 	br	15b28 <alt_get_errno+0x28>
   15b24:	d0a1fb04 	addi	r2,gp,-30740
}
   15b28:	e037883a 	mov	sp,fp
   15b2c:	dfc00117 	ldw	ra,4(sp)
   15b30:	df000017 	ldw	fp,0(sp)
   15b34:	dec00204 	addi	sp,sp,8
   15b38:	f800283a 	ret

00015b3c <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   15b3c:	defff704 	addi	sp,sp,-36
   15b40:	dfc00815 	stw	ra,32(sp)
   15b44:	df000715 	stw	fp,28(sp)
   15b48:	df000704 	addi	fp,sp,28
   15b4c:	e13ffc15 	stw	r4,-16(fp)
   15b50:	e17ffb15 	stw	r5,-20(fp)
   15b54:	e1bffa15 	stw	r6,-24(fp)
   15b58:	e1fff915 	stw	r7,-28(fp)
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
   15b5c:	e0bff917 	ldw	r2,-28(fp)
   15b60:	1090000c 	andi	r2,r2,16384
   15b64:	1005003a 	cmpeq	r2,r2,zero
   15b68:	10803fcc 	andi	r2,r2,255
   15b6c:	e0bffe15 	stw	r2,-8(fp)
  count = len;
   15b70:	e0bffa17 	ldw	r2,-24(fp)
   15b74:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   15b78:	e0bffc17 	ldw	r2,-16(fp)
   15b7c:	10800017 	ldw	r2,0(r2)
   15b80:	10800204 	addi	r2,r2,8
   15b84:	10800037 	ldwio	r2,0(r2)
   15b88:	e0bffd15 	stw	r2,-12(fp)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
   15b8c:	e0bffd17 	ldw	r2,-12(fp)
   15b90:	1080100c 	andi	r2,r2,64
   15b94:	10000f26 	beq	r2,zero,15bd4 <altera_avalon_uart_write+0x98>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
   15b98:	e0bffc17 	ldw	r2,-16(fp)
   15b9c:	10800017 	ldw	r2,0(r2)
   15ba0:	10800104 	addi	r2,r2,4
   15ba4:	1009883a 	mov	r4,r2
   15ba8:	e0bffb17 	ldw	r2,-20(fp)
   15bac:	10c00044 	addi	r3,r2,1
   15bb0:	e0fffb15 	stw	r3,-20(fp)
   15bb4:	10800003 	ldbu	r2,0(r2)
   15bb8:	10803fcc 	andi	r2,r2,255
   15bbc:	1080201c 	xori	r2,r2,128
   15bc0:	10bfe004 	addi	r2,r2,-128
   15bc4:	20800035 	stwio	r2,0(r4)
      count--;
   15bc8:	e0bfff17 	ldw	r2,-4(fp)
   15bcc:	10bfffc4 	addi	r2,r2,-1
   15bd0:	e0bfff15 	stw	r2,-4(fp)
    }
  }
  while (block && count);
   15bd4:	e0bffe17 	ldw	r2,-8(fp)
   15bd8:	10000226 	beq	r2,zero,15be4 <altera_avalon_uart_write+0xa8>
   15bdc:	e0bfff17 	ldw	r2,-4(fp)
   15be0:	103fe51e 	bne	r2,zero,15b78 <altera_avalon_uart_write+0x3c>

  if (count)
   15be4:	e0bfff17 	ldw	r2,-4(fp)
   15be8:	10000426 	beq	r2,zero,15bfc <altera_avalon_uart_write+0xc0>
  {
    ALT_ERRNO = EWOULDBLOCK;
   15bec:	0015b000 	call	15b00 <alt_get_errno>
   15bf0:	1007883a 	mov	r3,r2
   15bf4:	008002c4 	movi	r2,11
   15bf8:	18800015 	stw	r2,0(r3)
  }

  return (len - count);
   15bfc:	e0fffa17 	ldw	r3,-24(fp)
   15c00:	e0bfff17 	ldw	r2,-4(fp)
   15c04:	1885c83a 	sub	r2,r3,r2
}
   15c08:	e037883a 	mov	sp,fp
   15c0c:	dfc00117 	ldw	ra,4(sp)
   15c10:	df000017 	ldw	fp,0(sp)
   15c14:	dec00204 	addi	sp,sp,8
   15c18:	f800283a 	ret

00015c1c <alt_get_errno>:
{
   15c1c:	defffe04 	addi	sp,sp,-8
   15c20:	dfc00115 	stw	ra,4(sp)
   15c24:	df000015 	stw	fp,0(sp)
   15c28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15c2c:	d0a09917 	ldw	r2,-32156(gp)
   15c30:	10000326 	beq	r2,zero,15c40 <alt_get_errno+0x24>
   15c34:	d0a09917 	ldw	r2,-32156(gp)
   15c38:	103ee83a 	callr	r2
   15c3c:	00000106 	br	15c44 <alt_get_errno+0x28>
   15c40:	d0a1fb04 	addi	r2,gp,-30740
}
   15c44:	e037883a 	mov	sp,fp
   15c48:	dfc00117 	ldw	ra,4(sp)
   15c4c:	df000017 	ldw	fp,0(sp)
   15c50:	dec00204 	addi	sp,sp,8
   15c54:	f800283a 	ret

00015c58 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   15c58:	defffb04 	addi	sp,sp,-20
   15c5c:	dfc00415 	stw	ra,16(sp)
   15c60:	df000315 	stw	fp,12(sp)
   15c64:	df000304 	addi	fp,sp,12
   15c68:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   15c6c:	e0bffd17 	ldw	r2,-12(fp)
   15c70:	10000916 	blt	r2,zero,15c98 <close+0x40>
   15c74:	e0fffd17 	ldw	r3,-12(fp)
   15c78:	1805883a 	mov	r2,r3
   15c7c:	1085883a 	add	r2,r2,r2
   15c80:	10c5883a 	add	r2,r2,r3
   15c84:	100490ba 	slli	r2,r2,2
   15c88:	00c00074 	movhi	r3,1
   15c8c:	18dd4d04 	addi	r3,r3,30004
   15c90:	10c5883a 	add	r2,r2,r3
   15c94:	00000106 	br	15c9c <close+0x44>
   15c98:	0005883a 	mov	r2,zero
   15c9c:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
   15ca0:	e0bfff17 	ldw	r2,-4(fp)
   15ca4:	10001926 	beq	r2,zero,15d0c <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   15ca8:	e0bfff17 	ldw	r2,-4(fp)
   15cac:	10800017 	ldw	r2,0(r2)
   15cb0:	10800417 	ldw	r2,16(r2)
   15cb4:	10000626 	beq	r2,zero,15cd0 <close+0x78>
   15cb8:	e0bfff17 	ldw	r2,-4(fp)
   15cbc:	10800017 	ldw	r2,0(r2)
   15cc0:	10800417 	ldw	r2,16(r2)
   15cc4:	e13fff17 	ldw	r4,-4(fp)
   15cc8:	103ee83a 	callr	r2
   15ccc:	00000106 	br	15cd4 <close+0x7c>
   15cd0:	0005883a 	mov	r2,zero
   15cd4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   15cd8:	e13ffd17 	ldw	r4,-12(fp)
   15cdc:	00163ac0 	call	163ac <alt_release_fd>
    if (rval < 0)
   15ce0:	e0bffe17 	ldw	r2,-8(fp)
   15ce4:	1000070e 	bge	r2,zero,15d04 <close+0xac>
    {
      ALT_ERRNO = -rval;
   15ce8:	0015c1c0 	call	15c1c <alt_get_errno>
   15cec:	1007883a 	mov	r3,r2
   15cf0:	e0bffe17 	ldw	r2,-8(fp)
   15cf4:	0085c83a 	sub	r2,zero,r2
   15cf8:	18800015 	stw	r2,0(r3)
      return -1;
   15cfc:	00bfffc4 	movi	r2,-1
   15d00:	00000706 	br	15d20 <close+0xc8>
    }
    return 0;
   15d04:	0005883a 	mov	r2,zero
   15d08:	00000506 	br	15d20 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   15d0c:	0015c1c0 	call	15c1c <alt_get_errno>
   15d10:	1007883a 	mov	r3,r2
   15d14:	00801444 	movi	r2,81
   15d18:	18800015 	stw	r2,0(r3)
    return -1;
   15d1c:	00bfffc4 	movi	r2,-1
  }
}
   15d20:	e037883a 	mov	sp,fp
   15d24:	dfc00117 	ldw	ra,4(sp)
   15d28:	df000017 	ldw	fp,0(sp)
   15d2c:	dec00204 	addi	sp,sp,8
   15d30:	f800283a 	ret

00015d34 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   15d34:	deffff04 	addi	sp,sp,-4
   15d38:	df000015 	stw	fp,0(sp)
   15d3c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   15d40:	0001883a 	nop
   15d44:	e037883a 	mov	sp,fp
   15d48:	df000017 	ldw	fp,0(sp)
   15d4c:	dec00104 	addi	sp,sp,4
   15d50:	f800283a 	ret

00015d54 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   15d54:	defffc04 	addi	sp,sp,-16
   15d58:	df000315 	stw	fp,12(sp)
   15d5c:	df000304 	addi	fp,sp,12
   15d60:	e13fff15 	stw	r4,-4(fp)
   15d64:	e17ffe15 	stw	r5,-8(fp)
   15d68:	e1bffd15 	stw	r6,-12(fp)
  return len;
   15d6c:	e0bffd17 	ldw	r2,-12(fp)
}
   15d70:	e037883a 	mov	sp,fp
   15d74:	df000017 	ldw	fp,0(sp)
   15d78:	dec00104 	addi	sp,sp,4
   15d7c:	f800283a 	ret

00015d80 <alt_get_errno>:
{
   15d80:	defffe04 	addi	sp,sp,-8
   15d84:	dfc00115 	stw	ra,4(sp)
   15d88:	df000015 	stw	fp,0(sp)
   15d8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15d90:	d0a09917 	ldw	r2,-32156(gp)
   15d94:	10000326 	beq	r2,zero,15da4 <alt_get_errno+0x24>
   15d98:	d0a09917 	ldw	r2,-32156(gp)
   15d9c:	103ee83a 	callr	r2
   15da0:	00000106 	br	15da8 <alt_get_errno+0x28>
   15da4:	d0a1fb04 	addi	r2,gp,-30740
}
   15da8:	e037883a 	mov	sp,fp
   15dac:	dfc00117 	ldw	ra,4(sp)
   15db0:	df000017 	ldw	fp,0(sp)
   15db4:	dec00204 	addi	sp,sp,8
   15db8:	f800283a 	ret

00015dbc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   15dbc:	defffa04 	addi	sp,sp,-24
   15dc0:	dfc00515 	stw	ra,20(sp)
   15dc4:	df000415 	stw	fp,16(sp)
   15dc8:	df000404 	addi	fp,sp,16
   15dcc:	e13ffd15 	stw	r4,-12(fp)
   15dd0:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   15dd4:	e0bffd17 	ldw	r2,-12(fp)
   15dd8:	10000326 	beq	r2,zero,15de8 <alt_dev_llist_insert+0x2c>
   15ddc:	e0bffd17 	ldw	r2,-12(fp)
   15de0:	10800217 	ldw	r2,8(r2)
   15de4:	1000061e 	bne	r2,zero,15e00 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   15de8:	0015d800 	call	15d80 <alt_get_errno>
   15dec:	1007883a 	mov	r3,r2
   15df0:	00800584 	movi	r2,22
   15df4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   15df8:	00bffa84 	movi	r2,-22
   15dfc:	00001406 	br	15e50 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   15e00:	e0bffd17 	ldw	r2,-12(fp)
   15e04:	e0fffc17 	ldw	r3,-16(fp)
   15e08:	e0ffff15 	stw	r3,-4(fp)
   15e0c:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   15e10:	e0bffe17 	ldw	r2,-8(fp)
   15e14:	e0ffff17 	ldw	r3,-4(fp)
   15e18:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   15e1c:	e0bfff17 	ldw	r2,-4(fp)
   15e20:	10c00017 	ldw	r3,0(r2)
   15e24:	e0bffe17 	ldw	r2,-8(fp)
   15e28:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   15e2c:	e0bfff17 	ldw	r2,-4(fp)
   15e30:	10800017 	ldw	r2,0(r2)
   15e34:	e0fffe17 	ldw	r3,-8(fp)
   15e38:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   15e3c:	e0bfff17 	ldw	r2,-4(fp)
   15e40:	e0fffe17 	ldw	r3,-8(fp)
   15e44:	10c00015 	stw	r3,0(r2)
}
   15e48:	0001883a 	nop

  return 0;  
   15e4c:	0005883a 	mov	r2,zero
}
   15e50:	e037883a 	mov	sp,fp
   15e54:	dfc00117 	ldw	ra,4(sp)
   15e58:	df000017 	ldw	fp,0(sp)
   15e5c:	dec00204 	addi	sp,sp,8
   15e60:	f800283a 	ret

00015e64 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   15e64:	defffd04 	addi	sp,sp,-12
   15e68:	dfc00215 	stw	ra,8(sp)
   15e6c:	df000115 	stw	fp,4(sp)
   15e70:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   15e74:	00800074 	movhi	r2,1
   15e78:	109ad004 	addi	r2,r2,27456
   15e7c:	e0bfff15 	stw	r2,-4(fp)
   15e80:	00000606 	br	15e9c <_do_ctors+0x38>
        (*ctor) (); 
   15e84:	e0bfff17 	ldw	r2,-4(fp)
   15e88:	10800017 	ldw	r2,0(r2)
   15e8c:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   15e90:	e0bfff17 	ldw	r2,-4(fp)
   15e94:	10bfff04 	addi	r2,r2,-4
   15e98:	e0bfff15 	stw	r2,-4(fp)
   15e9c:	e0ffff17 	ldw	r3,-4(fp)
   15ea0:	00800074 	movhi	r2,1
   15ea4:	109acd44 	addi	r2,r2,27445
   15ea8:	18bff62e 	bgeu	r3,r2,15e84 <_do_ctors+0x20>
}
   15eac:	0001883a 	nop
   15eb0:	0001883a 	nop
   15eb4:	e037883a 	mov	sp,fp
   15eb8:	dfc00117 	ldw	ra,4(sp)
   15ebc:	df000017 	ldw	fp,0(sp)
   15ec0:	dec00204 	addi	sp,sp,8
   15ec4:	f800283a 	ret

00015ec8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   15ec8:	defffd04 	addi	sp,sp,-12
   15ecc:	dfc00215 	stw	ra,8(sp)
   15ed0:	df000115 	stw	fp,4(sp)
   15ed4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   15ed8:	00800074 	movhi	r2,1
   15edc:	109ad104 	addi	r2,r2,27460
   15ee0:	e0bfff15 	stw	r2,-4(fp)
   15ee4:	00000606 	br	15f00 <_do_dtors+0x38>
        (*dtor) (); 
   15ee8:	e0bfff17 	ldw	r2,-4(fp)
   15eec:	10800017 	ldw	r2,0(r2)
   15ef0:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   15ef4:	e0bfff17 	ldw	r2,-4(fp)
   15ef8:	10bfff04 	addi	r2,r2,-4
   15efc:	e0bfff15 	stw	r2,-4(fp)
   15f00:	e0ffff17 	ldw	r3,-4(fp)
   15f04:	00800074 	movhi	r2,1
   15f08:	109ad104 	addi	r2,r2,27460
   15f0c:	18bff62e 	bgeu	r3,r2,15ee8 <_do_dtors+0x20>
}
   15f10:	0001883a 	nop
   15f14:	0001883a 	nop
   15f18:	e037883a 	mov	sp,fp
   15f1c:	dfc00117 	ldw	ra,4(sp)
   15f20:	df000017 	ldw	fp,0(sp)
   15f24:	dec00204 	addi	sp,sp,8
   15f28:	f800283a 	ret

00015f2c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   15f2c:	deffff04 	addi	sp,sp,-4
   15f30:	df000015 	stw	fp,0(sp)
   15f34:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   15f38:	0001883a 	nop
   15f3c:	e037883a 	mov	sp,fp
   15f40:	df000017 	ldw	fp,0(sp)
   15f44:	dec00104 	addi	sp,sp,4
   15f48:	f800283a 	ret

00015f4c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   15f4c:	defffe04 	addi	sp,sp,-8
   15f50:	df000115 	stw	fp,4(sp)
   15f54:	df000104 	addi	fp,sp,4
   15f58:	e13fff15 	stw	r4,-4(fp)
   15f5c:	e0bfff17 	ldw	r2,-4(fp)
   15f60:	10bffe84 	addi	r2,r2,-6
   15f64:	10c00428 	cmpgeui	r3,r2,16
   15f68:	1800191e 	bne	r3,zero,15fd0 <alt_exception_cause_generated_bad_addr+0x84>
   15f6c:	100690ba 	slli	r3,r2,2
   15f70:	00800074 	movhi	r2,1
   15f74:	1885883a 	add	r2,r3,r2
   15f78:	1097e017 	ldw	r2,24448(r2)
   15f7c:	1000683a 	jmp	r2
   15f80:	00015fc0 	call	15fc <__reset-0xea04>
   15f84:	00015fc0 	call	15fc <__reset-0xea04>
   15f88:	00015fd0 	cmplti	zero,zero,1407
   15f8c:	00015fd0 	cmplti	zero,zero,1407
   15f90:	00015fd0 	cmplti	zero,zero,1407
   15f94:	00015fc0 	call	15fc <__reset-0xea04>
   15f98:	00015fc8 	cmpgei	zero,zero,1407
   15f9c:	00015fd0 	cmplti	zero,zero,1407
   15fa0:	00015fc0 	call	15fc <__reset-0xea04>
   15fa4:	00015fc0 	call	15fc <__reset-0xea04>
   15fa8:	00015fd0 	cmplti	zero,zero,1407
   15fac:	00015fc0 	call	15fc <__reset-0xea04>
   15fb0:	00015fc8 	cmpgei	zero,zero,1407
   15fb4:	00015fd0 	cmplti	zero,zero,1407
   15fb8:	00015fd0 	cmplti	zero,zero,1407
   15fbc:	00015fc0 	call	15fc <__reset-0xea04>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   15fc0:	00800044 	movi	r2,1
   15fc4:	00000306 	br	15fd4 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   15fc8:	0005883a 	mov	r2,zero
   15fcc:	00000106 	br	15fd4 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
   15fd0:	0005883a 	mov	r2,zero
  }
}
   15fd4:	e037883a 	mov	sp,fp
   15fd8:	df000017 	ldw	fp,0(sp)
   15fdc:	dec00104 	addi	sp,sp,4
   15fe0:	f800283a 	ret

00015fe4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   15fe4:	defff904 	addi	sp,sp,-28
   15fe8:	dfc00615 	stw	ra,24(sp)
   15fec:	df000515 	stw	fp,20(sp)
   15ff0:	df000504 	addi	fp,sp,20
   15ff4:	e13ffe15 	stw	r4,-8(fp)
   15ff8:	e17ffd15 	stw	r5,-12(fp)
   15ffc:	e1bffc15 	stw	r6,-16(fp)
   16000:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   16004:	e1bffb17 	ldw	r6,-20(fp)
   16008:	e17ffc17 	ldw	r5,-16(fp)
   1600c:	e13ffd17 	ldw	r4,-12(fp)
   16010:	001624c0 	call	1624c <open>
   16014:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   16018:	e0bfff17 	ldw	r2,-4(fp)
   1601c:	10002016 	blt	r2,zero,160a0 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
   16020:	e0ffff17 	ldw	r3,-4(fp)
   16024:	1805883a 	mov	r2,r3
   16028:	1085883a 	add	r2,r2,r2
   1602c:	10c5883a 	add	r2,r2,r3
   16030:	100490ba 	slli	r2,r2,2
   16034:	00c00074 	movhi	r3,1
   16038:	10c7883a 	add	r3,r2,r3
   1603c:	18dd4d17 	ldw	r3,30004(r3)
   16040:	e0bffe17 	ldw	r2,-8(fp)
   16044:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   16048:	e0ffff17 	ldw	r3,-4(fp)
   1604c:	1805883a 	mov	r2,r3
   16050:	1085883a 	add	r2,r2,r2
   16054:	10c5883a 	add	r2,r2,r3
   16058:	100490ba 	slli	r2,r2,2
   1605c:	00c00074 	movhi	r3,1
   16060:	10c7883a 	add	r3,r2,r3
   16064:	18dd4e17 	ldw	r3,30008(r3)
   16068:	e0bffe17 	ldw	r2,-8(fp)
   1606c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   16070:	e0ffff17 	ldw	r3,-4(fp)
   16074:	1805883a 	mov	r2,r3
   16078:	1085883a 	add	r2,r2,r2
   1607c:	10c5883a 	add	r2,r2,r3
   16080:	100490ba 	slli	r2,r2,2
   16084:	00c00074 	movhi	r3,1
   16088:	10c7883a 	add	r3,r2,r3
   1608c:	18dd4f17 	ldw	r3,30012(r3)
   16090:	e0bffe17 	ldw	r2,-8(fp)
   16094:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   16098:	e13fff17 	ldw	r4,-4(fp)
   1609c:	00163ac0 	call	163ac <alt_release_fd>
  }
} 
   160a0:	0001883a 	nop
   160a4:	e037883a 	mov	sp,fp
   160a8:	dfc00117 	ldw	ra,4(sp)
   160ac:	df000017 	ldw	fp,0(sp)
   160b0:	dec00204 	addi	sp,sp,8
   160b4:	f800283a 	ret

000160b8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   160b8:	defffb04 	addi	sp,sp,-20
   160bc:	dfc00415 	stw	ra,16(sp)
   160c0:	df000315 	stw	fp,12(sp)
   160c4:	df000304 	addi	fp,sp,12
   160c8:	e13fff15 	stw	r4,-4(fp)
   160cc:	e17ffe15 	stw	r5,-8(fp)
   160d0:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   160d4:	01c07fc4 	movi	r7,511
   160d8:	01800044 	movi	r6,1
   160dc:	e17fff17 	ldw	r5,-4(fp)
   160e0:	01000074 	movhi	r4,1
   160e4:	211d5004 	addi	r4,r4,30016
   160e8:	0015fe40 	call	15fe4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   160ec:	01c07fc4 	movi	r7,511
   160f0:	000d883a 	mov	r6,zero
   160f4:	e17ffe17 	ldw	r5,-8(fp)
   160f8:	01000074 	movhi	r4,1
   160fc:	211d4d04 	addi	r4,r4,30004
   16100:	0015fe40 	call	15fe4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   16104:	01c07fc4 	movi	r7,511
   16108:	01800044 	movi	r6,1
   1610c:	e17ffd17 	ldw	r5,-12(fp)
   16110:	01000074 	movhi	r4,1
   16114:	211d5304 	addi	r4,r4,30028
   16118:	0015fe40 	call	15fe4 <alt_open_fd>
}  
   1611c:	0001883a 	nop
   16120:	e037883a 	mov	sp,fp
   16124:	dfc00117 	ldw	ra,4(sp)
   16128:	df000017 	ldw	fp,0(sp)
   1612c:	dec00204 	addi	sp,sp,8
   16130:	f800283a 	ret

00016134 <alt_get_errno>:
{
   16134:	defffe04 	addi	sp,sp,-8
   16138:	dfc00115 	stw	ra,4(sp)
   1613c:	df000015 	stw	fp,0(sp)
   16140:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   16144:	d0a09917 	ldw	r2,-32156(gp)
   16148:	10000326 	beq	r2,zero,16158 <alt_get_errno+0x24>
   1614c:	d0a09917 	ldw	r2,-32156(gp)
   16150:	103ee83a 	callr	r2
   16154:	00000106 	br	1615c <alt_get_errno+0x28>
   16158:	d0a1fb04 	addi	r2,gp,-30740
}
   1615c:	e037883a 	mov	sp,fp
   16160:	dfc00117 	ldw	ra,4(sp)
   16164:	df000017 	ldw	fp,0(sp)
   16168:	dec00204 	addi	sp,sp,8
   1616c:	f800283a 	ret

00016170 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   16170:	defffd04 	addi	sp,sp,-12
   16174:	df000215 	stw	fp,8(sp)
   16178:	df000204 	addi	fp,sp,8
   1617c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   16180:	e0bffe17 	ldw	r2,-8(fp)
   16184:	10800217 	ldw	r2,8(r2)
   16188:	10d00034 	orhi	r3,r2,16384
   1618c:	e0bffe17 	ldw	r2,-8(fp)
   16190:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   16194:	e03fff15 	stw	zero,-4(fp)
   16198:	00002306 	br	16228 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1619c:	e0ffff17 	ldw	r3,-4(fp)
   161a0:	1805883a 	mov	r2,r3
   161a4:	1085883a 	add	r2,r2,r2
   161a8:	10c5883a 	add	r2,r2,r3
   161ac:	100490ba 	slli	r2,r2,2
   161b0:	00c00074 	movhi	r3,1
   161b4:	10c7883a 	add	r3,r2,r3
   161b8:	18dd4d17 	ldw	r3,30004(r3)
   161bc:	e0bffe17 	ldw	r2,-8(fp)
   161c0:	10800017 	ldw	r2,0(r2)
   161c4:	1880151e 	bne	r3,r2,1621c <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   161c8:	e0ffff17 	ldw	r3,-4(fp)
   161cc:	1805883a 	mov	r2,r3
   161d0:	1085883a 	add	r2,r2,r2
   161d4:	10c5883a 	add	r2,r2,r3
   161d8:	100490ba 	slli	r2,r2,2
   161dc:	00c00074 	movhi	r3,1
   161e0:	10c7883a 	add	r3,r2,r3
   161e4:	189d4f17 	ldw	r2,30012(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
   161e8:	10000c0e 	bge	r2,zero,1621c <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
   161ec:	e0ffff17 	ldw	r3,-4(fp)
   161f0:	1805883a 	mov	r2,r3
   161f4:	1085883a 	add	r2,r2,r2
   161f8:	10c5883a 	add	r2,r2,r3
   161fc:	100490ba 	slli	r2,r2,2
   16200:	00c00074 	movhi	r3,1
   16204:	18dd4d04 	addi	r3,r3,30004
   16208:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1620c:	e0fffe17 	ldw	r3,-8(fp)
   16210:	18800226 	beq	r3,r2,1621c <alt_file_locked+0xac>
    {
      return -EACCES;
   16214:	00bffcc4 	movi	r2,-13
   16218:	00000806 	br	1623c <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
   1621c:	e0bfff17 	ldw	r2,-4(fp)
   16220:	10800044 	addi	r2,r2,1
   16224:	e0bfff15 	stw	r2,-4(fp)
   16228:	d0a09817 	ldw	r2,-32160(gp)
   1622c:	1007883a 	mov	r3,r2
   16230:	e0bfff17 	ldw	r2,-4(fp)
   16234:	18bfd92e 	bgeu	r3,r2,1619c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   16238:	0005883a 	mov	r2,zero
}
   1623c:	e037883a 	mov	sp,fp
   16240:	df000017 	ldw	fp,0(sp)
   16244:	dec00104 	addi	sp,sp,4
   16248:	f800283a 	ret

0001624c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1624c:	defff604 	addi	sp,sp,-40
   16250:	dfc00915 	stw	ra,36(sp)
   16254:	df000815 	stw	fp,32(sp)
   16258:	df000804 	addi	fp,sp,32
   1625c:	e13ffa15 	stw	r4,-24(fp)
   16260:	e17ff915 	stw	r5,-28(fp)
   16264:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   16268:	00bfffc4 	movi	r2,-1
   1626c:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   16270:	00bffb44 	movi	r2,-19
   16274:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   16278:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1627c:	d1609604 	addi	r5,gp,-32168
   16280:	e13ffa17 	ldw	r4,-24(fp)
   16284:	00165ec0 	call	165ec <alt_find_dev>
   16288:	e0bfff15 	stw	r2,-4(fp)
   1628c:	e0bfff17 	ldw	r2,-4(fp)
   16290:	1000051e 	bne	r2,zero,162a8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   16294:	e13ffa17 	ldw	r4,-24(fp)
   16298:	001667c0 	call	1667c <alt_find_file>
   1629c:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   162a0:	00800044 	movi	r2,1
   162a4:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   162a8:	e0bfff17 	ldw	r2,-4(fp)
   162ac:	10002c26 	beq	r2,zero,16360 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   162b0:	e13fff17 	ldw	r4,-4(fp)
   162b4:	00167840 	call	16784 <alt_get_fd>
   162b8:	e0bffe15 	stw	r2,-8(fp)
   162bc:	e0bffe17 	ldw	r2,-8(fp)
   162c0:	1000030e 	bge	r2,zero,162d0 <open+0x84>
    {
      status = index;
   162c4:	e0bffe17 	ldw	r2,-8(fp)
   162c8:	e0bffd15 	stw	r2,-12(fp)
   162cc:	00002606 	br	16368 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   162d0:	e0fffe17 	ldw	r3,-8(fp)
   162d4:	1805883a 	mov	r2,r3
   162d8:	1085883a 	add	r2,r2,r2
   162dc:	10c5883a 	add	r2,r2,r3
   162e0:	100490ba 	slli	r2,r2,2
   162e4:	00c00074 	movhi	r3,1
   162e8:	18dd4d04 	addi	r3,r3,30004
   162ec:	10c5883a 	add	r2,r2,r3
   162f0:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   162f4:	e0fff917 	ldw	r3,-28(fp)
   162f8:	00900034 	movhi	r2,16384
   162fc:	10bfffc4 	addi	r2,r2,-1
   16300:	1886703a 	and	r3,r3,r2
   16304:	e0bffb17 	ldw	r2,-20(fp)
   16308:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1630c:	e0bffc17 	ldw	r2,-16(fp)
   16310:	1000051e 	bne	r2,zero,16328 <open+0xdc>
   16314:	e13ffb17 	ldw	r4,-20(fp)
   16318:	00161700 	call	16170 <alt_file_locked>
   1631c:	e0bffd15 	stw	r2,-12(fp)
   16320:	e0bffd17 	ldw	r2,-12(fp)
   16324:	10001016 	blt	r2,zero,16368 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   16328:	e0bfff17 	ldw	r2,-4(fp)
   1632c:	10800317 	ldw	r2,12(r2)
   16330:	10000826 	beq	r2,zero,16354 <open+0x108>
   16334:	e0bfff17 	ldw	r2,-4(fp)
   16338:	10800317 	ldw	r2,12(r2)
   1633c:	e1fff817 	ldw	r7,-32(fp)
   16340:	e1bff917 	ldw	r6,-28(fp)
   16344:	e17ffa17 	ldw	r5,-24(fp)
   16348:	e13ffb17 	ldw	r4,-20(fp)
   1634c:	103ee83a 	callr	r2
   16350:	00000106 	br	16358 <open+0x10c>
   16354:	0005883a 	mov	r2,zero
   16358:	e0bffd15 	stw	r2,-12(fp)
   1635c:	00000206 	br	16368 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   16360:	00bffb44 	movi	r2,-19
   16364:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   16368:	e0bffd17 	ldw	r2,-12(fp)
   1636c:	1000090e 	bge	r2,zero,16394 <open+0x148>
  {
    alt_release_fd (index);  
   16370:	e13ffe17 	ldw	r4,-8(fp)
   16374:	00163ac0 	call	163ac <alt_release_fd>
    ALT_ERRNO = -status;
   16378:	00161340 	call	16134 <alt_get_errno>
   1637c:	1007883a 	mov	r3,r2
   16380:	e0bffd17 	ldw	r2,-12(fp)
   16384:	0085c83a 	sub	r2,zero,r2
   16388:	18800015 	stw	r2,0(r3)
    return -1;
   1638c:	00bfffc4 	movi	r2,-1
   16390:	00000106 	br	16398 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   16394:	e0bffe17 	ldw	r2,-8(fp)
}
   16398:	e037883a 	mov	sp,fp
   1639c:	dfc00117 	ldw	ra,4(sp)
   163a0:	df000017 	ldw	fp,0(sp)
   163a4:	dec00204 	addi	sp,sp,8
   163a8:	f800283a 	ret

000163ac <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   163ac:	defffe04 	addi	sp,sp,-8
   163b0:	df000115 	stw	fp,4(sp)
   163b4:	df000104 	addi	fp,sp,4
   163b8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   163bc:	e0bfff17 	ldw	r2,-4(fp)
   163c0:	108000d0 	cmplti	r2,r2,3
   163c4:	1000101e 	bne	r2,zero,16408 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
   163c8:	e0ffff17 	ldw	r3,-4(fp)
   163cc:	1805883a 	mov	r2,r3
   163d0:	1085883a 	add	r2,r2,r2
   163d4:	10c5883a 	add	r2,r2,r3
   163d8:	100490ba 	slli	r2,r2,2
   163dc:	00c00074 	movhi	r3,1
   163e0:	10c7883a 	add	r3,r2,r3
   163e4:	181d4f15 	stw	zero,30012(r3)
    alt_fd_list[fd].dev      = 0;
   163e8:	e0ffff17 	ldw	r3,-4(fp)
   163ec:	1805883a 	mov	r2,r3
   163f0:	1085883a 	add	r2,r2,r2
   163f4:	10c5883a 	add	r2,r2,r3
   163f8:	100490ba 	slli	r2,r2,2
   163fc:	00c00074 	movhi	r3,1
   16400:	10c7883a 	add	r3,r2,r3
   16404:	181d4d15 	stw	zero,30004(r3)
  }
}
   16408:	0001883a 	nop
   1640c:	e037883a 	mov	sp,fp
   16410:	df000017 	ldw	fp,0(sp)
   16414:	dec00104 	addi	sp,sp,4
   16418:	f800283a 	ret

0001641c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1641c:	defffa04 	addi	sp,sp,-24
   16420:	df000515 	stw	fp,20(sp)
   16424:	df000504 	addi	fp,sp,20
   16428:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
   1642c:	0005303a 	rdctl	r2,status
   16430:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16434:	e0fffc17 	ldw	r3,-16(fp)
   16438:	00bfff84 	movi	r2,-2
   1643c:	1884703a 	and	r2,r3,r2
   16440:	1001703a 	wrctl	status,r2
  return context;
   16444:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   16448:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
   1644c:	e0bffb17 	ldw	r2,-20(fp)
   16450:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   16454:	e0bffd17 	ldw	r2,-12(fp)
   16458:	10800017 	ldw	r2,0(r2)
   1645c:	e0fffd17 	ldw	r3,-12(fp)
   16460:	18c00117 	ldw	r3,4(r3)
   16464:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   16468:	e0bffd17 	ldw	r2,-12(fp)
   1646c:	10800117 	ldw	r2,4(r2)
   16470:	e0fffd17 	ldw	r3,-12(fp)
   16474:	18c00017 	ldw	r3,0(r3)
   16478:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1647c:	e0bffd17 	ldw	r2,-12(fp)
   16480:	e0fffd17 	ldw	r3,-12(fp)
   16484:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   16488:	e0bffd17 	ldw	r2,-12(fp)
   1648c:	e0fffd17 	ldw	r3,-12(fp)
   16490:	10c00015 	stw	r3,0(r2)
} 
   16494:	0001883a 	nop
   16498:	e0bfff17 	ldw	r2,-4(fp)
   1649c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   164a0:	e0bffe17 	ldw	r2,-8(fp)
   164a4:	1001703a 	wrctl	status,r2
}
   164a8:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
   164ac:	0001883a 	nop
   164b0:	e037883a 	mov	sp,fp
   164b4:	df000017 	ldw	fp,0(sp)
   164b8:	dec00104 	addi	sp,sp,4
   164bc:	f800283a 	ret

000164c0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   164c0:	defffb04 	addi	sp,sp,-20
   164c4:	dfc00415 	stw	ra,16(sp)
   164c8:	df000315 	stw	fp,12(sp)
   164cc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   164d0:	d0a09a17 	ldw	r2,-32152(gp)
   164d4:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   164d8:	d0a20217 	ldw	r2,-30712(gp)
   164dc:	10800044 	addi	r2,r2,1
   164e0:	d0a20215 	stw	r2,-30712(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   164e4:	00002e06 	br	165a0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   164e8:	e0bfff17 	ldw	r2,-4(fp)
   164ec:	10800017 	ldw	r2,0(r2)
   164f0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   164f4:	e0bfff17 	ldw	r2,-4(fp)
   164f8:	10800403 	ldbu	r2,16(r2)
   164fc:	10803fcc 	andi	r2,r2,255
   16500:	10000426 	beq	r2,zero,16514 <alt_tick+0x54>
   16504:	d0a20217 	ldw	r2,-30712(gp)
   16508:	1000021e 	bne	r2,zero,16514 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1650c:	e0bfff17 	ldw	r2,-4(fp)
   16510:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   16514:	e0bfff17 	ldw	r2,-4(fp)
   16518:	10800217 	ldw	r2,8(r2)
   1651c:	d0e20217 	ldw	r3,-30712(gp)
   16520:	18801d36 	bltu	r3,r2,16598 <alt_tick+0xd8>
   16524:	e0bfff17 	ldw	r2,-4(fp)
   16528:	10800403 	ldbu	r2,16(r2)
   1652c:	10803fcc 	andi	r2,r2,255
   16530:	1000191e 	bne	r2,zero,16598 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   16534:	e0bfff17 	ldw	r2,-4(fp)
   16538:	10800317 	ldw	r2,12(r2)
   1653c:	e0ffff17 	ldw	r3,-4(fp)
   16540:	18c00517 	ldw	r3,20(r3)
   16544:	1809883a 	mov	r4,r3
   16548:	103ee83a 	callr	r2
   1654c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   16550:	e0bffd17 	ldw	r2,-12(fp)
   16554:	1000031e 	bne	r2,zero,16564 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   16558:	e13fff17 	ldw	r4,-4(fp)
   1655c:	001641c0 	call	1641c <alt_alarm_stop>
   16560:	00000d06 	br	16598 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   16564:	e0bfff17 	ldw	r2,-4(fp)
   16568:	10c00217 	ldw	r3,8(r2)
   1656c:	e0bffd17 	ldw	r2,-12(fp)
   16570:	1887883a 	add	r3,r3,r2
   16574:	e0bfff17 	ldw	r2,-4(fp)
   16578:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1657c:	e0bfff17 	ldw	r2,-4(fp)
   16580:	10c00217 	ldw	r3,8(r2)
   16584:	d0a20217 	ldw	r2,-30712(gp)
   16588:	1880032e 	bgeu	r3,r2,16598 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1658c:	e0bfff17 	ldw	r2,-4(fp)
   16590:	00c00044 	movi	r3,1
   16594:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   16598:	e0bffe17 	ldw	r2,-8(fp)
   1659c:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
   165a0:	e0ffff17 	ldw	r3,-4(fp)
   165a4:	d0a09a04 	addi	r2,gp,-32152
   165a8:	18bfcf1e 	bne	r3,r2,164e8 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   165ac:	0001883a 	nop
}
   165b0:	0001883a 	nop
   165b4:	e037883a 	mov	sp,fp
   165b8:	dfc00117 	ldw	ra,4(sp)
   165bc:	df000017 	ldw	fp,0(sp)
   165c0:	dec00204 	addi	sp,sp,8
   165c4:	f800283a 	ret

000165c8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   165c8:	deffff04 	addi	sp,sp,-4
   165cc:	df000015 	stw	fp,0(sp)
   165d0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   165d4:	000170fa 	wrctl	ienable,zero
}
   165d8:	0001883a 	nop
   165dc:	e037883a 	mov	sp,fp
   165e0:	df000017 	ldw	fp,0(sp)
   165e4:	dec00104 	addi	sp,sp,4
   165e8:	f800283a 	ret

000165ec <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   165ec:	defffa04 	addi	sp,sp,-24
   165f0:	dfc00515 	stw	ra,20(sp)
   165f4:	df000415 	stw	fp,16(sp)
   165f8:	df000404 	addi	fp,sp,16
   165fc:	e13ffd15 	stw	r4,-12(fp)
   16600:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
   16604:	e0bffc17 	ldw	r2,-16(fp)
   16608:	10800017 	ldw	r2,0(r2)
   1660c:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   16610:	e13ffd17 	ldw	r4,-12(fp)
   16614:	0014c200 	call	14c20 <strlen>
   16618:	10800044 	addi	r2,r2,1
   1661c:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   16620:	00000d06 	br	16658 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   16624:	e0bfff17 	ldw	r2,-4(fp)
   16628:	10800217 	ldw	r2,8(r2)
   1662c:	e0fffe17 	ldw	r3,-8(fp)
   16630:	180d883a 	mov	r6,r3
   16634:	e17ffd17 	ldw	r5,-12(fp)
   16638:	1009883a 	mov	r4,r2
   1663c:	00168700 	call	16870 <memcmp>
   16640:	1000021e 	bne	r2,zero,1664c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   16644:	e0bfff17 	ldw	r2,-4(fp)
   16648:	00000706 	br	16668 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1664c:	e0bfff17 	ldw	r2,-4(fp)
   16650:	10800017 	ldw	r2,0(r2)
   16654:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
   16658:	e0ffff17 	ldw	r3,-4(fp)
   1665c:	e0bffc17 	ldw	r2,-16(fp)
   16660:	18bff01e 	bne	r3,r2,16624 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
   16664:	0005883a 	mov	r2,zero
}
   16668:	e037883a 	mov	sp,fp
   1666c:	dfc00117 	ldw	ra,4(sp)
   16670:	df000017 	ldw	fp,0(sp)
   16674:	dec00204 	addi	sp,sp,8
   16678:	f800283a 	ret

0001667c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1667c:	defffb04 	addi	sp,sp,-20
   16680:	dfc00415 	stw	ra,16(sp)
   16684:	df000315 	stw	fp,12(sp)
   16688:	df000304 	addi	fp,sp,12
   1668c:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   16690:	d0a09417 	ldw	r2,-32176(gp)
   16694:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   16698:	00003106 	br	16760 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   1669c:	e0bfff17 	ldw	r2,-4(fp)
   166a0:	10800217 	ldw	r2,8(r2)
   166a4:	1009883a 	mov	r4,r2
   166a8:	0014c200 	call	14c20 <strlen>
   166ac:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   166b0:	e0bfff17 	ldw	r2,-4(fp)
   166b4:	10c00217 	ldw	r3,8(r2)
   166b8:	e0bffe17 	ldw	r2,-8(fp)
   166bc:	10bfffc4 	addi	r2,r2,-1
   166c0:	1885883a 	add	r2,r3,r2
   166c4:	10800003 	ldbu	r2,0(r2)
   166c8:	10803fcc 	andi	r2,r2,255
   166cc:	1080201c 	xori	r2,r2,128
   166d0:	10bfe004 	addi	r2,r2,-128
   166d4:	10800bd8 	cmpnei	r2,r2,47
   166d8:	1000031e 	bne	r2,zero,166e8 <alt_find_file+0x6c>
    {
      len -= 1;
   166dc:	e0bffe17 	ldw	r2,-8(fp)
   166e0:	10bfffc4 	addi	r2,r2,-1
   166e4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   166e8:	e0bffe17 	ldw	r2,-8(fp)
   166ec:	e0fffd17 	ldw	r3,-12(fp)
   166f0:	1885883a 	add	r2,r3,r2
   166f4:	10800003 	ldbu	r2,0(r2)
   166f8:	10803fcc 	andi	r2,r2,255
   166fc:	1080201c 	xori	r2,r2,128
   16700:	10bfe004 	addi	r2,r2,-128
   16704:	10800be0 	cmpeqi	r2,r2,47
   16708:	1000081e 	bne	r2,zero,1672c <alt_find_file+0xb0>
   1670c:	e0bffe17 	ldw	r2,-8(fp)
   16710:	e0fffd17 	ldw	r3,-12(fp)
   16714:	1885883a 	add	r2,r3,r2
   16718:	10800003 	ldbu	r2,0(r2)
   1671c:	10803fcc 	andi	r2,r2,255
   16720:	1080201c 	xori	r2,r2,128
   16724:	10bfe004 	addi	r2,r2,-128
   16728:	10000a1e 	bne	r2,zero,16754 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   1672c:	e0bfff17 	ldw	r2,-4(fp)
   16730:	10800217 	ldw	r2,8(r2)
   16734:	e0fffe17 	ldw	r3,-8(fp)
   16738:	180d883a 	mov	r6,r3
   1673c:	e17ffd17 	ldw	r5,-12(fp)
   16740:	1009883a 	mov	r4,r2
   16744:	00168700 	call	16870 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
   16748:	1000021e 	bne	r2,zero,16754 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
   1674c:	e0bfff17 	ldw	r2,-4(fp)
   16750:	00000706 	br	16770 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   16754:	e0bfff17 	ldw	r2,-4(fp)
   16758:	10800017 	ldw	r2,0(r2)
   1675c:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
   16760:	e0ffff17 	ldw	r3,-4(fp)
   16764:	d0a09404 	addi	r2,gp,-32176
   16768:	18bfcc1e 	bne	r3,r2,1669c <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
   1676c:	0005883a 	mov	r2,zero
}
   16770:	e037883a 	mov	sp,fp
   16774:	dfc00117 	ldw	ra,4(sp)
   16778:	df000017 	ldw	fp,0(sp)
   1677c:	dec00204 	addi	sp,sp,8
   16780:	f800283a 	ret

00016784 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   16784:	defffc04 	addi	sp,sp,-16
   16788:	df000315 	stw	fp,12(sp)
   1678c:	df000304 	addi	fp,sp,12
   16790:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   16794:	00bffa04 	movi	r2,-24
   16798:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1679c:	e03fff15 	stw	zero,-4(fp)
   167a0:	00001d06 	br	16818 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   167a4:	e0ffff17 	ldw	r3,-4(fp)
   167a8:	1805883a 	mov	r2,r3
   167ac:	1085883a 	add	r2,r2,r2
   167b0:	10c5883a 	add	r2,r2,r3
   167b4:	100490ba 	slli	r2,r2,2
   167b8:	00c00074 	movhi	r3,1
   167bc:	10c7883a 	add	r3,r2,r3
   167c0:	189d4d17 	ldw	r2,30004(r3)
   167c4:	1000111e 	bne	r2,zero,1680c <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   167c8:	e0ffff17 	ldw	r3,-4(fp)
   167cc:	1805883a 	mov	r2,r3
   167d0:	1085883a 	add	r2,r2,r2
   167d4:	10c5883a 	add	r2,r2,r3
   167d8:	100490ba 	slli	r2,r2,2
   167dc:	e13ffd17 	ldw	r4,-12(fp)
   167e0:	00c00074 	movhi	r3,1
   167e4:	10c7883a 	add	r3,r2,r3
   167e8:	191d4d15 	stw	r4,30004(r3)
      if (i > alt_max_fd)
   167ec:	d0e09817 	ldw	r3,-32160(gp)
   167f0:	e0bfff17 	ldw	r2,-4(fp)
   167f4:	1880020e 	bge	r3,r2,16800 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   167f8:	e0bfff17 	ldw	r2,-4(fp)
   167fc:	d0a09815 	stw	r2,-32160(gp)
      }
      rc = i;
   16800:	e0bfff17 	ldw	r2,-4(fp)
   16804:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   16808:	00000706 	br	16828 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
   1680c:	e0bfff17 	ldw	r2,-4(fp)
   16810:	10800044 	addi	r2,r2,1
   16814:	e0bfff15 	stw	r2,-4(fp)
   16818:	e0bfff17 	ldw	r2,-4(fp)
   1681c:	10800810 	cmplti	r2,r2,32
   16820:	103fe01e 	bne	r2,zero,167a4 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
   16824:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   16828:	e0bffe17 	ldw	r2,-8(fp)
}
   1682c:	e037883a 	mov	sp,fp
   16830:	df000017 	ldw	fp,0(sp)
   16834:	dec00104 	addi	sp,sp,4
   16838:	f800283a 	ret

0001683c <atexit>:
   1683c:	200b883a 	mov	r5,r4
   16840:	000f883a 	mov	r7,zero
   16844:	000d883a 	mov	r6,zero
   16848:	0009883a 	mov	r4,zero
   1684c:	00168a01 	jmpi	168a0 <__register_exitproc>

00016850 <exit>:
   16850:	defffe04 	addi	sp,sp,-8
   16854:	000b883a 	mov	r5,zero
   16858:	dc000015 	stw	r16,0(sp)
   1685c:	dfc00115 	stw	ra,4(sp)
   16860:	2021883a 	mov	r16,r4
   16864:	00169bc0 	call	169bc <__call_exitprocs>
   16868:	8009883a 	mov	r4,r16
   1686c:	0014d340 	call	14d34 <_exit>

00016870 <memcmp>:
   16870:	0007883a 	mov	r3,zero
   16874:	30c0021e 	bne	r6,r3,16880 <memcmp+0x10>
   16878:	0005883a 	mov	r2,zero
   1687c:	f800283a 	ret
   16880:	20c5883a 	add	r2,r4,r3
   16884:	18c00044 	addi	r3,r3,1
   16888:	28cf883a 	add	r7,r5,r3
   1688c:	10800003 	ldbu	r2,0(r2)
   16890:	39ffffc3 	ldbu	r7,-1(r7)
   16894:	11fff726 	beq	r2,r7,16874 <memcmp+0x4>
   16898:	11c5c83a 	sub	r2,r2,r7
   1689c:	f800283a 	ret

000168a0 <__register_exitproc>:
   168a0:	00800074 	movhi	r2,1
   168a4:	109e3d17 	ldw	r2,30964(r2)
   168a8:	defff904 	addi	sp,sp,-28
   168ac:	dc000015 	stw	r16,0(sp)
   168b0:	14000d17 	ldw	r16,52(r2)
   168b4:	dd400515 	stw	r21,20(sp)
   168b8:	dd000415 	stw	r20,16(sp)
   168bc:	dcc00315 	stw	r19,12(sp)
   168c0:	dc800215 	stw	r18,8(sp)
   168c4:	dfc00615 	stw	ra,24(sp)
   168c8:	dc400115 	stw	r17,4(sp)
   168cc:	2025883a 	mov	r18,r4
   168d0:	2827883a 	mov	r19,r5
   168d4:	302b883a 	mov	r21,r6
   168d8:	3829883a 	mov	r20,r7
   168dc:	8000081e 	bne	r16,zero,16900 <__register_exitproc+0x60>
   168e0:	14000e04 	addi	r16,r2,56
   168e4:	00c00034 	movhi	r3,0
   168e8:	14000d15 	stw	r16,52(r2)
   168ec:	18c00004 	addi	r3,r3,0
   168f0:	18000326 	beq	r3,zero,16900 <__register_exitproc+0x60>
   168f4:	00c00034 	movhi	r3,0
   168f8:	18c00017 	ldw	r3,0(r3)
   168fc:	10c03015 	stw	r3,192(r2)
   16900:	84400117 	ldw	r17,4(r16)
   16904:	88800810 	cmplti	r2,r17,32
   16908:	10000a1e 	bne	r2,zero,16934 <__register_exitproc+0x94>
   1690c:	00bfffc4 	movi	r2,-1
   16910:	dfc00617 	ldw	ra,24(sp)
   16914:	dd400517 	ldw	r21,20(sp)
   16918:	dd000417 	ldw	r20,16(sp)
   1691c:	dcc00317 	ldw	r19,12(sp)
   16920:	dc800217 	ldw	r18,8(sp)
   16924:	dc400117 	ldw	r17,4(sp)
   16928:	dc000017 	ldw	r16,0(sp)
   1692c:	dec00704 	addi	sp,sp,28
   16930:	f800283a 	ret
   16934:	90001926 	beq	r18,zero,1699c <__register_exitproc+0xfc>
   16938:	80802217 	ldw	r2,136(r16)
   1693c:	1000091e 	bne	r2,zero,16964 <__register_exitproc+0xc4>
   16940:	00800074 	movhi	r2,1
   16944:	10915304 	addi	r2,r2,17740
   16948:	103ff026 	beq	r2,zero,1690c <__register_exitproc+0x6c>
   1694c:	01004204 	movi	r4,264
   16950:	001454c0 	call	1454c <malloc>
   16954:	103fed26 	beq	r2,zero,1690c <__register_exitproc+0x6c>
   16958:	10004015 	stw	zero,256(r2)
   1695c:	10004115 	stw	zero,260(r2)
   16960:	80802215 	stw	r2,136(r16)
   16964:	880890ba 	slli	r4,r17,2
   16968:	00c00044 	movi	r3,1
   1696c:	1c46983a 	sll	r3,r3,r17
   16970:	1109883a 	add	r4,r2,r4
   16974:	25400015 	stw	r21,0(r4)
   16978:	11404017 	ldw	r5,256(r2)
   1697c:	94800098 	cmpnei	r18,r18,2
   16980:	28cab03a 	or	r5,r5,r3
   16984:	11404015 	stw	r5,256(r2)
   16988:	25002015 	stw	r20,128(r4)
   1698c:	9000031e 	bne	r18,zero,1699c <__register_exitproc+0xfc>
   16990:	11004117 	ldw	r4,260(r2)
   16994:	20c6b03a 	or	r3,r4,r3
   16998:	10c04115 	stw	r3,260(r2)
   1699c:	88800044 	addi	r2,r17,1
   169a0:	8c400084 	addi	r17,r17,2
   169a4:	882290ba 	slli	r17,r17,2
   169a8:	80800115 	stw	r2,4(r16)
   169ac:	0005883a 	mov	r2,zero
   169b0:	8461883a 	add	r16,r16,r17
   169b4:	84c00015 	stw	r19,0(r16)
   169b8:	003fd506 	br	16910 <__register_exitproc+0x70>

000169bc <__call_exitprocs>:
   169bc:	defff604 	addi	sp,sp,-40
   169c0:	00800074 	movhi	r2,1
   169c4:	dd800615 	stw	r22,24(sp)
   169c8:	159e3d17 	ldw	r22,30964(r2)
   169cc:	dd400515 	stw	r21,20(sp)
   169d0:	dd000415 	stw	r20,16(sp)
   169d4:	dfc00915 	stw	ra,36(sp)
   169d8:	df000815 	stw	fp,32(sp)
   169dc:	ddc00715 	stw	r23,28(sp)
   169e0:	dcc00315 	stw	r19,12(sp)
   169e4:	dc800215 	stw	r18,8(sp)
   169e8:	dc400115 	stw	r17,4(sp)
   169ec:	dc000015 	stw	r16,0(sp)
   169f0:	202b883a 	mov	r21,r4
   169f4:	2829883a 	mov	r20,r5
   169f8:	b4400d17 	ldw	r17,52(r22)
   169fc:	88000726 	beq	r17,zero,16a1c <__call_exitprocs+0x60>
   16a00:	8c000117 	ldw	r16,4(r17)
   16a04:	8cc02217 	ldw	r19,136(r17)
   16a08:	84bfffc4 	addi	r18,r16,-1
   16a0c:	802090ba 	slli	r16,r16,2
   16a10:	9c2f883a 	add	r23,r19,r16
   16a14:	8c21883a 	add	r16,r17,r16
   16a18:	90000c0e 	bge	r18,zero,16a4c <__call_exitprocs+0x90>
   16a1c:	dfc00917 	ldw	ra,36(sp)
   16a20:	df000817 	ldw	fp,32(sp)
   16a24:	ddc00717 	ldw	r23,28(sp)
   16a28:	dd800617 	ldw	r22,24(sp)
   16a2c:	dd400517 	ldw	r21,20(sp)
   16a30:	dd000417 	ldw	r20,16(sp)
   16a34:	dcc00317 	ldw	r19,12(sp)
   16a38:	dc800217 	ldw	r18,8(sp)
   16a3c:	dc400117 	ldw	r17,4(sp)
   16a40:	dc000017 	ldw	r16,0(sp)
   16a44:	dec00a04 	addi	sp,sp,40
   16a48:	f800283a 	ret
   16a4c:	a0000726 	beq	r20,zero,16a6c <__call_exitprocs+0xb0>
   16a50:	9800041e 	bne	r19,zero,16a64 <__call_exitprocs+0xa8>
   16a54:	94bfffc4 	addi	r18,r18,-1
   16a58:	bdffff04 	addi	r23,r23,-4
   16a5c:	843fff04 	addi	r16,r16,-4
   16a60:	003fed06 	br	16a18 <__call_exitprocs+0x5c>
   16a64:	b8c01f17 	ldw	r3,124(r23)
   16a68:	1d3ffa1e 	bne	r3,r20,16a54 <__call_exitprocs+0x98>
   16a6c:	89000117 	ldw	r4,4(r17)
   16a70:	80c00117 	ldw	r3,4(r16)
   16a74:	213fffc4 	addi	r4,r4,-1
   16a78:	24800f1e 	bne	r4,r18,16ab8 <__call_exitprocs+0xfc>
   16a7c:	8c800115 	stw	r18,4(r17)
   16a80:	183ff426 	beq	r3,zero,16a54 <__call_exitprocs+0x98>
   16a84:	8f000117 	ldw	fp,4(r17)
   16a88:	98000526 	beq	r19,zero,16aa0 <__call_exitprocs+0xe4>
   16a8c:	00800044 	movi	r2,1
   16a90:	148c983a 	sll	r6,r2,r18
   16a94:	99004017 	ldw	r4,256(r19)
   16a98:	3108703a 	and	r4,r6,r4
   16a9c:	2000081e 	bne	r4,zero,16ac0 <__call_exitprocs+0x104>
   16aa0:	183ee83a 	callr	r3
   16aa4:	89000117 	ldw	r4,4(r17)
   16aa8:	b0c00d17 	ldw	r3,52(r22)
   16aac:	273fd21e 	bne	r4,fp,169f8 <__call_exitprocs+0x3c>
   16ab0:	88ffe826 	beq	r17,r3,16a54 <__call_exitprocs+0x98>
   16ab4:	003fd006 	br	169f8 <__call_exitprocs+0x3c>
   16ab8:	80000115 	stw	zero,4(r16)
   16abc:	003ff006 	br	16a80 <__call_exitprocs+0xc4>
   16ac0:	99404117 	ldw	r5,260(r19)
   16ac4:	b93fff17 	ldw	r4,-4(r23)
   16ac8:	314c703a 	and	r6,r6,r5
   16acc:	3000041e 	bne	r6,zero,16ae0 <__call_exitprocs+0x124>
   16ad0:	200b883a 	mov	r5,r4
   16ad4:	a809883a 	mov	r4,r21
   16ad8:	183ee83a 	callr	r3
   16adc:	003ff106 	br	16aa4 <__call_exitprocs+0xe8>
   16ae0:	183ee83a 	callr	r3
   16ae4:	003fef06 	br	16aa4 <__call_exitprocs+0xe8>
   16ae8:	0001ffff 	0x1ffff
   16aec:	0201ffff 	0x201ffff
   16af0:	ffff0000 	call	ffff000 <_gp+0xffdf94c>
   16af4:	00000201 	jmpi	20 <__reset-0xffe0>
   16af8:	0201ffff 	0x201ffff
   16afc:	883a0000 	call	883a000 <_gp+0x881a94c>
   16b00:	010d00ff 	0x10d00ff
   16b04:	01010002 	0x1010002
	...
   16b10:	010d00ff 	0x10d00ff
   16b14:	01010004 	movi	r4,1024
   16b18:	00000100 	call	10 <__reset-0xfff0>
   16b1c:	00000000 	call	0 <__reset-0x10000>
   16b20:	011100ff 	0x11100ff
   16b24:	01010004 	movi	r4,1024
   16b28:	7f000105 	stb	fp,4(r15)
   16b2c:	007d0000 	call	7d000 <_gp+0x5d94c>
   16b30:	00000000 	call	0 <__reset-0x10000>
   16b34:	01883a00 	call	1883a0 <_gp+0x168cec>
   16b38:	0001054c 	andi	zero,zero,1045
   16b3c:	00011434 	movhi	zero,1104
   16b40:	00013754 	movui	zero,1245
   16b44:	00011464 	muli	zero,zero,1105
