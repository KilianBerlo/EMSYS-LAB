
jiwy_controller.elf:     file format elf32-littlenios2
jiwy_controller.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010224

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00006f64 memsz 0x00006f64 flags r-x
    LOAD off    0x00007f84 vaddr 0x00016f84 paddr 0x000174d8 align 2**12
         filesz 0x00000554 memsz 0x00000554 flags rw-
    LOAD off    0x00008a2c vaddr 0x00017a2c paddr 0x00017a2c align 2**12
         filesz 0x00000000 memsz 0x0000017c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000064d8  00010224  00010224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000888  000166fc  000166fc  000076fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000554  00016f84  000174d8  00007f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000017c  00017a2c  00017a2c  00008a2c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00017ba8  00017ba8  000084d8  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  000084d8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000fb8  00000000  00000000  00008508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   0001fb79  00000000  00000000  000094c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000ba96  00000000  00000000  00029039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   0000e8f4  00000000  00000000  00034acf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00002860  00000000  00000000  000433c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00009059  00000000  00000000  00045c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000070a7  00000000  00000000  0004ec7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000010  00000000  00000000  00055d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001588  00000000  00000000  00055d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  0005e0e7  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0005e0ea  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0005e0ed  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0005e0ee  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0005e0ef  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0005e0f3  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0005e0f7  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0005e0fb  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0005e104  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0005e10d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000013  00000000  00000000  0005e116  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002a  00000000  00000000  0005e129  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010224 l    d  .text	00000000 .text
000166fc l    d  .rodata	00000000 .rodata
00016f84 l    d  .rwdata	00000000 .rwdata
00017a2c l    d  .bss	00000000 .bss
00017ba8 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/Users/gteho/Repositories/EMSYS-LAB/nios/software/jiwy_controller_bsp//obj/HAL/src/crt0.o
0001025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.cpp
00017268 l     O .rwdata	00000001 _ZStL19piecewise_construct
00017269 l     O .rwdata	00000001 _ZStL13allocator_arg
0001726a l     O .rwdata	00000001 _ZStL6ignore
0001726b l     O .rwdata	00000001 _ZN6SerialL12MESSAGE_SIZEE
00010430 l     F .text	00000178 _Z41__static_initialization_and_destruction_0ii
000105a8 l     F .text	00000030 _GLOBAL__sub_I_uart
00000000 l    df *ABS*	00000000 motor.cpp
00000000 l    df *ABS*	00000000 uart.cpp
00017274 l     O .rwdata	00000001 _ZStL19piecewise_construct
00017275 l     O .rwdata	00000001 _ZStL13allocator_arg
00017276 l     O .rwdata	00000001 _ZStL6ignore
00017277 l     O .rwdata	00000001 _ZN6SerialL12MESSAGE_SIZEE
0001127c l     F .text	00000074 _Z41__static_initialization_and_destruction_0ii
000112f0 l     F .text	00000030 _GLOBAL__sub_I__ZN6Serial4UART10uart_readyE
00011320 l     F .text	00000030 _GLOBAL__sub_D__ZN6Serial4UART10uart_readyE
00000000 l    df *ABS*	00000000 eh_personality.cc
00011908 l     F .text	00000090 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv
00011998 l     F .text	000001e8 _ZL28read_encoded_value_with_basehjPKhPj
00011b80 l     F .text	00000070 _ZL21base_of_encoded_valuehP15_Unwind_Context
00011bf0 l     F .text	0000012c _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
00011d1c l     F .text	00000110 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
000127a0 l     F .text	00000068 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 function_type_info.cc
00000000 l    df *ABS*	00000000 pointer_type_info.cc
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 functional.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 del_ops.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
000130ec l     F .text	000000cc _ZN12_GLOBAL__N_14pool4freeEPv.constprop.0
00017a98 l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
000131b8 l     F .text	00000090 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.0
00013368 l     F .text	00000064 _GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
00017a34 l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 fundamental_type_info.cc
00000000 l    df *ABS*	00000000 pbase_type_info.cc
000174a0 l     O .rwdata	00000008 _ZZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvjE3pmf
0001749c l     O .rwdata	00000004 _ZZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvjE2pm
00000000 l    df *ABS*	00000000 pmem_type_info.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 eh_aux_runtime.cc
00000000 l    df *ABS*	00000000 bad_array_new.cc
00000000 l    df *ABS*	00000000 bad_cast.cc
00000000 l    df *ABS*	00000000 bad_typeid.cc
00000000 l    df *ABS*	00000000 bad_alloc.cc
00000000 l    df *ABS*	00000000 unwind-sjlj.c
00013c24 l     F .text	00000114 _Unwind_ForcedUnwind_Phase2
00017a3c l     O .bss	00000004 fc_static
00013d38 l     F .text	000000d8 _Unwind_RaiseException_Phase2
00013e10 l     F .text	0000002c uw_install_context.constprop.0.isra.0
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00016f84 l     O .rwdata	000000e4 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_kill.c
00014bd8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00014d40 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000174b4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00014fa8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000150e8 l     F .text	00000034 alt_dev_reg
00017068 l     O .rwdata	0000002c jtag_uart
00017094 l     O .rwdata	0000002c uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000153f4 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
000155b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
000156b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_close.c
000157d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00015908 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00015934 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00015b98 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00015ce8 l     F .text	0000003c alt_get_errno
00015d24 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00017a5c g     O .bss	00000004 alt_instruction_exception_handler
000132d0 g     F .text	00000028 __cxa_free_exception
00012d60 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
00016ce0  w    O .rodata	00000010 _ZTIPKDs
0001272c g     F .text	00000014 _ZSt10unexpectedv
00011064 g     F .text	000000dc _ZN6Serial4UART10uart_0_isrEPv
00017484  w    O .rwdata	00000008 _ZTIw
00017464  w    O .rwdata	00000008 _ZTIc
00014e2c g     F .text	0000007c alt_main
00014400 g     F .text	00000080 _puts_r
00017aa8 g     O .bss	00000100 alt_irq
00013604 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
0001745c  w    O .rwdata	00000008 _ZTIa
000114ec  w    F .text	00000140 _ZNSt8functionIFvRN6Serial10rx_messageEEEC1ERKS4_
00013ebc g     F .text	00000020 .hidden _Unwind_GetIPInfo
000174d8 g       *ABS*	00000000 __flash_rwdata_start
00016b70  w    O .rodata	00000010 _ZTIPy
00017300  w    O .rwdata	00000002 _ZTSa
00010bc0  w    F .text	00000024 _ZSt7forwardIRN6Serial10rx_messageEEOT_RNSt16remove_referenceIS3_E4typeE
000168d4  w    O .rodata	00000014 _ZTVSt17bad_function_call
000128cc g     F .text	00000084 __cxa_rethrow
00013e54 g     F .text	00000010 .hidden _Unwind_SjLj_Unregister
00012770 g     F .text	00000024 _ZSt14set_unexpectedPFvvE
00016c00  w    O .rodata	00000010 _ZTIPKi
00013eac g     F .text	00000010 .hidden _Unwind_GetIP
00017ba8 g       *ABS*	00000000 __alt_heap_start
00017340  w    O .rwdata	00000003 _ZTSPj
000116dc  w    F .text	00000038 _ZNKSt8functionIFvRN6Serial10rx_messageEEEcvbEv
00014740 g     F .text	0000004c _kill_r
00010dec  w    F .text	00000058 _ZSt13__invoke_implIvRPFvRN6Serial10rx_messageEEJS2_EET_St14__invoke_otherOT0_DpOT1_
00017a78 g     O .bss	00000010 motor_pan
00013bdc g     F .text	00000010 _ZNSt9bad_allocD2Ev
00010f0c g     F .text	00000064 _ZN5Plant5MotorC2Emm
00014534 g     F .text	00000078 _signal_r
00017364  w    O .rwdata	00000003 _ZTSPx
0001746c  w    O .rwdata	00000008 _ZTIDi
000173c4  w    O .rwdata	00000005 _ZTSPKDd
00017358  w    O .rwdata	00000003 _ZTSPm
00010730  w    F .text	00000070 _ZN6Serial10rx_message13getSecondWordEv
0001333c g     F .text	0000002c __cxa_free_dependent_exception
00010fc8 g     F .text	00000058 _ZN5Plant5Motor13setSecondWordEm
00012a94 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
0001680c  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
00014ecc g     F .text	00000024 __malloc_unlock
000172cc  w    O .rwdata	00000005 _ZTSPKDu
00016e10  w    O .rodata	00000024 _ZTVN10__cxxabiv129__pointer_to_member_type_infoE
00013604 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
00013598 g     F .text	00000020 _ZSt18uncaught_exceptionv
00010348 g     F .text	000000a4 _Z17handleUartMessageRN6Serial10rx_messageE
00013a2c g     F .text	0000000c __cxa_deleted_virtual
00016af0  w    O .rodata	00000010 _ZTIPDn
000114b8  w    F .text	00000034 _ZNSt5arrayIhLj4EE3endEv
0001733c  w    O .rwdata	00000002 _ZTSj
000135d4 g     F .text	00000004 _ZNSt9exceptionD2Ev
000167b8  w    O .rodata	00000024 _ZTSN10__cxxabiv119__pointer_type_infoE
000129a8 g     F .text	00000010 _ZN10__cxxabiv119__pointer_type_infoD1Ev
00016ea8  w    O .rodata	0000000c _ZTISt8bad_cast
000169f0  w    O .rodata	00000014 _ZTVSt13bad_exception
0001617c g     F .text	00000024 altera_nios2_gen2_irq_init
00010814  w    F .text	00000150 _ZNSt8functionIFvRN6Serial10rx_messageEEEC2IPS3_vvEET_
000172e8  w    O .rwdata	00000004 _ZTSPDi
00013ae0 g     F .text	00000010 _ZNSt20bad_array_new_lengthD1Ev
000172ac  w    O .rwdata	00000002 _ZTSb
000107d8  w    F .text	0000003c _ZNSt5arrayIhLj4EEixEj
00010000 g     F .entry	0000000c __reset
000172fc  w    O .rwdata	00000004 _ZTSPKc
00013ef8 g     F .text	00000008 .hidden _Unwind_GetRegionStart
00017374  w    O .rwdata	00000004 _ZTSPKy
000172b4  w    O .rwdata	00000004 _ZTSPKb
00011714  w    F .text	00000024 _ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_
00010020 g       *ABS*	00000000 __flash_exceptions_start
00016c20  w    O .rodata	00000010 _ZTIPKt
00017304  w    O .rwdata	00000003 _ZTSPa
00017a48 g     O .bss	00000004 errno
00017a2e g     O .bss	00000004 _ZN6Serial4UART7rx_dataE
000172a8  w    O .rwdata	00000004 _ZTSPKv
000140c0 g     F .text	00000088 .hidden _Unwind_Backtrace
00016d40  w    O .rodata	00000010 _ZTIPKb
00017a54 g     O .bss	00000004 alt_argv
0001f268 g       *ABS*	00000000 _gp
00013b98 g     F .text	00000038 _ZNSt10bad_typeidD0Ev
0001363c g     F .text	00000010 _ZN10__cxxabiv123__fundamental_type_infoD1Ev
00013b44 g     F .text	00000038 _ZNSt8bad_castD0Ev
00014920 g     F .text	00000020 getpid
000124c4 g     F .text	0000017c __cxa_call_unexpected
00010e44  w    F .text	00000060 _ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE
00013424 g     F .text	00000008 __cxa_get_exception_ptr
00017350  w    O .rwdata	00000004 _ZTSPKl
000170e8 g     O .rwdata	00000180 alt_fd_list
000136ac g     F .text	00000038 _ZN10__cxxabiv117__pbase_type_infoD0Ev
00016bd0  w    O .rodata	00000010 _ZTIPl
00013fe0 g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
00013e7c g     F .text	00000018 .hidden _Unwind_GetCFA
00017444  w    O .rwdata	00000008 _ZTIt
00012740 g     F .text	00000024 _ZSt13set_terminatePFvvE
000161a0 g     F .text	00000090 alt_find_dev
000172a4  w    O .rwdata	00000003 _ZTSPv
000132f8 g     F .text	00000044 __cxa_allocate_dependent_exception
00017a88 g     O .bss	00000010 _ZN6Serial4UART8callbackE
00010da4  w    F .text	00000024 _ZSt11__addressofIKPFvRN6Serial10rx_messageEEEPT_RS6_
00012eb8 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
00015c6c g     F .text	0000007c alt_io_redirect
000166fc g       *ABS*	00000000 __DTOR_END__
00010a30  w    F .text	00000058 _ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E9_M_invokeERKSt9_Any_dataS2_
00016dd4  w    O .rodata	0000002e _ZTSN10__cxxabiv129__pointer_to_member_type_infoE
00016d70  w    O .rodata	00000010 _ZTIPv
00012ed0 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
00014480 g     F .text	00000010 puts
0001748c  w    O .rwdata	00000008 _ZTIb
00016da4  w    O .rodata	0000000c _ZTIN10__cxxabiv117__pbase_type_infoE
00015b00 g     F .text	00000098 alt_exception_cause_generated_bad_addr
000172ec  w    O .rwdata	00000005 _ZTSPKDi
00016bc0  w    O .rodata	00000010 _ZTIPKl
000129b8 g     F .text	00000038 _ZN10__cxxabiv119__pointer_type_infoD0Ev
00013ae0 g     F .text	00000010 _ZNSt20bad_array_new_lengthD2Ev
00015274 g     F .text	000000ec altera_avalon_jtag_uart_read
00014160 g     F .text	00000010 malloc
00016e50  w    O .rodata	00000019 _ZTSSt20bad_array_new_length
00011350  w    F .text	0000002c _ZNKSt14_Function_base8_M_emptyEv
000145ac g     F .text	000000b4 _raise_r
00016ae0  w    O .rodata	00000010 _ZTIPKDn
00017328  w    O .rwdata	00000003 _ZTSPt
00011140 g     F .text	00000090 _ZN6Serial4UARTC1ESt8functionIFvRNS_10rx_messageEEE
0001364c g     F .text	00000038 _ZN10__cxxabiv123__fundamental_type_infoD0Ev
0001478c g     F .text	00000004 _getpid_r
000135b8 g     F .text	0000001c _ZSt19uncaught_exceptionsv
00013248 g     F .text	00000030 _ZN9__gnu_cxx9__freeresEv
000173e4  w    O .rwdata	00000008 _ZTIDd
00012f84 g     F .text	0000009c _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
0001738c  w    O .rwdata	00000004 _ZTSPKd
00014660 g     F .text	000000a0 __sigtramp_r
00014490 g     F .text	00000048 _sbrk_r
000135dc g     F .text	0000000c _ZGTtNKSt9exception4whatEv
0001687c  w    O .rodata	00000020 _ZTVSt9type_info
0001369c g     F .text	00000010 _ZN10__cxxabiv117__pbase_type_infoD1Ev
000135dc g     F .text	0000000c _ZNKSt9exception4whatEv
0001735c  w    O .rwdata	00000004 _ZTSPKm
000174c8 g     O .rwdata	00000004 alt_max_fd
00016cd0  w    O .rodata	00000010 _ZTIPDi
00016f28  w    O .rodata	0000000c _ZTISt9bad_alloc
00016b50  w    O .rodata	00000010 _ZTIPf
000167e8  w    O .rodata	00000024 _ZTVN10__cxxabiv119__pointer_type_infoE
00016ab0  w    O .rodata	00000010 _ZTIPDd
000168c8  w    O .rodata	0000000c _ZTISt17bad_function_call
00016840  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
00013b34 g     F .text	00000010 _ZNSt8bad_castD1Ev
00012f18 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
000130e4 g     F .text	00000004 _ZdlPv
000174a8 g     O .rwdata	00000004 _global_impure_ptr
00017ba8 g       *ABS*	00000000 __bss_end
00017370  w    O .rwdata	00000003 _ZTSPy
000172c4  w    O .rwdata	00000003 _ZTSDu
00014af0 g     F .text	000000e8 alt_iic_isr_register
00017338  w    O .rwdata	00000004 _ZTSPKi
00016d50  w    O .rodata	00000010 _ZTIPb
00016074 g     F .text	00000108 alt_tick
00013e3c g     F .text	00000018 .hidden _Unwind_SjLj_Register
000116a8  w    F .text	00000034 _ZNSt5arrayIhLj4EE4dataEv
000117c4  w    F .text	00000024 _ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_
00014148 g     F .text	00000018 abort
00017414  w    O .rwdata	00000008 _ZTIy
00016a80  w    O .rodata	00000010 _ZTIPKDe
000134e4 g     F .text	000000b4 __cxa_end_catch
00014aa4 g     F .text	0000004c alt_ic_irq_enabled
000135d8 g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
00016b40  w    O .rodata	00000010 _ZTIPKf
00015fd0 g     F .text	000000a4 alt_alarm_stop
00010624  w    F .text	00000024 _ZNKSt9_Any_data9_M_accessEv
00016b30  w    O .rodata	00000010 _ZTIPd
00017a4c g     O .bss	00000004 alt_irq_active
00012708 g     F .text	00000014 _ZSt9terminatev
00017318  w    O .rwdata	00000002 _ZTSs
000173a0  w    O .rwdata	00000004 _ZTSPDn
00010000 g       *ABS*	00000000 __alt_mem_onchip_mem
00016db0  w    O .rodata	00000024 _ZTVN10__cxxabiv117__pbase_type_infoE
000100fc g     F .exceptions	000000c8 alt_irq_handler
00010674  w    F .text	0000008c _ZNSt14_Function_baseD2Ev
000170c0 g     O .rwdata	00000028 alt_dev_null
00017334  w    O .rwdata	00000003 _ZTSPi
00013610 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
0001737c  w    O .rwdata	00000003 _ZTSPf
00016d20  w    O .rodata	00000010 _ZTIPKw
00017388  w    O .rwdata	00000003 _ZTSPd
000173b0  w    O .rwdata	00000004 _ZTSPDf
000168e8  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
000158e8 g     F .text	00000020 alt_dcache_flush_all
0001741c  w    O .rwdata	00000008 _ZTIx
000172bc  w    O .rwdata	00000003 _ZTSPw
00017284  w    O .rwdata	00000008 _ZTISt9exception
000173bc  w    O .rwdata	00000003 _ZTSDd
000173b4  w    O .rwdata	00000005 _ZTSPKDf
00017354  w    O .rwdata	00000002 _ZTSm
000174d8 g       *ABS*	00000000 __ram_rwdata_end
00016c10  w    O .rodata	00000010 _ZTIPi
00012d5c g     F .text	00000004 _ZNSt9type_infoD1Ev
000174c0 g     O .rwdata	00000008 alt_dev_list
00013610 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
00014fe4 g     F .text	00000104 write
00012968 g     F .text	00000038 _ZN10__cxxabiv120__function_type_infoD0Ev
000172d8  w    O .rwdata	00000004 _ZTSPDs
00012d70 g     F .text	00000008 _ZNSt9type_infoD0Ev
00016f84 g       *ABS*	00000000 __ram_rodata_end
000130e8 g     F .text	00000004 _ZdlPvj
0001740c  w    O .rwdata	00000008 _ZTIf
00014c14 g     F .text	0000012c kill
0001734c  w    O .rwdata	00000003 _ZTSPl
00010b20  w    F .text	00000060 _ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE
00012950 g     F .text	00000008 _ZNK10__cxxabiv120__function_type_info15__is_function_pEv
000172dc  w    O .rwdata	00000005 _ZTSPKDs
00016c50  w    O .rodata	00000010 _ZTIPs
000105d8  w    F .text	00000028 _ZnwjPv
00012d68 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
000172d4  w    O .rwdata	00000003 _ZTSDs
00017368  w    O .rwdata	00000004 _ZTSPKx
00012808 g     F .text	00000064 __cxa_init_primary_exception
00012764 g     F .text	0000000c _ZSt13get_terminatev
00017ba8 g       *ABS*	00000000 end
000173ac  w    O .rwdata	00000003 _ZTSDf
00012dc8 g     F .text	00000010 _ZNSt17bad_function_callD2Ev
000172f4  w    O .rwdata	00000002 _ZTSc
00010be4  w    F .text	00000064 _ZSt10__invoke_rIvRPFvRN6Serial10rx_messageEEJS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_
000156f0 g     F .text	000000e0 altera_avalon_uart_write
000140a8 g     F .text	00000018 .hidden _Unwind_DeleteException
00017344  w    O .rwdata	00000004 _ZTSPKj
000101c4 g     F .exceptions	00000060 alt_instruction_exception_entry
00013020 g     F .text	000000c4 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
000166e9 g       *ABS*	00000000 __CTOR_LIST__
0001a000 g       *ABS*	00000000 __alt_stack_pointer
00016bb0  w    O .rodata	00000010 _ZTIPm
00015470 g     F .text	00000084 alt_avalon_timer_sc_init
00015554 g     F .text	00000060 altera_avalon_uart_write_fd
00012e40 g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
00015360 g     F .text	00000094 altera_avalon_jtag_uart_write
000107a0  w    F .text	00000038 _ZNSt8functionIFvRN6Serial10rx_messageEEED1Ev
00016978  w    O .rodata	00000012 _ZTSSt13bad_exception
00010814  w    F .text	00000150 _ZNSt8functionIFvRN6Serial10rx_messageEEEC1IPS3_vvEET_
0001730c  w    O .rwdata	00000002 _ZTSh
00013ad4 g     F .text	0000000c _ZNKSt20bad_array_new_length4whatEv
000141a0 g     F .text	00000100 _free_r
00013b28 g     F .text	0000000c _ZNKSt8bad_cast4whatEv
000109bc  w    F .text	00000024 _ZSt4moveIRPFvRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOS7_
00016570 g     F .text	0000012c __call_exitprocs
00010ea4  w    F .text	00000038 _ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE
00010224 g     F .text	0000003c _start
00017a60 g     O .bss	00000004 _alt_tick_rate
00010f0c g     F .text	00000064 _ZN5Plant5MotorC1Emm
0001686c  w    O .rodata	0000000d _ZTSSt9type_info
0001369c g     F .text	00000010 _ZN10__cxxabiv117__pbase_type_infoD2Ev
00013bd0 g     F .text	0000000c _ZNKSt9bad_alloc4whatEv
00013a20 g     F .text	0000000c __cxa_pure_virtual
00016f34  w    O .rodata	00000014 _ZTVSt9bad_alloc
00017a64 g     O .bss	00000004 _alt_nticks
00014710 g     F .text	00000014 signal
00015158 g     F .text	0000005c alt_sys_init
000172b0  w    O .rwdata	00000003 _ZTSPb
00017474  w    O .rwdata	00000008 _ZTIDs
00016c70  w    O .rodata	00000010 _ZTIPh
00016d30  w    O .rodata	00000010 _ZTIPw
00016ee8  w    O .rodata	0000000c _ZTISt10bad_typeid
00016454 g     F .text	0000011c __register_exitproc
00016f18  w    O .rodata	0000000d _ZTSSt9bad_alloc
00016e78  w    O .rodata	00000014 _ZTVSt20bad_array_new_length
000135e8 g     F .text	0000000c _ZGTtNKSt13bad_exception4whatEv
00012adc g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
00010ca8  w    F .text	000000cc _ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation
00017454  w    O .rwdata	00000008 _ZTIh
00016b80  w    O .rodata	00000010 _ZTIPKx
0001142c  w    F .text	0000005c _ZNSt8functionIFvRN6Serial10rx_messageEEEaSERKS4_
00016f84 g       *ABS*	00000000 __ram_rwdata_start
00013f18 g     F .text	000000c8 .hidden _Unwind_SjLj_RaiseException
000166fc g       *ABS*	00000000 __ram_rodata_start
00014024 g     F .text	00000044 .hidden _Unwind_SjLj_Resume
00010648  w    F .text	0000002c _ZNSt14_Function_baseC1Ev
00016a18  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
00017434  w    O .rwdata	00000008 _ZTIj
00013af0 g     F .text	00000038 _ZNSt20bad_array_new_lengthD0Ev
00017404  w    O .rwdata	00000008 _ZTId
00013aa0 g     F .text	00000034 __cxa_throw_bad_array_new_length
00012d5c g     F .text	00000004 _ZNSt9type_infoD2Ev
0001162c  w    F .text	0000007c _ZNSt8functionIFvRN6Serial10rx_messageEEE4swapERS4_
0001739c  w    O .rwdata	00000003 _ZTSDn
00013614 g     F .text	00000008 _ZN10__cxxabiv119__foreign_exceptionD0Ev
00013940 g     F .text	00000010 _ZN10__cxxabiv129__pointer_to_member_type_infoD2Ev
00012cd8 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
00016be0  w    O .rodata	00000010 _ZTIPKj
000129a0 g     F .text	00000008 _ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv
00016a54  w    O .rodata	0000000c _ZTIN10__cxxabiv123__fundamental_type_infoE
000151b4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00016338 g     F .text	000000b8 alt_get_fd
00010c78  w    F .text	00000030 _ZNSt9_Any_data9_M_accessIPPFvRN6Serial10rx_messageEEEERT_v
00010b80  w    F .text	00000040 _ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE14_M_get_pointerERKSt9_Any_data
000173a4  w    O .rwdata	00000005 _ZTSPKDn
00017294  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
0001678c  w    O .rodata	0000000c _ZTIN10__cxxabiv120__function_type_infoE
00017380  w    O .rwdata	00000004 _ZTSPKf
00017308  w    O .rwdata	00000004 _ZTSPKa
00016424 g     F .text	00000030 memcmp
00017ba8 g       *ABS*	00000000 __alt_stack_base
00013bec g     F .text	00000038 _ZNSt9bad_allocD0Ev
00012a94 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
0001363c g     F .text	00000010 _ZN10__cxxabiv123__fundamental_type_infoD2Ev
000172c8  w    O .rwdata	00000004 _ZTSPDu
00014068 g     F .text	00000040 .hidden _Unwind_SjLj_Resume_or_Rethrow
00016e9c  w    O .rodata	0000000c _ZTSSt8bad_cast
00012d60 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
000129a8 g     F .text	00000010 _ZN10__cxxabiv119__pointer_type_infoD2Ev
0001726c  w    O .rwdata	00000008 _ZTIFvRN6Serial10rx_messageEE
00011738  w    F .text	0000008c _ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_
00010d74  w    F .text	00000030 _ZNKSt9_Any_data9_M_accessIPFvRN6Serial10rx_messageEEEERKT_v
000169dc  w    O .rodata	00000014 _ZTVSt9exception
00013608 g     F .text	00000008 _ZN10__cxxabiv115__forced_unwindD0Ev
00016230 g     F .text	00000108 alt_find_file
00015970 g     F .text	000000a8 alt_dev_llist_insert
00014ea8 g     F .text	00000024 __malloc_lock
000107a0  w    F .text	00000038 _ZNSt8functionIFvRN6Serial10rx_messageEEED2Ev
00014ef0 g     F .text	000000b8 sbrk
00013950 g     F .text	00000038 _ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev
00016918  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
0001286c g     F .text	00000060 __cxa_throw
00013edc g     F .text	00000010 .hidden _Unwind_SetIP
0001672c  w    O .rodata	0000001b _ZTSPFvRN6Serial10rx_messageEE
00016ad0  w    O .rodata	00000010 _ZTIPDf
0001743c  w    O .rwdata	00000008 _ZTIi
00016b60  w    O .rodata	00000010 _ZTIPKy
000147f0 g     F .text	000000a8 __sfvwrite_small_dev
00016d10  w    O .rodata	00000010 _ZTIPDu
00011878  w    F .text	0000006c _ZSt4swapIPFvRKSt9_Any_dataRN6Serial10rx_messageEEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_
00017a2c g       *ABS*	00000000 __bss_start
00014180 g     F .text	00000020 memset
000103ec g     F .text	00000044 main
00017390  w    O .rwdata	00000002 _ZTSe
00017a2d g     O .bss	00000001 _ZN6Serial4UART10uart_readyE
00017a58 g     O .bss	00000004 alt_envp
00016ef4  w    O .rodata	00000014 _ZTVSt10bad_typeid
00015214 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000173fc  w    O .rwdata	00000008 _ZTIe
0001361c g     F .text	00000004 _ZGTtNKSt9exceptionD1Ev
00013624 g     F .text	0000000c __cxa_get_globals_fast
00017a68 g     O .bss	00000010 motor_tilt
00016748  w    O .rodata	0000001a _ZTSFvRN6Serial10rx_messageEE
00012e0c g     F .text	00000034 _ZSt25__throw_bad_function_callv
00016eb4  w    O .rodata	00000014 _ZTVSt8bad_cast
0001a000 g       *ABS*	00000000 __alt_heap_limit
00017378  w    O .rwdata	00000002 _ZTSf
00013b7c g     F .text	0000000c _ZNKSt10bad_typeid4whatEv
00016ca0  w    O .rodata	00000010 _ZTIPKc
000142a0 g     F .text	00000160 _malloc_r
00012dbc g     F .text	0000000c _ZNKSt17bad_function_call4whatEv
00016ba0  w    O .rodata	00000010 _ZTIPKm
000135e8 g     F .text	0000000c _ZNKSt13bad_exception4whatEv
000174cc g     O .rwdata	00000004 alt_errno
00014724 g     F .text	0000000c _init_signal
0001690c  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
00016cc0  w    O .rodata	00000010 _ZTIPKDi
000135d8 g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
00016e6c  w    O .rodata	0000000c _ZTISt20bad_array_new_length
00013940 g     F .text	00000010 _ZN10__cxxabiv129__pointer_to_member_type_infoD1Ev
00016b00  w    O .rodata	00000010 _ZTIPKe
000166f8 g       *ABS*	00000000 __CTOR_END__
00010674  w    F .text	0000008c _ZNSt14_Function_baseD1Ev
000172e4  w    O .rwdata	00000003 _ZTSDi
00017a32 g     O .bss	00000001 _ZN6Serial4UART6rx_lenE
00014790 g     F .text	00000044 strcmp
00016c40  w    O .rodata	00000010 _ZTIPKs
00016cb0  w    O .rodata	00000010 _ZTIPc
000173f4  w    O .rwdata	00000008 _ZTIDn
000166fc g       *ABS*	00000000 __flash_rodata_start
00016a04  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
00010700  w    F .text	00000030 _ZN6Serial10rx_message12getFirstWordEv
000166f8 g       *ABS*	00000000 __DTOR_LIST__
000173ec  w    O .rwdata	00000008 _ZTIDf
00013b34 g     F .text	00000010 _ZNSt8bad_castD2Ev
00017394  w    O .rwdata	00000003 _ZTSPe
000172b8  w    O .rwdata	00000002 _ZTSw
0001511c g     F .text	0000003c alt_irq_init
000172f8  w    O .rwdata	00000003 _ZTSPc
00015f60 g     F .text	00000070 alt_release_fd
00012aa4 g     F .text	00000038 _ZN10__cxxabiv120__si_class_type_infoD0Ev
000136e4 g     F .text	0000025c _ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj
0001137c  w    F .text	00000038 _ZNSt8functionIFvRN6Serial10rx_messageEEEC1Ev
00016ac0  w    O .rodata	00000010 _ZTIPKDf
000173d4  w    O .rwdata	00000005 _ZTSPKDe
000114ec  w    F .text	00000140 _ZNSt8functionIFvRN6Serial10rx_messageEEEC2ERKS4_
00010994  w    F .text	00000028 _ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE21_M_not_empty_functionIS4_EEbPT_
000163f0 g     F .text	00000014 atexit
00014898 g     F .text	00000050 _write_r
00013a38 g     F .text	00000034 __cxa_bad_cast
00013f10 g     F .text	00000008 .hidden _Unwind_GetTextRelBase
000133cc g     F .text	00000058 __cxa_call_terminate
00017424  w    O .rwdata	00000008 _ZTIm
00011854  w    F .text	00000024 _ZSt4moveIRPFvRKSt9_Any_dataRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOSA_
000174ac g     O .rwdata	00000004 _impure_ptr
0001728c  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
00016798  w    O .rodata	00000020 _ZTVN10__cxxabiv120__function_type_infoE
00017a50 g     O .bss	00000004 alt_argc
00016a60  w    O .rodata	00000020 _ZTVN10__cxxabiv123__fundamental_type_infoE
00015a7c g     F .text	00000064 _do_dtors
00010a88  w    F .text	00000098 _ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation
00016e04  w    O .rodata	0000000c _ZTIN10__cxxabiv129__pointer_to_member_type_infoE
000109e0  w    F .text	00000050 _ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE15_M_init_functorERSt9_Any_dataOS5_
00011488  w    F .text	00000030 _ZNSt5arrayIhLj4EE5beginEv
00016d00  w    O .rodata	00000010 _ZTIPKDu
000113b4  w    F .text	00000078 _ZNKSt8functionIFvRN6Serial10rx_messageEEEclES2_
00012794 g     F .text	0000000c _ZSt14get_unexpectedv
00010020 g       .exceptions	00000000 alt_irq_entry
000111d0 g     F .text	000000ac _ZN6Serial4UART8sendDataESt5arrayIhLj4EE
000173cc  w    O .rwdata	00000003 _ZTSDe
00013f00 g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
00016c80  w    O .rodata	00000010 _ZTIPKa
000117e8  w    F .text	0000006c _ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_
000174b8 g     O .rwdata	00000008 alt_fs_list
000169b8  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
0001747c  w    O .rwdata	00000008 _ZTIDu
00016bf0  w    O .rodata	00000010 _ZTIPj
00013eec g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
000173d0  w    O .rwdata	00000004 _ZTSPDe
0001342c g     F .text	000000b8 __cxa_begin_catch
00017314  w    O .rwdata	00000004 _ZTSPKh
00011140 g     F .text	00000090 _ZN6Serial4UARTC2ESt8functionIFvRNS_10rx_messageEEE
00012ed0 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
0001271c g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
00016d60  w    O .rodata	00000010 _ZTIPKv
00017398  w    O .rwdata	00000004 _ZTSPKe
00012dd8 g     F .text	00000034 _ZNSt17bad_function_callD0Ev
00010964  w    F .text	00000030 _ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj
00010020 g       *ABS*	00000000 __ram_exceptions_start
000168b0  w    O .rodata	00000016 _ZTSSt17bad_function_call
000172a0  w    O .rwdata	00000002 _ZTSv
00012dc8 g     F .text	00000010 _ZNSt17bad_function_callD1Ev
00010260 g     F .text	000000e8 _Z20update_encoder_valueN6Serial4UARTEmi
000135fc g     F .text	00000008 _ZNSt13bad_exceptionD0Ev
00010648  w    F .text	0000002c _ZNSt14_Function_baseC2Ev
0001729c g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
00017324  w    O .rwdata	00000002 _ZTSt
000129f0 g     F .text	000000a4 _ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj
00016c30  w    O .rodata	00000010 _ZTIPt
00014940 g     F .text	00000050 alt_ic_isr_register
00013278 g     F .text	00000058 __cxa_allocate_exception
00016b20  w    O .rodata	00000010 _ZTIPKd
00016834  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
00016c60  w    O .rodata	00000010 _ZTIPKh
000174d8 g       *ABS*	00000000 _edata
000154f4 g     F .text	00000060 altera_avalon_uart_read_fd
00017ba8 g       *ABS*	00000000 _end
00011e2c g     F .text	00000698 __gxx_personality_sj0
00010224 g       *ABS*	00000000 __ram_exceptions_end
00017330  w    O .rwdata	00000002 _ZTSi
00010dc8  w    F .text	00000024 _ZSt7forwardIRPFvRN6Serial10rx_messageEEEOT_RNSt16remove_referenceIS6_E4typeE
0001736c  w    O .rwdata	00000002 _ZTSy
000135d4 g     F .text	00000004 _ZNSt9exceptionD1Ev
00016d80  w    O .rodata	00000022 _ZTSN10__cxxabiv117__pbase_type_infoE
00014a18 g     F .text	0000008c alt_ic_irq_disable
00017348  w    O .rwdata	00000002 _ZTSl
00017494  w    O .rwdata	00000008 _ZTIv
0001731c  w    O .rwdata	00000003 _ZTSPs
00016404 g     F .text	00000020 exit
00013e94 g     F .text	00000018 .hidden _Unwind_SetGR
00012c3c g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
00012640 g     F .text	000000c8 _ZN10__cxxabiv111__terminateEPFvvE
00016764  w    O .rodata	00000025 _ZTSN10__cxxabiv120__function_type_infoE
00013bdc g     F .text	00000010 _ZNSt9bad_allocD1Ev
00010c48  w    F .text	00000030 _ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v
00011020 g     F .text	00000044 _ZN5Plant5Motor4stopEv
0001a000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00017a2c g     O .bss	00000001 uart
00017384  w    O .rwdata	00000002 _ZTSd
0001742c  w    O .rwdata	00000008 _ZTIl
000173c0  w    O .rwdata	00000004 _ZTSPDd
0001698c  w    O .rodata	0000000c _ZTISt13bad_exception
00016a90  w    O .rodata	00000010 _ZTIPDe
0001137c  w    F .text	00000038 _ZNSt8functionIFvRN6Serial10rx_messageEEEC2Ev
00010600  w    F .text	00000024 _ZNSt9_Any_data9_M_accessEv
00013684  w    F .text	00000018 _ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj
00012958 g     F .text	00000010 _ZN10__cxxabiv120__function_type_infoD2Ev
00016b90  w    O .rodata	00000010 _ZTIPx
000148e8 g     F .text	00000038 _exit
00013e64 g     F .text	00000018 .hidden _Unwind_GetGR
00013630 g     F .text	0000000c __cxa_get_globals
00017278 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
000147d4 g     F .text	0000001c strlen
000144d8 g     F .text	0000005c _init_signal_r
0001727c  w    O .rwdata	00000008 _ZTISt9type_info
00015e00 g     F .text	00000160 open
00016b10  w    O .rodata	00000010 _ZTIPe
00013620 g     F .text	00000004 _ZGTtNKSt13bad_exceptionD1Ev
00016968  w    O .rodata	0000000d _ZTSSt9exception
00017a40 g     O .bss	00000004 __malloc_sbrk_start
00016ed8  w    O .rodata	0000000f _ZTSSt10bad_typeid
000173dc  w    O .rwdata	00000008 _ZTIDe
00013a6c g     F .text	00000034 __cxa_bad_typeid
000135f4 g     F .text	00000008 _ZNSt9exceptionD0Ev
00010f70 g     F .text	00000058 _ZN5Plant5Motor12setFrequencyEm
00015ae0 g     F .text	00000020 alt_icache_flush_all
00017360  w    O .rwdata	00000002 _ZTSx
00013b88 g     F .text	00000010 _ZNSt10bad_typeidD1Ev
00013f08 g     F .text	00000008 .hidden _Unwind_GetDataRelBase
000118e4  w    F .text	00000024 _ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh
000174b0 g     O .rwdata	00000004 alt_priority_mask
00017a44 g     O .bss	00000004 __malloc_free_list
00014990 g     F .text	00000088 alt_ic_irq_enable
0001744c  w    O .rwdata	00000008 _ZTIs
000155f0 g     F .text	000000c4 altera_avalon_uart_read
00016c90  w    O .rodata	00000010 _ZTIPa
000172c0  w    O .rwdata	00000004 _ZTSPKw
00012958 g     F .text	00000010 _ZN10__cxxabiv120__function_type_infoD1Ev
00013b88 g     F .text	00000010 _ZNSt10bad_typeidD2Ev
00016cf0  w    O .rodata	00000010 _ZTIPDs
00016aa0  w    O .rodata	00000010 _ZTIPKDd
000174d0 g     O .rwdata	00000008 alt_alarm_list
00016a2c  w    O .rodata	00000028 _ZTSN10__cxxabiv123__fundamental_type_infoE
00015a18 g     F .text	00000064 _do_ctors
00014730 g     F .text	00000010 __sigtramp
00010edc  w    F .text	00000030 _ZNSt9_Any_data9_M_accessIPFvRN6Serial10rx_messageEEEERT_v
000167dc  w    O .rodata	0000000c _ZTIN10__cxxabiv119__pointer_type_infoE
0001580c g     F .text	000000dc close
00017310  w    O .rwdata	00000003 _ZTSPh
00016998  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
00014da8 g     F .text	00000084 alt_load
00012d78 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
00017320  w    O .rwdata	00000004 _ZTSPKs
00013988 g     F .text	00000098 _ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj
00014700 g     F .text	00000010 raise
0001732c  w    O .rwdata	00000004 _ZTSPKt
00014170 g     F .text	00000010 free
00012ee0 g     F .text	00000038 _ZN10__cxxabiv117__class_type_infoD0Ev
0001671c  w    O .rodata	00000010 _ZTIPFvRN6Serial10rx_messageEE



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408914 	ori	at,at,548
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101c40 	call	101c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffc15 	stw	r2,-16(fp)

  return active;
   10118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0ffff17 	ldw	r3,-4(fp)
   10130:	e0bffe17 	ldw	r2,-8(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001126 	beq	r2,zero,10180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	e0bffd17 	ldw	r2,-12(fp)
   10140:	100690fa 	slli	r3,r2,3
   10144:	00800074 	movhi	r2,1
   10148:	1885883a 	add	r2,r3,r2
   1014c:	10deaa17 	ldw	r3,31400(r2)
   10150:	e0bffd17 	ldw	r2,-12(fp)
   10154:	100890fa 	slli	r4,r2,3
   10158:	00800074 	movhi	r2,1
   1015c:	2085883a 	add	r2,r4,r2
   10160:	109eab17 	ldw	r2,31404(r2)
   10164:	1009883a 	mov	r4,r2
   10168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   1016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
   10170:	0005313a 	rdctl	r2,ipending
   10174:	e0bffb15 	stw	r2,-20(fp)
  return active;
   10178:	e0bffb17 	ldw	r2,-20(fp)
   1017c:	00000706 	br	1019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
   10180:	e0bffe17 	ldw	r2,-8(fp)
   10184:	1085883a 	add	r2,r2,r2
   10188:	e0bffe15 	stw	r2,-8(fp)
      i++;
   1018c:	e0bffd17 	ldw	r2,-12(fp)
   10190:	10800044 	addi	r2,r2,1
   10194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
   10198:	003fe406 	br	1012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
   1019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   101a0:	e0bfff17 	ldw	r2,-4(fp)
   101a4:	103fde1e 	bne	r2,zero,10120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101a8:	0001883a 	nop
}
   101ac:	0001883a 	nop
   101b0:	e037883a 	mov	sp,fp
   101b4:	dfc00117 	ldw	ra,4(sp)
   101b8:	df000017 	ldw	fp,0(sp)
   101bc:	dec00204 	addi	sp,sp,8
   101c0:	f800283a 	ret

000101c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101c4:	defffb04 	addi	sp,sp,-20
   101c8:	dfc00415 	stw	ra,16(sp)
   101cc:	df000315 	stw	fp,12(sp)
   101d0:	df000304 	addi	fp,sp,12
   101d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101d8:	00bfffc4 	movi	r2,-1
   101dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
   101e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101e4:	d0a1fd17 	ldw	r2,-30732(gp)
   101e8:	10000726 	beq	r2,zero,10208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101ec:	d0a1fd17 	ldw	r2,-30732(gp)
   101f0:	e0ffff17 	ldw	r3,-4(fp)
   101f4:	e1bffe17 	ldw	r6,-8(fp)
   101f8:	e17ffd17 	ldw	r5,-12(fp)
   101fc:	1809883a 	mov	r4,r3
   10200:	103ee83a 	callr	r2
   10204:	00000206 	br	10210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   1020c:	0005883a 	mov	r2,zero
}
   10210:	e037883a 	mov	sp,fp
   10214:	dfc00117 	ldw	ra,4(sp)
   10218:	df000017 	ldw	fp,0(sp)
   1021c:	dec00204 	addi	sp,sp,8
   10220:	f800283a 	ret

Disassembly of section .text:

00010224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10224:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10228:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
   1022c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   10230:	d6bc9a14 	ori	gp,gp,62056
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10234:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10238:	109e8b14 	ori	r2,r2,31276

    movhi r3, %hi(__bss_end)
   1023c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10240:	18deea14 	ori	r3,r3,31656

    beq r2, r3, 1f
   10244:	10c00326 	beq	r2,r3,10254 <_start+0x30>

0:
    stw zero, (r2)
   10248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   1024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10250:	10fffd36 	bltu	r2,r3,10248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10254:	0014da80 	call	14da8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10258:	0014e2c0 	call	14e2c <alt_main>

0001025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   1025c:	003fff06 	br	1025c <alt_after_alt_main>

00010260 <_Z20update_encoder_valueN6Serial4UARTEmi>:
// Setup Motors.
Plant::Motor motor_tilt = Plant::Motor(MOTOR_PWM_0_SLAVE_1_BASE, MOTOR_PWM_0_SLAVE_2_BASE);
Plant::Motor motor_pan = Plant::Motor(MOTOR_PWM_1_SLAVE_1_BASE, MOTOR_PWM_1_SLAVE_2_BASE);

int update_encoder_value(Serial::UART uart, uint32_t target, int previous_value)
{
   10260:	defff804 	addi	sp,sp,-32
   10264:	dfc00715 	stw	ra,28(sp)
   10268:	df000615 	stw	fp,24(sp)
   1026c:	df000604 	addi	fp,sp,24
   10270:	e13ffcc5 	stb	r4,-13(fp)
   10274:	e17ffb15 	stw	r5,-20(fp)
   10278:	e1bffa15 	stw	r6,-24(fp)
	int encoder_value = IORD_32DIRECT(target, 0x00);
   1027c:	e0bffb17 	ldw	r2,-20(fp)
   10280:	10800037 	ldwio	r2,0(r2)
   10284:	e0bfff15 	stw	r2,-4(fp)
	int encoder_copy = encoder_value;
   10288:	e0bfff17 	ldw	r2,-4(fp)
   1028c:	e0bffe15 	stw	r2,-8(fp)


	if (encoder_value != previous_value)
   10290:	e0ffff17 	ldw	r3,-4(fp)
   10294:	e0bffa17 	ldw	r2,-24(fp)
   10298:	18802526 	beq	r3,r2,10330 <_Z20update_encoder_valueN6Serial4UARTEmi+0xd0>
	{
		//printf("Encoder updated to: %d \n\r", encoder_value);

		// Value has been updated, send it!
		std::array<uint8_t, 4> values;
		values[3] = (uint8_t)encoder_value;
   1029c:	e0bffd04 	addi	r2,fp,-12
   102a0:	014000c4 	movi	r5,3
   102a4:	1009883a 	mov	r4,r2
   102a8:	00107d80 	call	107d8 <_ZNSt5arrayIhLj4EEixEj>
   102ac:	e0ffff17 	ldw	r3,-4(fp)
   102b0:	10c00005 	stb	r3,0(r2)
		values[2] = (uint8_t)(encoder_value>>=8);
   102b4:	e0bfff17 	ldw	r2,-4(fp)
   102b8:	1005d23a 	srai	r2,r2,8
   102bc:	e0bfff15 	stw	r2,-4(fp)
   102c0:	e0bffd04 	addi	r2,fp,-12
   102c4:	01400084 	movi	r5,2
   102c8:	1009883a 	mov	r4,r2
   102cc:	00107d80 	call	107d8 <_ZNSt5arrayIhLj4EEixEj>
   102d0:	e0ffff17 	ldw	r3,-4(fp)
   102d4:	10c00005 	stb	r3,0(r2)
		values[1] = (uint8_t)(encoder_value>>=8);
   102d8:	e0bfff17 	ldw	r2,-4(fp)
   102dc:	1005d23a 	srai	r2,r2,8
   102e0:	e0bfff15 	stw	r2,-4(fp)
   102e4:	e0bffd04 	addi	r2,fp,-12
   102e8:	01400044 	movi	r5,1
   102ec:	1009883a 	mov	r4,r2
   102f0:	00107d80 	call	107d8 <_ZNSt5arrayIhLj4EEixEj>
   102f4:	e0ffff17 	ldw	r3,-4(fp)
   102f8:	10c00005 	stb	r3,0(r2)
		values[0] = (uint8_t)(encoder_value>>=8);
   102fc:	e0bfff17 	ldw	r2,-4(fp)
   10300:	1005d23a 	srai	r2,r2,8
   10304:	e0bfff15 	stw	r2,-4(fp)
   10308:	e0bffd04 	addi	r2,fp,-12
   1030c:	000b883a 	mov	r5,zero
   10310:	1009883a 	mov	r4,r2
   10314:	00107d80 	call	107d8 <_ZNSt5arrayIhLj4EEixEj>
   10318:	e0ffff17 	ldw	r3,-4(fp)
   1031c:	10c00005 	stb	r3,0(r2)

		uart.sendData(values);
   10320:	e0bffcc4 	addi	r2,fp,-13
   10324:	e17ffd17 	ldw	r5,-12(fp)
   10328:	1009883a 	mov	r4,r2
   1032c:	00111d00 	call	111d0 <_ZN6Serial4UART8sendDataESt5arrayIhLj4EE>
	}

	return encoder_copy;
   10330:	e0bffe17 	ldw	r2,-8(fp)
}
   10334:	e037883a 	mov	sp,fp
   10338:	dfc00117 	ldw	ra,4(sp)
   1033c:	df000017 	ldw	fp,0(sp)
   10340:	dec00204 	addi	sp,sp,8
   10344:	f800283a 	ret

00010348 <_Z17handleUartMessageRN6Serial10rx_messageE>:

void handleUartMessage(Serial::rx_message &received_message)
{
   10348:	defffd04 	addi	sp,sp,-12
   1034c:	dfc00215 	stw	ra,8(sp)
   10350:	df000115 	stw	fp,4(sp)
   10354:	df000104 	addi	fp,sp,4
   10358:	e13fff15 	stw	r4,-4(fp)
	// Determine for which motor this message is intended.
	switch (received_message.motor)
   1035c:	e0bfff17 	ldw	r2,-4(fp)
   10360:	10800017 	ldw	r2,0(r2)
   10364:	1004d7fa 	srli	r2,r2,31
   10368:	10803fcc 	andi	r2,r2,255
   1036c:	10800060 	cmpeqi	r2,r2,1
   10370:	10000c1e 	bne	r2,zero,103a4 <_Z17handleUartMessageRN6Serial10rx_messageE+0x5c>
	{
		case 0:
		{
			motor_tilt.setFrequency(received_message.getFirstWord());
   10374:	e13fff17 	ldw	r4,-4(fp)
   10378:	00107000 	call	10700 <_ZN6Serial10rx_message12getFirstWordEv>
   1037c:	100b883a 	mov	r5,r2
   10380:	01000074 	movhi	r4,1
   10384:	211e9a04 	addi	r4,r4,31336
   10388:	0010f700 	call	10f70 <_ZN5Plant5Motor12setFrequencyEm>
			motor_tilt.setSecondWord(received_message.getSecondWord());
   1038c:	e13fff17 	ldw	r4,-4(fp)
   10390:	00107300 	call	10730 <_ZN6Serial10rx_message13getSecondWordEv>
   10394:	100b883a 	mov	r5,r2
   10398:	01000074 	movhi	r4,1
   1039c:	211e9a04 	addi	r4,r4,31336
   103a0:	0010fc80 	call	10fc8 <_ZN5Plant5Motor13setSecondWordEm>
		}

		case 1:
		{
			motor_pan.setFrequency(received_message.getFirstWord());
   103a4:	e13fff17 	ldw	r4,-4(fp)
   103a8:	00107000 	call	10700 <_ZN6Serial10rx_message12getFirstWordEv>
   103ac:	100b883a 	mov	r5,r2
   103b0:	01000074 	movhi	r4,1
   103b4:	211e9e04 	addi	r4,r4,31352
   103b8:	0010f700 	call	10f70 <_ZN5Plant5Motor12setFrequencyEm>
			motor_pan.setSecondWord(received_message.getSecondWord());
   103bc:	e13fff17 	ldw	r4,-4(fp)
   103c0:	00107300 	call	10730 <_ZN6Serial10rx_message13getSecondWordEv>
   103c4:	100b883a 	mov	r5,r2
   103c8:	01000074 	movhi	r4,1
   103cc:	211e9e04 	addi	r4,r4,31352
   103d0:	0010fc80 	call	10fc8 <_ZN5Plant5Motor13setSecondWordEm>
		}
	}
}
   103d4:	0001883a 	nop
   103d8:	e037883a 	mov	sp,fp
   103dc:	dfc00117 	ldw	ra,4(sp)
   103e0:	df000017 	ldw	fp,0(sp)
   103e4:	dec00204 	addi	sp,sp,8
   103e8:	f800283a 	ret

000103ec <main>:

int main()
{
   103ec:	defffb04 	addi	sp,sp,-20
   103f0:	dfc00415 	stw	ra,16(sp)
   103f4:	df000315 	stw	fp,12(sp)
   103f8:	dc000215 	stw	r16,8(sp)
   103fc:	df000304 	addi	fp,sp,12
	// Print startup message.
	printf("JIWY motor controller running..\n");
   10400:	01000074 	movhi	r4,1
   10404:	2119bf04 	addi	r4,r4,26364
   10408:	00144800 	call	14480 <puts>

	int prev_encoder_tilt = 0;
   1040c:	e03ffe15 	stw	zero,-8(fp)
	int prev_encoder_pan = 0;
   10410:	e03ffd15 	stw	zero,-12(fp)

	while(1)
	{
		prev_encoder_tilt = update_encoder_value(uart, QUADRATURE_ENCODER_0_BASE, prev_encoder_tilt);
   10414:	e1bffe17 	ldw	r6,-8(fp)
   10418:	014000b4 	movhi	r5,2
   1041c:	29490004 	addi	r5,r5,9216
   10420:	8009883a 	mov	r4,r16
   10424:	00102600 	call	10260 <_Z20update_encoder_valueN6Serial4UARTEmi>
   10428:	e0bffe15 	stw	r2,-8(fp)
   1042c:	003ff906 	br	10414 <main+0x28>

00010430 <_Z41__static_initialization_and_destruction_0ii>:
		//prev_encoder_pan = update_encoder_value(QUADRATURE_ENCODER_1_BASE, prev_encoder_pan);
		//usleep(delay);
	}

	return 0;
}
   10430:	deffe204 	addi	sp,sp,-120
   10434:	dfc01d15 	stw	ra,116(sp)
   10438:	df001c15 	stw	fp,112(sp)
   1043c:	ddc01b15 	stw	r23,108(sp)
   10440:	dd801a15 	stw	r22,104(sp)
   10444:	dd401915 	stw	r21,100(sp)
   10448:	dd001815 	stw	r20,96(sp)
   1044c:	dcc01715 	stw	r19,92(sp)
   10450:	dc801615 	stw	r18,88(sp)
   10454:	dc401515 	stw	r17,84(sp)
   10458:	dc001415 	stw	r16,80(sp)
   1045c:	df001c04 	addi	fp,sp,112
   10460:	e13ff315 	stw	r4,-52(fp)
   10464:	e17ff215 	stw	r5,-56(fp)
   10468:	00800074 	movhi	r2,1
   1046c:	10878b04 	addi	r2,r2,7724
   10470:	e0bfeb15 	stw	r2,-84(fp)
   10474:	00800074 	movhi	r2,1
   10478:	1099a984 	addi	r2,r2,26278
   1047c:	e0bfec15 	stw	r2,-80(fp)
   10480:	e0bfed04 	addi	r2,fp,-76
   10484:	17000015 	stw	fp,0(r2)
   10488:	00c00074 	movhi	r3,1
   1048c:	18c15004 	addi	r3,r3,1344
   10490:	10c00115 	stw	r3,4(r2)
   10494:	16c00215 	stw	sp,8(r2)
   10498:	e0bfe504 	addi	r2,fp,-108
   1049c:	1009883a 	mov	r4,r2
   104a0:	0013e3c0 	call	13e3c <_Unwind_SjLj_Register>
   104a4:	e0bff317 	ldw	r2,-52(fp)
   104a8:	10800058 	cmpnei	r2,r2,1
   104ac:	10002e1e 	bne	r2,zero,10568 <_Z41__static_initialization_and_destruction_0ii+0x138>
   104b0:	e0fff217 	ldw	r3,-56(fp)
   104b4:	00bfffd4 	movui	r2,65535
   104b8:	18802b1e 	bne	r3,r2,10568 <_Z41__static_initialization_and_destruction_0ii+0x138>
Serial::UART uart = Serial::UART(handleUartMessage);
   104bc:	e0fff404 	addi	r3,fp,-48
   104c0:	00bfffc4 	movi	r2,-1
   104c4:	e0bfe615 	stw	r2,-104(fp)
   104c8:	01400074 	movhi	r5,1
   104cc:	2940d204 	addi	r5,r5,840
   104d0:	1809883a 	mov	r4,r3
   104d4:	00108140 	call	10814 <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1IPS3_vvEET_>
   104d8:	e0fff404 	addi	r3,fp,-48
   104dc:	00800044 	movi	r2,1
   104e0:	e0bfe615 	stw	r2,-104(fp)
   104e4:	180b883a 	mov	r5,r3
   104e8:	d121f104 	addi	r4,gp,-30780
   104ec:	00111400 	call	11140 <_ZN6Serial4UARTC1ESt8functionIFvRNS_10rx_messageEEE>
   104f0:	e0bff404 	addi	r2,fp,-48
   104f4:	1009883a 	mov	r4,r2
   104f8:	00107a00 	call	107a0 <_ZNSt8functionIFvRN6Serial10rx_messageEEED1Ev>
Plant::Motor motor_tilt = Plant::Motor(MOTOR_PWM_0_SLAVE_1_BASE, MOTOR_PWM_0_SLAVE_2_BASE);
   104fc:	018000b4 	movhi	r6,2
   10500:	31850004 	addi	r6,r6,5120
   10504:	014000b4 	movhi	r5,2
   10508:	00bfffc4 	movi	r2,-1
   1050c:	e0bfe615 	stw	r2,-104(fp)
   10510:	29470004 	addi	r5,r5,7168
   10514:	01000074 	movhi	r4,1
   10518:	211e9a04 	addi	r4,r4,31336
   1051c:	0010f0c0 	call	10f0c <_ZN5Plant5MotorC1Emm>
Plant::Motor motor_pan = Plant::Motor(MOTOR_PWM_1_SLAVE_1_BASE, MOTOR_PWM_1_SLAVE_2_BASE);
   10520:	018000b4 	movhi	r6,2
   10524:	31840004 	addi	r6,r6,4096
   10528:	014000b4 	movhi	r5,2
   1052c:	29460004 	addi	r5,r5,6144
   10530:	01000074 	movhi	r4,1
   10534:	211e9e04 	addi	r4,r4,31352
   10538:	0010f0c0 	call	10f0c <_ZN5Plant5MotorC1Emm>
}
   1053c:	00000a06 	br	10568 <_Z41__static_initialization_and_destruction_0ii+0x138>
Serial::UART uart = Serial::UART(handleUartMessage);
   10540:	e0bfe717 	ldw	r2,-100(fp)
   10544:	e0bfe415 	stw	r2,-112(fp)
   10548:	e0bff404 	addi	r2,fp,-48
   1054c:	1009883a 	mov	r4,r2
   10550:	00107a00 	call	107a0 <_ZNSt8functionIFvRN6Serial10rx_messageEEED1Ev>
   10554:	e0ffe417 	ldw	r3,-112(fp)
   10558:	00bfffc4 	movi	r2,-1
   1055c:	e0bfe615 	stw	r2,-104(fp)
   10560:	1809883a 	mov	r4,r3
   10564:	00140240 	call	14024 <_Unwind_SjLj_Resume>
   10568:	e0bfe504 	addi	r2,fp,-108
   1056c:	1009883a 	mov	r4,r2
   10570:	0013e540 	call	13e54 <_Unwind_SjLj_Unregister>
}
   10574:	e6fff804 	addi	sp,fp,-32
   10578:	dfc00917 	ldw	ra,36(sp)
   1057c:	df000817 	ldw	fp,32(sp)
   10580:	ddc00717 	ldw	r23,28(sp)
   10584:	dd800617 	ldw	r22,24(sp)
   10588:	dd400517 	ldw	r21,20(sp)
   1058c:	dd000417 	ldw	r20,16(sp)
   10590:	dcc00317 	ldw	r19,12(sp)
   10594:	dc800217 	ldw	r18,8(sp)
   10598:	dc400117 	ldw	r17,4(sp)
   1059c:	dc000017 	ldw	r16,0(sp)
   105a0:	dec00a04 	addi	sp,sp,40
   105a4:	f800283a 	ret

000105a8 <_GLOBAL__sub_I_uart>:
   105a8:	defffe04 	addi	sp,sp,-8
   105ac:	dfc00115 	stw	ra,4(sp)
   105b0:	df000015 	stw	fp,0(sp)
   105b4:	d839883a 	mov	fp,sp
   105b8:	017fffd4 	movui	r5,65535
   105bc:	01000044 	movi	r4,1
   105c0:	00104300 	call	10430 <_Z41__static_initialization_and_destruction_0ii>
   105c4:	e037883a 	mov	sp,fp
   105c8:	dfc00117 	ldw	ra,4(sp)
   105cc:	df000017 	ldw	fp,0(sp)
   105d0:	dec00204 	addi	sp,sp,8
   105d4:	f800283a 	ret

000105d8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
   105d8:	defffd04 	addi	sp,sp,-12
   105dc:	df000215 	stw	fp,8(sp)
   105e0:	df000204 	addi	fp,sp,8
   105e4:	e13fff15 	stw	r4,-4(fp)
   105e8:	e17ffe15 	stw	r5,-8(fp)
   105ec:	e0bffe17 	ldw	r2,-8(fp)
   105f0:	e037883a 	mov	sp,fp
   105f4:	df000017 	ldw	fp,0(sp)
   105f8:	dec00104 	addi	sp,sp,4
   105fc:	f800283a 	ret

00010600 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
   10600:	defffe04 	addi	sp,sp,-8
   10604:	df000115 	stw	fp,4(sp)
   10608:	df000104 	addi	fp,sp,4
   1060c:	e13fff15 	stw	r4,-4(fp)
   10610:	e0bfff17 	ldw	r2,-4(fp)
   10614:	e037883a 	mov	sp,fp
   10618:	df000017 	ldw	fp,0(sp)
   1061c:	dec00104 	addi	sp,sp,4
   10620:	f800283a 	ret

00010624 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
   10624:	defffe04 	addi	sp,sp,-8
   10628:	df000115 	stw	fp,4(sp)
   1062c:	df000104 	addi	fp,sp,4
   10630:	e13fff15 	stw	r4,-4(fp)
   10634:	e0bfff17 	ldw	r2,-4(fp)
   10638:	e037883a 	mov	sp,fp
   1063c:	df000017 	ldw	fp,0(sp)
   10640:	dec00104 	addi	sp,sp,4
   10644:	f800283a 	ret

00010648 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   10648:	defffe04 	addi	sp,sp,-8
   1064c:	df000115 	stw	fp,4(sp)
   10650:	df000104 	addi	fp,sp,4
   10654:	e13fff15 	stw	r4,-4(fp)
   10658:	e0bfff17 	ldw	r2,-4(fp)
   1065c:	10000215 	stw	zero,8(r2)
   10660:	0001883a 	nop
   10664:	e037883a 	mov	sp,fp
   10668:	df000017 	ldw	fp,0(sp)
   1066c:	dec00104 	addi	sp,sp,4
   10670:	f800283a 	ret

00010674 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
   10674:	defff004 	addi	sp,sp,-64
   10678:	dfc00f15 	stw	ra,60(sp)
   1067c:	df000e15 	stw	fp,56(sp)
   10680:	df000e04 	addi	fp,sp,56
   10684:	e13fff15 	stw	r4,-4(fp)
   10688:	00800074 	movhi	r2,1
   1068c:	10878b04 	addi	r2,r2,7724
   10690:	e0bff815 	stw	r2,-32(fp)
   10694:	00800074 	movhi	r2,1
   10698:	1099a704 	addi	r2,r2,26268
   1069c:	e0bff915 	stw	r2,-28(fp)
   106a0:	e0bff204 	addi	r2,fp,-56
   106a4:	1009883a 	mov	r4,r2
   106a8:	0013e3c0 	call	13e3c <_Unwind_SjLj_Register>
    {
      if (_M_manager)
   106ac:	e0bfff17 	ldw	r2,-4(fp)
   106b0:	10800217 	ldw	r2,8(r2)
   106b4:	10000926 	beq	r2,zero,106dc <_ZNSt14_Function_baseD1Ev+0x68>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   106b8:	e0bfff17 	ldw	r2,-4(fp)
   106bc:	10800217 	ldw	r2,8(r2)
   106c0:	e0ffff17 	ldw	r3,-4(fp)
   106c4:	e13fff17 	ldw	r4,-4(fp)
   106c8:	e03ff315 	stw	zero,-52(fp)
   106cc:	018000c4 	movi	r6,3
   106d0:	200b883a 	mov	r5,r4
   106d4:	1809883a 	mov	r4,r3
   106d8:	103ee83a 	callr	r2
    }
   106dc:	0001883a 	nop
   106e0:	e0bff204 	addi	r2,fp,-56
   106e4:	1009883a 	mov	r4,r2
   106e8:	0013e540 	call	13e54 <_Unwind_SjLj_Unregister>
   106ec:	e037883a 	mov	sp,fp
   106f0:	dfc00117 	ldw	ra,4(sp)
   106f4:	df000017 	ldw	fp,0(sp)
   106f8:	dec00204 	addi	sp,sp,8
   106fc:	f800283a 	ret

00010700 <_ZN6Serial10rx_message12getFirstWordEv>:
		uint32_t getFullField()
		{
			return (freq << 18) | (duty << 4) | (direction << 2) | (enable << 1) | motor;
		}

		uint32_t getFirstWord()
   10700:	defffe04 	addi	sp,sp,-8
   10704:	df000115 	stw	fp,4(sp)
   10708:	df000104 	addi	fp,sp,4
   1070c:	e13fff15 	stw	r4,-4(fp)
		{
			return freq;
   10710:	e0bfff17 	ldw	r2,-4(fp)
   10714:	10800017 	ldw	r2,0(r2)
   10718:	108fffcc 	andi	r2,r2,16383
   1071c:	10bfffcc 	andi	r2,r2,65535
		}
   10720:	e037883a 	mov	sp,fp
   10724:	df000017 	ldw	fp,0(sp)
   10728:	dec00104 	addi	sp,sp,4
   1072c:	f800283a 	ret

00010730 <_ZN6Serial10rx_message13getSecondWordEv>:

		uint32_t getSecondWord()
   10730:	defffe04 	addi	sp,sp,-8
   10734:	df000115 	stw	fp,4(sp)
   10738:	df000104 	addi	fp,sp,4
   1073c:	e13fff15 	stw	r4,-4(fp)
		{
			return (duty << 16) | (direction << 14) | enable << 13;
   10740:	e0bfff17 	ldw	r2,-4(fp)
   10744:	10800017 	ldw	r2,0(r2)
   10748:	1004d3ba 	srli	r2,r2,14
   1074c:	108fffcc 	andi	r2,r2,16383
   10750:	10bfffcc 	andi	r2,r2,65535
   10754:	1006943a 	slli	r3,r2,16
   10758:	e0bfff17 	ldw	r2,-4(fp)
   1075c:	10800017 	ldw	r2,0(r2)
   10760:	1004d73a 	srli	r2,r2,28
   10764:	108000cc 	andi	r2,r2,3
   10768:	10803fcc 	andi	r2,r2,255
   1076c:	100493ba 	slli	r2,r2,14
   10770:	1886b03a 	or	r3,r3,r2
   10774:	e0bfff17 	ldw	r2,-4(fp)
   10778:	10800017 	ldw	r2,0(r2)
   1077c:	1004d7ba 	srli	r2,r2,30
   10780:	1080004c 	andi	r2,r2,1
   10784:	10803fcc 	andi	r2,r2,255
   10788:	1004937a 	slli	r2,r2,13
   1078c:	1884b03a 	or	r2,r3,r2
		}
   10790:	e037883a 	mov	sp,fp
   10794:	df000017 	ldw	fp,0(sp)
   10798:	dec00104 	addi	sp,sp,4
   1079c:	f800283a 	ret

000107a0 <_ZNSt8functionIFvRN6Serial10rx_messageEEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   107a0:	defffd04 	addi	sp,sp,-12
   107a4:	dfc00215 	stw	ra,8(sp)
   107a8:	df000115 	stw	fp,4(sp)
   107ac:	df000104 	addi	fp,sp,4
   107b0:	e13fff15 	stw	r4,-4(fp)
   107b4:	e0bfff17 	ldw	r2,-4(fp)
   107b8:	1009883a 	mov	r4,r2
   107bc:	00106740 	call	10674 <_ZNSt14_Function_baseD1Ev>
   107c0:	0001883a 	nop
   107c4:	e037883a 	mov	sp,fp
   107c8:	dfc00117 	ldw	ra,4(sp)
   107cc:	df000017 	ldw	fp,0(sp)
   107d0:	dec00204 	addi	sp,sp,8
   107d4:	f800283a 	ret

000107d8 <_ZNSt5arrayIhLj4EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
   107d8:	defffc04 	addi	sp,sp,-16
   107dc:	dfc00315 	stw	ra,12(sp)
   107e0:	df000215 	stw	fp,8(sp)
   107e4:	df000204 	addi	fp,sp,8
   107e8:	e13fff15 	stw	r4,-4(fp)
   107ec:	e17ffe15 	stw	r5,-8(fp)
      { return _AT_Type::_S_ref(_M_elems, __n); }
   107f0:	e0bfff17 	ldw	r2,-4(fp)
   107f4:	e17ffe17 	ldw	r5,-8(fp)
   107f8:	1009883a 	mov	r4,r2
   107fc:	00109640 	call	10964 <_ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj>
   10800:	e037883a 	mov	sp,fp
   10804:	dfc00117 	ldw	ra,4(sp)
   10808:	df000017 	ldw	fp,0(sp)
   1080c:	dec00204 	addi	sp,sp,8
   10810:	f800283a 	ret

00010814 <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1IPS3_vvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
   10814:	deffe604 	addi	sp,sp,-104
   10818:	dfc01915 	stw	ra,100(sp)
   1081c:	df001815 	stw	fp,96(sp)
   10820:	ddc01715 	stw	r23,92(sp)
   10824:	dd801615 	stw	r22,88(sp)
   10828:	dd401515 	stw	r21,84(sp)
   1082c:	dd001415 	stw	r20,80(sp)
   10830:	dcc01315 	stw	r19,76(sp)
   10834:	dc801215 	stw	r18,72(sp)
   10838:	dc401115 	stw	r17,68(sp)
   1083c:	dc001015 	stw	r16,64(sp)
   10840:	df001804 	addi	fp,sp,96
   10844:	e13ff715 	stw	r4,-36(fp)
   10848:	e17ff615 	stw	r5,-40(fp)
   1084c:	00800074 	movhi	r2,1
   10850:	10878b04 	addi	r2,r2,7724
   10854:	e0bfef15 	stw	r2,-68(fp)
   10858:	00800074 	movhi	r2,1
   1085c:	1099a804 	addi	r2,r2,26272
   10860:	e0bff015 	stw	r2,-64(fp)
   10864:	e0bff104 	addi	r2,fp,-60
   10868:	17000015 	stw	fp,0(r2)
   1086c:	00c00074 	movhi	r3,1
   10870:	18c23e04 	addi	r3,r3,2296
   10874:	10c00115 	stw	r3,4(r2)
   10878:	16c00215 	stw	sp,8(r2)
   1087c:	e0bfe904 	addi	r2,fp,-92
   10880:	1009883a 	mov	r4,r2
   10884:	0013e3c0 	call	13e3c <_Unwind_SjLj_Register>
      function(_Functor __f)
      : _Function_base()
   10888:	e0bff717 	ldw	r2,-36(fp)
   1088c:	1009883a 	mov	r4,r2
   10890:	00106480 	call	10648 <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
   10894:	e0bff617 	ldw	r2,-40(fp)
   10898:	1009883a 	mov	r4,r2
   1089c:	00109940 	call	10994 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE21_M_not_empty_functionIS4_EEbPT_>
   108a0:	10803fcc 	andi	r2,r2,255
   108a4:	10001e26 	beq	r2,zero,10920 <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1IPS3_vvEET_+0x10c>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
   108a8:	e0bff717 	ldw	r2,-36(fp)
   108ac:	e0bfe815 	stw	r2,-96(fp)
   108b0:	e0bff604 	addi	r2,fp,-40
   108b4:	1009883a 	mov	r4,r2
   108b8:	00109bc0 	call	109bc <_ZSt4moveIRPFvRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOS7_>
   108bc:	1007883a 	mov	r3,r2
   108c0:	00800044 	movi	r2,1
   108c4:	e0bfea15 	stw	r2,-88(fp)
   108c8:	180b883a 	mov	r5,r3
   108cc:	e13fe817 	ldw	r4,-96(fp)
   108d0:	00109e00 	call	109e0 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE15_M_init_functorERSt9_Any_dataOS5_>
	    _M_invoker = &_My_handler::_M_invoke;
   108d4:	e0fff717 	ldw	r3,-36(fp)
   108d8:	00800074 	movhi	r2,1
   108dc:	10828c04 	addi	r2,r2,2608
   108e0:	18800315 	stw	r2,12(r3)
	    _M_manager = &_My_handler::_M_manager;
   108e4:	e0fff717 	ldw	r3,-36(fp)
   108e8:	00800074 	movhi	r2,1
   108ec:	1082a204 	addi	r2,r2,2696
   108f0:	18800215 	stw	r2,8(r3)
	  }
      }
   108f4:	00000a06 	br	10920 <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1IPS3_vvEET_+0x10c>
      : _Function_base()
   108f8:	e0bfeb17 	ldw	r2,-84(fp)
   108fc:	e0bfe815 	stw	r2,-96(fp)
   10900:	e0bff717 	ldw	r2,-36(fp)
   10904:	1009883a 	mov	r4,r2
   10908:	00106740 	call	10674 <_ZNSt14_Function_baseD1Ev>
   1090c:	e0ffe817 	ldw	r3,-96(fp)
   10910:	00bfffc4 	movi	r2,-1
   10914:	e0bfea15 	stw	r2,-88(fp)
   10918:	1809883a 	mov	r4,r3
   1091c:	00140240 	call	14024 <_Unwind_SjLj_Resume>
      }
   10920:	0001883a 	nop
   10924:	e0bfe904 	addi	r2,fp,-92
   10928:	1009883a 	mov	r4,r2
   1092c:	0013e540 	call	13e54 <_Unwind_SjLj_Unregister>
   10930:	e6fff804 	addi	sp,fp,-32
   10934:	dfc00917 	ldw	ra,36(sp)
   10938:	df000817 	ldw	fp,32(sp)
   1093c:	ddc00717 	ldw	r23,28(sp)
   10940:	dd800617 	ldw	r22,24(sp)
   10944:	dd400517 	ldw	r21,20(sp)
   10948:	dd000417 	ldw	r20,16(sp)
   1094c:	dcc00317 	ldw	r19,12(sp)
   10950:	dc800217 	ldw	r18,8(sp)
   10954:	dc400117 	ldw	r17,4(sp)
   10958:	dc000017 	ldw	r16,0(sp)
   1095c:	dec00a04 	addi	sp,sp,40
   10960:	f800283a 	ret

00010964 <_ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
   10964:	defffd04 	addi	sp,sp,-12
   10968:	df000215 	stw	fp,8(sp)
   1096c:	df000204 	addi	fp,sp,8
   10970:	e13fff15 	stw	r4,-4(fp)
   10974:	e17ffe15 	stw	r5,-8(fp)
      { return const_cast<_Tp&>(__t[__n]); }
   10978:	e0ffff17 	ldw	r3,-4(fp)
   1097c:	e0bffe17 	ldw	r2,-8(fp)
   10980:	1885883a 	add	r2,r3,r2
   10984:	e037883a 	mov	sp,fp
   10988:	df000017 	ldw	fp,0(sp)
   1098c:	dec00104 	addi	sp,sp,4
   10990:	f800283a 	ret

00010994 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE21_M_not_empty_functionIS4_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
   10994:	defffe04 	addi	sp,sp,-8
   10998:	df000115 	stw	fp,4(sp)
   1099c:	df000104 	addi	fp,sp,4
   109a0:	e13fff15 	stw	r4,-4(fp)
	  { return __fp != nullptr; }
   109a4:	e0bfff17 	ldw	r2,-4(fp)
   109a8:	1004c03a 	cmpne	r2,r2,zero
   109ac:	e037883a 	mov	sp,fp
   109b0:	df000017 	ldw	fp,0(sp)
   109b4:	dec00104 	addi	sp,sp,4
   109b8:	f800283a 	ret

000109bc <_ZSt4moveIRPFvRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
   109bc:	defffe04 	addi	sp,sp,-8
   109c0:	df000115 	stw	fp,4(sp)
   109c4:	df000104 	addi	fp,sp,4
   109c8:	e13fff15 	stw	r4,-4(fp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   109cc:	e0bfff17 	ldw	r2,-4(fp)
   109d0:	e037883a 	mov	sp,fp
   109d4:	df000017 	ldw	fp,0(sp)
   109d8:	dec00104 	addi	sp,sp,4
   109dc:	f800283a 	ret

000109e0 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE15_M_init_functorERSt9_Any_dataOS5_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
   109e0:	defffb04 	addi	sp,sp,-20
   109e4:	dfc00415 	stw	ra,16(sp)
   109e8:	df000315 	stw	fp,12(sp)
   109ec:	dc000215 	stw	r16,8(sp)
   109f0:	df000304 	addi	fp,sp,12
   109f4:	e13ffe15 	stw	r4,-8(fp)
   109f8:	e17ffd15 	stw	r5,-12(fp)
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
   109fc:	e13ffd17 	ldw	r4,-12(fp)
   10a00:	00109bc0 	call	109bc <_ZSt4moveIRPFvRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOS7_>
   10a04:	800d883a 	mov	r6,r16
   10a08:	100b883a 	mov	r5,r2
   10a0c:	e13ffe17 	ldw	r4,-8(fp)
   10a10:	0010b200 	call	10b20 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>
   10a14:	0001883a 	nop
   10a18:	e6ffff04 	addi	sp,fp,-4
   10a1c:	dfc00217 	ldw	ra,8(sp)
   10a20:	df000117 	ldw	fp,4(sp)
   10a24:	dc000017 	ldw	r16,0(sp)
   10a28:	dec00304 	addi	sp,sp,12
   10a2c:	f800283a 	ret

00010a30 <_ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E9_M_invokeERKSt9_Any_dataS2_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   10a30:	defffb04 	addi	sp,sp,-20
   10a34:	dfc00415 	stw	ra,16(sp)
   10a38:	df000315 	stw	fp,12(sp)
   10a3c:	dc000215 	stw	r16,8(sp)
   10a40:	df000304 	addi	fp,sp,12
   10a44:	e13ffe15 	stw	r4,-8(fp)
   10a48:	e17ffd15 	stw	r5,-12(fp)
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
   10a4c:	e13ffe17 	ldw	r4,-8(fp)
   10a50:	0010b800 	call	10b80 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE14_M_get_pointerERKSt9_Any_data>
   10a54:	1021883a 	mov	r16,r2
   10a58:	e13ffd17 	ldw	r4,-12(fp)
   10a5c:	0010bc00 	call	10bc0 <_ZSt7forwardIRN6Serial10rx_messageEEOT_RNSt16remove_referenceIS3_E4typeE>
   10a60:	100b883a 	mov	r5,r2
   10a64:	8009883a 	mov	r4,r16
   10a68:	0010be40 	call	10be4 <_ZSt10__invoke_rIvRPFvRN6Serial10rx_messageEEJS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>
				     std::forward<_ArgTypes>(__args)...);
   10a6c:	0001883a 	nop
      }
   10a70:	e6ffff04 	addi	sp,fp,-4
   10a74:	dfc00217 	ldw	ra,8(sp)
   10a78:	df000117 	ldw	fp,4(sp)
   10a7c:	dc000017 	ldw	r16,0(sp)
   10a80:	dec00304 	addi	sp,sp,12
   10a84:	f800283a 	ret

00010a88 <_ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   10a88:	defffa04 	addi	sp,sp,-24
   10a8c:	dfc00515 	stw	ra,20(sp)
   10a90:	df000415 	stw	fp,16(sp)
   10a94:	dc000315 	stw	r16,12(sp)
   10a98:	df000404 	addi	fp,sp,16
   10a9c:	e13ffe15 	stw	r4,-8(fp)
   10aa0:	e17ffd15 	stw	r5,-12(fp)
   10aa4:	e1bffc15 	stw	r6,-16(fp)
	switch (__op)
   10aa8:	e0bffc17 	ldw	r2,-16(fp)
   10aac:	10000326 	beq	r2,zero,10abc <_ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x34>
   10ab0:	10800060 	cmpeqi	r2,r2,1
   10ab4:	1000081e 	bne	r2,zero,10ad8 <_ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x50>
   10ab8:	00000e06 	br	10af4 <_ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6c>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
   10abc:	e13ffe17 	ldw	r4,-8(fp)
   10ac0:	0010c480 	call	10c48 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
   10ac4:	1007883a 	mov	r3,r2
   10ac8:	00800074 	movhi	r2,1
   10acc:	1099c704 	addi	r2,r2,26396
   10ad0:	18800015 	stw	r2,0(r3)
	    break;
   10ad4:	00000b06 	br	10b04 <_ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x7c>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   10ad8:	e13ffe17 	ldw	r4,-8(fp)
   10adc:	0010c780 	call	10c78 <_ZNSt9_Any_data9_M_accessIPPFvRN6Serial10rx_messageEEEERT_v>
   10ae0:	1021883a 	mov	r16,r2
   10ae4:	e13ffd17 	ldw	r4,-12(fp)
   10ae8:	0010b800 	call	10b80 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE14_M_get_pointerERKSt9_Any_data>
   10aec:	80800015 	stw	r2,0(r16)
	    break;
   10af0:	00000406 	br	10b04 <_ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x7c>
	    _Base::_M_manager(__dest, __source, __op);
   10af4:	e1bffc17 	ldw	r6,-16(fp)
   10af8:	e17ffd17 	ldw	r5,-12(fp)
   10afc:	e13ffe17 	ldw	r4,-8(fp)
   10b00:	0010ca80 	call	10ca8 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
   10b04:	0005883a 	mov	r2,zero
      }
   10b08:	e6ffff04 	addi	sp,fp,-4
   10b0c:	dfc00217 	ldw	ra,8(sp)
   10b10:	df000117 	ldw	fp,4(sp)
   10b14:	dc000017 	ldw	r16,0(sp)
   10b18:	dec00304 	addi	sp,sp,12
   10b1c:	f800283a 	ret

00010b20 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
   10b20:	defffa04 	addi	sp,sp,-24
   10b24:	dfc00515 	stw	ra,20(sp)
   10b28:	df000415 	stw	fp,16(sp)
   10b2c:	dc000315 	stw	r16,12(sp)
   10b30:	df000404 	addi	fp,sp,16
   10b34:	e13ffe15 	stw	r4,-8(fp)
   10b38:	e17ffd15 	stw	r5,-12(fp)
   10b3c:	e1bffcc5 	stb	r6,-13(fp)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   10b40:	e13ffd17 	ldw	r4,-12(fp)
   10b44:	00109bc0 	call	109bc <_ZSt4moveIRPFvRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOS7_>
   10b48:	14000017 	ldw	r16,0(r2)
   10b4c:	e13ffe17 	ldw	r4,-8(fp)
   10b50:	00106000 	call	10600 <_ZNSt9_Any_data9_M_accessEv>
   10b54:	100b883a 	mov	r5,r2
   10b58:	01000104 	movi	r4,4
   10b5c:	00105d80 	call	105d8 <_ZnwjPv>
   10b60:	14000015 	stw	r16,0(r2)
   10b64:	0001883a 	nop
   10b68:	e6ffff04 	addi	sp,fp,-4
   10b6c:	dfc00217 	ldw	ra,8(sp)
   10b70:	df000117 	ldw	fp,4(sp)
   10b74:	dc000017 	ldw	r16,0(sp)
   10b78:	dec00304 	addi	sp,sp,12
   10b7c:	f800283a 	ret

00010b80 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
   10b80:	defffc04 	addi	sp,sp,-16
   10b84:	dfc00315 	stw	ra,12(sp)
   10b88:	df000215 	stw	fp,8(sp)
   10b8c:	df000204 	addi	fp,sp,8
   10b90:	e13ffe15 	stw	r4,-8(fp)
	      const _Functor& __f = __source._M_access<_Functor>();
   10b94:	e13ffe17 	ldw	r4,-8(fp)
   10b98:	0010d740 	call	10d74 <_ZNKSt9_Any_data9_M_accessIPFvRN6Serial10rx_messageEEEERKT_v>
   10b9c:	e0bfff15 	stw	r2,-4(fp)
	      return const_cast<_Functor*>(std::__addressof(__f));
   10ba0:	e13fff17 	ldw	r4,-4(fp)
   10ba4:	0010da40 	call	10da4 <_ZSt11__addressofIKPFvRN6Serial10rx_messageEEEPT_RS6_>
   10ba8:	0001883a 	nop
	}
   10bac:	e037883a 	mov	sp,fp
   10bb0:	dfc00117 	ldw	ra,4(sp)
   10bb4:	df000017 	ldw	fp,0(sp)
   10bb8:	dec00204 	addi	sp,sp,8
   10bbc:	f800283a 	ret

00010bc0 <_ZSt7forwardIRN6Serial10rx_messageEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   10bc0:	defffe04 	addi	sp,sp,-8
   10bc4:	df000115 	stw	fp,4(sp)
   10bc8:	df000104 	addi	fp,sp,4
   10bcc:	e13fff15 	stw	r4,-4(fp)
    { return static_cast<_Tp&&>(__t); }
   10bd0:	e0bfff17 	ldw	r2,-4(fp)
   10bd4:	e037883a 	mov	sp,fp
   10bd8:	df000017 	ldw	fp,0(sp)
   10bdc:	dec00104 	addi	sp,sp,4
   10be0:	f800283a 	ret

00010be4 <_ZSt10__invoke_rIvRPFvRN6Serial10rx_messageEEJS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
   10be4:	defffa04 	addi	sp,sp,-24
   10be8:	dfc00515 	stw	ra,20(sp)
   10bec:	df000415 	stw	fp,16(sp)
   10bf0:	dc400315 	stw	r17,12(sp)
   10bf4:	dc000215 	stw	r16,8(sp)
   10bf8:	df000404 	addi	fp,sp,16
   10bfc:	e13ffd15 	stw	r4,-12(fp)
   10c00:	e17ffc15 	stw	r5,-16(fp)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
   10c04:	e13ffd17 	ldw	r4,-12(fp)
   10c08:	0010dc80 	call	10dc8 <_ZSt7forwardIRPFvRN6Serial10rx_messageEEEOT_RNSt16remove_referenceIS6_E4typeE>
   10c0c:	1021883a 	mov	r16,r2
   10c10:	e13ffc17 	ldw	r4,-16(fp)
   10c14:	0010bc00 	call	10bc0 <_ZSt7forwardIRN6Serial10rx_messageEEOT_RNSt16remove_referenceIS3_E4typeE>
   10c18:	100d883a 	mov	r6,r2
   10c1c:	800b883a 	mov	r5,r16
   10c20:	8809883a 	mov	r4,r17
   10c24:	0010dec0 	call	10dec <_ZSt13__invoke_implIvRPFvRN6Serial10rx_messageEEJS2_EET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
   10c28:	0001883a 	nop
   10c2c:	e6fffe04 	addi	sp,fp,-8
   10c30:	dfc00317 	ldw	ra,12(sp)
   10c34:	df000217 	ldw	fp,8(sp)
   10c38:	dc400117 	ldw	r17,4(sp)
   10c3c:	dc000017 	ldw	r16,0(sp)
   10c40:	dec00404 	addi	sp,sp,16
   10c44:	f800283a 	ret

00010c48 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
   10c48:	defffd04 	addi	sp,sp,-12
   10c4c:	dfc00215 	stw	ra,8(sp)
   10c50:	df000115 	stw	fp,4(sp)
   10c54:	df000104 	addi	fp,sp,4
   10c58:	e13fff15 	stw	r4,-4(fp)
      { return *static_cast<_Tp*>(_M_access()); }
   10c5c:	e13fff17 	ldw	r4,-4(fp)
   10c60:	00106000 	call	10600 <_ZNSt9_Any_data9_M_accessEv>
   10c64:	e037883a 	mov	sp,fp
   10c68:	dfc00117 	ldw	ra,4(sp)
   10c6c:	df000017 	ldw	fp,0(sp)
   10c70:	dec00204 	addi	sp,sp,8
   10c74:	f800283a 	ret

00010c78 <_ZNSt9_Any_data9_M_accessIPPFvRN6Serial10rx_messageEEEERT_v>:
      _M_access()
   10c78:	defffd04 	addi	sp,sp,-12
   10c7c:	dfc00215 	stw	ra,8(sp)
   10c80:	df000115 	stw	fp,4(sp)
   10c84:	df000104 	addi	fp,sp,4
   10c88:	e13fff15 	stw	r4,-4(fp)
      { return *static_cast<_Tp*>(_M_access()); }
   10c8c:	e13fff17 	ldw	r4,-4(fp)
   10c90:	00106000 	call	10600 <_ZNSt9_Any_data9_M_accessEv>
   10c94:	e037883a 	mov	sp,fp
   10c98:	dfc00117 	ldw	ra,4(sp)
   10c9c:	df000017 	ldw	fp,0(sp)
   10ca0:	dec00204 	addi	sp,sp,8
   10ca4:	f800283a 	ret

00010ca8 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   10ca8:	defffa04 	addi	sp,sp,-24
   10cac:	dfc00515 	stw	ra,20(sp)
   10cb0:	df000415 	stw	fp,16(sp)
   10cb4:	dc000315 	stw	r16,12(sp)
   10cb8:	df000404 	addi	fp,sp,16
   10cbc:	e13ffe15 	stw	r4,-8(fp)
   10cc0:	e17ffd15 	stw	r5,-12(fp)
   10cc4:	e1bffc15 	stw	r6,-16(fp)
	  switch (__op)
   10cc8:	e0bffc17 	ldw	r2,-16(fp)
   10ccc:	10c000e0 	cmpeqi	r3,r2,3
   10cd0:	18001d1e 	bne	r3,zero,10d48 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0xa0>
   10cd4:	10c00108 	cmpgei	r3,r2,4
   10cd8:	18001f1e 	bne	r3,zero,10d58 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0xb0>
   10cdc:	10c000a0 	cmpeqi	r3,r2,2
   10ce0:	1800141e 	bne	r3,zero,10d34 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x8c>
   10ce4:	10c000c8 	cmpgei	r3,r2,3
   10ce8:	18001b1e 	bne	r3,zero,10d58 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0xb0>
   10cec:	10000326 	beq	r2,zero,10cfc <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x54>
   10cf0:	10800060 	cmpeqi	r2,r2,1
   10cf4:	1000081e 	bne	r2,zero,10d18 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x70>
   10cf8:	00001706 	br	10d58 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0xb0>
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
   10cfc:	e13ffe17 	ldw	r4,-8(fp)
   10d00:	0010c480 	call	10c48 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
   10d04:	1007883a 	mov	r3,r2
   10d08:	00800074 	movhi	r2,1
   10d0c:	1099c704 	addi	r2,r2,26396
   10d10:	18800015 	stw	r2,0(r3)
	      break;
   10d14:	00001006 	br	10d58 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0xb0>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   10d18:	e13ffe17 	ldw	r4,-8(fp)
   10d1c:	0010c780 	call	10c78 <_ZNSt9_Any_data9_M_accessIPPFvRN6Serial10rx_messageEEEERT_v>
   10d20:	1021883a 	mov	r16,r2
   10d24:	e13ffd17 	ldw	r4,-12(fp)
   10d28:	0010b800 	call	10b80 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE14_M_get_pointerERKSt9_Any_data>
   10d2c:	80800015 	stw	r2,0(r16)
	      break;
   10d30:	00000906 	br	10d58 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0xb0>
	      _M_clone(__dest, __source, _Local_storage());
   10d34:	400d883a 	mov	r6,r8
   10d38:	e17ffd17 	ldw	r5,-12(fp)
   10d3c:	e13ffe17 	ldw	r4,-8(fp)
   10d40:	0010e440 	call	10e44 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>
	      break;
   10d44:	00000406 	br	10d58 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0xb0>
	      _M_destroy(__dest, _Local_storage());
   10d48:	380b883a 	mov	r5,r7
   10d4c:	e13ffe17 	ldw	r4,-8(fp)
   10d50:	0010ea40 	call	10ea4 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
   10d54:	0001883a 	nop
	  return false;
   10d58:	0005883a 	mov	r2,zero
	}
   10d5c:	e6ffff04 	addi	sp,fp,-4
   10d60:	dfc00217 	ldw	ra,8(sp)
   10d64:	df000117 	ldw	fp,4(sp)
   10d68:	dc000017 	ldw	r16,0(sp)
   10d6c:	dec00304 	addi	sp,sp,12
   10d70:	f800283a 	ret

00010d74 <_ZNKSt9_Any_data9_M_accessIPFvRN6Serial10rx_messageEEEERKT_v>:
      _M_access() const
   10d74:	defffd04 	addi	sp,sp,-12
   10d78:	dfc00215 	stw	ra,8(sp)
   10d7c:	df000115 	stw	fp,4(sp)
   10d80:	df000104 	addi	fp,sp,4
   10d84:	e13fff15 	stw	r4,-4(fp)
      { return *static_cast<const _Tp*>(_M_access()); }
   10d88:	e13fff17 	ldw	r4,-4(fp)
   10d8c:	00106240 	call	10624 <_ZNKSt9_Any_data9_M_accessEv>
   10d90:	e037883a 	mov	sp,fp
   10d94:	dfc00117 	ldw	ra,4(sp)
   10d98:	df000017 	ldw	fp,0(sp)
   10d9c:	dec00204 	addi	sp,sp,8
   10da0:	f800283a 	ret

00010da4 <_ZSt11__addressofIKPFvRN6Serial10rx_messageEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   10da4:	defffe04 	addi	sp,sp,-8
   10da8:	df000115 	stw	fp,4(sp)
   10dac:	df000104 	addi	fp,sp,4
   10db0:	e13fff15 	stw	r4,-4(fp)
    { return __builtin_addressof(__r); }
   10db4:	e0bfff17 	ldw	r2,-4(fp)
   10db8:	e037883a 	mov	sp,fp
   10dbc:	df000017 	ldw	fp,0(sp)
   10dc0:	dec00104 	addi	sp,sp,4
   10dc4:	f800283a 	ret

00010dc8 <_ZSt7forwardIRPFvRN6Serial10rx_messageEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   10dc8:	defffe04 	addi	sp,sp,-8
   10dcc:	df000115 	stw	fp,4(sp)
   10dd0:	df000104 	addi	fp,sp,4
   10dd4:	e13fff15 	stw	r4,-4(fp)
    { return static_cast<_Tp&&>(__t); }
   10dd8:	e0bfff17 	ldw	r2,-4(fp)
   10ddc:	e037883a 	mov	sp,fp
   10de0:	df000017 	ldw	fp,0(sp)
   10de4:	dec00104 	addi	sp,sp,4
   10de8:	f800283a 	ret

00010dec <_ZSt13__invoke_implIvRPFvRN6Serial10rx_messageEEJS2_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
   10dec:	defffa04 	addi	sp,sp,-24
   10df0:	dfc00515 	stw	ra,20(sp)
   10df4:	df000415 	stw	fp,16(sp)
   10df8:	dc000315 	stw	r16,12(sp)
   10dfc:	df000404 	addi	fp,sp,16
   10e00:	e13ffec5 	stb	r4,-5(fp)
   10e04:	e17ffd15 	stw	r5,-12(fp)
   10e08:	e1bffc15 	stw	r6,-16(fp)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   10e0c:	e13ffd17 	ldw	r4,-12(fp)
   10e10:	0010dc80 	call	10dc8 <_ZSt7forwardIRPFvRN6Serial10rx_messageEEEOT_RNSt16remove_referenceIS6_E4typeE>
   10e14:	14000017 	ldw	r16,0(r2)
   10e18:	e13ffc17 	ldw	r4,-16(fp)
   10e1c:	0010bc00 	call	10bc0 <_ZSt7forwardIRN6Serial10rx_messageEEOT_RNSt16remove_referenceIS3_E4typeE>
   10e20:	1009883a 	mov	r4,r2
   10e24:	803ee83a 	callr	r16
   10e28:	0001883a 	nop
   10e2c:	e6ffff04 	addi	sp,fp,-4
   10e30:	dfc00217 	ldw	ra,8(sp)
   10e34:	df000117 	ldw	fp,4(sp)
   10e38:	dc000017 	ldw	r16,0(sp)
   10e3c:	dec00304 	addi	sp,sp,12
   10e40:	f800283a 	ret

00010e44 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
   10e44:	defffa04 	addi	sp,sp,-24
   10e48:	dfc00515 	stw	ra,20(sp)
   10e4c:	df000415 	stw	fp,16(sp)
   10e50:	dc000315 	stw	r16,12(sp)
   10e54:	df000404 	addi	fp,sp,16
   10e58:	e13ffe15 	stw	r4,-8(fp)
   10e5c:	e17ffd15 	stw	r5,-12(fp)
   10e60:	e1bffcc5 	stb	r6,-13(fp)
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   10e64:	e13ffd17 	ldw	r4,-12(fp)
   10e68:	0010d740 	call	10d74 <_ZNKSt9_Any_data9_M_accessIPFvRN6Serial10rx_messageEEEERKT_v>
   10e6c:	14000017 	ldw	r16,0(r2)
   10e70:	e13ffe17 	ldw	r4,-8(fp)
   10e74:	00106000 	call	10600 <_ZNSt9_Any_data9_M_accessEv>
   10e78:	100b883a 	mov	r5,r2
   10e7c:	01000104 	movi	r4,4
   10e80:	00105d80 	call	105d8 <_ZnwjPv>
   10e84:	14000015 	stw	r16,0(r2)
	}
   10e88:	0001883a 	nop
   10e8c:	e6ffff04 	addi	sp,fp,-4
   10e90:	dfc00217 	ldw	ra,8(sp)
   10e94:	df000117 	ldw	fp,4(sp)
   10e98:	dc000017 	ldw	r16,0(sp)
   10e9c:	dec00304 	addi	sp,sp,12
   10ea0:	f800283a 	ret

00010ea4 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
   10ea4:	defffc04 	addi	sp,sp,-16
   10ea8:	dfc00315 	stw	ra,12(sp)
   10eac:	df000215 	stw	fp,8(sp)
   10eb0:	df000204 	addi	fp,sp,8
   10eb4:	e13fff15 	stw	r4,-4(fp)
   10eb8:	e17ffec5 	stb	r5,-5(fp)
	  __victim._M_access<_Functor>().~_Functor();
   10ebc:	e13fff17 	ldw	r4,-4(fp)
   10ec0:	0010edc0 	call	10edc <_ZNSt9_Any_data9_M_accessIPFvRN6Serial10rx_messageEEEERT_v>
	}
   10ec4:	0001883a 	nop
   10ec8:	e037883a 	mov	sp,fp
   10ecc:	dfc00117 	ldw	ra,4(sp)
   10ed0:	df000017 	ldw	fp,0(sp)
   10ed4:	dec00204 	addi	sp,sp,8
   10ed8:	f800283a 	ret

00010edc <_ZNSt9_Any_data9_M_accessIPFvRN6Serial10rx_messageEEEERT_v>:
      _M_access()
   10edc:	defffd04 	addi	sp,sp,-12
   10ee0:	dfc00215 	stw	ra,8(sp)
   10ee4:	df000115 	stw	fp,4(sp)
   10ee8:	df000104 	addi	fp,sp,4
   10eec:	e13fff15 	stw	r4,-4(fp)
      { return *static_cast<_Tp*>(_M_access()); }
   10ef0:	e13fff17 	ldw	r4,-4(fp)
   10ef4:	00106000 	call	10600 <_ZNSt9_Any_data9_M_accessEv>
   10ef8:	e037883a 	mov	sp,fp
   10efc:	dfc00117 	ldw	ra,4(sp)
   10f00:	df000017 	ldw	fp,0(sp)
   10f04:	dec00204 	addi	sp,sp,8
   10f08:	f800283a 	ret

00010f0c <_ZN5Plant5MotorC1Emm>:
#include "motor.hpp"

Plant::Motor::Motor(uint32_t base_address_first_word, uint32_t base_address_second_word) :
   10f0c:	defffb04 	addi	sp,sp,-20
   10f10:	dfc00415 	stw	ra,16(sp)
   10f14:	df000315 	stw	fp,12(sp)
   10f18:	df000304 	addi	fp,sp,12
   10f1c:	e13fff15 	stw	r4,-4(fp)
   10f20:	e17ffe15 	stw	r5,-8(fp)
   10f24:	e1bffd15 	stw	r6,-12(fp)
	base_address_first_word(base_address_first_word),
	base_address_second_word(base_address_second_word)
   10f28:	e0bfff17 	ldw	r2,-4(fp)
   10f2c:	e0fffe17 	ldw	r3,-8(fp)
   10f30:	10c00015 	stw	r3,0(r2)
   10f34:	e0bfff17 	ldw	r2,-4(fp)
   10f38:	e0fffd17 	ldw	r3,-12(fp)
   10f3c:	10c00115 	stw	r3,4(r2)
   10f40:	e0bfff17 	ldw	r2,-4(fp)
   10f44:	10000215 	stw	zero,8(r2)
   10f48:	e0bfff17 	ldw	r2,-4(fp)
   10f4c:	10000315 	stw	zero,12(r2)
{
	stop();
   10f50:	e13fff17 	ldw	r4,-4(fp)
   10f54:	00110200 	call	11020 <_ZN5Plant5Motor4stopEv>
}
   10f58:	0001883a 	nop
   10f5c:	e037883a 	mov	sp,fp
   10f60:	dfc00117 	ldw	ra,4(sp)
   10f64:	df000017 	ldw	fp,0(sp)
   10f68:	dec00204 	addi	sp,sp,8
   10f6c:	f800283a 	ret

00010f70 <_ZN5Plant5Motor12setFrequencyEm>:

void Plant::Motor::setFrequency(uint32_t new_frequency)
{
   10f70:	defffd04 	addi	sp,sp,-12
   10f74:	df000215 	stw	fp,8(sp)
   10f78:	df000204 	addi	fp,sp,8
   10f7c:	e13fff15 	stw	r4,-4(fp)
   10f80:	e17ffe15 	stw	r5,-8(fp)
	if (frequency != new_frequency)
   10f84:	e0bfff17 	ldw	r2,-4(fp)
   10f88:	10800217 	ldw	r2,8(r2)
   10f8c:	e0fffe17 	ldw	r3,-8(fp)
   10f90:	18800826 	beq	r3,r2,10fb4 <_ZN5Plant5Motor12setFrequencyEm+0x44>
	{
		IOWR_32DIRECT(base_address_first_word, 0, new_frequency);
   10f94:	e0bfff17 	ldw	r2,-4(fp)
   10f98:	10800017 	ldw	r2,0(r2)
   10f9c:	1007883a 	mov	r3,r2
   10fa0:	e0bffe17 	ldw	r2,-8(fp)
   10fa4:	18800035 	stwio	r2,0(r3)
		frequency = new_frequency;
   10fa8:	e0bfff17 	ldw	r2,-4(fp)
   10fac:	e0fffe17 	ldw	r3,-8(fp)
   10fb0:	10c00215 	stw	r3,8(r2)
	}
}
   10fb4:	0001883a 	nop
   10fb8:	e037883a 	mov	sp,fp
   10fbc:	df000017 	ldw	fp,0(sp)
   10fc0:	dec00104 	addi	sp,sp,4
   10fc4:	f800283a 	ret

00010fc8 <_ZN5Plant5Motor13setSecondWordEm>:

void  Plant::Motor::setSecondWord(uint32_t new_word)
{
   10fc8:	defffd04 	addi	sp,sp,-12
   10fcc:	df000215 	stw	fp,8(sp)
   10fd0:	df000204 	addi	fp,sp,8
   10fd4:	e13fff15 	stw	r4,-4(fp)
   10fd8:	e17ffe15 	stw	r5,-8(fp)
	if (second_word != new_word)
   10fdc:	e0bfff17 	ldw	r2,-4(fp)
   10fe0:	10800317 	ldw	r2,12(r2)
   10fe4:	e0fffe17 	ldw	r3,-8(fp)
   10fe8:	18800826 	beq	r3,r2,1100c <_ZN5Plant5Motor13setSecondWordEm+0x44>
	{
		IOWR_32DIRECT(base_address_second_word, 0, new_word);
   10fec:	e0bfff17 	ldw	r2,-4(fp)
   10ff0:	10800117 	ldw	r2,4(r2)
   10ff4:	1007883a 	mov	r3,r2
   10ff8:	e0bffe17 	ldw	r2,-8(fp)
   10ffc:	18800035 	stwio	r2,0(r3)
		second_word = new_word;
   11000:	e0bfff17 	ldw	r2,-4(fp)
   11004:	e0fffe17 	ldw	r3,-8(fp)
   11008:	10c00315 	stw	r3,12(r2)
	}
}
   1100c:	0001883a 	nop
   11010:	e037883a 	mov	sp,fp
   11014:	df000017 	ldw	fp,0(sp)
   11018:	dec00104 	addi	sp,sp,4
   1101c:	f800283a 	ret

00011020 <_ZN5Plant5Motor4stopEv>:

void Plant::Motor::stop()
{
   11020:	defffe04 	addi	sp,sp,-8
   11024:	df000115 	stw	fp,4(sp)
   11028:	df000104 	addi	fp,sp,4
   1102c:	e13fff15 	stw	r4,-4(fp)
	// Set all values to zero.
	IOWR_32DIRECT(base_address_first_word, 0, 0);
   11030:	e0bfff17 	ldw	r2,-4(fp)
   11034:	10800017 	ldw	r2,0(r2)
   11038:	0007883a 	mov	r3,zero
   1103c:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(base_address_second_word, 0, 0);
   11040:	e0bfff17 	ldw	r2,-4(fp)
   11044:	10800117 	ldw	r2,4(r2)
   11048:	0007883a 	mov	r3,zero
   1104c:	10c00035 	stwio	r3,0(r2)
}
   11050:	0001883a 	nop
   11054:	e037883a 	mov	sp,fp
   11058:	df000017 	ldw	fp,0(sp)
   1105c:	dec00104 	addi	sp,sp,4
   11060:	f800283a 	ret

00011064 <_ZN6Serial4UART10uart_0_isrEPv>:
std::array<uint8_t, Serial::MESSAGE_SIZE> Serial::UART::rx_data;
alt_u8 Serial::UART::rx_len = 0;
std::function<void(Serial::rx_message &received_message)> Serial::UART::callback;

void Serial::UART::uart_0_isr(void *)
{
   11064:	defffa04 	addi	sp,sp,-24
   11068:	dfc00515 	stw	ra,20(sp)
   1106c:	df000415 	stw	fp,16(sp)
   11070:	dc000315 	stw	r16,12(sp)
   11074:	df000404 	addi	fp,sp,16
   11078:	e13ffc15 	stw	r4,-16(fp)
	// Check if the UART buffer is empty or if there are more messages waiting.
	alt_u16 status = IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE);
   1107c:	008000b4 	movhi	r2,2
   11080:	108a0237 	ldwio	r2,10248(r2)
   11084:	e0bffe8d 	sth	r2,-6(fp)

	if(status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   11088:	e0bffe8b 	ldhu	r2,-6(fp)
   1108c:	1080200c 	andi	r2,r2,128
   11090:	10001326 	beq	r2,zero,110e0 <_ZN6Serial4UART10uart_0_isrEPv+0x7c>
	{
		rx_data[rx_len] = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);
   11094:	008000b4 	movhi	r2,2
   11098:	140a0037 	ldwio	r16,10240(r2)
   1109c:	d0a1f283 	ldbu	r2,-30774(gp)
   110a0:	10803fcc 	andi	r2,r2,255
   110a4:	100b883a 	mov	r5,r2
   110a8:	d121f184 	addi	r4,gp,-30778
   110ac:	00107d80 	call	107d8 <_ZNSt5arrayIhLj4EEixEj>
   110b0:	8007883a 	mov	r3,r16
   110b4:	10c00005 	stb	r3,0(r2)
		rx_len ++ ;
   110b8:	d0a1f283 	ldbu	r2,-30774(gp)
   110bc:	10800044 	addi	r2,r2,1
   110c0:	d0a1f285 	stb	r2,-30774(gp)

		if (rx_len >= MESSAGE_SIZE)
   110c4:	d0a1f283 	ldbu	r2,-30774(gp)
   110c8:	10803fcc 	andi	r2,r2,255
   110cc:	10800130 	cmpltui	r2,r2,4
   110d0:	1000031e 	bne	r2,zero,110e0 <_ZN6Serial4UART10uart_0_isrEPv+0x7c>
		{
			uart_ready = true;
   110d4:	00800044 	movi	r2,1
   110d8:	d0a1f145 	stb	r2,-30779(gp)
			rx_len = 0;
   110dc:	d021f285 	stb	zero,-30774(gp)
		}
	}

	if (uart_ready)
   110e0:	d0a1f143 	ldbu	r2,-30779(gp)
   110e4:	10803fcc 	andi	r2,r2,255
   110e8:	10000e26 	beq	r2,zero,11124 <_ZN6Serial4UART10uart_0_isrEPv+0xc0>
	{
		uart_ready = 0;
   110ec:	d021f145 	stb	zero,-30779(gp)

		Serial::rx_message received_message;
		std::memcpy(&received_message, &rx_data, MESSAGE_SIZE);
   110f0:	d0a1f183 	ldbu	r2,-30778(gp)
   110f4:	e0bffd05 	stb	r2,-12(fp)
   110f8:	d0a1f1c3 	ldbu	r2,-30777(gp)
   110fc:	e0bffd45 	stb	r2,-11(fp)
   11100:	d0a1f203 	ldbu	r2,-30776(gp)
   11104:	e0bffd85 	stb	r2,-10(fp)
   11108:	d0a1f243 	ldbu	r2,-30775(gp)
   1110c:	e0bffdc5 	stb	r2,-9(fp)

		callback(received_message);
   11110:	e0bffd04 	addi	r2,fp,-12
   11114:	100b883a 	mov	r5,r2
   11118:	01000074 	movhi	r4,1
   1111c:	211ea204 	addi	r4,r4,31368
   11120:	00113b40 	call	113b4 <_ZNKSt8functionIFvRN6Serial10rx_messageEEEclES2_>
	}
}
   11124:	0001883a 	nop
   11128:	e6ffff04 	addi	sp,fp,-4
   1112c:	dfc00217 	ldw	ra,8(sp)
   11130:	df000117 	ldw	fp,4(sp)
   11134:	dc000017 	ldw	r16,0(sp)
   11138:	dec00304 	addi	sp,sp,12
   1113c:	f800283a 	ret

00011140 <_ZN6Serial4UARTC1ESt8functionIFvRNS_10rx_messageEEE>:

Serial::UART::UART(std::function<void(Serial::rx_message &received_message)> func)
   11140:	defffa04 	addi	sp,sp,-24
   11144:	dfc00515 	stw	ra,20(sp)
   11148:	df000415 	stw	fp,16(sp)
   1114c:	df000404 	addi	fp,sp,16
   11150:	e13ffe15 	stw	r4,-8(fp)
   11154:	e17ffd15 	stw	r5,-12(fp)
{
	callback = func;
   11158:	e17ffd17 	ldw	r5,-12(fp)
   1115c:	01000074 	movhi	r4,1
   11160:	211ea204 	addi	r4,r4,31368
   11164:	001142c0 	call	1142c <_ZNSt8functionIFvRN6Serial10rx_messageEEEaSERKS4_>

	// Clear status flag.
	IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE, 0x00);
   11168:	0007883a 	mov	r3,zero
   1116c:	008000b4 	movhi	r2,2
   11170:	10ca0235 	stwio	r3,10248(r2)

	// Read the useless value in the empty receive register.
	IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);
   11174:	008000b4 	movhi	r2,2
   11178:	108a0037 	ldwio	r2,10240(r2)

	// Setup RX IRQ routine.
	alt_u16 control = ALTERA_AVALON_UART_CONTROL_RRDY_MSK | ALTERA_AVALON_UART_CONTROL_E_MSK;
   1117c:	00806004 	movi	r2,384
   11180:	e0bfff8d 	sth	r2,-2(fp)
	IOWR_ALTERA_AVALON_UART_CONTROL (UART_0_BASE, control);
   11184:	e0ffff8b 	ldhu	r3,-2(fp)
   11188:	008000b4 	movhi	r2,2
   1118c:	10ca0335 	stwio	r3,10252(r2)

	// Install IRQ service routine.
    alt_ic_isr_register(UART_0_IRQ_INTERRUPT_CONTROLLER_ID, UART_0_IRQ, uart_0_isr, NULL, NULL);
   11190:	d8000015 	stw	zero,0(sp)
   11194:	000f883a 	mov	r7,zero
   11198:	01800074 	movhi	r6,1
   1119c:	31841904 	addi	r6,r6,4196
   111a0:	014000c4 	movi	r5,3
   111a4:	0009883a 	mov	r4,zero
   111a8:	00149400 	call	14940 <alt_ic_isr_register>

    // Enable interrupt.
	IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
   111ac:	00c02004 	movi	r3,128
   111b0:	008000b4 	movhi	r2,2
   111b4:	10ca0335 	stwio	r3,10252(r2)
}
   111b8:	0001883a 	nop
   111bc:	e037883a 	mov	sp,fp
   111c0:	dfc00117 	ldw	ra,4(sp)
   111c4:	df000017 	ldw	fp,0(sp)
   111c8:	dec00204 	addi	sp,sp,8
   111cc:	f800283a 	ret

000111d0 <_ZN6Serial4UART8sendDataESt5arrayIhLj4EE>:


void Serial::UART::sendData(std::array<uint8_t, 4> data)
{
   111d0:	defff704 	addi	sp,sp,-36
   111d4:	dfc00815 	stw	ra,32(sp)
   111d8:	df000715 	stw	fp,28(sp)
   111dc:	df000704 	addi	fp,sp,28
   111e0:	e13ffa15 	stw	r4,-24(fp)
   111e4:	e17ff915 	stw	r5,-28(fp)
	for (uint8_t data_byte : data)
   111e8:	e0bff904 	addi	r2,fp,-28
   111ec:	e0bffd15 	stw	r2,-12(fp)
   111f0:	e13ffd17 	ldw	r4,-12(fp)
   111f4:	00114880 	call	11488 <_ZNSt5arrayIhLj4EE5beginEv>
   111f8:	e0bfff15 	stw	r2,-4(fp)
   111fc:	e13ffd17 	ldw	r4,-12(fp)
   11200:	00114b80 	call	114b8 <_ZNSt5arrayIhLj4EE3endEv>
   11204:	e0bffc15 	stw	r2,-16(fp)
   11208:	e0ffff17 	ldw	r3,-4(fp)
   1120c:	e0bffc17 	ldw	r2,-16(fp)
   11210:	18801426 	beq	r3,r2,11264 <_ZN6Serial4UART8sendDataESt5arrayIhLj4EE+0x94>
   11214:	e0bfff17 	ldw	r2,-4(fp)
   11218:	10800003 	ldbu	r2,0(r2)
   1121c:	e0bffbc5 	stb	r2,-17(fp)
	{
		alt_u8 status = IORD_ALTERA_AVALON_UART_STATUS (UART_0_BASE);
   11220:	008000b4 	movhi	r2,2
   11224:	108a0237 	ldwio	r2,10248(r2)
   11228:	e0bffec5 	stb	r2,-5(fp)

		// Wait for sending to finish.
		while (! (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK))
   1122c:	e0bffec3 	ldbu	r2,-5(fp)
   11230:	1080100c 	andi	r2,r2,64
   11234:	1000041e 	bne	r2,zero,11248 <_ZN6Serial4UART8sendDataESt5arrayIhLj4EE+0x78>
		{
			status = IORD_ALTERA_AVALON_UART_STATUS (UART_0_BASE);
   11238:	008000b4 	movhi	r2,2
   1123c:	108a0237 	ldwio	r2,10248(r2)
   11240:	e0bffec5 	stb	r2,-5(fp)
		while (! (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK))
   11244:	003ff906 	br	1122c <_ZN6Serial4UART8sendDataESt5arrayIhLj4EE+0x5c>
		}

		IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, data_byte);
   11248:	e0fffbc3 	ldbu	r3,-17(fp)
   1124c:	008000b4 	movhi	r2,2
   11250:	10ca0135 	stwio	r3,10244(r2)
	for (uint8_t data_byte : data)
   11254:	e0bfff17 	ldw	r2,-4(fp)
   11258:	10800044 	addi	r2,r2,1
   1125c:	e0bfff15 	stw	r2,-4(fp)
   11260:	003fe906 	br	11208 <_ZN6Serial4UART8sendDataESt5arrayIhLj4EE+0x38>
	}
}
   11264:	0001883a 	nop
   11268:	e037883a 	mov	sp,fp
   1126c:	dfc00117 	ldw	ra,4(sp)
   11270:	df000017 	ldw	fp,0(sp)
   11274:	dec00204 	addi	sp,sp,8
   11278:	f800283a 	ret

0001127c <_Z41__static_initialization_and_destruction_0ii>:
   1127c:	defffc04 	addi	sp,sp,-16
   11280:	dfc00315 	stw	ra,12(sp)
   11284:	df000215 	stw	fp,8(sp)
   11288:	df000204 	addi	fp,sp,8
   1128c:	e13fff15 	stw	r4,-4(fp)
   11290:	e17ffe15 	stw	r5,-8(fp)
   11294:	e0bfff17 	ldw	r2,-4(fp)
   11298:	10800058 	cmpnei	r2,r2,1
   1129c:	1000061e 	bne	r2,zero,112b8 <_Z41__static_initialization_and_destruction_0ii+0x3c>
   112a0:	e0fffe17 	ldw	r3,-8(fp)
   112a4:	00bfffd4 	movui	r2,65535
   112a8:	1880031e 	bne	r3,r2,112b8 <_Z41__static_initialization_and_destruction_0ii+0x3c>
std::function<void(Serial::rx_message &received_message)> Serial::UART::callback;
   112ac:	01000074 	movhi	r4,1
   112b0:	211ea204 	addi	r4,r4,31368
   112b4:	001137c0 	call	1137c <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1Ev>
   112b8:	e0bfff17 	ldw	r2,-4(fp)
   112bc:	1000061e 	bne	r2,zero,112d8 <_Z41__static_initialization_and_destruction_0ii+0x5c>
   112c0:	e0fffe17 	ldw	r3,-8(fp)
   112c4:	00bfffd4 	movui	r2,65535
   112c8:	1880031e 	bne	r3,r2,112d8 <_Z41__static_initialization_and_destruction_0ii+0x5c>
   112cc:	01000074 	movhi	r4,1
   112d0:	211ea204 	addi	r4,r4,31368
   112d4:	00107a00 	call	107a0 <_ZNSt8functionIFvRN6Serial10rx_messageEEED1Ev>
}
   112d8:	0001883a 	nop
   112dc:	e037883a 	mov	sp,fp
   112e0:	dfc00117 	ldw	ra,4(sp)
   112e4:	df000017 	ldw	fp,0(sp)
   112e8:	dec00204 	addi	sp,sp,8
   112ec:	f800283a 	ret

000112f0 <_GLOBAL__sub_I__ZN6Serial4UART10uart_readyE>:
   112f0:	defffe04 	addi	sp,sp,-8
   112f4:	dfc00115 	stw	ra,4(sp)
   112f8:	df000015 	stw	fp,0(sp)
   112fc:	d839883a 	mov	fp,sp
   11300:	017fffd4 	movui	r5,65535
   11304:	01000044 	movi	r4,1
   11308:	001127c0 	call	1127c <_Z41__static_initialization_and_destruction_0ii>
   1130c:	e037883a 	mov	sp,fp
   11310:	dfc00117 	ldw	ra,4(sp)
   11314:	df000017 	ldw	fp,0(sp)
   11318:	dec00204 	addi	sp,sp,8
   1131c:	f800283a 	ret

00011320 <_GLOBAL__sub_D__ZN6Serial4UART10uart_readyE>:
   11320:	defffe04 	addi	sp,sp,-8
   11324:	dfc00115 	stw	ra,4(sp)
   11328:	df000015 	stw	fp,0(sp)
   1132c:	d839883a 	mov	fp,sp
   11330:	017fffd4 	movui	r5,65535
   11334:	0009883a 	mov	r4,zero
   11338:	001127c0 	call	1127c <_Z41__static_initialization_and_destruction_0ii>
   1133c:	e037883a 	mov	sp,fp
   11340:	dfc00117 	ldw	ra,4(sp)
   11344:	df000017 	ldw	fp,0(sp)
   11348:	dec00204 	addi	sp,sp,8
   1134c:	f800283a 	ret

00011350 <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
   11350:	defffe04 	addi	sp,sp,-8
   11354:	df000115 	stw	fp,4(sp)
   11358:	df000104 	addi	fp,sp,4
   1135c:	e13fff15 	stw	r4,-4(fp)
   11360:	e0bfff17 	ldw	r2,-4(fp)
   11364:	10800217 	ldw	r2,8(r2)
   11368:	1005003a 	cmpeq	r2,r2,zero
   1136c:	e037883a 	mov	sp,fp
   11370:	df000017 	ldw	fp,0(sp)
   11374:	dec00104 	addi	sp,sp,4
   11378:	f800283a 	ret

0001137c <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1Ev>:
      function() noexcept
   1137c:	defffd04 	addi	sp,sp,-12
   11380:	dfc00215 	stw	ra,8(sp)
   11384:	df000115 	stw	fp,4(sp)
   11388:	df000104 	addi	fp,sp,4
   1138c:	e13fff15 	stw	r4,-4(fp)
      : _Function_base() { }
   11390:	e0bfff17 	ldw	r2,-4(fp)
   11394:	1009883a 	mov	r4,r2
   11398:	00106480 	call	10648 <_ZNSt14_Function_baseC1Ev>
   1139c:	0001883a 	nop
   113a0:	e037883a 	mov	sp,fp
   113a4:	dfc00117 	ldw	ra,4(sp)
   113a8:	df000017 	ldw	fp,0(sp)
   113ac:	dec00204 	addi	sp,sp,8
   113b0:	f800283a 	ret

000113b4 <_ZNKSt8functionIFvRN6Serial10rx_messageEEEclES2_>:

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   113b4:	defffa04 	addi	sp,sp,-24
   113b8:	dfc00515 	stw	ra,20(sp)
   113bc:	df000415 	stw	fp,16(sp)
   113c0:	dc400315 	stw	r17,12(sp)
   113c4:	dc000215 	stw	r16,8(sp)
   113c8:	df000404 	addi	fp,sp,16
   113cc:	e13ffd15 	stw	r4,-12(fp)
   113d0:	e17ffc15 	stw	r5,-16(fp)
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   113d4:	e0bffd17 	ldw	r2,-12(fp)
   113d8:	1009883a 	mov	r4,r2
   113dc:	00113500 	call	11350 <_ZNKSt14_Function_base8_M_emptyEv>
   113e0:	10803fcc 	andi	r2,r2,255
   113e4:	10000126 	beq	r2,zero,113ec <_ZNKSt8functionIFvRN6Serial10rx_messageEEEclES2_+0x38>
	__throw_bad_function_call();
   113e8:	0012e0c0 	call	12e0c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   113ec:	e0bffd17 	ldw	r2,-12(fp)
   113f0:	14000317 	ldw	r16,12(r2)
   113f4:	e47ffd17 	ldw	r17,-12(fp)
   113f8:	e13ffc17 	ldw	r4,-16(fp)
   113fc:	0010bc00 	call	10bc0 <_ZSt7forwardIRN6Serial10rx_messageEEOT_RNSt16remove_referenceIS3_E4typeE>
   11400:	100b883a 	mov	r5,r2
   11404:	8809883a 	mov	r4,r17
   11408:	803ee83a 	callr	r16
   1140c:	0001883a 	nop
    }
   11410:	e6fffe04 	addi	sp,fp,-8
   11414:	dfc00317 	ldw	ra,12(sp)
   11418:	df000217 	ldw	fp,8(sp)
   1141c:	dc400117 	ldw	r17,4(sp)
   11420:	dc000017 	ldw	r16,0(sp)
   11424:	dec00404 	addi	sp,sp,16
   11428:	f800283a 	ret

0001142c <_ZNSt8functionIFvRN6Serial10rx_messageEEEaSERKS4_>:
      operator=(const function& __x)
   1142c:	defff804 	addi	sp,sp,-32
   11430:	dfc00715 	stw	ra,28(sp)
   11434:	df000615 	stw	fp,24(sp)
   11438:	df000604 	addi	fp,sp,24
   1143c:	e13ffb15 	stw	r4,-20(fp)
   11440:	e17ffa15 	stw	r5,-24(fp)
	function(__x).swap(*this);
   11444:	e0bffc04 	addi	r2,fp,-16
   11448:	e17ffa17 	ldw	r5,-24(fp)
   1144c:	1009883a 	mov	r4,r2
   11450:	00114ec0 	call	114ec <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1ERKS4_>
   11454:	e0bffc04 	addi	r2,fp,-16
   11458:	e17ffb17 	ldw	r5,-20(fp)
   1145c:	1009883a 	mov	r4,r2
   11460:	001162c0 	call	1162c <_ZNSt8functionIFvRN6Serial10rx_messageEEE4swapERS4_>
   11464:	e0bffc04 	addi	r2,fp,-16
   11468:	1009883a 	mov	r4,r2
   1146c:	00107a00 	call	107a0 <_ZNSt8functionIFvRN6Serial10rx_messageEEED1Ev>
	return *this;
   11470:	e0bffb17 	ldw	r2,-20(fp)
      }
   11474:	e037883a 	mov	sp,fp
   11478:	dfc00117 	ldw	ra,4(sp)
   1147c:	df000017 	ldw	fp,0(sp)
   11480:	dec00204 	addi	sp,sp,8
   11484:	f800283a 	ret

00011488 <_ZNSt5arrayIhLj4EE5beginEv>:
      begin() noexcept
   11488:	defffd04 	addi	sp,sp,-12
   1148c:	dfc00215 	stw	ra,8(sp)
   11490:	df000115 	stw	fp,4(sp)
   11494:	df000104 	addi	fp,sp,4
   11498:	e13fff15 	stw	r4,-4(fp)
      { return iterator(data()); }
   1149c:	e13fff17 	ldw	r4,-4(fp)
   114a0:	00116a80 	call	116a8 <_ZNSt5arrayIhLj4EE4dataEv>
   114a4:	e037883a 	mov	sp,fp
   114a8:	dfc00117 	ldw	ra,4(sp)
   114ac:	df000017 	ldw	fp,0(sp)
   114b0:	dec00204 	addi	sp,sp,8
   114b4:	f800283a 	ret

000114b8 <_ZNSt5arrayIhLj4EE3endEv>:
      end() noexcept
   114b8:	defffd04 	addi	sp,sp,-12
   114bc:	dfc00215 	stw	ra,8(sp)
   114c0:	df000115 	stw	fp,4(sp)
   114c4:	df000104 	addi	fp,sp,4
   114c8:	e13fff15 	stw	r4,-4(fp)
      { return iterator(data() + _Nm); }
   114cc:	e13fff17 	ldw	r4,-4(fp)
   114d0:	00116a80 	call	116a8 <_ZNSt5arrayIhLj4EE4dataEv>
   114d4:	10800104 	addi	r2,r2,4
   114d8:	e037883a 	mov	sp,fp
   114dc:	dfc00117 	ldw	ra,4(sp)
   114e0:	df000017 	ldw	fp,0(sp)
   114e4:	dec00204 	addi	sp,sp,8
   114e8:	f800283a 	ret

000114ec <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1ERKS4_>:
    function<_Res(_ArgTypes...)>::
   114ec:	deffe604 	addi	sp,sp,-104
   114f0:	dfc01915 	stw	ra,100(sp)
   114f4:	df001815 	stw	fp,96(sp)
   114f8:	ddc01715 	stw	r23,92(sp)
   114fc:	dd801615 	stw	r22,88(sp)
   11500:	dd401515 	stw	r21,84(sp)
   11504:	dd001415 	stw	r20,80(sp)
   11508:	dcc01315 	stw	r19,76(sp)
   1150c:	dc801215 	stw	r18,72(sp)
   11510:	dc401115 	stw	r17,68(sp)
   11514:	dc001015 	stw	r16,64(sp)
   11518:	df001804 	addi	fp,sp,96
   1151c:	e13ff715 	stw	r4,-36(fp)
   11520:	e17ff615 	stw	r5,-40(fp)
   11524:	00800074 	movhi	r2,1
   11528:	10878b04 	addi	r2,r2,7724
   1152c:	e0bfef15 	stw	r2,-68(fp)
   11530:	00800074 	movhi	r2,1
   11534:	1099ab04 	addi	r2,r2,26284
   11538:	e0bff015 	stw	r2,-64(fp)
   1153c:	e0bff104 	addi	r2,fp,-60
   11540:	17000015 	stw	fp,0(r2)
   11544:	00c00074 	movhi	r3,1
   11548:	18c57004 	addi	r3,r3,5568
   1154c:	10c00115 	stw	r3,4(r2)
   11550:	16c00215 	stw	sp,8(r2)
   11554:	e0bfe904 	addi	r2,fp,-92
   11558:	1009883a 	mov	r4,r2
   1155c:	0013e3c0 	call	13e3c <_Unwind_SjLj_Register>
    : _Function_base()
   11560:	e0bff717 	ldw	r2,-36(fp)
   11564:	1009883a 	mov	r4,r2
   11568:	00106480 	call	10648 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
   1156c:	e13ff617 	ldw	r4,-40(fp)
   11570:	00116dc0 	call	116dc <_ZNKSt8functionIFvRN6Serial10rx_messageEEEcvbEv>
   11574:	10803fcc 	andi	r2,r2,255
   11578:	10001b26 	beq	r2,zero,115e8 <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1ERKS4_+0xfc>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   1157c:	e0bff617 	ldw	r2,-40(fp)
   11580:	10800217 	ldw	r2,8(r2)
   11584:	e13ff717 	ldw	r4,-36(fp)
   11588:	e17ff617 	ldw	r5,-40(fp)
   1158c:	00c00044 	movi	r3,1
   11590:	e0ffea15 	stw	r3,-88(fp)
   11594:	01800084 	movi	r6,2
   11598:	103ee83a 	callr	r2
	  _M_invoker = __x._M_invoker;
   1159c:	e0bff617 	ldw	r2,-40(fp)
   115a0:	10c00317 	ldw	r3,12(r2)
   115a4:	e0bff717 	ldw	r2,-36(fp)
   115a8:	10c00315 	stw	r3,12(r2)
	  _M_manager = __x._M_manager;
   115ac:	e0bff617 	ldw	r2,-40(fp)
   115b0:	10c00217 	ldw	r3,8(r2)
   115b4:	e0bff717 	ldw	r2,-36(fp)
   115b8:	10c00215 	stw	r3,8(r2)
    }
   115bc:	00000a06 	br	115e8 <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1ERKS4_+0xfc>
    : _Function_base()
   115c0:	e0bfeb17 	ldw	r2,-84(fp)
   115c4:	e0bfe815 	stw	r2,-96(fp)
   115c8:	e0bff717 	ldw	r2,-36(fp)
   115cc:	1009883a 	mov	r4,r2
   115d0:	00106740 	call	10674 <_ZNSt14_Function_baseD1Ev>
   115d4:	e0ffe817 	ldw	r3,-96(fp)
   115d8:	00bfffc4 	movi	r2,-1
   115dc:	e0bfea15 	stw	r2,-88(fp)
   115e0:	1809883a 	mov	r4,r3
   115e4:	00140240 	call	14024 <_Unwind_SjLj_Resume>
    }
   115e8:	0001883a 	nop
   115ec:	e0bfe904 	addi	r2,fp,-92
   115f0:	1009883a 	mov	r4,r2
   115f4:	0013e540 	call	13e54 <_Unwind_SjLj_Unregister>
   115f8:	e6fff804 	addi	sp,fp,-32
   115fc:	dfc00917 	ldw	ra,36(sp)
   11600:	df000817 	ldw	fp,32(sp)
   11604:	ddc00717 	ldw	r23,28(sp)
   11608:	dd800617 	ldw	r22,24(sp)
   1160c:	dd400517 	ldw	r21,20(sp)
   11610:	dd000417 	ldw	r20,16(sp)
   11614:	dcc00317 	ldw	r19,12(sp)
   11618:	dc800217 	ldw	r18,8(sp)
   1161c:	dc400117 	ldw	r17,4(sp)
   11620:	dc000017 	ldw	r16,0(sp)
   11624:	dec00a04 	addi	sp,sp,40
   11628:	f800283a 	ret

0001162c <_ZNSt8functionIFvRN6Serial10rx_messageEEE4swapERS4_>:
      void swap(function& __x) noexcept
   1162c:	defffc04 	addi	sp,sp,-16
   11630:	dfc00315 	stw	ra,12(sp)
   11634:	df000215 	stw	fp,8(sp)
   11638:	df000204 	addi	fp,sp,8
   1163c:	e13fff15 	stw	r4,-4(fp)
   11640:	e17ffe15 	stw	r5,-8(fp)
	std::swap(_M_functor, __x._M_functor);
   11644:	e0bfff17 	ldw	r2,-4(fp)
   11648:	e0fffe17 	ldw	r3,-8(fp)
   1164c:	180b883a 	mov	r5,r3
   11650:	1009883a 	mov	r4,r2
   11654:	00117380 	call	11738 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
   11658:	e0bfff17 	ldw	r2,-4(fp)
   1165c:	10c00204 	addi	r3,r2,8
   11660:	e0bffe17 	ldw	r2,-8(fp)
   11664:	10800204 	addi	r2,r2,8
   11668:	100b883a 	mov	r5,r2
   1166c:	1809883a 	mov	r4,r3
   11670:	00117e80 	call	117e8 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
   11674:	e0bfff17 	ldw	r2,-4(fp)
   11678:	10c00304 	addi	r3,r2,12
   1167c:	e0bffe17 	ldw	r2,-8(fp)
   11680:	10800304 	addi	r2,r2,12
   11684:	100b883a 	mov	r5,r2
   11688:	1809883a 	mov	r4,r3
   1168c:	00118780 	call	11878 <_ZSt4swapIPFvRKSt9_Any_dataRN6Serial10rx_messageEEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
   11690:	0001883a 	nop
   11694:	e037883a 	mov	sp,fp
   11698:	dfc00117 	ldw	ra,4(sp)
   1169c:	df000017 	ldw	fp,0(sp)
   116a0:	dec00204 	addi	sp,sp,8
   116a4:	f800283a 	ret

000116a8 <_ZNSt5arrayIhLj4EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
   116a8:	defffd04 	addi	sp,sp,-12
   116ac:	dfc00215 	stw	ra,8(sp)
   116b0:	df000115 	stw	fp,4(sp)
   116b4:	df000104 	addi	fp,sp,4
   116b8:	e13fff15 	stw	r4,-4(fp)
      { return _AT_Type::_S_ptr(_M_elems); }
   116bc:	e0bfff17 	ldw	r2,-4(fp)
   116c0:	1009883a 	mov	r4,r2
   116c4:	00118e40 	call	118e4 <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>
   116c8:	e037883a 	mov	sp,fp
   116cc:	dfc00117 	ldw	ra,4(sp)
   116d0:	df000017 	ldw	fp,0(sp)
   116d4:	dec00204 	addi	sp,sp,8
   116d8:	f800283a 	ret

000116dc <_ZNKSt8functionIFvRN6Serial10rx_messageEEEcvbEv>:
      explicit operator bool() const noexcept
   116dc:	defffd04 	addi	sp,sp,-12
   116e0:	dfc00215 	stw	ra,8(sp)
   116e4:	df000115 	stw	fp,4(sp)
   116e8:	df000104 	addi	fp,sp,4
   116ec:	e13fff15 	stw	r4,-4(fp)
      { return !_M_empty(); }
   116f0:	e0bfff17 	ldw	r2,-4(fp)
   116f4:	1009883a 	mov	r4,r2
   116f8:	00113500 	call	11350 <_ZNKSt14_Function_base8_M_emptyEv>
   116fc:	1080005c 	xori	r2,r2,1
   11700:	e037883a 	mov	sp,fp
   11704:	dfc00117 	ldw	ra,4(sp)
   11708:	df000017 	ldw	fp,0(sp)
   1170c:	dec00204 	addi	sp,sp,8
   11710:	f800283a 	ret

00011714 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
   11714:	defffe04 	addi	sp,sp,-8
   11718:	df000115 	stw	fp,4(sp)
   1171c:	df000104 	addi	fp,sp,4
   11720:	e13fff15 	stw	r4,-4(fp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   11724:	e0bfff17 	ldw	r2,-4(fp)
   11728:	e037883a 	mov	sp,fp
   1172c:	df000017 	ldw	fp,0(sp)
   11730:	dec00104 	addi	sp,sp,4
   11734:	f800283a 	ret

00011738 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   11738:	defffa04 	addi	sp,sp,-24
   1173c:	dfc00515 	stw	ra,20(sp)
   11740:	df000415 	stw	fp,16(sp)
   11744:	df000404 	addi	fp,sp,16
   11748:	e13ffd15 	stw	r4,-12(fp)
   1174c:	e17ffc15 	stw	r5,-16(fp)
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   11750:	e13ffd17 	ldw	r4,-12(fp)
   11754:	00117140 	call	11714 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
   11758:	10c00017 	ldw	r3,0(r2)
   1175c:	e0fffe15 	stw	r3,-8(fp)
   11760:	10800117 	ldw	r2,4(r2)
   11764:	e0bfff15 	stw	r2,-4(fp)
      __a = _GLIBCXX_MOVE(__b);
   11768:	e13ffc17 	ldw	r4,-16(fp)
   1176c:	00117140 	call	11714 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
   11770:	1007883a 	mov	r3,r2
   11774:	e0bffd17 	ldw	r2,-12(fp)
   11778:	19000017 	ldw	r4,0(r3)
   1177c:	11000015 	stw	r4,0(r2)
   11780:	18c00117 	ldw	r3,4(r3)
   11784:	10c00115 	stw	r3,4(r2)
      __b = _GLIBCXX_MOVE(__tmp);
   11788:	e0bffe04 	addi	r2,fp,-8
   1178c:	1009883a 	mov	r4,r2
   11790:	00117140 	call	11714 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
   11794:	1007883a 	mov	r3,r2
   11798:	e0bffc17 	ldw	r2,-16(fp)
   1179c:	19000017 	ldw	r4,0(r3)
   117a0:	11000015 	stw	r4,0(r2)
   117a4:	18c00117 	ldw	r3,4(r3)
   117a8:	10c00115 	stw	r3,4(r2)
    }
   117ac:	0001883a 	nop
   117b0:	e037883a 	mov	sp,fp
   117b4:	dfc00117 	ldw	ra,4(sp)
   117b8:	df000017 	ldw	fp,0(sp)
   117bc:	dec00204 	addi	sp,sp,8
   117c0:	f800283a 	ret

000117c4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
   117c4:	defffe04 	addi	sp,sp,-8
   117c8:	df000115 	stw	fp,4(sp)
   117cc:	df000104 	addi	fp,sp,4
   117d0:	e13fff15 	stw	r4,-4(fp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   117d4:	e0bfff17 	ldw	r2,-4(fp)
   117d8:	e037883a 	mov	sp,fp
   117dc:	df000017 	ldw	fp,0(sp)
   117e0:	dec00104 	addi	sp,sp,4
   117e4:	f800283a 	ret

000117e8 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
   117e8:	defffb04 	addi	sp,sp,-20
   117ec:	dfc00415 	stw	ra,16(sp)
   117f0:	df000315 	stw	fp,12(sp)
   117f4:	df000304 	addi	fp,sp,12
   117f8:	e13ffe15 	stw	r4,-8(fp)
   117fc:	e17ffd15 	stw	r5,-12(fp)
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   11800:	e13ffe17 	ldw	r4,-8(fp)
   11804:	00117c40 	call	117c4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
   11808:	10800017 	ldw	r2,0(r2)
   1180c:	e0bfff15 	stw	r2,-4(fp)
      __a = _GLIBCXX_MOVE(__b);
   11810:	e13ffd17 	ldw	r4,-12(fp)
   11814:	00117c40 	call	117c4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
   11818:	10c00017 	ldw	r3,0(r2)
   1181c:	e0bffe17 	ldw	r2,-8(fp)
   11820:	10c00015 	stw	r3,0(r2)
      __b = _GLIBCXX_MOVE(__tmp);
   11824:	e0bfff04 	addi	r2,fp,-4
   11828:	1009883a 	mov	r4,r2
   1182c:	00117c40 	call	117c4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
   11830:	10c00017 	ldw	r3,0(r2)
   11834:	e0bffd17 	ldw	r2,-12(fp)
   11838:	10c00015 	stw	r3,0(r2)
    }
   1183c:	0001883a 	nop
   11840:	e037883a 	mov	sp,fp
   11844:	dfc00117 	ldw	ra,4(sp)
   11848:	df000017 	ldw	fp,0(sp)
   1184c:	dec00204 	addi	sp,sp,8
   11850:	f800283a 	ret

00011854 <_ZSt4moveIRPFvRKSt9_Any_dataRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
   11854:	defffe04 	addi	sp,sp,-8
   11858:	df000115 	stw	fp,4(sp)
   1185c:	df000104 	addi	fp,sp,4
   11860:	e13fff15 	stw	r4,-4(fp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   11864:	e0bfff17 	ldw	r2,-4(fp)
   11868:	e037883a 	mov	sp,fp
   1186c:	df000017 	ldw	fp,0(sp)
   11870:	dec00104 	addi	sp,sp,4
   11874:	f800283a 	ret

00011878 <_ZSt4swapIPFvRKSt9_Any_dataRN6Serial10rx_messageEEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
   11878:	defffb04 	addi	sp,sp,-20
   1187c:	dfc00415 	stw	ra,16(sp)
   11880:	df000315 	stw	fp,12(sp)
   11884:	df000304 	addi	fp,sp,12
   11888:	e13ffe15 	stw	r4,-8(fp)
   1188c:	e17ffd15 	stw	r5,-12(fp)
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   11890:	e13ffe17 	ldw	r4,-8(fp)
   11894:	00118540 	call	11854 <_ZSt4moveIRPFvRKSt9_Any_dataRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOSA_>
   11898:	10800017 	ldw	r2,0(r2)
   1189c:	e0bfff15 	stw	r2,-4(fp)
      __a = _GLIBCXX_MOVE(__b);
   118a0:	e13ffd17 	ldw	r4,-12(fp)
   118a4:	00118540 	call	11854 <_ZSt4moveIRPFvRKSt9_Any_dataRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOSA_>
   118a8:	10c00017 	ldw	r3,0(r2)
   118ac:	e0bffe17 	ldw	r2,-8(fp)
   118b0:	10c00015 	stw	r3,0(r2)
      __b = _GLIBCXX_MOVE(__tmp);
   118b4:	e0bfff04 	addi	r2,fp,-4
   118b8:	1009883a 	mov	r4,r2
   118bc:	00118540 	call	11854 <_ZSt4moveIRPFvRKSt9_Any_dataRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOSA_>
   118c0:	10c00017 	ldw	r3,0(r2)
   118c4:	e0bffd17 	ldw	r2,-12(fp)
   118c8:	10c00015 	stw	r3,0(r2)
    }
   118cc:	0001883a 	nop
   118d0:	e037883a 	mov	sp,fp
   118d4:	dfc00117 	ldw	ra,4(sp)
   118d8:	df000017 	ldw	fp,0(sp)
   118dc:	dec00204 	addi	sp,sp,8
   118e0:	f800283a 	ret

000118e4 <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>:
      _S_ptr(const _Type& __t) noexcept
   118e4:	defffe04 	addi	sp,sp,-8
   118e8:	df000115 	stw	fp,4(sp)
   118ec:	df000104 	addi	fp,sp,4
   118f0:	e13fff15 	stw	r4,-4(fp)
      { return const_cast<_Tp*>(__t); }
   118f4:	e0bfff17 	ldw	r2,-4(fp)
   118f8:	e037883a 	mov	sp,fp
   118fc:	df000017 	ldw	fp,0(sp)
   11900:	dec00104 	addi	sp,sp,4
   11904:	f800283a 	ret

00011908 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>:
   11908:	28800017 	ldw	r2,0(r5)
   1190c:	30c00017 	ldw	r3,0(r6)
   11910:	defffb04 	addi	sp,sp,-20
   11914:	10800217 	ldw	r2,8(r2)
   11918:	dc800315 	stw	r18,12(sp)
   1191c:	dc400215 	stw	r17,8(sp)
   11920:	dc000115 	stw	r16,4(sp)
   11924:	dfc00415 	stw	ra,16(sp)
   11928:	2023883a 	mov	r17,r4
   1192c:	d8c00015 	stw	r3,0(sp)
   11930:	2809883a 	mov	r4,r5
   11934:	2821883a 	mov	r16,r5
   11938:	3025883a 	mov	r18,r6
   1193c:	103ee83a 	callr	r2
   11940:	10803fcc 	andi	r2,r2,255
   11944:	10000326 	beq	r2,zero,11954 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x4c>
   11948:	d8800017 	ldw	r2,0(sp)
   1194c:	10800017 	ldw	r2,0(r2)
   11950:	d8800015 	stw	r2,0(sp)
   11954:	88800017 	ldw	r2,0(r17)
   11958:	01c00044 	movi	r7,1
   1195c:	d80d883a 	mov	r6,sp
   11960:	10800417 	ldw	r2,16(r2)
   11964:	800b883a 	mov	r5,r16
   11968:	8809883a 	mov	r4,r17
   1196c:	103ee83a 	callr	r2
   11970:	10c03fcc 	andi	r3,r2,255
   11974:	18000226 	beq	r3,zero,11980 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x78>
   11978:	d8c00017 	ldw	r3,0(sp)
   1197c:	90c00015 	stw	r3,0(r18)
   11980:	dfc00417 	ldw	ra,16(sp)
   11984:	dc800317 	ldw	r18,12(sp)
   11988:	dc400217 	ldw	r17,8(sp)
   1198c:	dc000117 	ldw	r16,4(sp)
   11990:	dec00504 	addi	sp,sp,20
   11994:	f800283a 	ret

00011998 <_ZL28read_encoded_value_with_basehjPKhPj>:
   11998:	20803fcc 	andi	r2,r4,255
   1199c:	10801418 	cmpnei	r2,r2,80
   119a0:	10002c26 	beq	r2,zero,11a54 <_ZL28read_encoded_value_with_basehjPKhPj+0xbc>
   119a4:	208003cc 	andi	r2,r4,15
   119a8:	10c00368 	cmpgeui	r3,r2,13
   119ac:	1800711e 	bne	r3,zero,11b74 <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
   119b0:	100490ba 	slli	r2,r2,2
   119b4:	00c00074 	movhi	r3,1
   119b8:	10c7883a 	add	r3,r2,r3
   119bc:	18867117 	ldw	r2,6596(r3)
   119c0:	1000683a 	jmp	r2
   119c4:	000119f8 	rdprs	zero,zero,1127
   119c8:	00011ae8 	cmpgeui	zero,zero,1131
   119cc:	00011aac 	andhi	zero,zero,1130
   119d0:	000119f8 	rdprs	zero,zero,1127
   119d4:	00011a7c 	xorhi	zero,zero,1129
   119d8:	00011b74 	movhi	zero,1133
   119dc:	00011b74 	movhi	zero,1133
   119e0:	00011b74 	movhi	zero,1133
   119e4:	00011b74 	movhi	zero,1133
   119e8:	00011b20 	cmpeqi	zero,zero,1132
   119ec:	00011ac4 	movi	zero,1131
   119f0:	000119f8 	rdprs	zero,zero,1127
   119f4:	00011a7c 	xorhi	zero,zero,1129
   119f8:	32000043 	ldbu	r8,1(r6)
   119fc:	30800083 	ldbu	r2,2(r6)
   11a00:	30c000c3 	ldbu	r3,3(r6)
   11a04:	32400003 	ldbu	r9,0(r6)
   11a08:	4010923a 	slli	r8,r8,8
   11a0c:	1004943a 	slli	r2,r2,16
   11a10:	1806963a 	slli	r3,r3,24
   11a14:	4250b03a 	or	r8,r8,r9
   11a18:	1204b03a 	or	r2,r2,r8
   11a1c:	1886b03a 	or	r3,r3,r2
   11a20:	30800104 	addi	r2,r6,4
   11a24:	18000926 	beq	r3,zero,11a4c <_ZL28read_encoded_value_with_basehjPKhPj+0xb4>
   11a28:	22001c0c 	andi	r8,r4,112
   11a2c:	42000418 	cmpnei	r8,r8,16
   11a30:	4000011e 	bne	r8,zero,11a38 <_ZL28read_encoded_value_with_basehjPKhPj+0xa0>
   11a34:	300b883a 	mov	r5,r6
   11a38:	21003fcc 	andi	r4,r4,255
   11a3c:	2100201c 	xori	r4,r4,128
   11a40:	213fe004 	addi	r4,r4,-128
   11a44:	1947883a 	add	r3,r3,r5
   11a48:	20000916 	blt	r4,zero,11a70 <_ZL28read_encoded_value_with_basehjPKhPj+0xd8>
   11a4c:	38c00015 	stw	r3,0(r7)
   11a50:	f800283a 	ret
   11a54:	308000c4 	addi	r2,r6,3
   11a58:	01bfff04 	movi	r6,-4
   11a5c:	1184703a 	and	r2,r2,r6
   11a60:	10c00017 	ldw	r3,0(r2)
   11a64:	10800104 	addi	r2,r2,4
   11a68:	38c00015 	stw	r3,0(r7)
   11a6c:	f800283a 	ret
   11a70:	18c00017 	ldw	r3,0(r3)
   11a74:	38c00015 	stw	r3,0(r7)
   11a78:	f800283a 	ret
   11a7c:	32000043 	ldbu	r8,1(r6)
   11a80:	30800083 	ldbu	r2,2(r6)
   11a84:	30c000c3 	ldbu	r3,3(r6)
   11a88:	32400003 	ldbu	r9,0(r6)
   11a8c:	4010923a 	slli	r8,r8,8
   11a90:	1004943a 	slli	r2,r2,16
   11a94:	1806963a 	slli	r3,r3,24
   11a98:	4250b03a 	or	r8,r8,r9
   11a9c:	1204b03a 	or	r2,r2,r8
   11aa0:	1886b03a 	or	r3,r3,r2
   11aa4:	30800204 	addi	r2,r6,8
   11aa8:	003fde06 	br	11a24 <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
   11aac:	30c00043 	ldbu	r3,1(r6)
   11ab0:	32000003 	ldbu	r8,0(r6)
   11ab4:	30800084 	addi	r2,r6,2
   11ab8:	1806923a 	slli	r3,r3,8
   11abc:	1a06b03a 	or	r3,r3,r8
   11ac0:	003fd806 	br	11a24 <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
   11ac4:	30c00043 	ldbu	r3,1(r6)
   11ac8:	32000003 	ldbu	r8,0(r6)
   11acc:	30800084 	addi	r2,r6,2
   11ad0:	1806923a 	slli	r3,r3,8
   11ad4:	1a06b03a 	or	r3,r3,r8
   11ad8:	18ffffcc 	andi	r3,r3,65535
   11adc:	18e0001c 	xori	r3,r3,32768
   11ae0:	18e00004 	addi	r3,r3,-32768
   11ae4:	003fcf06 	br	11a24 <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
   11ae8:	3005883a 	mov	r2,r6
   11aec:	0007883a 	mov	r3,zero
   11af0:	0015883a 	mov	r10,zero
   11af4:	12000003 	ldbu	r8,0(r2)
   11af8:	10800044 	addi	r2,r2,1
   11afc:	42401fcc 	andi	r9,r8,127
   11b00:	4a92983a 	sll	r9,r9,r10
   11b04:	42003fcc 	andi	r8,r8,255
   11b08:	4200201c 	xori	r8,r8,128
   11b0c:	423fe004 	addi	r8,r8,-128
   11b10:	1a46b03a 	or	r3,r3,r9
   11b14:	528001c4 	addi	r10,r10,7
   11b18:	403ff616 	blt	r8,zero,11af4 <_ZL28read_encoded_value_with_basehjPKhPj+0x15c>
   11b1c:	003fc106 	br	11a24 <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
   11b20:	3005883a 	mov	r2,r6
   11b24:	0007883a 	mov	r3,zero
   11b28:	0013883a 	mov	r9,zero
   11b2c:	12800003 	ldbu	r10,0(r2)
   11b30:	10800044 	addi	r2,r2,1
   11b34:	52001fcc 	andi	r8,r10,127
   11b38:	4250983a 	sll	r8,r8,r9
   11b3c:	52c03fcc 	andi	r11,r10,255
   11b40:	5ac0201c 	xori	r11,r11,128
   11b44:	5affe004 	addi	r11,r11,-128
   11b48:	1a06b03a 	or	r3,r3,r8
   11b4c:	4a4001c4 	addi	r9,r9,7
   11b50:	583ff616 	blt	r11,zero,11b2c <_ZL28read_encoded_value_with_basehjPKhPj+0x194>
   11b54:	4a000828 	cmpgeui	r8,r9,32
   11b58:	403fb21e 	bne	r8,zero,11a24 <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
   11b5c:	5280100c 	andi	r10,r10,64
   11b60:	503fb026 	beq	r10,zero,11a24 <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
   11b64:	023fffc4 	movi	r8,-1
   11b68:	4252983a 	sll	r9,r8,r9
   11b6c:	1a46b03a 	or	r3,r3,r9
   11b70:	003fad06 	br	11a28 <_ZL28read_encoded_value_with_basehjPKhPj+0x90>
   11b74:	deffff04 	addi	sp,sp,-4
   11b78:	dfc00015 	stw	ra,0(sp)
   11b7c:	00141480 	call	14148 <abort>

00011b80 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   11b80:	20803fcc 	andi	r2,r4,255
   11b84:	10803fe0 	cmpeqi	r2,r2,255
   11b88:	1000161e 	bne	r2,zero,11be4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x64>
   11b8c:	2007883a 	mov	r3,r4
   11b90:	18801c0c 	andi	r2,r3,112
   11b94:	2809883a 	mov	r4,r5
   11b98:	11400c20 	cmpeqi	r5,r2,48
   11b9c:	2800131e 	bne	r5,zero,11bec <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
   11ba0:	11400c68 	cmpgeui	r5,r2,49
   11ba4:	2800031e 	bne	r5,zero,11bb4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x34>
   11ba8:	11400820 	cmpeqi	r5,r2,32
   11bac:	28000426 	beq	r5,zero,11bc0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
   11bb0:	0013f101 	jmpi	13f10 <_Unwind_GetTextRelBase>
   11bb4:	10c01020 	cmpeqi	r3,r2,64
   11bb8:	18000826 	beq	r3,zero,11bdc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
   11bbc:	0013ef81 	jmpi	13ef8 <_Unwind_GetRegionStart>
   11bc0:	10800868 	cmpgeui	r2,r2,33
   11bc4:	1000021e 	bne	r2,zero,11bd0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x50>
   11bc8:	18c0180c 	andi	r3,r3,96
   11bcc:	18000526 	beq	r3,zero,11be4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x64>
   11bd0:	deffff04 	addi	sp,sp,-4
   11bd4:	dfc00015 	stw	ra,0(sp)
   11bd8:	00141480 	call	14148 <abort>
   11bdc:	10801420 	cmpeqi	r2,r2,80
   11be0:	103ffb26 	beq	r2,zero,11bd0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x50>
   11be4:	0005883a 	mov	r2,zero
   11be8:	f800283a 	ret
   11bec:	0013f081 	jmpi	13f08 <_Unwind_GetDataRelBase>

00011bf0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   11bf0:	defffb04 	addi	sp,sp,-20
   11bf4:	dc800215 	stw	r18,8(sp)
   11bf8:	dc400115 	stw	r17,4(sp)
   11bfc:	dc000015 	stw	r16,0(sp)
   11c00:	dfc00415 	stw	ra,16(sp)
   11c04:	dcc00315 	stw	r19,12(sp)
   11c08:	2025883a 	mov	r18,r4
   11c0c:	2821883a 	mov	r16,r5
   11c10:	3023883a 	mov	r17,r6
   11c14:	20003d26 	beq	r4,zero,11d0c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
   11c18:	0013ef80 	call	13ef8 <_Unwind_GetRegionStart>
   11c1c:	88800015 	stw	r2,0(r17)
   11c20:	84c00003 	ldbu	r19,0(r16)
   11c24:	84000044 	addi	r16,r16,1
   11c28:	98c03fe0 	cmpeqi	r3,r19,255
   11c2c:	18002d26 	beq	r3,zero,11ce4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xf4>
   11c30:	88800115 	stw	r2,4(r17)
   11c34:	81000003 	ldbu	r4,0(r16)
   11c38:	80800044 	addi	r2,r16,1
   11c3c:	20c03fcc 	andi	r3,r4,255
   11c40:	89000505 	stb	r4,20(r17)
   11c44:	18c03fe0 	cmpeqi	r3,r3,255
   11c48:	1800321e 	bne	r3,zero,11d14 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
   11c4c:	000d883a 	mov	r6,zero
   11c50:	000b883a 	mov	r5,zero
   11c54:	10c00003 	ldbu	r3,0(r2)
   11c58:	10800044 	addi	r2,r2,1
   11c5c:	19001fcc 	andi	r4,r3,127
   11c60:	2148983a 	sll	r4,r4,r5
   11c64:	18c03fcc 	andi	r3,r3,255
   11c68:	18c0201c 	xori	r3,r3,128
   11c6c:	18ffe004 	addi	r3,r3,-128
   11c70:	310cb03a 	or	r6,r6,r4
   11c74:	294001c4 	addi	r5,r5,7
   11c78:	183ff616 	blt	r3,zero,11c54 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x64>
   11c7c:	118d883a 	add	r6,r2,r6
   11c80:	89800315 	stw	r6,12(r17)
   11c84:	10c00003 	ldbu	r3,0(r2)
   11c88:	000f883a 	mov	r7,zero
   11c8c:	10800044 	addi	r2,r2,1
   11c90:	88c00545 	stb	r3,21(r17)
   11c94:	000b883a 	mov	r5,zero
   11c98:	10c00003 	ldbu	r3,0(r2)
   11c9c:	10800044 	addi	r2,r2,1
   11ca0:	19001fcc 	andi	r4,r3,127
   11ca4:	2148983a 	sll	r4,r4,r5
   11ca8:	18c03fcc 	andi	r3,r3,255
   11cac:	18c0201c 	xori	r3,r3,128
   11cb0:	18ffe004 	addi	r3,r3,-128
   11cb4:	390eb03a 	or	r7,r7,r4
   11cb8:	294001c4 	addi	r5,r5,7
   11cbc:	183ff616 	blt	r3,zero,11c98 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xa8>
   11cc0:	11cf883a 	add	r7,r2,r7
   11cc4:	89c00415 	stw	r7,16(r17)
   11cc8:	dfc00417 	ldw	ra,16(sp)
   11ccc:	dcc00317 	ldw	r19,12(sp)
   11cd0:	dc800217 	ldw	r18,8(sp)
   11cd4:	dc400117 	ldw	r17,4(sp)
   11cd8:	dc000017 	ldw	r16,0(sp)
   11cdc:	dec00504 	addi	sp,sp,20
   11ce0:	f800283a 	ret
   11ce4:	900b883a 	mov	r5,r18
   11ce8:	9809883a 	mov	r4,r19
   11cec:	0011b800 	call	11b80 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   11cf0:	800d883a 	mov	r6,r16
   11cf4:	89c00104 	addi	r7,r17,4
   11cf8:	100b883a 	mov	r5,r2
   11cfc:	9809883a 	mov	r4,r19
   11d00:	00119980 	call	11998 <_ZL28read_encoded_value_with_basehjPKhPj>
   11d04:	1021883a 	mov	r16,r2
   11d08:	003fca06 	br	11c34 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x44>
   11d0c:	0005883a 	mov	r2,zero
   11d10:	003fc206 	br	11c1c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x2c>
   11d14:	88000315 	stw	zero,12(r17)
   11d18:	003fda06 	br	11c84 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x94>

00011d1c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
   11d1c:	defffa04 	addi	sp,sp,-24
   11d20:	dc000215 	stw	r16,8(sp)
   11d24:	24000317 	ldw	r16,12(r4)
   11d28:	01ce303a 	nor	r7,zero,r7
   11d2c:	dc800415 	stw	r18,16(sp)
   11d30:	dc400315 	stw	r17,12(sp)
   11d34:	dfc00515 	stw	ra,20(sp)
   11d38:	2025883a 	mov	r18,r4
   11d3c:	2823883a 	mov	r17,r5
   11d40:	d9800015 	stw	r6,0(sp)
   11d44:	81e1883a 	add	r16,r16,r7
   11d48:	000f883a 	mov	r7,zero
   11d4c:	000d883a 	mov	r6,zero
   11d50:	80800003 	ldbu	r2,0(r16)
   11d54:	84000044 	addi	r16,r16,1
   11d58:	10c01fcc 	andi	r3,r2,127
   11d5c:	1986983a 	sll	r3,r3,r6
   11d60:	10803fcc 	andi	r2,r2,255
   11d64:	1080201c 	xori	r2,r2,128
   11d68:	10bfe004 	addi	r2,r2,-128
   11d6c:	38ceb03a 	or	r7,r7,r3
   11d70:	318001c4 	addi	r6,r6,7
   11d74:	103ff616 	blt	r2,zero,11d50 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x34>
   11d78:	38002926 	beq	r7,zero,11e20 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x104>
   11d7c:	90800503 	ldbu	r2,20(r18)
   11d80:	11003fcc 	andi	r4,r2,255
   11d84:	20c03fe0 	cmpeqi	r3,r4,255
   11d88:	1800231e 	bne	r3,zero,11e18 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xfc>
   11d8c:	108001cc 	andi	r2,r2,7
   11d90:	10c000a0 	cmpeqi	r3,r2,2
   11d94:	18001d1e 	bne	r3,zero,11e0c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xf0>
   11d98:	10c000e8 	cmpgeui	r3,r2,3
   11d9c:	18001726 	beq	r3,zero,11dfc <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xe0>
   11da0:	10c000e0 	cmpeqi	r3,r2,3
   11da4:	1800161e 	bne	r3,zero,11e00 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xe4>
   11da8:	10800120 	cmpeqi	r2,r2,4
   11dac:	10001e26 	beq	r2,zero,11e28 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x10c>
   11db0:	380e90fa 	slli	r7,r7,3
   11db4:	01c5c83a 	sub	r2,zero,r7
   11db8:	91800317 	ldw	r6,12(r18)
   11dbc:	91400217 	ldw	r5,8(r18)
   11dc0:	d9c00104 	addi	r7,sp,4
   11dc4:	308d883a 	add	r6,r6,r2
   11dc8:	00119980 	call	11998 <_ZL28read_encoded_value_with_basehjPKhPj>
   11dcc:	d9000117 	ldw	r4,4(sp)
   11dd0:	d80d883a 	mov	r6,sp
   11dd4:	880b883a 	mov	r5,r17
   11dd8:	00119080 	call	11908 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
   11ddc:	10c03fcc 	andi	r3,r2,255
   11de0:	183fd926 	beq	r3,zero,11d48 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x2c>
   11de4:	dfc00517 	ldw	ra,20(sp)
   11de8:	dc800417 	ldw	r18,16(sp)
   11dec:	dc400317 	ldw	r17,12(sp)
   11df0:	dc000217 	ldw	r16,8(sp)
   11df4:	dec00604 	addi	sp,sp,24
   11df8:	f800283a 	ret
   11dfc:	10000a1e 	bne	r2,zero,11e28 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x10c>
   11e00:	380e90ba 	slli	r7,r7,2
   11e04:	01c5c83a 	sub	r2,zero,r7
   11e08:	003feb06 	br	11db8 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x9c>
   11e0c:	39cf883a 	add	r7,r7,r7
   11e10:	01c5c83a 	sub	r2,zero,r7
   11e14:	003fe806 	br	11db8 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x9c>
   11e18:	0005883a 	mov	r2,zero
   11e1c:	003fe606 	br	11db8 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x9c>
   11e20:	0005883a 	mov	r2,zero
   11e24:	003fef06 	br	11de4 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xc8>
   11e28:	00141480 	call	14148 <abort>

00011e2c <__gxx_personality_sj0>:
   11e2c:	deffdb04 	addi	sp,sp,-148
   11e30:	02000074 	movhi	r8,1
   11e34:	00c00074 	movhi	r3,1
   11e38:	00800074 	movhi	r2,1
   11e3c:	10892804 	addi	r2,r2,9376
   11e40:	d9000015 	stw	r4,0(sp)
   11e44:	42078b04 	addi	r8,r8,7724
   11e48:	18d9ad04 	addi	r3,r3,26292
   11e4c:	d9000d04 	addi	r4,sp,52
   11e50:	d8801615 	stw	r2,88(sp)
   11e54:	dfc02415 	stw	ra,144(sp)
   11e58:	df002315 	stw	fp,140(sp)
   11e5c:	d9400315 	stw	r5,12(sp)
   11e60:	d9800115 	stw	r6,4(sp)
   11e64:	d9c00215 	stw	r7,8(sp)
   11e68:	da001315 	stw	r8,76(sp)
   11e6c:	d8c01415 	stw	r3,80(sp)
   11e70:	df001515 	stw	fp,84(sp)
   11e74:	dec01715 	stw	sp,92(sp)
   11e78:	0013e3c0 	call	13e3c <_Unwind_SjLj_Register>
   11e7c:	d8800017 	ldw	r2,0(sp)
   11e80:	d8001a15 	stw	zero,104(sp)
   11e84:	d8001b15 	stw	zero,108(sp)
   11e88:	10800058 	cmpnei	r2,r2,1
   11e8c:	1000471e 	bne	r2,zero,11fac <__gxx_personality_sj0+0x180>
   11e90:	d9800117 	ldw	r6,4(sp)
   11e94:	00af3574 	movhi	r2,48341
   11e98:	10b54004 	addi	r2,r2,-11008
   11e9c:	3085883a 	add	r2,r6,r2
   11ea0:	d8800715 	stw	r2,28(sp)
   11ea4:	1185803a 	cmpltu	r2,r2,r6
   11ea8:	d9800217 	ldw	r6,8(sp)
   11eac:	00ee2cb4 	movhi	r3,47282
   11eb0:	d9000317 	ldw	r4,12(sp)
   11eb4:	18eaaf04 	addi	r3,r3,-21828
   11eb8:	30c7883a 	add	r3,r6,r3
   11ebc:	10c7883a 	add	r3,r2,r3
   11ec0:	21000198 	cmpnei	r4,r4,6
   11ec4:	d8c00615 	stw	r3,24(sp)
   11ec8:	2000011e 	bne	r4,zero,11ed0 <__gxx_personality_sj0+0xa4>
   11ecc:	1800d026 	beq	r3,zero,12210 <__gxx_personality_sj0+0x3e4>
   11ed0:	d9002617 	ldw	r4,152(sp)
   11ed4:	00bfffc4 	movi	r2,-1
   11ed8:	d8800e15 	stw	r2,56(sp)
   11edc:	0013eec0 	call	13eec <_Unwind_GetLanguageSpecificData>
   11ee0:	d8800515 	stw	r2,20(sp)
   11ee4:	10005d26 	beq	r2,zero,1205c <__gxx_personality_sj0+0x230>
   11ee8:	d9400517 	ldw	r5,20(sp)
   11eec:	d9002617 	ldw	r4,152(sp)
   11ef0:	d9801d04 	addi	r6,sp,116
   11ef4:	00bfffc4 	movi	r2,-1
   11ef8:	d8800e15 	stw	r2,56(sp)
   11efc:	0011bf00 	call	11bf0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   11f00:	d9002203 	ldbu	r4,136(sp)
   11f04:	d9402617 	ldw	r5,152(sp)
   11f08:	d8800015 	stw	r2,0(sp)
   11f0c:	0011b800 	call	11b80 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   11f10:	d9002617 	ldw	r4,152(sp)
   11f14:	d9401b04 	addi	r5,sp,108
   11f18:	d8801f15 	stw	r2,124(sp)
   11f1c:	0013ebc0 	call	13ebc <_Unwind_GetIPInfo>
   11f20:	d8c01b17 	ldw	r3,108(sp)
   11f24:	d8800115 	stw	r2,4(sp)
   11f28:	18004f26 	beq	r3,zero,12068 <__gxx_personality_sj0+0x23c>
   11f2c:	d8800117 	ldw	r2,4(sp)
   11f30:	10004a16 	blt	r2,zero,1205c <__gxx_personality_sj0+0x230>
   11f34:	1000381e 	bne	r2,zero,12018 <__gxx_personality_sj0+0x1ec>
   11f38:	d8000415 	stw	zero,16(sp)
   11f3c:	d8000215 	stw	zero,8(sp)
   11f40:	00800044 	movi	r2,1
   11f44:	d8c00317 	ldw	r3,12(sp)
   11f48:	18c0004c 	andi	r3,r3,1
   11f4c:	1801061e 	bne	r3,zero,12368 <__gxx_personality_sj0+0x53c>
   11f50:	d8c00317 	ldw	r3,12(sp)
   11f54:	18c0020c 	andi	r3,r3,8
   11f58:	18010a26 	beq	r3,zero,12384 <__gxx_personality_sj0+0x558>
   11f5c:	10800058 	cmpnei	r2,r2,1
   11f60:	10015126 	beq	r2,zero,124a8 <__gxx_personality_sj0+0x67c>
   11f64:	d8800417 	ldw	r2,16(sp)
   11f68:	10014a16 	blt	r2,zero,12494 <__gxx_personality_sj0+0x668>
   11f6c:	d9002617 	ldw	r4,152(sp)
   11f70:	d9802517 	ldw	r6,148(sp)
   11f74:	00bfffc4 	movi	r2,-1
   11f78:	000b883a 	mov	r5,zero
   11f7c:	d8800e15 	stw	r2,56(sp)
   11f80:	0013e940 	call	13e94 <_Unwind_SetGR>
   11f84:	d9800417 	ldw	r6,16(sp)
   11f88:	d9002617 	ldw	r4,152(sp)
   11f8c:	01400044 	movi	r5,1
   11f90:	0013e940 	call	13e94 <_Unwind_SetGR>
   11f94:	d9400117 	ldw	r5,4(sp)
   11f98:	d9002617 	ldw	r4,152(sp)
   11f9c:	0013edc0 	call	13edc <_Unwind_SetIP>
   11fa0:	008001c4 	movi	r2,7
   11fa4:	d8800015 	stw	r2,0(sp)
   11fa8:	00000206 	br	11fb4 <__gxx_personality_sj0+0x188>
   11fac:	008000c4 	movi	r2,3
   11fb0:	d8800015 	stw	r2,0(sp)
   11fb4:	d9000d04 	addi	r4,sp,52
   11fb8:	0013e540 	call	13e54 <_Unwind_SjLj_Unregister>
   11fbc:	d8800017 	ldw	r2,0(sp)
   11fc0:	dfc02417 	ldw	ra,144(sp)
   11fc4:	df002317 	ldw	fp,140(sp)
   11fc8:	dec02504 	addi	sp,sp,148
   11fcc:	f800283a 	ret
   11fd0:	000b883a 	mov	r5,zero
   11fd4:	0009883a 	mov	r4,zero
   11fd8:	d8c00017 	ldw	r3,0(sp)
   11fdc:	18800003 	ldbu	r2,0(r3)
   11fe0:	18c00044 	addi	r3,r3,1
   11fe4:	d8c00015 	stw	r3,0(sp)
   11fe8:	10c01fcc 	andi	r3,r2,127
   11fec:	1906983a 	sll	r3,r3,r4
   11ff0:	10803fcc 	andi	r2,r2,255
   11ff4:	1080201c 	xori	r2,r2,128
   11ff8:	10bfe004 	addi	r2,r2,-128
   11ffc:	28cab03a 	or	r5,r5,r3
   12000:	210001c4 	addi	r4,r4,7
   12004:	103ff416 	blt	r2,zero,11fd8 <__gxx_personality_sj0+0x1ac>
   12008:	d8800117 	ldw	r2,4(sp)
   1200c:	10bfffc4 	addi	r2,r2,-1
   12010:	d8800115 	stw	r2,4(sp)
   12014:	10001726 	beq	r2,zero,12074 <__gxx_personality_sj0+0x248>
   12018:	000d883a 	mov	r6,zero
   1201c:	0009883a 	mov	r4,zero
   12020:	d8c00017 	ldw	r3,0(sp)
   12024:	18800003 	ldbu	r2,0(r3)
   12028:	18c00044 	addi	r3,r3,1
   1202c:	d8c00015 	stw	r3,0(sp)
   12030:	10c01fcc 	andi	r3,r2,127
   12034:	1906983a 	sll	r3,r3,r4
   12038:	10803fcc 	andi	r2,r2,255
   1203c:	1080201c 	xori	r2,r2,128
   12040:	10bfe004 	addi	r2,r2,-128
   12044:	30ccb03a 	or	r6,r6,r3
   12048:	210001c4 	addi	r4,r4,7
   1204c:	103ff416 	blt	r2,zero,12020 <__gxx_personality_sj0+0x1f4>
   12050:	003fdf06 	br	11fd0 <__gxx_personality_sj0+0x1a4>
   12054:	d88008c3 	ldbu	r2,35(sp)
   12058:	10008c1e 	bne	r2,zero,1228c <__gxx_personality_sj0+0x460>
   1205c:	00800204 	movi	r2,8
   12060:	d8800015 	stw	r2,0(sp)
   12064:	003fd306 	br	11fb4 <__gxx_personality_sj0+0x188>
   12068:	10bfffc4 	addi	r2,r2,-1
   1206c:	d8800115 	stw	r2,4(sp)
   12070:	003fae06 	br	11f2c <__gxx_personality_sj0+0x100>
   12074:	30800044 	addi	r2,r6,1
   12078:	d8800a15 	stw	r2,40(sp)
   1207c:	283ff626 	beq	r5,zero,12058 <__gxx_personality_sj0+0x22c>
   12080:	d8800a17 	ldw	r2,40(sp)
   12084:	103ff526 	beq	r2,zero,1205c <__gxx_personality_sj0+0x230>
   12088:	d8802117 	ldw	r2,132(sp)
   1208c:	297fffc4 	addi	r5,r5,-1
   12090:	1145883a 	add	r2,r2,r5
   12094:	d8800215 	stw	r2,8(sp)
   12098:	10007c26 	beq	r2,zero,1228c <__gxx_personality_sj0+0x460>
   1209c:	d8800317 	ldw	r2,12(sp)
   120a0:	1080020c 	andi	r2,r2,8
   120a4:	d8800b15 	stw	r2,44(sp)
   120a8:	1000bf1e 	bne	r2,zero,123a8 <__gxx_personality_sj0+0x57c>
   120ac:	d8800617 	ldw	r2,24(sp)
   120b0:	1000e526 	beq	r2,zero,12448 <__gxx_personality_sj0+0x61c>
   120b4:	00800074 	movhi	r2,1
   120b8:	109ca504 	addi	r2,r2,29332
   120bc:	d8800915 	stw	r2,36(sp)
   120c0:	d8800717 	ldw	r2,28(sp)
   120c4:	d80008c5 	stb	zero,35(sp)
   120c8:	108000a8 	cmpgeui	r2,r2,2
   120cc:	d8800c15 	stw	r2,48(sp)
   120d0:	d8800217 	ldw	r2,8(sp)
   120d4:	000f883a 	mov	r7,zero
   120d8:	0007883a 	mov	r3,zero
   120dc:	d8800015 	stw	r2,0(sp)
   120e0:	d8800017 	ldw	r2,0(sp)
   120e4:	11000003 	ldbu	r4,0(r2)
   120e8:	10800044 	addi	r2,r2,1
   120ec:	d8800015 	stw	r2,0(sp)
   120f0:	20801fcc 	andi	r2,r4,127
   120f4:	10c4983a 	sll	r2,r2,r3
   120f8:	21403fcc 	andi	r5,r4,255
   120fc:	2940201c 	xori	r5,r5,128
   12100:	297fe004 	addi	r5,r5,-128
   12104:	388eb03a 	or	r7,r7,r2
   12108:	18c001c4 	addi	r3,r3,7
   1210c:	283ff416 	blt	r5,zero,120e0 <__gxx_personality_sj0+0x2b4>
   12110:	18800828 	cmpgeui	r2,r3,32
   12114:	1000061e 	bne	r2,zero,12130 <__gxx_personality_sj0+0x304>
   12118:	2100100c 	andi	r4,r4,64
   1211c:	20000426 	beq	r4,zero,12130 <__gxx_personality_sj0+0x304>
   12120:	00800044 	movi	r2,1
   12124:	10c6983a 	sll	r3,r2,r3
   12128:	00c7c83a 	sub	r3,zero,r3
   1212c:	38ceb03a 	or	r7,r7,r3
   12130:	d9400017 	ldw	r5,0(sp)
   12134:	d9c00415 	stw	r7,16(sp)
   12138:	d8000115 	stw	zero,4(sp)
   1213c:	0007883a 	mov	r3,zero
   12140:	29000003 	ldbu	r4,0(r5)
   12144:	da000117 	ldw	r8,4(sp)
   12148:	29400044 	addi	r5,r5,1
   1214c:	20801fcc 	andi	r2,r4,127
   12150:	10c4983a 	sll	r2,r2,r3
   12154:	21803fcc 	andi	r6,r4,255
   12158:	3180201c 	xori	r6,r6,128
   1215c:	4084b03a 	or	r2,r8,r2
   12160:	31bfe004 	addi	r6,r6,-128
   12164:	d8800115 	stw	r2,4(sp)
   12168:	18c001c4 	addi	r3,r3,7
   1216c:	303ff416 	blt	r6,zero,12140 <__gxx_personality_sj0+0x314>
   12170:	18800828 	cmpgeui	r2,r3,32
   12174:	1000081e 	bne	r2,zero,12198 <__gxx_personality_sj0+0x36c>
   12178:	2100100c 	andi	r4,r4,64
   1217c:	20000626 	beq	r4,zero,12198 <__gxx_personality_sj0+0x36c>
   12180:	00800044 	movi	r2,1
   12184:	10c6983a 	sll	r3,r2,r3
   12188:	d8800117 	ldw	r2,4(sp)
   1218c:	00c7c83a 	sub	r3,zero,r3
   12190:	10c4b03a 	or	r2,r2,r3
   12194:	d8800115 	stw	r2,4(sp)
   12198:	38004726 	beq	r7,zero,122b8 <__gxx_personality_sj0+0x48c>
   1219c:	01c04916 	blt	zero,r7,122c4 <__gxx_personality_sj0+0x498>
   121a0:	d8800917 	ldw	r2,36(sp)
   121a4:	10000426 	beq	r2,zero,121b8 <__gxx_personality_sj0+0x38c>
   121a8:	d8800b17 	ldw	r2,44(sp)
   121ac:	1000021e 	bne	r2,zero,121b8 <__gxx_personality_sj0+0x38c>
   121b0:	d8800617 	ldw	r2,24(sp)
   121b4:	10008026 	beq	r2,zero,123b8 <__gxx_personality_sj0+0x58c>
   121b8:	d8802017 	ldw	r2,128(sp)
   121bc:	01ce303a 	nor	r7,zero,r7
   121c0:	000b883a 	mov	r5,zero
   121c4:	11cf883a 	add	r7,r2,r7
   121c8:	0009883a 	mov	r4,zero
   121cc:	38800003 	ldbu	r2,0(r7)
   121d0:	39c00044 	addi	r7,r7,1
   121d4:	10c01fcc 	andi	r3,r2,127
   121d8:	1906983a 	sll	r3,r3,r4
   121dc:	10803fcc 	andi	r2,r2,255
   121e0:	1080201c 	xori	r2,r2,128
   121e4:	10bfe004 	addi	r2,r2,-128
   121e8:	28cab03a 	or	r5,r5,r3
   121ec:	210001c4 	addi	r4,r4,7
   121f0:	103ff616 	blt	r2,zero,121cc <__gxx_personality_sj0+0x3a0>
   121f4:	28005126 	beq	r5,zero,1233c <__gxx_personality_sj0+0x510>
   121f8:	d8800117 	ldw	r2,4(sp)
   121fc:	103f9526 	beq	r2,zero,12054 <__gxx_personality_sj0+0x228>
   12200:	d8c00017 	ldw	r3,0(sp)
   12204:	1885883a 	add	r2,r3,r2
   12208:	d8800215 	stw	r2,8(sp)
   1220c:	003fb006 	br	120d0 <__gxx_personality_sj0+0x2a4>
   12210:	d8800717 	ldw	r2,28(sp)
   12214:	108000a8 	cmpgeui	r2,r2,2
   12218:	103f2d1e 	bne	r2,zero,11ed0 <__gxx_personality_sj0+0xa4>
   1221c:	d8802517 	ldw	r2,148(sp)
   12220:	10bffe17 	ldw	r2,-8(r2)
   12224:	d8800115 	stw	r2,4(sp)
   12228:	10005d26 	beq	r2,zero,123a0 <__gxx_personality_sj0+0x574>
   1222c:	d8802517 	ldw	r2,148(sp)
   12230:	10bffb17 	ldw	r2,-20(r2)
   12234:	d8800415 	stw	r2,16(sp)
   12238:	d8802517 	ldw	r2,148(sp)
   1223c:	10bffd17 	ldw	r2,-12(r2)
   12240:	d8800515 	stw	r2,20(sp)
   12244:	d8800417 	ldw	r2,16(sp)
   12248:	103f480e 	bge	r2,zero,11f6c <__gxx_personality_sj0+0x140>
   1224c:	d9002617 	ldw	r4,152(sp)
   12250:	d9400517 	ldw	r5,20(sp)
   12254:	d9801d04 	addi	r6,sp,116
   12258:	00bfffc4 	movi	r2,-1
   1225c:	d8800e15 	stw	r2,56(sp)
   12260:	0011bf00 	call	11bf0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   12264:	d9402617 	ldw	r5,152(sp)
   12268:	d9002203 	ldbu	r4,136(sp)
   1226c:	0011b800 	call	11b80 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   12270:	d9002203 	ldbu	r4,136(sp)
   12274:	d9402617 	ldw	r5,152(sp)
   12278:	d8801f15 	stw	r2,124(sp)
   1227c:	0011b800 	call	11b80 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   12280:	d8c02517 	ldw	r3,148(sp)
   12284:	18bffe15 	stw	r2,-8(r3)
   12288:	003f3806 	br	11f6c <__gxx_personality_sj0+0x140>
   1228c:	d8800317 	ldw	r2,12(sp)
   12290:	1080004c 	andi	r2,r2,1
   12294:	103f711e 	bne	r2,zero,1205c <__gxx_personality_sj0+0x230>
   12298:	d8800317 	ldw	r2,12(sp)
   1229c:	1080020c 	andi	r2,r2,8
   122a0:	d8800415 	stw	r2,16(sp)
   122a4:	10008126 	beq	r2,zero,124ac <__gxx_personality_sj0+0x680>
   122a8:	d8800a17 	ldw	r2,40(sp)
   122ac:	d8000415 	stw	zero,16(sp)
   122b0:	d8800115 	stw	r2,4(sp)
   122b4:	003f2d06 	br	11f6c <__gxx_personality_sj0+0x140>
   122b8:	00800044 	movi	r2,1
   122bc:	d88008c5 	stb	r2,35(sp)
   122c0:	003fcd06 	br	121f8 <__gxx_personality_sj0+0x3cc>
   122c4:	d8802203 	ldbu	r2,136(sp)
   122c8:	11003fcc 	andi	r4,r2,255
   122cc:	20c03fe0 	cmpeqi	r3,r4,255
   122d0:	18002a1e 	bne	r3,zero,1237c <__gxx_personality_sj0+0x550>
   122d4:	108001cc 	andi	r2,r2,7
   122d8:	10c000a0 	cmpeqi	r3,r2,2
   122dc:	18001f1e 	bne	r3,zero,1235c <__gxx_personality_sj0+0x530>
   122e0:	10c000e8 	cmpgeui	r3,r2,3
   122e4:	18001926 	beq	r3,zero,1234c <__gxx_personality_sj0+0x520>
   122e8:	10c000e0 	cmpeqi	r3,r2,3
   122ec:	1800181e 	bne	r3,zero,12350 <__gxx_personality_sj0+0x524>
   122f0:	10800120 	cmpeqi	r2,r2,4
   122f4:	10007026 	beq	r2,zero,124b8 <__gxx_personality_sj0+0x68c>
   122f8:	380490fa 	slli	r2,r7,3
   122fc:	0085c83a 	sub	r2,zero,r2
   12300:	d9802017 	ldw	r6,128(sp)
   12304:	d9401f17 	ldw	r5,124(sp)
   12308:	d9c01c04 	addi	r7,sp,112
   1230c:	308d883a 	add	r6,r6,r2
   12310:	00bfffc4 	movi	r2,-1
   12314:	d8800e15 	stw	r2,56(sp)
   12318:	00119980 	call	11998 <_ZL28read_encoded_value_with_basehjPKhPj>
   1231c:	d9001c17 	ldw	r4,112(sp)
   12320:	20000626 	beq	r4,zero,1233c <__gxx_personality_sj0+0x510>
   12324:	d9400917 	ldw	r5,36(sp)
   12328:	283fb326 	beq	r5,zero,121f8 <__gxx_personality_sj0+0x3cc>
   1232c:	d9801a04 	addi	r6,sp,104
   12330:	00119080 	call	11908 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
   12334:	10803fcc 	andi	r2,r2,255
   12338:	103faf26 	beq	r2,zero,121f8 <__gxx_personality_sj0+0x3cc>
   1233c:	d8800a17 	ldw	r2,40(sp)
   12340:	d8800115 	stw	r2,4(sp)
   12344:	008000c4 	movi	r2,3
   12348:	003efe06 	br	11f44 <__gxx_personality_sj0+0x118>
   1234c:	10005a1e 	bne	r2,zero,124b8 <__gxx_personality_sj0+0x68c>
   12350:	380490ba 	slli	r2,r7,2
   12354:	0085c83a 	sub	r2,zero,r2
   12358:	003fe906 	br	12300 <__gxx_personality_sj0+0x4d4>
   1235c:	39cf883a 	add	r7,r7,r7
   12360:	01c5c83a 	sub	r2,zero,r7
   12364:	003fe606 	br	12300 <__gxx_personality_sj0+0x4d4>
   12368:	d8800617 	ldw	r2,24(sp)
   1236c:	10002326 	beq	r2,zero,123fc <__gxx_personality_sj0+0x5d0>
   12370:	00800184 	movi	r2,6
   12374:	d8800015 	stw	r2,0(sp)
   12378:	003f0e06 	br	11fb4 <__gxx_personality_sj0+0x188>
   1237c:	0005883a 	mov	r2,zero
   12380:	003fdf06 	br	12300 <__gxx_personality_sj0+0x4d4>
   12384:	d8c00617 	ldw	r3,24(sp)
   12388:	183ef41e 	bne	r3,zero,11f5c <__gxx_personality_sj0+0x130>
   1238c:	d8c00717 	ldw	r3,28(sp)
   12390:	18c000a8 	cmpgeui	r3,r3,2
   12394:	183ef11e 	bne	r3,zero,11f5c <__gxx_personality_sj0+0x130>
   12398:	10800060 	cmpeqi	r2,r2,1
   1239c:	103fa926 	beq	r2,zero,12244 <__gxx_personality_sj0+0x418>
   123a0:	d9002517 	ldw	r4,148(sp)
   123a4:	00133cc0 	call	133cc <__cxa_call_terminate>
   123a8:	00800074 	movhi	r2,1
   123ac:	109ca304 	addi	r2,r2,29324
   123b0:	d8800915 	stw	r2,36(sp)
   123b4:	003f4206 	br	120c0 <__gxx_personality_sj0+0x294>
   123b8:	d8800c17 	ldw	r2,48(sp)
   123bc:	103f7e1e 	bne	r2,zero,121b8 <__gxx_personality_sj0+0x38c>
   123c0:	d9801a17 	ldw	r6,104(sp)
   123c4:	d9400917 	ldw	r5,36(sp)
   123c8:	00bfffc4 	movi	r2,-1
   123cc:	d9001d04 	addi	r4,sp,116
   123d0:	d8800e15 	stw	r2,56(sp)
   123d4:	0011d1c0 	call	11d1c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   123d8:	10803fcc 	andi	r2,r2,255
   123dc:	103f861e 	bne	r2,zero,121f8 <__gxx_personality_sj0+0x3cc>
   123e0:	d8800317 	ldw	r2,12(sp)
   123e4:	1080004c 	andi	r2,r2,1
   123e8:	1000271e 	bne	r2,zero,12488 <__gxx_personality_sj0+0x65c>
   123ec:	d8800a17 	ldw	r2,40(sp)
   123f0:	d8800115 	stw	r2,4(sp)
   123f4:	008000c4 	movi	r2,3
   123f8:	003fe406 	br	1238c <__gxx_personality_sj0+0x560>
   123fc:	d8800717 	ldw	r2,28(sp)
   12400:	108000a8 	cmpgeui	r2,r2,2
   12404:	103fda1e 	bne	r2,zero,12370 <__gxx_personality_sj0+0x544>
   12408:	d8802517 	ldw	r2,148(sp)
   1240c:	d8c00417 	ldw	r3,16(sp)
   12410:	10fffb15 	stw	r3,-20(r2)
   12414:	d8c00217 	ldw	r3,8(sp)
   12418:	10fffc15 	stw	r3,-16(r2)
   1241c:	d8c00517 	ldw	r3,20(sp)
   12420:	10fffd15 	stw	r3,-12(r2)
   12424:	d8c02517 	ldw	r3,148(sp)
   12428:	d8801a17 	ldw	r2,104(sp)
   1242c:	18bfff15 	stw	r2,-4(r3)
   12430:	1805883a 	mov	r2,r3
   12434:	d8c00117 	ldw	r3,4(sp)
   12438:	10fffe15 	stw	r3,-8(r2)
   1243c:	00800184 	movi	r2,6
   12440:	d8800015 	stw	r2,0(sp)
   12444:	003edb06 	br	11fb4 <__gxx_personality_sj0+0x188>
   12448:	d8800717 	ldw	r2,28(sp)
   1244c:	108000a8 	cmpgeui	r2,r2,2
   12450:	103f181e 	bne	r2,zero,120b4 <__gxx_personality_sj0+0x288>
   12454:	d8802517 	ldw	r2,148(sp)
   12458:	10800003 	ldbu	r2,0(r2)
   1245c:	1080004c 	andi	r2,r2,1
   12460:	10000626 	beq	r2,zero,1247c <__gxx_personality_sj0+0x650>
   12464:	d8802517 	ldw	r2,148(sp)
   12468:	10bff517 	ldw	r2,-44(r2)
   1246c:	10fff017 	ldw	r3,-64(r2)
   12470:	d8801a15 	stw	r2,104(sp)
   12474:	d8c00915 	stw	r3,36(sp)
   12478:	003f1106 	br	120c0 <__gxx_personality_sj0+0x294>
   1247c:	d8802517 	ldw	r2,148(sp)
   12480:	10800504 	addi	r2,r2,20
   12484:	003ff906 	br	1246c <__gxx_personality_sj0+0x640>
   12488:	d8800a17 	ldw	r2,40(sp)
   1248c:	d8800115 	stw	r2,4(sp)
   12490:	003fdd06 	br	12408 <__gxx_personality_sj0+0x5dc>
   12494:	00800044 	movi	r2,1
   12498:	d8800e15 	stw	r2,56(sp)
   1249c:	001272c0 	call	1272c <_ZSt10unexpectedv>
   124a0:	d9000f17 	ldw	r4,60(sp)
   124a4:	001342c0 	call	1342c <__cxa_begin_catch>
   124a8:	00127080 	call	12708 <_ZSt9terminatev>
   124ac:	d8800a17 	ldw	r2,40(sp)
   124b0:	d8800115 	stw	r2,4(sp)
   124b4:	003ead06 	br	11f6c <__gxx_personality_sj0+0x140>
   124b8:	00bfffc4 	movi	r2,-1
   124bc:	d8800e15 	stw	r2,56(sp)
   124c0:	00141480 	call	14148 <abort>

000124c4 <__cxa_call_unexpected>:
   124c4:	deffe704 	addi	sp,sp,-100
   124c8:	01400074 	movhi	r5,1
   124cc:	00c00074 	movhi	r3,1
   124d0:	00800074 	movhi	r2,1
   124d4:	29478b04 	addi	r5,r5,7724
   124d8:	18d9b104 	addi	r3,r3,26308
   124dc:	10895104 	addi	r2,r2,9540
   124e0:	d9000015 	stw	r4,0(sp)
   124e4:	d9000404 	addi	r4,sp,16
   124e8:	d9400a15 	stw	r5,40(sp)
   124ec:	d8c00b15 	stw	r3,44(sp)
   124f0:	dfc01815 	stw	ra,96(sp)
   124f4:	d8800d15 	stw	r2,52(sp)
   124f8:	df001715 	stw	fp,92(sp)
   124fc:	df000c15 	stw	fp,48(sp)
   12500:	dec00e15 	stw	sp,56(sp)
   12504:	0013e3c0 	call	13e3c <_Unwind_SjLj_Register>
   12508:	d9000017 	ldw	r4,0(sp)
   1250c:	001342c0 	call	1342c <__cxa_begin_catch>
   12510:	d8c00017 	ldw	r3,0(sp)
   12514:	197ffd17 	ldw	r5,-12(r3)
   12518:	18bffe17 	ldw	r2,-8(r3)
   1251c:	193ff717 	ldw	r4,-36(r3)
   12520:	d9400115 	stw	r5,4(sp)
   12524:	197ffb17 	ldw	r5,-20(r3)
   12528:	18fff817 	ldw	r3,-32(r3)
   1252c:	d8801315 	stw	r2,76(sp)
   12530:	00800044 	movi	r2,1
   12534:	d9400015 	stw	r5,0(sp)
   12538:	d8c00215 	stw	r3,8(sp)
   1253c:	d8800515 	stw	r2,20(sp)
   12540:	001271c0 	call	1271c <_ZN10__cxxabiv112__unexpectedEPFvvE>
   12544:	d8c00617 	ldw	r3,24(sp)
   12548:	d8800517 	ldw	r2,20(sp)
   1254c:	d8c00315 	stw	r3,12(sp)
   12550:	10002b1e 	bne	r2,zero,12600 <__cxa_call_unexpected+0x13c>
   12554:	d9000317 	ldw	r4,12(sp)
   12558:	001342c0 	call	1342c <__cxa_begin_catch>
   1255c:	00136240 	call	13624 <__cxa_get_globals_fast>
   12560:	10800017 	ldw	r2,0(r2)
   12564:	10c00b03 	ldbu	r3,44(r2)
   12568:	18c0004c 	andi	r3,r3,1
   1256c:	18002e26 	beq	r3,zero,12628 <__cxa_call_unexpected+0x164>
   12570:	10800017 	ldw	r2,0(r2)
   12574:	d8800315 	stw	r2,12(sp)
   12578:	d9400117 	ldw	r5,4(sp)
   1257c:	00800084 	movi	r2,2
   12580:	d9801104 	addi	r6,sp,68
   12584:	0009883a 	mov	r4,zero
   12588:	d8800515 	stw	r2,20(sp)
   1258c:	0011bf00 	call	11bf0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   12590:	d9800317 	ldw	r6,12(sp)
   12594:	d9c00017 	ldw	r7,0(sp)
   12598:	d9001104 	addi	r4,sp,68
   1259c:	317ff017 	ldw	r5,-64(r6)
   125a0:	0011d1c0 	call	11d1c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   125a4:	10803fcc 	andi	r2,r2,255
   125a8:	1000221e 	bne	r2,zero,12634 <__cxa_call_unexpected+0x170>
   125ac:	d9c00017 	ldw	r7,0(sp)
   125b0:	01400074 	movhi	r5,1
   125b4:	00800084 	movi	r2,2
   125b8:	000d883a 	mov	r6,zero
   125bc:	295a6304 	addi	r5,r5,27020
   125c0:	d9001104 	addi	r4,sp,68
   125c4:	d8800515 	stw	r2,20(sp)
   125c8:	0011d1c0 	call	11d1c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   125cc:	10803fcc 	andi	r2,r2,255
   125d0:	10001926 	beq	r2,zero,12638 <__cxa_call_unexpected+0x174>
   125d4:	01000104 	movi	r4,4
   125d8:	00132780 	call	13278 <__cxa_allocate_exception>
   125dc:	1009883a 	mov	r4,r2
   125e0:	00800074 	movhi	r2,1
   125e4:	01800074 	movhi	r6,1
   125e8:	01400074 	movhi	r5,1
   125ec:	109a7e04 	addi	r2,r2,27128
   125f0:	318d7604 	addi	r6,r6,13784
   125f4:	295a6304 	addi	r5,r5,27020
   125f8:	20800015 	stw	r2,0(r4)
   125fc:	001286c0 	call	1286c <__cxa_throw>
   12600:	10bfffc4 	addi	r2,r2,-1
   12604:	10000126 	beq	r2,zero,1260c <__cxa_call_unexpected+0x148>
   12608:	003b68fa 	trap	3
   1260c:	d8000515 	stw	zero,20(sp)
   12610:	00134e40 	call	134e4 <__cxa_end_catch>
   12614:	00134e40 	call	134e4 <__cxa_end_catch>
   12618:	d9000317 	ldw	r4,12(sp)
   1261c:	00bfffc4 	movi	r2,-1
   12620:	d8800515 	stw	r2,20(sp)
   12624:	00140240 	call	14024 <_Unwind_SjLj_Resume>
   12628:	10801004 	addi	r2,r2,64
   1262c:	d8800315 	stw	r2,12(sp)
   12630:	003fd106 	br	12578 <__cxa_call_unexpected+0xb4>
   12634:	00128cc0 	call	128cc <__cxa_rethrow>
   12638:	d9000217 	ldw	r4,8(sp)
   1263c:	00126400 	call	12640 <_ZN10__cxxabiv111__terminateEPFvvE>

00012640 <_ZN10__cxxabiv111__terminateEPFvvE>:
   12640:	deffef04 	addi	sp,sp,-68
   12644:	01400074 	movhi	r5,1
   12648:	00c00074 	movhi	r3,1
   1264c:	00800074 	movhi	r2,1
   12650:	200d883a 	mov	r6,r4
   12654:	1089a704 	addi	r2,r2,9884
   12658:	29478b04 	addi	r5,r5,7724
   1265c:	18d9b504 	addi	r3,r3,26324
   12660:	d9000204 	addi	r4,sp,8
   12664:	d8800b15 	stw	r2,44(sp)
   12668:	dfc01015 	stw	ra,64(sp)
   1266c:	df000f15 	stw	fp,60(sp)
   12670:	d9800015 	stw	r6,0(sp)
   12674:	d9400815 	stw	r5,32(sp)
   12678:	d8c00915 	stw	r3,36(sp)
   1267c:	df000a15 	stw	fp,40(sp)
   12680:	dec00c15 	stw	sp,48(sp)
   12684:	0013e3c0 	call	13e3c <_Unwind_SjLj_Register>
   12688:	00800044 	movi	r2,1
   1268c:	d8800315 	stw	r2,12(sp)
   12690:	d8800017 	ldw	r2,0(sp)
   12694:	103ee83a 	callr	r2
   12698:	00141480 	call	14148 <abort>
   1269c:	d8c00417 	ldw	r3,16(sp)
   126a0:	d8800317 	ldw	r2,12(sp)
   126a4:	d8c00015 	stw	r3,0(sp)
   126a8:	d8c00517 	ldw	r3,20(sp)
   126ac:	d8c00115 	stw	r3,4(sp)
   126b0:	1000051e 	bne	r2,zero,126c8 <_ZN10__cxxabiv111__terminateEPFvvE+0x88>
   126b4:	d9000017 	ldw	r4,0(sp)
   126b8:	001342c0 	call	1342c <__cxa_begin_catch>
   126bc:	00800084 	movi	r2,2
   126c0:	d8800315 	stw	r2,12(sp)
   126c4:	00141480 	call	14148 <abort>
   126c8:	10bfffc4 	addi	r2,r2,-1
   126cc:	10000126 	beq	r2,zero,126d4 <_ZN10__cxxabiv111__terminateEPFvvE+0x94>
   126d0:	003b68fa 	trap	3
   126d4:	d8000315 	stw	zero,12(sp)
   126d8:	00134e40 	call	134e4 <__cxa_end_catch>
   126dc:	d8c00117 	ldw	r3,4(sp)
   126e0:	18bfffe0 	cmpeqi	r2,r3,-1
   126e4:	10000426 	beq	r2,zero,126f8 <_ZN10__cxxabiv111__terminateEPFvvE+0xb8>
   126e8:	d8800117 	ldw	r2,4(sp)
   126ec:	d9000017 	ldw	r4,0(sp)
   126f0:	d8800315 	stw	r2,12(sp)
   126f4:	00124c40 	call	124c4 <__cxa_call_unexpected>
   126f8:	d9000017 	ldw	r4,0(sp)
   126fc:	00bfffc4 	movi	r2,-1
   12700:	d8800315 	stw	r2,12(sp)
   12704:	00140240 	call	14024 <_Unwind_SjLj_Resume>

00012708 <_ZSt9terminatev>:
   12708:	00800074 	movhi	r2,1
   1270c:	111ca717 	ldw	r4,29340(r2)
   12710:	deffff04 	addi	sp,sp,-4
   12714:	dfc00015 	stw	ra,0(sp)
   12718:	00126400 	call	12640 <_ZN10__cxxabiv111__terminateEPFvvE>

0001271c <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   1271c:	deffff04 	addi	sp,sp,-4
   12720:	dfc00015 	stw	ra,0(sp)
   12724:	203ee83a 	callr	r4
   12728:	00127080 	call	12708 <_ZSt9terminatev>

0001272c <_ZSt10unexpectedv>:
   1272c:	00800074 	movhi	r2,1
   12730:	111c9e17 	ldw	r4,29304(r2)
   12734:	deffff04 	addi	sp,sp,-4
   12738:	dfc00015 	stw	ra,0(sp)
   1273c:	001271c0 	call	1271c <_ZN10__cxxabiv112__unexpectedEPFvvE>

00012740 <_ZSt13set_terminatePFvvE>:
   12740:	20000526 	beq	r4,zero,12758 <_ZSt13set_terminatePFvvE+0x18>
   12744:	00c00074 	movhi	r3,1
   12748:	00800074 	movhi	r2,1
   1274c:	109ca717 	ldw	r2,29340(r2)
   12750:	191ca715 	stw	r4,29340(r3)
   12754:	f800283a 	ret
   12758:	01000074 	movhi	r4,1
   1275c:	21105204 	addi	r4,r4,16712
   12760:	003ff806 	br	12744 <_ZSt13set_terminatePFvvE+0x4>

00012764 <_ZSt13get_terminatev>:
   12764:	00800074 	movhi	r2,1
   12768:	109ca717 	ldw	r2,29340(r2)
   1276c:	f800283a 	ret

00012770 <_ZSt14set_unexpectedPFvvE>:
   12770:	20000526 	beq	r4,zero,12788 <_ZSt14set_unexpectedPFvvE+0x18>
   12774:	00c00074 	movhi	r3,1
   12778:	00800074 	movhi	r2,1
   1277c:	109c9e17 	ldw	r2,29304(r2)
   12780:	191c9e15 	stw	r4,29304(r3)
   12784:	f800283a 	ret
   12788:	01000074 	movhi	r4,1
   1278c:	2109c204 	addi	r4,r4,9992
   12790:	003ff806 	br	12774 <_ZSt14set_unexpectedPFvvE+0x4>

00012794 <_ZSt14get_unexpectedv>:
   12794:	00800074 	movhi	r2,1
   12798:	109c9e17 	ldw	r2,29304(r2)
   1279c:	f800283a 	ret

000127a0 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
   127a0:	defffe04 	addi	sp,sp,-8
   127a4:	dfc00115 	stw	ra,4(sp)
   127a8:	dc000015 	stw	r16,0(sp)
   127ac:	210000b0 	cmpltui	r4,r4,2
   127b0:	20001326 	beq	r4,zero,12800 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x60>
   127b4:	28bff417 	ldw	r2,-48(r5)
   127b8:	10ffffc4 	addi	r3,r2,-1
   127bc:	28fff415 	stw	r3,-48(r5)
   127c0:	10800058 	cmpnei	r2,r2,1
   127c4:	10000426 	beq	r2,zero,127d8 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x38>
   127c8:	dfc00117 	ldw	ra,4(sp)
   127cc:	dc000017 	ldw	r16,0(sp)
   127d0:	dec00204 	addi	sp,sp,8
   127d4:	f800283a 	ret
   127d8:	28bff617 	ldw	r2,-40(r5)
   127dc:	2c000504 	addi	r16,r5,20
   127e0:	10000226 	beq	r2,zero,127ec <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x4c>
   127e4:	8009883a 	mov	r4,r16
   127e8:	103ee83a 	callr	r2
   127ec:	8009883a 	mov	r4,r16
   127f0:	dfc00117 	ldw	ra,4(sp)
   127f4:	dc000017 	ldw	r16,0(sp)
   127f8:	dec00204 	addi	sp,sp,8
   127fc:	00132d01 	jmpi	132d0 <__cxa_free_exception>
   12800:	293ff817 	ldw	r4,-32(r5)
   12804:	00126400 	call	12640 <_ZN10__cxxabiv111__terminateEPFvvE>

00012808 <__cxa_init_primary_exception>:
   12808:	defffe04 	addi	sp,sp,-8
   1280c:	dfc00115 	stw	ra,4(sp)
   12810:	dc000015 	stw	r16,0(sp)
   12814:	217ff015 	stw	r5,-64(r4)
   12818:	21bff115 	stw	r6,-60(r4)
   1281c:	203fef15 	stw	zero,-68(r4)
   12820:	2021883a 	mov	r16,r4
   12824:	00127940 	call	12794 <_ZSt14get_unexpectedv>
   12828:	80bff215 	stw	r2,-56(r16)
   1282c:	00127640 	call	12764 <_ZSt13get_terminatev>
   12830:	0150caf4 	movhi	r5,17195
   12834:	0111d3b4 	movhi	r4,18254
   12838:	00c00074 	movhi	r3,1
   1283c:	294ac004 	addi	r5,r5,11008
   12840:	211550c4 	addi	r4,r4,21827
   12844:	18c9e804 	addi	r3,r3,10144
   12848:	80bff315 	stw	r2,-52(r16)
   1284c:	80bfef04 	addi	r2,r16,-68
   12850:	817ffb15 	stw	r5,-20(r16)
   12854:	813ffc15 	stw	r4,-16(r16)
   12858:	80fffd15 	stw	r3,-12(r16)
   1285c:	dfc00117 	ldw	ra,4(sp)
   12860:	dc000017 	ldw	r16,0(sp)
   12864:	dec00204 	addi	sp,sp,8
   12868:	f800283a 	ret

0001286c <__cxa_throw>:
   1286c:	defffc04 	addi	sp,sp,-16
   12870:	dfc00315 	stw	ra,12(sp)
   12874:	dc800215 	stw	r18,8(sp)
   12878:	dc400115 	stw	r17,4(sp)
   1287c:	dc000015 	stw	r16,0(sp)
   12880:	2823883a 	mov	r17,r5
   12884:	2021883a 	mov	r16,r4
   12888:	3025883a 	mov	r18,r6
   1288c:	00136300 	call	13630 <__cxa_get_globals>
   12890:	10c00117 	ldw	r3,4(r2)
   12894:	900d883a 	mov	r6,r18
   12898:	880b883a 	mov	r5,r17
   1289c:	18c00044 	addi	r3,r3,1
   128a0:	8009883a 	mov	r4,r16
   128a4:	10c00115 	stw	r3,4(r2)
   128a8:	00128080 	call	12808 <__cxa_init_primary_exception>
   128ac:	14000c04 	addi	r16,r2,48
   128b0:	00c00044 	movi	r3,1
   128b4:	10c00015 	stw	r3,0(r2)
   128b8:	8009883a 	mov	r4,r16
   128bc:	0013f180 	call	13f18 <_Unwind_SjLj_RaiseException>
   128c0:	8009883a 	mov	r4,r16
   128c4:	001342c0 	call	1342c <__cxa_begin_catch>
   128c8:	00127080 	call	12708 <_ZSt9terminatev>

000128cc <__cxa_rethrow>:
   128cc:	defffe04 	addi	sp,sp,-8
   128d0:	dfc00115 	stw	ra,4(sp)
   128d4:	dc000015 	stw	r16,0(sp)
   128d8:	00136300 	call	13630 <__cxa_get_globals>
   128dc:	10c00117 	ldw	r3,4(r2)
   128e0:	11000017 	ldw	r4,0(r2)
   128e4:	18c00044 	addi	r3,r3,1
   128e8:	10c00115 	stw	r3,4(r2)
   128ec:	20001126 	beq	r4,zero,12934 <__cxa_rethrow+0x68>
   128f0:	20c00b17 	ldw	r3,44(r4)
   128f4:	21800c17 	ldw	r6,48(r4)
   128f8:	016f3574 	movhi	r5,48341
   128fc:	29754004 	addi	r5,r5,-11008
   12900:	01ee2cb4 	movhi	r7,47282
   12904:	39eaaf04 	addi	r7,r7,-21828
   12908:	194b883a 	add	r5,r3,r5
   1290c:	28c7803a 	cmpltu	r3,r5,r3
   12910:	31cd883a 	add	r6,r6,r7
   12914:	1987883a 	add	r3,r3,r6
   12918:	18000726 	beq	r3,zero,12938 <__cxa_rethrow+0x6c>
   1291c:	10000015 	stw	zero,0(r2)
   12920:	24000b04 	addi	r16,r4,44
   12924:	8009883a 	mov	r4,r16
   12928:	00140680 	call	14068 <_Unwind_SjLj_Resume_or_Rethrow>
   1292c:	8009883a 	mov	r4,r16
   12930:	001342c0 	call	1342c <__cxa_begin_catch>
   12934:	00127080 	call	12708 <_ZSt9terminatev>
   12938:	294000a8 	cmpgeui	r5,r5,2
   1293c:	283ff71e 	bne	r5,zero,1291c <__cxa_rethrow+0x50>
   12940:	20800517 	ldw	r2,20(r4)
   12944:	0085c83a 	sub	r2,zero,r2
   12948:	20800515 	stw	r2,20(r4)
   1294c:	003ff406 	br	12920 <__cxa_rethrow+0x54>

00012950 <_ZNK10__cxxabiv120__function_type_info15__is_function_pEv>:
   12950:	00800044 	movi	r2,1
   12954:	f800283a 	ret

00012958 <_ZN10__cxxabiv120__function_type_infoD1Ev>:
   12958:	00800074 	movhi	r2,1
   1295c:	1099e804 	addi	r2,r2,26528
   12960:	20800015 	stw	r2,0(r4)
   12964:	0012d5c1 	jmpi	12d5c <_ZNSt9type_infoD1Ev>

00012968 <_ZN10__cxxabiv120__function_type_infoD0Ev>:
   12968:	defffe04 	addi	sp,sp,-8
   1296c:	00800074 	movhi	r2,1
   12970:	dc000015 	stw	r16,0(sp)
   12974:	dfc00115 	stw	ra,4(sp)
   12978:	1099e804 	addi	r2,r2,26528
   1297c:	20800015 	stw	r2,0(r4)
   12980:	2021883a 	mov	r16,r4
   12984:	0012d5c0 	call	12d5c <_ZNSt9type_infoD1Ev>
   12988:	01400204 	movi	r5,8
   1298c:	8009883a 	mov	r4,r16
   12990:	dfc00117 	ldw	ra,4(sp)
   12994:	dc000017 	ldw	r16,0(sp)
   12998:	dec00204 	addi	sp,sp,8
   1299c:	00130e81 	jmpi	130e8 <_ZdlPvj>

000129a0 <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
   129a0:	00800044 	movi	r2,1
   129a4:	f800283a 	ret

000129a8 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
   129a8:	00800074 	movhi	r2,1
   129ac:	1099fc04 	addi	r2,r2,26608
   129b0:	20800015 	stw	r2,0(r4)
   129b4:	001369c1 	jmpi	1369c <_ZN10__cxxabiv117__pbase_type_infoD1Ev>

000129b8 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
   129b8:	defffe04 	addi	sp,sp,-8
   129bc:	00800074 	movhi	r2,1
   129c0:	dc000015 	stw	r16,0(sp)
   129c4:	dfc00115 	stw	ra,4(sp)
   129c8:	1099fc04 	addi	r2,r2,26608
   129cc:	20800015 	stw	r2,0(r4)
   129d0:	2021883a 	mov	r16,r4
   129d4:	001369c0 	call	1369c <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
   129d8:	01400404 	movi	r5,16
   129dc:	8009883a 	mov	r4,r16
   129e0:	dfc00117 	ldw	ra,4(sp)
   129e4:	dc000017 	ldw	r16,0(sp)
   129e8:	dec00204 	addi	sp,sp,8
   129ec:	00130e81 	jmpi	130e8 <_ZdlPvj>

000129f0 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
   129f0:	defffb04 	addi	sp,sp,-20
   129f4:	dc800315 	stw	r18,12(sp)
   129f8:	dc400215 	stw	r17,8(sp)
   129fc:	dfc00415 	stw	ra,16(sp)
   12a00:	388000a8 	cmpgeui	r2,r7,2
   12a04:	24800317 	ldw	r18,12(r4)
   12a08:	2823883a 	mov	r17,r5
   12a0c:	10000a26 	beq	r2,zero,12a38 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x48>
   12a10:	90800017 	ldw	r2,0(r18)
   12a14:	89400317 	ldw	r5,12(r17)
   12a18:	39c00084 	addi	r7,r7,2
   12a1c:	10800417 	ldw	r2,16(r2)
   12a20:	9009883a 	mov	r4,r18
   12a24:	dfc00417 	ldw	ra,16(sp)
   12a28:	dc800317 	ldw	r18,12(sp)
   12a2c:	dc400217 	ldw	r17,8(sp)
   12a30:	dec00504 	addi	sp,sp,20
   12a34:	1000683a 	jmp	r2
   12a38:	00800074 	movhi	r2,1
   12a3c:	91000117 	ldw	r4,4(r18)
   12a40:	115d2617 	ldw	r5,29848(r2)
   12a44:	21400926 	beq	r4,r5,12a6c <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x7c>
   12a48:	20800007 	ldb	r2,0(r4)
   12a4c:	10800aa0 	cmpeqi	r2,r2,42
   12a50:	103fef1e 	bne	r2,zero,12a10 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x20>
   12a54:	d9c00115 	stw	r7,4(sp)
   12a58:	d9800015 	stw	r6,0(sp)
   12a5c:	00147900 	call	14790 <strcmp>
   12a60:	d9800017 	ldw	r6,0(sp)
   12a64:	d9c00117 	ldw	r7,4(sp)
   12a68:	103fe91e 	bne	r2,zero,12a10 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x20>
   12a6c:	89000317 	ldw	r4,12(r17)
   12a70:	20800017 	ldw	r2,0(r4)
   12a74:	10800317 	ldw	r2,12(r2)
   12a78:	103ee83a 	callr	r2
   12a7c:	1080005c 	xori	r2,r2,1
   12a80:	dfc00417 	ldw	ra,16(sp)
   12a84:	dc800317 	ldw	r18,12(sp)
   12a88:	dc400217 	ldw	r17,8(sp)
   12a8c:	dec00504 	addi	sp,sp,20
   12a90:	f800283a 	ret

00012a94 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   12a94:	00800074 	movhi	r2,1
   12a98:	109a1204 	addi	r2,r2,26696
   12a9c:	20800015 	stw	r2,0(r4)
   12aa0:	0012ed01 	jmpi	12ed0 <_ZN10__cxxabiv117__class_type_infoD1Ev>

00012aa4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   12aa4:	defffe04 	addi	sp,sp,-8
   12aa8:	00800074 	movhi	r2,1
   12aac:	dc000015 	stw	r16,0(sp)
   12ab0:	dfc00115 	stw	ra,4(sp)
   12ab4:	109a1204 	addi	r2,r2,26696
   12ab8:	20800015 	stw	r2,0(r4)
   12abc:	2021883a 	mov	r16,r4
   12ac0:	0012ed00 	call	12ed0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   12ac4:	01400304 	movi	r5,12
   12ac8:	8009883a 	mov	r4,r16
   12acc:	dfc00117 	ldw	ra,4(sp)
   12ad0:	dc000017 	ldw	r16,0(sp)
   12ad4:	dec00204 	addi	sp,sp,8
   12ad8:	00130e81 	jmpi	130e8 <_ZdlPvj>

00012adc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   12adc:	defff504 	addi	sp,sp,-44
   12ae0:	dcc00415 	stw	r19,16(sp)
   12ae4:	38800117 	ldw	r2,4(r7)
   12ae8:	24c00117 	ldw	r19,4(r4)
   12aec:	df000915 	stw	fp,36(sp)
   12af0:	dd800715 	stw	r22,28(sp)
   12af4:	dd400615 	stw	r21,24(sp)
   12af8:	dd000515 	stw	r20,20(sp)
   12afc:	dc000115 	stw	r16,4(sp)
   12b00:	dfc00a15 	stw	ra,40(sp)
   12b04:	ddc00815 	stw	r23,32(sp)
   12b08:	dc800315 	stw	r18,12(sp)
   12b0c:	dc400215 	stw	r17,8(sp)
   12b10:	dd000b17 	ldw	r20,44(sp)
   12b14:	df000c17 	ldw	fp,48(sp)
   12b18:	dd800d17 	ldw	r22,52(sp)
   12b1c:	dd400e17 	ldw	r21,56(sp)
   12b20:	2821883a 	mov	r16,r5
   12b24:	98800b26 	beq	r19,r2,12b54 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
   12b28:	9dc00007 	ldb	r23,0(r19)
   12b2c:	2025883a 	mov	r18,r4
   12b30:	3823883a 	mov	r17,r7
   12b34:	b8c00aa0 	cmpeqi	r3,r23,42
   12b38:	18001a1e 	bne	r3,zero,12ba4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xc8>
   12b3c:	100b883a 	mov	r5,r2
   12b40:	9809883a 	mov	r4,r19
   12b44:	d9800015 	stw	r6,0(sp)
   12b48:	00147900 	call	14790 <strcmp>
   12b4c:	d9800017 	ldw	r6,0(sp)
   12b50:	1000141e 	bne	r2,zero,12ba4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xc8>
   12b54:	ad000015 	stw	r20,0(r21)
   12b58:	a9800115 	stw	r6,4(r21)
   12b5c:	80003416 	blt	r16,zero,12c30 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x154>
   12b60:	a421883a 	add	r16,r20,r16
   12b64:	b4003026 	beq	r22,r16,12c28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x14c>
   12b68:	00800044 	movi	r2,1
   12b6c:	a8800315 	stw	r2,12(r21)
   12b70:	0005883a 	mov	r2,zero
   12b74:	dfc00a17 	ldw	ra,40(sp)
   12b78:	df000917 	ldw	fp,36(sp)
   12b7c:	ddc00817 	ldw	r23,32(sp)
   12b80:	dd800717 	ldw	r22,28(sp)
   12b84:	dd400617 	ldw	r21,24(sp)
   12b88:	dd000517 	ldw	r20,20(sp)
   12b8c:	dcc00417 	ldw	r19,16(sp)
   12b90:	dc800317 	ldw	r18,12(sp)
   12b94:	dc400217 	ldw	r17,8(sp)
   12b98:	dc000117 	ldw	r16,4(sp)
   12b9c:	dec00b04 	addi	sp,sp,44
   12ba0:	f800283a 	ret
   12ba4:	a5801526 	beq	r20,r22,12bfc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x120>
   12ba8:	91000217 	ldw	r4,8(r18)
   12bac:	880f883a 	mov	r7,r17
   12bb0:	800b883a 	mov	r5,r16
   12bb4:	20800017 	ldw	r2,0(r4)
   12bb8:	dd400e15 	stw	r21,56(sp)
   12bbc:	dd800d15 	stw	r22,52(sp)
   12bc0:	df000c15 	stw	fp,48(sp)
   12bc4:	dd000b15 	stw	r20,44(sp)
   12bc8:	10800717 	ldw	r2,28(r2)
   12bcc:	dfc00a17 	ldw	ra,40(sp)
   12bd0:	df000917 	ldw	fp,36(sp)
   12bd4:	ddc00817 	ldw	r23,32(sp)
   12bd8:	dd800717 	ldw	r22,28(sp)
   12bdc:	dd400617 	ldw	r21,24(sp)
   12be0:	dd000517 	ldw	r20,20(sp)
   12be4:	dcc00417 	ldw	r19,16(sp)
   12be8:	dc800317 	ldw	r18,12(sp)
   12bec:	dc400217 	ldw	r17,8(sp)
   12bf0:	dc000117 	ldw	r16,4(sp)
   12bf4:	dec00b04 	addi	sp,sp,44
   12bf8:	1000683a 	jmp	r2
   12bfc:	e1400117 	ldw	r5,4(fp)
   12c00:	99400726 	beq	r19,r5,12c20 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x144>
   12c04:	bdc00aa0 	cmpeqi	r23,r23,42
   12c08:	b83fe71e 	bne	r23,zero,12ba8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
   12c0c:	9809883a 	mov	r4,r19
   12c10:	d9800015 	stw	r6,0(sp)
   12c14:	00147900 	call	14790 <strcmp>
   12c18:	d9800017 	ldw	r6,0(sp)
   12c1c:	103fe21e 	bne	r2,zero,12ba8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
   12c20:	a9800215 	stw	r6,8(r21)
   12c24:	003fd206 	br	12b70 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x94>
   12c28:	00800184 	movi	r2,6
   12c2c:	003fcf06 	br	12b6c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x90>
   12c30:	843fff98 	cmpnei	r16,r16,-2
   12c34:	803fce1e 	bne	r16,zero,12b70 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x94>
   12c38:	003fcb06 	br	12b68 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>

00012c3c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   12c3c:	defffa04 	addi	sp,sp,-24
   12c40:	dc800415 	stw	r18,16(sp)
   12c44:	dc800617 	ldw	r18,24(sp)
   12c48:	dc400315 	stw	r17,12(sp)
   12c4c:	dc000215 	stw	r16,8(sp)
   12c50:	dfc00515 	stw	ra,20(sp)
   12c54:	2021883a 	mov	r16,r4
   12c58:	2823883a 	mov	r17,r5
   12c5c:	91800b26 	beq	r18,r6,12c8c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
   12c60:	81000217 	ldw	r4,8(r16)
   12c64:	880b883a 	mov	r5,r17
   12c68:	20800017 	ldw	r2,0(r4)
   12c6c:	dc800615 	stw	r18,24(sp)
   12c70:	10800817 	ldw	r2,32(r2)
   12c74:	dfc00517 	ldw	ra,20(sp)
   12c78:	dc800417 	ldw	r18,16(sp)
   12c7c:	dc400317 	ldw	r17,12(sp)
   12c80:	dc000217 	ldw	r16,8(sp)
   12c84:	dec00604 	addi	sp,sp,24
   12c88:	1000683a 	jmp	r2
   12c8c:	21000117 	ldw	r4,4(r4)
   12c90:	39400117 	ldw	r5,4(r7)
   12c94:	21400926 	beq	r4,r5,12cbc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
   12c98:	20800007 	ldb	r2,0(r4)
   12c9c:	10800aa0 	cmpeqi	r2,r2,42
   12ca0:	103fef1e 	bne	r2,zero,12c60 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   12ca4:	d9c00115 	stw	r7,4(sp)
   12ca8:	d9800015 	stw	r6,0(sp)
   12cac:	00147900 	call	14790 <strcmp>
   12cb0:	d9800017 	ldw	r6,0(sp)
   12cb4:	d9c00117 	ldw	r7,4(sp)
   12cb8:	103fe91e 	bne	r2,zero,12c60 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   12cbc:	00800184 	movi	r2,6
   12cc0:	dfc00517 	ldw	ra,20(sp)
   12cc4:	dc800417 	ldw	r18,16(sp)
   12cc8:	dc400317 	ldw	r17,12(sp)
   12ccc:	dc000217 	ldw	r16,8(sp)
   12cd0:	dec00604 	addi	sp,sp,24
   12cd4:	f800283a 	ret

00012cd8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   12cd8:	defffb04 	addi	sp,sp,-20
   12cdc:	dcc00315 	stw	r19,12(sp)
   12ce0:	dc800215 	stw	r18,8(sp)
   12ce4:	dc400115 	stw	r17,4(sp)
   12ce8:	dc000015 	stw	r16,0(sp)
   12cec:	dfc00415 	stw	ra,16(sp)
   12cf0:	2025883a 	mov	r18,r4
   12cf4:	2827883a 	mov	r19,r5
   12cf8:	3021883a 	mov	r16,r6
   12cfc:	3823883a 	mov	r17,r7
   12d00:	0012f180 	call	12f18 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   12d04:	10c03fcc 	andi	r3,r2,255
   12d08:	18000d1e 	bne	r3,zero,12d40 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x68>
   12d0c:	91000217 	ldw	r4,8(r18)
   12d10:	880f883a 	mov	r7,r17
   12d14:	800d883a 	mov	r6,r16
   12d18:	20800017 	ldw	r2,0(r4)
   12d1c:	980b883a 	mov	r5,r19
   12d20:	10800617 	ldw	r2,24(r2)
   12d24:	dfc00417 	ldw	ra,16(sp)
   12d28:	dcc00317 	ldw	r19,12(sp)
   12d2c:	dc800217 	ldw	r18,8(sp)
   12d30:	dc400117 	ldw	r17,4(sp)
   12d34:	dc000017 	ldw	r16,0(sp)
   12d38:	dec00504 	addi	sp,sp,20
   12d3c:	1000683a 	jmp	r2
   12d40:	dfc00417 	ldw	ra,16(sp)
   12d44:	dcc00317 	ldw	r19,12(sp)
   12d48:	dc800217 	ldw	r18,8(sp)
   12d4c:	dc400117 	ldw	r17,4(sp)
   12d50:	dc000017 	ldw	r16,0(sp)
   12d54:	dec00504 	addi	sp,sp,20
   12d58:	f800283a 	ret

00012d5c <_ZNSt9type_infoD1Ev>:
   12d5c:	f800283a 	ret

00012d60 <_ZNKSt9type_info14__is_pointer_pEv>:
   12d60:	0005883a 	mov	r2,zero
   12d64:	f800283a 	ret

00012d68 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
   12d68:	0005883a 	mov	r2,zero
   12d6c:	f800283a 	ret

00012d70 <_ZNSt9type_infoD0Ev>:
   12d70:	01400204 	movi	r5,8
   12d74:	00130e81 	jmpi	130e8 <_ZdlPvj>

00012d78 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
   12d78:	21000117 	ldw	r4,4(r4)
   12d7c:	29400117 	ldw	r5,4(r5)
   12d80:	21400c26 	beq	r4,r5,12db4 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
   12d84:	20800007 	ldb	r2,0(r4)
   12d88:	10800aa0 	cmpeqi	r2,r2,42
   12d8c:	1000071e 	bne	r2,zero,12dac <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
   12d90:	deffff04 	addi	sp,sp,-4
   12d94:	dfc00015 	stw	ra,0(sp)
   12d98:	00147900 	call	14790 <strcmp>
   12d9c:	1005003a 	cmpeq	r2,r2,zero
   12da0:	dfc00017 	ldw	ra,0(sp)
   12da4:	dec00104 	addi	sp,sp,4
   12da8:	f800283a 	ret
   12dac:	0005883a 	mov	r2,zero
   12db0:	f800283a 	ret
   12db4:	00800044 	movi	r2,1
   12db8:	f800283a 	ret

00012dbc <_ZNKSt17bad_function_call4whatEv>:
   12dbc:	00800074 	movhi	r2,1
   12dc0:	109a2704 	addi	r2,r2,26780
   12dc4:	f800283a 	ret

00012dc8 <_ZNSt17bad_function_callD1Ev>:
   12dc8:	00800074 	movhi	r2,1
   12dcc:	109a3704 	addi	r2,r2,26844
   12dd0:	20800015 	stw	r2,0(r4)
   12dd4:	00135d41 	jmpi	135d4 <_ZNSt9exceptionD1Ev>

00012dd8 <_ZNSt17bad_function_callD0Ev>:
   12dd8:	defffe04 	addi	sp,sp,-8
   12ddc:	00800074 	movhi	r2,1
   12de0:	dc000015 	stw	r16,0(sp)
   12de4:	dfc00115 	stw	ra,4(sp)
   12de8:	109a3704 	addi	r2,r2,26844
   12dec:	20800015 	stw	r2,0(r4)
   12df0:	2021883a 	mov	r16,r4
   12df4:	00135d40 	call	135d4 <_ZNSt9exceptionD1Ev>
   12df8:	8009883a 	mov	r4,r16
   12dfc:	dfc00117 	ldw	ra,4(sp)
   12e00:	dc000017 	ldw	r16,0(sp)
   12e04:	dec00204 	addi	sp,sp,8
   12e08:	00130e41 	jmpi	130e4 <_ZdlPv>

00012e0c <_ZSt25__throw_bad_function_callv>:
   12e0c:	deffff04 	addi	sp,sp,-4
   12e10:	01000104 	movi	r4,4
   12e14:	dfc00015 	stw	ra,0(sp)
   12e18:	00132780 	call	13278 <__cxa_allocate_exception>
   12e1c:	1009883a 	mov	r4,r2
   12e20:	00800074 	movhi	r2,1
   12e24:	01800074 	movhi	r6,1
   12e28:	01400074 	movhi	r5,1
   12e2c:	109a3704 	addi	r2,r2,26844
   12e30:	318b7204 	addi	r6,r6,11720
   12e34:	295a3204 	addi	r5,r5,26824
   12e38:	20800015 	stw	r2,0(r4)
   12e3c:	001286c0 	call	1286c <__cxa_throw>

00012e40 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   12e40:	20800017 	ldw	r2,0(r4)
   12e44:	defffa04 	addi	sp,sp,-24
   12e48:	dc000415 	stw	r16,16(sp)
   12e4c:	10800617 	ldw	r2,24(r2)
   12e50:	3021883a 	mov	r16,r6
   12e54:	31800017 	ldw	r6,0(r6)
   12e58:	00c00404 	movi	r3,16
   12e5c:	dfc00515 	stw	ra,20(sp)
   12e60:	d8000015 	stw	zero,0(sp)
   12e64:	d8000115 	stw	zero,4(sp)
   12e68:	d8c00215 	stw	r3,8(sp)
   12e6c:	d8000315 	stw	zero,12(sp)
   12e70:	d80f883a 	mov	r7,sp
   12e74:	103ee83a 	callr	r2
   12e78:	d8800117 	ldw	r2,4(sp)
   12e7c:	1080018c 	andi	r2,r2,6
   12e80:	10800198 	cmpnei	r2,r2,6
   12e84:	1000071e 	bne	r2,zero,12ea4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x64>
   12e88:	d8c00017 	ldw	r3,0(sp)
   12e8c:	00800044 	movi	r2,1
   12e90:	80c00015 	stw	r3,0(r16)
   12e94:	dfc00517 	ldw	ra,20(sp)
   12e98:	dc000417 	ldw	r16,16(sp)
   12e9c:	dec00604 	addi	sp,sp,24
   12ea0:	f800283a 	ret
   12ea4:	0005883a 	mov	r2,zero
   12ea8:	dfc00517 	ldw	ra,20(sp)
   12eac:	dc000417 	ldw	r16,16(sp)
   12eb0:	dec00604 	addi	sp,sp,24
   12eb4:	f800283a 	ret

00012eb8 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   12eb8:	d8c00017 	ldw	r3,0(sp)
   12ebc:	00800044 	movi	r2,1
   12ec0:	19800126 	beq	r3,r6,12ec8 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
   12ec4:	f800283a 	ret
   12ec8:	00800184 	movi	r2,6
   12ecc:	f800283a 	ret

00012ed0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   12ed0:	00800074 	movhi	r2,1
   12ed4:	109a4804 	addi	r2,r2,26912
   12ed8:	20800015 	stw	r2,0(r4)
   12edc:	0012d5c1 	jmpi	12d5c <_ZNSt9type_infoD1Ev>

00012ee0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   12ee0:	defffe04 	addi	sp,sp,-8
   12ee4:	00800074 	movhi	r2,1
   12ee8:	dc000015 	stw	r16,0(sp)
   12eec:	dfc00115 	stw	ra,4(sp)
   12ef0:	109a4804 	addi	r2,r2,26912
   12ef4:	20800015 	stw	r2,0(r4)
   12ef8:	2021883a 	mov	r16,r4
   12efc:	0012d5c0 	call	12d5c <_ZNSt9type_infoD1Ev>
   12f00:	01400204 	movi	r5,8
   12f04:	8009883a 	mov	r4,r16
   12f08:	dfc00117 	ldw	ra,4(sp)
   12f0c:	dc000017 	ldw	r16,0(sp)
   12f10:	dec00204 	addi	sp,sp,8
   12f14:	00130e81 	jmpi	130e8 <_ZdlPvj>

00012f18 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   12f18:	21000117 	ldw	r4,4(r4)
   12f1c:	29400117 	ldw	r5,4(r5)
   12f20:	defffd04 	addi	sp,sp,-12
   12f24:	dc400115 	stw	r17,4(sp)
   12f28:	dc000015 	stw	r16,0(sp)
   12f2c:	dfc00215 	stw	ra,8(sp)
   12f30:	3023883a 	mov	r17,r6
   12f34:	3821883a 	mov	r16,r7
   12f38:	21400526 	beq	r4,r5,12f50 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
   12f3c:	20800007 	ldb	r2,0(r4)
   12f40:	10800aa0 	cmpeqi	r2,r2,42
   12f44:	10000d1e 	bne	r2,zero,12f7c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
   12f48:	00147900 	call	14790 <strcmp>
   12f4c:	10000b1e 	bne	r2,zero,12f7c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
   12f50:	00800204 	movi	r2,8
   12f54:	80800315 	stw	r2,12(r16)
   12f58:	00800184 	movi	r2,6
   12f5c:	80800115 	stw	r2,4(r16)
   12f60:	84400015 	stw	r17,0(r16)
   12f64:	00800044 	movi	r2,1
   12f68:	dfc00217 	ldw	ra,8(sp)
   12f6c:	dc400117 	ldw	r17,4(sp)
   12f70:	dc000017 	ldw	r16,0(sp)
   12f74:	dec00304 	addi	sp,sp,12
   12f78:	f800283a 	ret
   12f7c:	0005883a 	mov	r2,zero
   12f80:	003ff906 	br	12f68 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x50>

00012f84 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   12f84:	defffb04 	addi	sp,sp,-20
   12f88:	dc800315 	stw	r18,12(sp)
   12f8c:	dc400215 	stw	r17,8(sp)
   12f90:	2025883a 	mov	r18,r4
   12f94:	2823883a 	mov	r17,r5
   12f98:	21000117 	ldw	r4,4(r4)
   12f9c:	29400117 	ldw	r5,4(r5)
   12fa0:	dfc00415 	stw	ra,16(sp)
   12fa4:	dc000115 	stw	r16,4(sp)
   12fa8:	21400826 	beq	r4,r5,12fcc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x48>
   12fac:	20800007 	ldb	r2,0(r4)
   12fb0:	3821883a 	mov	r16,r7
   12fb4:	10800aa0 	cmpeqi	r2,r2,42
   12fb8:	10000b1e 	bne	r2,zero,12fe8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
   12fbc:	d9800015 	stw	r6,0(sp)
   12fc0:	00147900 	call	14790 <strcmp>
   12fc4:	d9800017 	ldw	r6,0(sp)
   12fc8:	1000071e 	bne	r2,zero,12fe8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
   12fcc:	00800044 	movi	r2,1
   12fd0:	dfc00417 	ldw	ra,16(sp)
   12fd4:	dc800317 	ldw	r18,12(sp)
   12fd8:	dc400217 	ldw	r17,8(sp)
   12fdc:	dc000117 	ldw	r16,4(sp)
   12fe0:	dec00504 	addi	sp,sp,20
   12fe4:	f800283a 	ret
   12fe8:	81c00128 	cmpgeui	r7,r16,4
   12fec:	38000a1e 	bne	r7,zero,13018 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x94>
   12ff0:	88800017 	ldw	r2,0(r17)
   12ff4:	900b883a 	mov	r5,r18
   12ff8:	8809883a 	mov	r4,r17
   12ffc:	10800517 	ldw	r2,20(r2)
   13000:	dfc00417 	ldw	ra,16(sp)
   13004:	dc800317 	ldw	r18,12(sp)
   13008:	dc400217 	ldw	r17,8(sp)
   1300c:	dc000117 	ldw	r16,4(sp)
   13010:	dec00504 	addi	sp,sp,20
   13014:	1000683a 	jmp	r2
   13018:	0005883a 	mov	r2,zero
   1301c:	003fec06 	br	12fd0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x4c>

00013020 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   13020:	defffa04 	addi	sp,sp,-24
   13024:	dc400315 	stw	r17,12(sp)
   13028:	d8800817 	ldw	r2,32(sp)
   1302c:	dc400617 	ldw	r17,24(sp)
   13030:	dc800415 	stw	r18,16(sp)
   13034:	dc000215 	stw	r16,8(sp)
   13038:	dfc00515 	stw	ra,20(sp)
   1303c:	dc800917 	ldw	r18,36(sp)
   13040:	21000117 	ldw	r4,4(r4)
   13044:	3021883a 	mov	r16,r6
   13048:	88801226 	beq	r17,r2,13094 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x74>
   1304c:	39400117 	ldw	r5,4(r7)
   13050:	21400526 	beq	r4,r5,13068 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x48>
   13054:	20800007 	ldb	r2,0(r4)
   13058:	10800aa0 	cmpeqi	r2,r2,42
   1305c:	1000061e 	bne	r2,zero,13078 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x58>
   13060:	00147900 	call	14790 <strcmp>
   13064:	1000041e 	bne	r2,zero,13078 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x58>
   13068:	00800044 	movi	r2,1
   1306c:	94400015 	stw	r17,0(r18)
   13070:	94000115 	stw	r16,4(r18)
   13074:	90800315 	stw	r2,12(r18)
   13078:	0005883a 	mov	r2,zero
   1307c:	dfc00517 	ldw	ra,20(sp)
   13080:	dc800417 	ldw	r18,16(sp)
   13084:	dc400317 	ldw	r17,12(sp)
   13088:	dc000217 	ldw	r16,8(sp)
   1308c:	dec00604 	addi	sp,sp,24
   13090:	f800283a 	ret
   13094:	d8800717 	ldw	r2,28(sp)
   13098:	11400117 	ldw	r5,4(r2)
   1309c:	21400f26 	beq	r4,r5,130dc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xbc>
   130a0:	20800007 	ldb	r2,0(r4)
   130a4:	10800aa0 	cmpeqi	r2,r2,42
   130a8:	1000091e 	bne	r2,zero,130d0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
   130ac:	d9c00115 	stw	r7,4(sp)
   130b0:	d9000015 	stw	r4,0(sp)
   130b4:	00147900 	call	14790 <strcmp>
   130b8:	d9000017 	ldw	r4,0(sp)
   130bc:	d9c00117 	ldw	r7,4(sp)
   130c0:	10000626 	beq	r2,zero,130dc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xbc>
   130c4:	39400117 	ldw	r5,4(r7)
   130c8:	217fe51e 	bne	r4,r5,13060 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x40>
   130cc:	003fe606 	br	13068 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x48>
   130d0:	38800117 	ldw	r2,4(r7)
   130d4:	20bfe81e 	bne	r4,r2,13078 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x58>
   130d8:	003fe306 	br	13068 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x48>
   130dc:	94000215 	stw	r16,8(r18)
   130e0:	003fe506 	br	13078 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x58>

000130e4 <_ZdlPv>:
   130e4:	00141701 	jmpi	14170 <free>

000130e8 <_ZdlPvj>:
   130e8:	00130e41 	jmpi	130e4 <_ZdlPv>

000130ec <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>:
   130ec:	01400074 	movhi	r5,1
   130f0:	295ea604 	addi	r5,r5,31384
   130f4:	28c00117 	ldw	r3,4(r5)
   130f8:	223fff04 	addi	r8,r4,-4
   130fc:	18001a26 	beq	r3,zero,13168 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x7c>
   13100:	227fff17 	ldw	r9,-4(r4)
   13104:	424d883a 	add	r6,r8,r9
   13108:	30c01736 	bltu	r6,r3,13168 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x7c>
   1310c:	18800117 	ldw	r2,4(r3)
   13110:	19802326 	beq	r3,r6,131a0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xb4>
   13114:	01c00074 	movhi	r7,1
   13118:	39dea704 	addi	r7,r7,31388
   1311c:	10000726 	beq	r2,zero,1313c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x50>
   13120:	3080062e 	bgeu	r6,r2,1313c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x50>
   13124:	11400117 	ldw	r5,4(r2)
   13128:	19c00104 	addi	r7,r3,4
   1312c:	1007883a 	mov	r3,r2
   13130:	28001826 	beq	r5,zero,13194 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xa8>
   13134:	2805883a 	mov	r2,r5
   13138:	30bffa36 	bltu	r6,r2,13124 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x38>
   1313c:	30801026 	beq	r6,r2,13180 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x94>
   13140:	38800017 	ldw	r2,0(r7)
   13144:	10c00017 	ldw	r3,0(r2)
   13148:	10cb883a 	add	r5,r2,r3
   1314c:	41400926 	beq	r8,r5,13174 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x88>
   13150:	10800117 	ldw	r2,4(r2)
   13154:	227fff15 	stw	r9,-4(r4)
   13158:	20800015 	stw	r2,0(r4)
   1315c:	38800017 	ldw	r2,0(r7)
   13160:	12000115 	stw	r8,4(r2)
   13164:	f800283a 	ret
   13168:	20c00015 	stw	r3,0(r4)
   1316c:	2a000115 	stw	r8,4(r5)
   13170:	f800283a 	ret
   13174:	1a47883a 	add	r3,r3,r9
   13178:	10c00015 	stw	r3,0(r2)
   1317c:	f800283a 	ret
   13180:	31400017 	ldw	r5,0(r6)
   13184:	30800117 	ldw	r2,4(r6)
   13188:	4953883a 	add	r9,r9,r5
   1318c:	18800115 	stw	r2,4(r3)
   13190:	003feb06 	br	13140 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x54>
   13194:	0005883a 	mov	r2,zero
   13198:	30bfe91e 	bne	r6,r2,13140 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x54>
   1319c:	003ff806 	br	13180 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x94>
   131a0:	18c00017 	ldw	r3,0(r3)
   131a4:	20800015 	stw	r2,0(r4)
   131a8:	1a53883a 	add	r9,r3,r9
   131ac:	227fff15 	stw	r9,-4(r4)
   131b0:	2a000115 	stw	r8,4(r5)
   131b4:	f800283a 	ret

000131b8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>:
   131b8:	21000104 	addi	r4,r4,4
   131bc:	20800228 	cmpgeui	r2,r4,8
   131c0:	1000011e 	bne	r2,zero,131c8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x10>
   131c4:	01000204 	movi	r4,8
   131c8:	00800074 	movhi	r2,1
   131cc:	109ea717 	ldw	r2,31388(r2)
   131d0:	210000c4 	addi	r4,r4,3
   131d4:	00ffff04 	movi	r3,-4
   131d8:	20c8703a 	and	r4,r4,r3
   131dc:	10001026 	beq	r2,zero,13220 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x68>
   131e0:	01800074 	movhi	r6,1
   131e4:	319ea704 	addi	r6,r6,31388
   131e8:	00000206 	br	131f4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x3c>
   131ec:	19800104 	addi	r6,r3,4
   131f0:	10001426 	beq	r2,zero,13244 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x8c>
   131f4:	11400017 	ldw	r5,0(r2)
   131f8:	1007883a 	mov	r3,r2
   131fc:	10800117 	ldw	r2,4(r2)
   13200:	293ffa36 	bltu	r5,r4,131ec <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x34>
   13204:	290fc83a 	sub	r7,r5,r4
   13208:	3a000228 	cmpgeui	r8,r7,8
   1320c:	4000051e 	bne	r8,zero,13224 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x6c>
   13210:	19400015 	stw	r5,0(r3)
   13214:	30800015 	stw	r2,0(r6)
   13218:	18800104 	addi	r2,r3,4
   1321c:	f800283a 	ret
   13220:	f800283a 	ret
   13224:	190b883a 	add	r5,r3,r4
   13228:	28800115 	stw	r2,4(r5)
   1322c:	30c00017 	ldw	r3,0(r6)
   13230:	29c00015 	stw	r7,0(r5)
   13234:	19000015 	stw	r4,0(r3)
   13238:	31400015 	stw	r5,0(r6)
   1323c:	18800104 	addi	r2,r3,4
   13240:	f800283a 	ret
   13244:	f800283a 	ret

00013248 <_ZN9__gnu_cxx9__freeresEv>:
   13248:	00800074 	movhi	r2,1
   1324c:	111ea817 	ldw	r4,31392(r2)
   13250:	20000826 	beq	r4,zero,13274 <_ZN9__gnu_cxx9__freeresEv+0x2c>
   13254:	deffff04 	addi	sp,sp,-4
   13258:	dfc00015 	stw	ra,0(sp)
   1325c:	00141700 	call	14170 <free>
   13260:	00800074 	movhi	r2,1
   13264:	101ea815 	stw	zero,31392(r2)
   13268:	dfc00017 	ldw	ra,0(sp)
   1326c:	dec00104 	addi	sp,sp,4
   13270:	f800283a 	ret
   13274:	f800283a 	ret

00013278 <__cxa_allocate_exception>:
   13278:	defffe04 	addi	sp,sp,-8
   1327c:	dc000015 	stw	r16,0(sp)
   13280:	24001104 	addi	r16,r4,68
   13284:	8009883a 	mov	r4,r16
   13288:	dfc00115 	stw	ra,4(sp)
   1328c:	00141600 	call	14160 <malloc>
   13290:	1007883a 	mov	r3,r2
   13294:	10000926 	beq	r2,zero,132bc <__cxa_allocate_exception+0x44>
   13298:	01801104 	movi	r6,68
   1329c:	000b883a 	mov	r5,zero
   132a0:	1809883a 	mov	r4,r3
   132a4:	00141800 	call	14180 <memset>
   132a8:	10801104 	addi	r2,r2,68
   132ac:	dfc00117 	ldw	ra,4(sp)
   132b0:	dc000017 	ldw	r16,0(sp)
   132b4:	dec00204 	addi	sp,sp,8
   132b8:	f800283a 	ret
   132bc:	8009883a 	mov	r4,r16
   132c0:	00131b80 	call	131b8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>
   132c4:	1007883a 	mov	r3,r2
   132c8:	103ff31e 	bne	r2,zero,13298 <__cxa_allocate_exception+0x20>
   132cc:	00127080 	call	12708 <_ZSt9terminatev>

000132d0 <__cxa_free_exception>:
   132d0:	00800074 	movhi	r2,1
   132d4:	109ea604 	addi	r2,r2,31384
   132d8:	10c00217 	ldw	r3,8(r2)
   132dc:	213fef04 	addi	r4,r4,-68
   132e0:	1900042e 	bgeu	r3,r4,132f4 <__cxa_free_exception+0x24>
   132e4:	10800317 	ldw	r2,12(r2)
   132e8:	1887883a 	add	r3,r3,r2
   132ec:	20c0012e 	bgeu	r4,r3,132f4 <__cxa_free_exception+0x24>
   132f0:	00130ec1 	jmpi	130ec <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
   132f4:	00141701 	jmpi	14170 <free>

000132f8 <__cxa_allocate_dependent_exception>:
   132f8:	deffff04 	addi	sp,sp,-4
   132fc:	01001004 	movi	r4,64
   13300:	dfc00015 	stw	ra,0(sp)
   13304:	00141600 	call	14160 <malloc>
   13308:	1009883a 	mov	r4,r2
   1330c:	10000626 	beq	r2,zero,13328 <__cxa_allocate_dependent_exception+0x30>
   13310:	01801004 	movi	r6,64
   13314:	000b883a 	mov	r5,zero
   13318:	00141800 	call	14180 <memset>
   1331c:	dfc00017 	ldw	ra,0(sp)
   13320:	dec00104 	addi	sp,sp,4
   13324:	f800283a 	ret
   13328:	01001004 	movi	r4,64
   1332c:	00131b80 	call	131b8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>
   13330:	1009883a 	mov	r4,r2
   13334:	103ff61e 	bne	r2,zero,13310 <__cxa_allocate_dependent_exception+0x18>
   13338:	00127080 	call	12708 <_ZSt9terminatev>

0001333c <__cxa_free_dependent_exception>:
   1333c:	00c00074 	movhi	r3,1
   13340:	18dea604 	addi	r3,r3,31384
   13344:	19400217 	ldw	r5,8(r3)
   13348:	2005883a 	mov	r2,r4
   1334c:	2900042e 	bgeu	r5,r4,13360 <__cxa_free_dependent_exception+0x24>
   13350:	18c00317 	ldw	r3,12(r3)
   13354:	28cb883a 	add	r5,r5,r3
   13358:	2140012e 	bgeu	r4,r5,13360 <__cxa_free_dependent_exception+0x24>
   1335c:	00130ec1 	jmpi	130ec <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
   13360:	1009883a 	mov	r4,r2
   13364:	00141701 	jmpi	14170 <free>

00013368 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
   13368:	defffd04 	addi	sp,sp,-12
   1336c:	dc000015 	stw	r16,0(sp)
   13370:	04000074 	movhi	r16,1
   13374:	dc400115 	stw	r17,4(sp)
   13378:	841ea604 	addi	r16,r16,31384
   1337c:	04424004 	movi	r17,2304
   13380:	01024004 	movi	r4,2304
   13384:	dfc00215 	stw	ra,8(sp)
   13388:	84400315 	stw	r17,12(r16)
   1338c:	00141600 	call	14160 <malloc>
   13390:	80800215 	stw	r2,8(r16)
   13394:	10000826 	beq	r2,zero,133b8 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x50>
   13398:	80800115 	stw	r2,4(r16)
   1339c:	14400015 	stw	r17,0(r2)
   133a0:	10000115 	stw	zero,4(r2)
   133a4:	dfc00217 	ldw	ra,8(sp)
   133a8:	dc400117 	ldw	r17,4(sp)
   133ac:	dc000017 	ldw	r16,0(sp)
   133b0:	dec00304 	addi	sp,sp,12
   133b4:	f800283a 	ret
   133b8:	00800074 	movhi	r2,1
   133bc:	101ea915 	stw	zero,31396(r2)
   133c0:	00800074 	movhi	r2,1
   133c4:	101ea715 	stw	zero,31388(r2)
   133c8:	003ff606 	br	133a4 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x3c>

000133cc <__cxa_call_terminate>:
   133cc:	defffe04 	addi	sp,sp,-8
   133d0:	dfc00115 	stw	ra,4(sp)
   133d4:	dc000015 	stw	r16,0(sp)
   133d8:	20000d26 	beq	r4,zero,13410 <__cxa_call_terminate+0x44>
   133dc:	2021883a 	mov	r16,r4
   133e0:	001342c0 	call	1342c <__cxa_begin_catch>
   133e4:	80800017 	ldw	r2,0(r16)
   133e8:	81000117 	ldw	r4,4(r16)
   133ec:	00ef3574 	movhi	r3,48341
   133f0:	18f54004 	addi	r3,r3,-11008
   133f4:	016e2cb4 	movhi	r5,47282
   133f8:	296aaf04 	addi	r5,r5,-21828
   133fc:	10c7883a 	add	r3,r2,r3
   13400:	1885803a 	cmpltu	r2,r3,r2
   13404:	2149883a 	add	r4,r4,r5
   13408:	1105883a 	add	r2,r2,r4
   1340c:	10000126 	beq	r2,zero,13414 <__cxa_call_terminate+0x48>
   13410:	00127080 	call	12708 <_ZSt9terminatev>
   13414:	18c000a8 	cmpgeui	r3,r3,2
   13418:	183ffd1e 	bne	r3,zero,13410 <__cxa_call_terminate+0x44>
   1341c:	813ff817 	ldw	r4,-32(r16)
   13420:	00126400 	call	12640 <_ZN10__cxxabiv111__terminateEPFvvE>

00013424 <__cxa_get_exception_ptr>:
   13424:	20bfff17 	ldw	r2,-4(r4)
   13428:	f800283a 	ret

0001342c <__cxa_begin_catch>:
   1342c:	defffe04 	addi	sp,sp,-8
   13430:	dc000015 	stw	r16,0(sp)
   13434:	dfc00115 	stw	ra,4(sp)
   13438:	2021883a 	mov	r16,r4
   1343c:	00136300 	call	13630 <__cxa_get_globals>
   13440:	80c00017 	ldw	r3,0(r16)
   13444:	81800117 	ldw	r6,4(r16)
   13448:	012f3574 	movhi	r4,48341
   1344c:	21354004 	addi	r4,r4,-11008
   13450:	016e2cb4 	movhi	r5,47282
   13454:	296aaf04 	addi	r5,r5,-21828
   13458:	1909883a 	add	r4,r3,r4
   1345c:	314d883a 	add	r6,r6,r5
   13460:	20c7803a 	cmpltu	r3,r4,r3
   13464:	1987883a 	add	r3,r3,r6
   13468:	100b883a 	mov	r5,r2
   1346c:	81bff504 	addi	r6,r16,-44
   13470:	10800017 	ldw	r2,0(r2)
   13474:	18000626 	beq	r3,zero,13490 <__cxa_begin_catch+0x64>
   13478:	1000191e 	bne	r2,zero,134e0 <__cxa_begin_catch+0xb4>
   1347c:	29800015 	stw	r6,0(r5)
   13480:	dfc00117 	ldw	ra,4(sp)
   13484:	dc000017 	ldw	r16,0(sp)
   13488:	dec00204 	addi	sp,sp,8
   1348c:	f800283a 	ret
   13490:	210000a8 	cmpgeui	r4,r4,2
   13494:	203ff81e 	bne	r4,zero,13478 <__cxa_begin_catch+0x4c>
   13498:	80fffa17 	ldw	r3,-24(r16)
   1349c:	18000d16 	blt	r3,zero,134d4 <__cxa_begin_catch+0xa8>
   134a0:	18c00044 	addi	r3,r3,1
   134a4:	29000117 	ldw	r4,4(r5)
   134a8:	80fffa15 	stw	r3,-24(r16)
   134ac:	20ffffc4 	addi	r3,r4,-1
   134b0:	28c00115 	stw	r3,4(r5)
   134b4:	11800226 	beq	r2,r6,134c0 <__cxa_begin_catch+0x94>
   134b8:	80bff915 	stw	r2,-28(r16)
   134bc:	29800015 	stw	r6,0(r5)
   134c0:	80bfff17 	ldw	r2,-4(r16)
   134c4:	dfc00117 	ldw	ra,4(sp)
   134c8:	dc000017 	ldw	r16,0(sp)
   134cc:	dec00204 	addi	sp,sp,8
   134d0:	f800283a 	ret
   134d4:	01000044 	movi	r4,1
   134d8:	20c7c83a 	sub	r3,r4,r3
   134dc:	003ff106 	br	134a4 <__cxa_begin_catch+0x78>
   134e0:	00127080 	call	12708 <_ZSt9terminatev>

000134e4 <__cxa_end_catch>:
   134e4:	deffff04 	addi	sp,sp,-4
   134e8:	dfc00015 	stw	ra,0(sp)
   134ec:	00136240 	call	13624 <__cxa_get_globals_fast>
   134f0:	11000017 	ldw	r4,0(r2)
   134f4:	20001426 	beq	r4,zero,13548 <__cxa_end_catch+0x64>
   134f8:	20c00b17 	ldw	r3,44(r4)
   134fc:	21800c17 	ldw	r6,48(r4)
   13500:	016f3574 	movhi	r5,48341
   13504:	29754004 	addi	r5,r5,-11008
   13508:	01ee2cb4 	movhi	r7,47282
   1350c:	39eaaf04 	addi	r7,r7,-21828
   13510:	194b883a 	add	r5,r3,r5
   13514:	28c7803a 	cmpltu	r3,r5,r3
   13518:	31cd883a 	add	r6,r6,r7
   1351c:	1987883a 	add	r3,r3,r6
   13520:	1800111e 	bne	r3,zero,13568 <__cxa_end_catch+0x84>
   13524:	294000a8 	cmpgeui	r5,r5,2
   13528:	28000f1e 	bne	r5,zero,13568 <__cxa_end_catch+0x84>
   1352c:	20c00517 	ldw	r3,20(r4)
   13530:	18000816 	blt	r3,zero,13554 <__cxa_end_catch+0x70>
   13534:	18ffffc4 	addi	r3,r3,-1
   13538:	18001026 	beq	r3,zero,1357c <__cxa_end_catch+0x98>
   1353c:	18bfffd8 	cmpnei	r2,r3,-1
   13540:	10001426 	beq	r2,zero,13594 <__cxa_end_catch+0xb0>
   13544:	20c00515 	stw	r3,20(r4)
   13548:	dfc00017 	ldw	ra,0(sp)
   1354c:	dec00104 	addi	sp,sp,4
   13550:	f800283a 	ret
   13554:	18c00044 	addi	r3,r3,1
   13558:	183ffa1e 	bne	r3,zero,13544 <__cxa_end_catch+0x60>
   1355c:	21400417 	ldw	r5,16(r4)
   13560:	11400015 	stw	r5,0(r2)
   13564:	003ff706 	br	13544 <__cxa_end_catch+0x60>
   13568:	21000b04 	addi	r4,r4,44
   1356c:	10000015 	stw	zero,0(r2)
   13570:	dfc00017 	ldw	ra,0(sp)
   13574:	dec00104 	addi	sp,sp,4
   13578:	00140a81 	jmpi	140a8 <_Unwind_DeleteException>
   1357c:	20c00417 	ldw	r3,16(r4)
   13580:	21000b04 	addi	r4,r4,44
   13584:	10c00015 	stw	r3,0(r2)
   13588:	dfc00017 	ldw	ra,0(sp)
   1358c:	dec00104 	addi	sp,sp,4
   13590:	00140a81 	jmpi	140a8 <_Unwind_DeleteException>
   13594:	00127080 	call	12708 <_ZSt9terminatev>

00013598 <_ZSt18uncaught_exceptionv>:
   13598:	deffff04 	addi	sp,sp,-4
   1359c:	dfc00015 	stw	ra,0(sp)
   135a0:	00136300 	call	13630 <__cxa_get_globals>
   135a4:	10800117 	ldw	r2,4(r2)
   135a8:	1004c03a 	cmpne	r2,r2,zero
   135ac:	dfc00017 	ldw	ra,0(sp)
   135b0:	dec00104 	addi	sp,sp,4
   135b4:	f800283a 	ret

000135b8 <_ZSt19uncaught_exceptionsv>:
   135b8:	deffff04 	addi	sp,sp,-4
   135bc:	dfc00015 	stw	ra,0(sp)
   135c0:	00136300 	call	13630 <__cxa_get_globals>
   135c4:	10800117 	ldw	r2,4(r2)
   135c8:	dfc00017 	ldw	ra,0(sp)
   135cc:	dec00104 	addi	sp,sp,4
   135d0:	f800283a 	ret

000135d4 <_ZNSt9exceptionD1Ev>:
   135d4:	f800283a 	ret

000135d8 <_ZNSt13bad_exceptionD1Ev>:
   135d8:	f800283a 	ret

000135dc <_ZGTtNKSt9exception4whatEv>:
   135dc:	00800074 	movhi	r2,1
   135e0:	109a5104 	addi	r2,r2,26948
   135e4:	f800283a 	ret

000135e8 <_ZGTtNKSt13bad_exception4whatEv>:
   135e8:	00800074 	movhi	r2,1
   135ec:	109a5504 	addi	r2,r2,26964
   135f0:	f800283a 	ret

000135f4 <_ZNSt9exceptionD0Ev>:
   135f4:	01400104 	movi	r5,4
   135f8:	00130e81 	jmpi	130e8 <_ZdlPvj>

000135fc <_ZNSt13bad_exceptionD0Ev>:
   135fc:	01400104 	movi	r5,4
   13600:	00130e81 	jmpi	130e8 <_ZdlPvj>

00013604 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
   13604:	f800283a 	ret

00013608 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
   13608:	01400104 	movi	r5,4
   1360c:	00130e81 	jmpi	130e8 <_ZdlPvj>

00013610 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
   13610:	f800283a 	ret

00013614 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
   13614:	01400104 	movi	r5,4
   13618:	00130e81 	jmpi	130e8 <_ZdlPvj>

0001361c <_ZGTtNKSt9exceptionD1Ev>:
   1361c:	f800283a 	ret

00013620 <_ZGTtNKSt13bad_exceptionD1Ev>:
   13620:	f800283a 	ret

00013624 <__cxa_get_globals_fast>:
   13624:	00800074 	movhi	r2,1
   13628:	109e8d04 	addi	r2,r2,31284
   1362c:	f800283a 	ret

00013630 <__cxa_get_globals>:
   13630:	00800074 	movhi	r2,1
   13634:	109e8d04 	addi	r2,r2,31284
   13638:	f800283a 	ret

0001363c <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
   1363c:	00800074 	movhi	r2,1
   13640:	109a9a04 	addi	r2,r2,27240
   13644:	20800015 	stw	r2,0(r4)
   13648:	0012d5c1 	jmpi	12d5c <_ZNSt9type_infoD1Ev>

0001364c <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
   1364c:	defffe04 	addi	sp,sp,-8
   13650:	00800074 	movhi	r2,1
   13654:	dc000015 	stw	r16,0(sp)
   13658:	dfc00115 	stw	ra,4(sp)
   1365c:	109a9a04 	addi	r2,r2,27240
   13660:	20800015 	stw	r2,0(r4)
   13664:	2021883a 	mov	r16,r4
   13668:	0012d5c0 	call	12d5c <_ZNSt9type_infoD1Ev>
   1366c:	01400204 	movi	r5,8
   13670:	8009883a 	mov	r4,r16
   13674:	dfc00117 	ldw	ra,4(sp)
   13678:	dc000017 	ldw	r16,0(sp)
   1367c:	dec00204 	addi	sp,sp,8
   13680:	00130e81 	jmpi	130e8 <_ZdlPvj>

00013684 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
   13684:	21000317 	ldw	r4,12(r4)
   13688:	29400317 	ldw	r5,12(r5)
   1368c:	39c00084 	addi	r7,r7,2
   13690:	20800017 	ldw	r2,0(r4)
   13694:	10800417 	ldw	r2,16(r2)
   13698:	1000683a 	jmp	r2

0001369c <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
   1369c:	00800074 	movhi	r2,1
   136a0:	109b6e04 	addi	r2,r2,28088
   136a4:	20800015 	stw	r2,0(r4)
   136a8:	0012d5c1 	jmpi	12d5c <_ZNSt9type_infoD1Ev>

000136ac <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
   136ac:	defffe04 	addi	sp,sp,-8
   136b0:	00800074 	movhi	r2,1
   136b4:	dc000015 	stw	r16,0(sp)
   136b8:	dfc00115 	stw	ra,4(sp)
   136bc:	109b6e04 	addi	r2,r2,28088
   136c0:	20800015 	stw	r2,0(r4)
   136c4:	2021883a 	mov	r16,r4
   136c8:	0012d5c0 	call	12d5c <_ZNSt9type_infoD1Ev>
   136cc:	01400404 	movi	r5,16
   136d0:	8009883a 	mov	r4,r16
   136d4:	dfc00117 	ldw	ra,4(sp)
   136d8:	dc000017 	ldw	r16,0(sp)
   136dc:	dec00204 	addi	sp,sp,8
   136e0:	00130e81 	jmpi	130e8 <_ZdlPvj>

000136e4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
   136e4:	defff804 	addi	sp,sp,-32
   136e8:	dcc00315 	stw	r19,12(sp)
   136ec:	dc400115 	stw	r17,4(sp)
   136f0:	2027883a 	mov	r19,r4
   136f4:	2c400117 	ldw	r17,4(r5)
   136f8:	21000117 	ldw	r4,4(r4)
   136fc:	dfc00715 	stw	ra,28(sp)
   13700:	dd800615 	stw	r22,24(sp)
   13704:	dd400515 	stw	r21,20(sp)
   13708:	dd000415 	stw	r20,16(sp)
   1370c:	dc800215 	stw	r18,8(sp)
   13710:	dc000015 	stw	r16,0(sp)
   13714:	24400926 	beq	r4,r17,1373c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
   13718:	20800007 	ldb	r2,0(r4)
   1371c:	2821883a 	mov	r16,r5
   13720:	3025883a 	mov	r18,r6
   13724:	10800aa0 	cmpeqi	r2,r2,42
   13728:	3829883a 	mov	r20,r7
   1372c:	10000e1e 	bne	r2,zero,13768 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x84>
   13730:	880b883a 	mov	r5,r17
   13734:	00147900 	call	14790 <strcmp>
   13738:	10000b1e 	bne	r2,zero,13768 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x84>
   1373c:	00800044 	movi	r2,1
   13740:	dfc00717 	ldw	ra,28(sp)
   13744:	dd800617 	ldw	r22,24(sp)
   13748:	dd400517 	ldw	r21,20(sp)
   1374c:	dd000417 	ldw	r20,16(sp)
   13750:	dcc00317 	ldw	r19,12(sp)
   13754:	dc800217 	ldw	r18,8(sp)
   13758:	dc400117 	ldw	r17,4(sp)
   1375c:	dc000017 	ldw	r16,0(sp)
   13760:	dec00804 	addi	sp,sp,32
   13764:	f800283a 	ret
   13768:	00800074 	movhi	r2,1
   1376c:	9d400017 	ldw	r21,0(r19)
   13770:	115cfe17 	ldw	r5,29688(r2)
   13774:	adbfff17 	ldw	r22,-4(r21)
   13778:	89403726 	beq	r17,r5,13858 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x174>
   1377c:	88800007 	ldb	r2,0(r17)
   13780:	10800aa0 	cmpeqi	r2,r2,42
   13784:	1000031e 	bne	r2,zero,13794 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
   13788:	8809883a 	mov	r4,r17
   1378c:	00147900 	call	14790 <strcmp>
   13790:	10003126 	beq	r2,zero,13858 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x174>
   13794:	80006926 	beq	r16,zero,1393c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x258>
   13798:	80800017 	ldw	r2,0(r16)
   1379c:	b1000117 	ldw	r4,4(r22)
   137a0:	10bfff17 	ldw	r2,-4(r2)
   137a4:	11400117 	ldw	r5,4(r2)
   137a8:	21400526 	beq	r4,r5,137c0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xdc>
   137ac:	20800007 	ldb	r2,0(r4)
   137b0:	10800aa0 	cmpeqi	r2,r2,42
   137b4:	1000421e 	bne	r2,zero,138c0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1dc>
   137b8:	00147900 	call	14790 <strcmp>
   137bc:	1000401e 	bne	r2,zero,138c0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1dc>
   137c0:	a080004c 	andi	r2,r20,1
   137c4:	10003e26 	beq	r2,zero,138c0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1dc>
   137c8:	99000217 	ldw	r4,8(r19)
   137cc:	81800217 	ldw	r6,8(r16)
   137d0:	21c0180c 	andi	r7,r4,96
   137d4:	3080180c 	andi	r2,r6,96
   137d8:	01ca303a 	nor	r5,zero,r7
   137dc:	288a703a 	and	r5,r5,r2
   137e0:	28000126 	beq	r5,zero,137e8 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x104>
   137e4:	31cc703a 	and	r6,r6,r7
   137e8:	0084303a 	nor	r2,zero,r2
   137ec:	0106303a 	nor	r3,zero,r4
   137f0:	11c4703a 	and	r2,r2,r7
   137f4:	1986703a 	and	r3,r3,r6
   137f8:	10c4b03a 	or	r2,r2,r3
   137fc:	1000301e 	bne	r2,zero,138c0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1dc>
   13800:	2100004c 	andi	r4,r4,1
   13804:	20003c26 	beq	r4,zero,138f8 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x214>
   13808:	a8c00617 	ldw	r3,24(r21)
   1380c:	00800074 	movhi	r2,1
   13810:	108da104 	addi	r2,r2,13956
   13814:	18803b1e 	bne	r3,r2,13904 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x220>
   13818:	99000317 	ldw	r4,12(r19)
   1381c:	81400317 	ldw	r5,12(r16)
   13820:	a1c00084 	addi	r7,r20,2
   13824:	20800017 	ldw	r2,0(r4)
   13828:	900d883a 	mov	r6,r18
   1382c:	10800417 	ldw	r2,16(r2)
   13830:	dfc00717 	ldw	ra,28(sp)
   13834:	dd800617 	ldw	r22,24(sp)
   13838:	dd400517 	ldw	r21,20(sp)
   1383c:	dd000417 	ldw	r20,16(sp)
   13840:	dcc00317 	ldw	r19,12(sp)
   13844:	dc800217 	ldw	r18,8(sp)
   13848:	dc400117 	ldw	r17,4(sp)
   1384c:	dc000017 	ldw	r16,0(sp)
   13850:	dec00804 	addi	sp,sp,32
   13854:	1000683a 	jmp	r2
   13858:	00800074 	movhi	r2,1
   1385c:	b4400117 	ldw	r17,4(r22)
   13860:	1159f817 	ldw	r5,26592(r2)
   13864:	89401c26 	beq	r17,r5,138d8 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1f4>
   13868:	88800007 	ldb	r2,0(r17)
   1386c:	10800aa0 	cmpeqi	r2,r2,42
   13870:	1000151e 	bne	r2,zero,138c8 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1e4>
   13874:	8809883a 	mov	r4,r17
   13878:	00147900 	call	14790 <strcmp>
   1387c:	10001626 	beq	r2,zero,138d8 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1f4>
   13880:	00800074 	movhi	r2,1
   13884:	115b8217 	ldw	r5,28168(r2)
   13888:	89400326 	beq	r17,r5,13898 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1b4>
   1388c:	8809883a 	mov	r4,r17
   13890:	00147900 	call	14790 <strcmp>
   13894:	103fbf1e 	bne	r2,zero,13794 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
   13898:	99000317 	ldw	r4,12(r19)
   1389c:	20800017 	ldw	r2,0(r4)
   138a0:	10800317 	ldw	r2,12(r2)
   138a4:	103ee83a 	callr	r2
   138a8:	10c03fcc 	andi	r3,r2,255
   138ac:	18000d26 	beq	r3,zero,138e4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x200>
   138b0:	00c00074 	movhi	r3,1
   138b4:	18dd2804 	addi	r3,r3,29856
   138b8:	90c00015 	stw	r3,0(r18)
   138bc:	003fa006 	br	13740 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x5c>
   138c0:	0005883a 	mov	r2,zero
   138c4:	003f9e06 	br	13740 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x5c>
   138c8:	00800074 	movhi	r2,1
   138cc:	109b8217 	ldw	r2,28168(r2)
   138d0:	88bfb01e 	bne	r17,r2,13794 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
   138d4:	003ff006 	br	13898 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1b4>
   138d8:	90000015 	stw	zero,0(r18)
   138dc:	00800044 	movi	r2,1
   138e0:	003f9706 	br	13740 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x5c>
   138e4:	00800074 	movhi	r2,1
   138e8:	109d2704 	addi	r2,r2,29852
   138ec:	90800015 	stw	r2,0(r18)
   138f0:	00800044 	movi	r2,1
   138f4:	003f9206 	br	13740 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x5c>
   138f8:	00bfff84 	movi	r2,-2
   138fc:	a0a8703a 	and	r20,r20,r2
   13900:	003fc106 	br	13808 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x124>
   13904:	a00f883a 	mov	r7,r20
   13908:	900d883a 	mov	r6,r18
   1390c:	800b883a 	mov	r5,r16
   13910:	9809883a 	mov	r4,r19
   13914:	dfc00717 	ldw	ra,28(sp)
   13918:	dd800617 	ldw	r22,24(sp)
   1391c:	dd400517 	ldw	r21,20(sp)
   13920:	dd000417 	ldw	r20,16(sp)
   13924:	dcc00317 	ldw	r19,12(sp)
   13928:	dc800217 	ldw	r18,8(sp)
   1392c:	dc400117 	ldw	r17,4(sp)
   13930:	dc000017 	ldw	r16,0(sp)
   13934:	dec00804 	addi	sp,sp,32
   13938:	1800683a 	jmp	r3
   1393c:	0013a6c0 	call	13a6c <__cxa_bad_typeid>

00013940 <_ZN10__cxxabiv129__pointer_to_member_type_infoD1Ev>:
   13940:	00800074 	movhi	r2,1
   13944:	109b8604 	addi	r2,r2,28184
   13948:	20800015 	stw	r2,0(r4)
   1394c:	001369c1 	jmpi	1369c <_ZN10__cxxabiv117__pbase_type_infoD1Ev>

00013950 <_ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev>:
   13950:	defffe04 	addi	sp,sp,-8
   13954:	00800074 	movhi	r2,1
   13958:	dc000015 	stw	r16,0(sp)
   1395c:	dfc00115 	stw	ra,4(sp)
   13960:	109b8604 	addi	r2,r2,28184
   13964:	20800015 	stw	r2,0(r4)
   13968:	2021883a 	mov	r16,r4
   1396c:	001369c0 	call	1369c <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
   13970:	01400504 	movi	r5,20
   13974:	8009883a 	mov	r4,r16
   13978:	dfc00117 	ldw	ra,4(sp)
   1397c:	dc000017 	ldw	r16,0(sp)
   13980:	dec00204 	addi	sp,sp,8
   13984:	00130e81 	jmpi	130e8 <_ZdlPvj>

00013988 <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
   13988:	20c00417 	ldw	r3,16(r4)
   1398c:	28800417 	ldw	r2,16(r5)
   13990:	defffb04 	addi	sp,sp,-20
   13994:	dc400215 	stw	r17,8(sp)
   13998:	dc000115 	stw	r16,4(sp)
   1399c:	2023883a 	mov	r17,r4
   139a0:	2821883a 	mov	r16,r5
   139a4:	19000117 	ldw	r4,4(r3)
   139a8:	11400117 	ldw	r5,4(r2)
   139ac:	dc800315 	stw	r18,12(sp)
   139b0:	dfc00415 	stw	ra,16(sp)
   139b4:	3825883a 	mov	r18,r7
   139b8:	21400e26 	beq	r4,r5,139f4 <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x6c>
   139bc:	20800007 	ldb	r2,0(r4)
   139c0:	d9800015 	stw	r6,0(sp)
   139c4:	10800aa0 	cmpeqi	r2,r2,42
   139c8:	1000031e 	bne	r2,zero,139d8 <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x50>
   139cc:	00147900 	call	14790 <strcmp>
   139d0:	d9800017 	ldw	r6,0(sp)
   139d4:	10000726 	beq	r2,zero,139f4 <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x6c>
   139d8:	0005883a 	mov	r2,zero
   139dc:	dfc00417 	ldw	ra,16(sp)
   139e0:	dc800317 	ldw	r18,12(sp)
   139e4:	dc400217 	ldw	r17,8(sp)
   139e8:	dc000117 	ldw	r16,4(sp)
   139ec:	dec00504 	addi	sp,sp,20
   139f0:	f800283a 	ret
   139f4:	89000317 	ldw	r4,12(r17)
   139f8:	81400317 	ldw	r5,12(r16)
   139fc:	91c00084 	addi	r7,r18,2
   13a00:	20800017 	ldw	r2,0(r4)
   13a04:	10800417 	ldw	r2,16(r2)
   13a08:	dfc00417 	ldw	ra,16(sp)
   13a0c:	dc800317 	ldw	r18,12(sp)
   13a10:	dc400217 	ldw	r17,8(sp)
   13a14:	dc000117 	ldw	r16,4(sp)
   13a18:	dec00504 	addi	sp,sp,20
   13a1c:	1000683a 	jmp	r2

00013a20 <__cxa_pure_virtual>:
   13a20:	deffff04 	addi	sp,sp,-4
   13a24:	dfc00015 	stw	ra,0(sp)
   13a28:	00127080 	call	12708 <_ZSt9terminatev>

00013a2c <__cxa_deleted_virtual>:
   13a2c:	deffff04 	addi	sp,sp,-4
   13a30:	dfc00015 	stw	ra,0(sp)
   13a34:	00127080 	call	12708 <_ZSt9terminatev>

00013a38 <__cxa_bad_cast>:
   13a38:	deffff04 	addi	sp,sp,-4
   13a3c:	01000104 	movi	r4,4
   13a40:	dfc00015 	stw	ra,0(sp)
   13a44:	00132780 	call	13278 <__cxa_allocate_exception>
   13a48:	1009883a 	mov	r4,r2
   13a4c:	00800074 	movhi	r2,1
   13a50:	01800074 	movhi	r6,1
   13a54:	01400074 	movhi	r5,1
   13a58:	109baf04 	addi	r2,r2,28348
   13a5c:	318ecd04 	addi	r6,r6,15156
   13a60:	295baa04 	addi	r5,r5,28328
   13a64:	20800015 	stw	r2,0(r4)
   13a68:	001286c0 	call	1286c <__cxa_throw>

00013a6c <__cxa_bad_typeid>:
   13a6c:	deffff04 	addi	sp,sp,-4
   13a70:	01000104 	movi	r4,4
   13a74:	dfc00015 	stw	ra,0(sp)
   13a78:	00132780 	call	13278 <__cxa_allocate_exception>
   13a7c:	1009883a 	mov	r4,r2
   13a80:	00800074 	movhi	r2,1
   13a84:	01800074 	movhi	r6,1
   13a88:	01400074 	movhi	r5,1
   13a8c:	109bbf04 	addi	r2,r2,28412
   13a90:	318ee204 	addi	r6,r6,15240
   13a94:	295bba04 	addi	r5,r5,28392
   13a98:	20800015 	stw	r2,0(r4)
   13a9c:	001286c0 	call	1286c <__cxa_throw>

00013aa0 <__cxa_throw_bad_array_new_length>:
   13aa0:	deffff04 	addi	sp,sp,-4
   13aa4:	01000104 	movi	r4,4
   13aa8:	dfc00015 	stw	ra,0(sp)
   13aac:	00132780 	call	13278 <__cxa_allocate_exception>
   13ab0:	1009883a 	mov	r4,r2
   13ab4:	00800074 	movhi	r2,1
   13ab8:	01800074 	movhi	r6,1
   13abc:	01400074 	movhi	r5,1
   13ac0:	109ba004 	addi	r2,r2,28288
   13ac4:	318eb804 	addi	r6,r6,15072
   13ac8:	295b9b04 	addi	r5,r5,28268
   13acc:	20800015 	stw	r2,0(r4)
   13ad0:	001286c0 	call	1286c <__cxa_throw>

00013ad4 <_ZNKSt20bad_array_new_length4whatEv>:
   13ad4:	00800074 	movhi	r2,1
   13ad8:	109b8d04 	addi	r2,r2,28212
   13adc:	f800283a 	ret

00013ae0 <_ZNSt20bad_array_new_lengthD1Ev>:
   13ae0:	00800074 	movhi	r2,1
   13ae4:	109ba004 	addi	r2,r2,28288
   13ae8:	20800015 	stw	r2,0(r4)
   13aec:	0013bdc1 	jmpi	13bdc <_ZNSt9bad_allocD1Ev>

00013af0 <_ZNSt20bad_array_new_lengthD0Ev>:
   13af0:	defffe04 	addi	sp,sp,-8
   13af4:	00800074 	movhi	r2,1
   13af8:	dc000015 	stw	r16,0(sp)
   13afc:	dfc00115 	stw	ra,4(sp)
   13b00:	109ba004 	addi	r2,r2,28288
   13b04:	20800015 	stw	r2,0(r4)
   13b08:	2021883a 	mov	r16,r4
   13b0c:	0013bdc0 	call	13bdc <_ZNSt9bad_allocD1Ev>
   13b10:	01400104 	movi	r5,4
   13b14:	8009883a 	mov	r4,r16
   13b18:	dfc00117 	ldw	ra,4(sp)
   13b1c:	dc000017 	ldw	r16,0(sp)
   13b20:	dec00204 	addi	sp,sp,8
   13b24:	00130e81 	jmpi	130e8 <_ZdlPvj>

00013b28 <_ZNKSt8bad_cast4whatEv>:
   13b28:	00800074 	movhi	r2,1
   13b2c:	109ba304 	addi	r2,r2,28300
   13b30:	f800283a 	ret

00013b34 <_ZNSt8bad_castD1Ev>:
   13b34:	00800074 	movhi	r2,1
   13b38:	109baf04 	addi	r2,r2,28348
   13b3c:	20800015 	stw	r2,0(r4)
   13b40:	00135d41 	jmpi	135d4 <_ZNSt9exceptionD1Ev>

00013b44 <_ZNSt8bad_castD0Ev>:
   13b44:	defffe04 	addi	sp,sp,-8
   13b48:	00800074 	movhi	r2,1
   13b4c:	dc000015 	stw	r16,0(sp)
   13b50:	dfc00115 	stw	ra,4(sp)
   13b54:	109baf04 	addi	r2,r2,28348
   13b58:	20800015 	stw	r2,0(r4)
   13b5c:	2021883a 	mov	r16,r4
   13b60:	00135d40 	call	135d4 <_ZNSt9exceptionD1Ev>
   13b64:	01400104 	movi	r5,4
   13b68:	8009883a 	mov	r4,r16
   13b6c:	dfc00117 	ldw	ra,4(sp)
   13b70:	dc000017 	ldw	r16,0(sp)
   13b74:	dec00204 	addi	sp,sp,8
   13b78:	00130e81 	jmpi	130e8 <_ZdlPvj>

00013b7c <_ZNKSt10bad_typeid4whatEv>:
   13b7c:	00800074 	movhi	r2,1
   13b80:	109bb204 	addi	r2,r2,28360
   13b84:	f800283a 	ret

00013b88 <_ZNSt10bad_typeidD1Ev>:
   13b88:	00800074 	movhi	r2,1
   13b8c:	109bbf04 	addi	r2,r2,28412
   13b90:	20800015 	stw	r2,0(r4)
   13b94:	00135d41 	jmpi	135d4 <_ZNSt9exceptionD1Ev>

00013b98 <_ZNSt10bad_typeidD0Ev>:
   13b98:	defffe04 	addi	sp,sp,-8
   13b9c:	00800074 	movhi	r2,1
   13ba0:	dc000015 	stw	r16,0(sp)
   13ba4:	dfc00115 	stw	ra,4(sp)
   13ba8:	109bbf04 	addi	r2,r2,28412
   13bac:	20800015 	stw	r2,0(r4)
   13bb0:	2021883a 	mov	r16,r4
   13bb4:	00135d40 	call	135d4 <_ZNSt9exceptionD1Ev>
   13bb8:	01400104 	movi	r5,4
   13bbc:	8009883a 	mov	r4,r16
   13bc0:	dfc00117 	ldw	ra,4(sp)
   13bc4:	dc000017 	ldw	r16,0(sp)
   13bc8:	dec00204 	addi	sp,sp,8
   13bcc:	00130e81 	jmpi	130e8 <_ZdlPvj>

00013bd0 <_ZNKSt9bad_alloc4whatEv>:
   13bd0:	00800074 	movhi	r2,1
   13bd4:	109bc204 	addi	r2,r2,28424
   13bd8:	f800283a 	ret

00013bdc <_ZNSt9bad_allocD1Ev>:
   13bdc:	00800074 	movhi	r2,1
   13be0:	109bcf04 	addi	r2,r2,28476
   13be4:	20800015 	stw	r2,0(r4)
   13be8:	00135d41 	jmpi	135d4 <_ZNSt9exceptionD1Ev>

00013bec <_ZNSt9bad_allocD0Ev>:
   13bec:	defffe04 	addi	sp,sp,-8
   13bf0:	00800074 	movhi	r2,1
   13bf4:	dc000015 	stw	r16,0(sp)
   13bf8:	dfc00115 	stw	ra,4(sp)
   13bfc:	109bcf04 	addi	r2,r2,28476
   13c00:	20800015 	stw	r2,0(r4)
   13c04:	2021883a 	mov	r16,r4
   13c08:	00135d40 	call	135d4 <_ZNSt9exceptionD1Ev>
   13c0c:	01400104 	movi	r5,4
   13c10:	8009883a 	mov	r4,r16
   13c14:	dfc00117 	ldw	ra,4(sp)
   13c18:	dc000017 	ldw	r16,0(sp)
   13c1c:	dec00204 	addi	sp,sp,8
   13c20:	00130e81 	jmpi	130e8 <_ZdlPvj>

00013c24 <_Unwind_ForcedUnwind_Phase2>:
   13c24:	28800017 	ldw	r2,0(r5)
   13c28:	defff504 	addi	sp,sp,-44
   13c2c:	dd400815 	stw	r21,32(sp)
   13c30:	dd000715 	stw	r20,28(sp)
   13c34:	dcc00615 	stw	r19,24(sp)
   13c38:	dc800515 	stw	r18,20(sp)
   13c3c:	dc400415 	stw	r17,16(sp)
   13c40:	dc000315 	stw	r16,12(sp)
   13c44:	dfc00a15 	stw	ra,40(sp)
   13c48:	dd800915 	stw	r22,36(sp)
   13c4c:	302b883a 	mov	r21,r6
   13c50:	24c00317 	ldw	r19,12(r4)
   13c54:	25000417 	ldw	r20,16(r4)
   13c58:	21800017 	ldw	r6,0(r4)
   13c5c:	21c00117 	ldw	r7,4(r4)
   13c60:	2823883a 	mov	r17,r5
   13c64:	2021883a 	mov	r16,r4
   13c68:	04800044 	movi	r18,1
   13c6c:	10001d26 	beq	r2,zero,13ce4 <_Unwind_ForcedUnwind_Phase2+0xc0>
   13c70:	15800617 	ldw	r22,24(r2)
   13c74:	01400284 	movi	r5,10
   13c78:	01000044 	movi	r4,1
   13c7c:	dd000215 	stw	r20,8(sp)
   13c80:	dc400115 	stw	r17,4(sp)
   13c84:	dc000015 	stw	r16,0(sp)
   13c88:	983ee83a 	callr	r19
   13c8c:	01400284 	movi	r5,10
   13c90:	01000044 	movi	r4,1
   13c94:	10001a1e 	bne	r2,zero,13d00 <_Unwind_ForcedUnwind_Phase2+0xdc>
   13c98:	81800017 	ldw	r6,0(r16)
   13c9c:	81c00117 	ldw	r7,4(r16)
   13ca0:	b0000926 	beq	r22,zero,13cc8 <_Unwind_ForcedUnwind_Phase2+0xa4>
   13ca4:	dc400115 	stw	r17,4(sp)
   13ca8:	dc000015 	stw	r16,0(sp)
   13cac:	b03ee83a 	callr	r22
   13cb0:	10c001e0 	cmpeqi	r3,r2,7
   13cb4:	11000218 	cmpnei	r4,r2,8
   13cb8:	18001d1e 	bne	r3,zero,13d30 <_Unwind_ForcedUnwind_Phase2+0x10c>
   13cbc:	2000101e 	bne	r4,zero,13d00 <_Unwind_ForcedUnwind_Phase2+0xdc>
   13cc0:	81800017 	ldw	r6,0(r16)
   13cc4:	81c00117 	ldw	r7,4(r16)
   13cc8:	88800017 	ldw	r2,0(r17)
   13ccc:	00c00074 	movhi	r3,1
   13cd0:	94800044 	addi	r18,r18,1
   13cd4:	10800017 	ldw	r2,0(r2)
   13cd8:	189e8f15 	stw	r2,31292(r3)
   13cdc:	88800015 	stw	r2,0(r17)
   13ce0:	103fe31e 	bne	r2,zero,13c70 <_Unwind_ForcedUnwind_Phase2+0x4c>
   13ce4:	dd000215 	stw	r20,8(sp)
   13ce8:	dc400115 	stw	r17,4(sp)
   13cec:	dc000015 	stw	r16,0(sp)
   13cf0:	01400684 	movi	r5,26
   13cf4:	01000044 	movi	r4,1
   13cf8:	983ee83a 	callr	r19
   13cfc:	10000b26 	beq	r2,zero,13d2c <_Unwind_ForcedUnwind_Phase2+0x108>
   13d00:	00800084 	movi	r2,2
   13d04:	dfc00a17 	ldw	ra,40(sp)
   13d08:	dd800917 	ldw	r22,36(sp)
   13d0c:	dd400817 	ldw	r21,32(sp)
   13d10:	dd000717 	ldw	r20,28(sp)
   13d14:	dcc00617 	ldw	r19,24(sp)
   13d18:	dc800517 	ldw	r18,20(sp)
   13d1c:	dc400417 	ldw	r17,16(sp)
   13d20:	dc000317 	ldw	r16,12(sp)
   13d24:	dec00b04 	addi	sp,sp,44
   13d28:	f800283a 	ret
   13d2c:	00800144 	movi	r2,5
   13d30:	ac800015 	stw	r18,0(r21)
   13d34:	003ff306 	br	13d04 <_Unwind_ForcedUnwind_Phase2+0xe0>

00013d38 <_Unwind_RaiseException_Phase2>:
   13d38:	28800017 	ldw	r2,0(r5)
   13d3c:	10002f26 	beq	r2,zero,13dfc <_Unwind_RaiseException_Phase2+0xc4>
   13d40:	defff804 	addi	sp,sp,-32
   13d44:	dcc00515 	stw	r19,20(sp)
   13d48:	dc800415 	stw	r18,16(sp)
   13d4c:	dc400315 	stw	r17,12(sp)
   13d50:	dc000215 	stw	r16,8(sp)
   13d54:	dfc00715 	stw	ra,28(sp)
   13d58:	dd000615 	stw	r20,24(sp)
   13d5c:	2823883a 	mov	r17,r5
   13d60:	2021883a 	mov	r16,r4
   13d64:	3027883a 	mov	r19,r6
   13d68:	04800044 	movi	r18,1
   13d6c:	00001306 	br	13dbc <_Unwind_RaiseException_Phase2+0x84>
   13d70:	18000e26 	beq	r3,zero,13dac <_Unwind_RaiseException_Phase2+0x74>
   13d74:	01400084 	movi	r5,2
   13d78:	0029883a 	mov	r20,zero
   13d7c:	81800017 	ldw	r6,0(r16)
   13d80:	81c00117 	ldw	r7,4(r16)
   13d84:	01000044 	movi	r4,1
   13d88:	dc400115 	stw	r17,4(sp)
   13d8c:	dc000015 	stw	r16,0(sp)
   13d90:	183ee83a 	callr	r3
   13d94:	10c001e0 	cmpeqi	r3,r2,7
   13d98:	18001a1e 	bne	r3,zero,13e04 <_Unwind_RaiseException_Phase2+0xcc>
   13d9c:	10800218 	cmpnei	r2,r2,8
   13da0:	10000d1e 	bne	r2,zero,13dd8 <_Unwind_RaiseException_Phase2+0xa0>
   13da4:	a000191e 	bne	r20,zero,13e0c <_Unwind_RaiseException_Phase2+0xd4>
   13da8:	88800017 	ldw	r2,0(r17)
   13dac:	10800017 	ldw	r2,0(r2)
   13db0:	94800044 	addi	r18,r18,1
   13db4:	88800015 	stw	r2,0(r17)
   13db8:	10000726 	beq	r2,zero,13dd8 <_Unwind_RaiseException_Phase2+0xa0>
   13dbc:	81000417 	ldw	r4,16(r16)
   13dc0:	10c00617 	ldw	r3,24(r2)
   13dc4:	113fea1e 	bne	r2,r4,13d70 <_Unwind_RaiseException_Phase2+0x38>
   13dc8:	18001026 	beq	r3,zero,13e0c <_Unwind_RaiseException_Phase2+0xd4>
   13dcc:	01400184 	movi	r5,6
   13dd0:	05000104 	movi	r20,4
   13dd4:	003fe906 	br	13d7c <_Unwind_RaiseException_Phase2+0x44>
   13dd8:	00800084 	movi	r2,2
   13ddc:	dfc00717 	ldw	ra,28(sp)
   13de0:	dd000617 	ldw	r20,24(sp)
   13de4:	dcc00517 	ldw	r19,20(sp)
   13de8:	dc800417 	ldw	r18,16(sp)
   13dec:	dc400317 	ldw	r17,12(sp)
   13df0:	dc000217 	ldw	r16,8(sp)
   13df4:	dec00804 	addi	sp,sp,32
   13df8:	f800283a 	ret
   13dfc:	00800084 	movi	r2,2
   13e00:	f800283a 	ret
   13e04:	9c800015 	stw	r18,0(r19)
   13e08:	003ff406 	br	13ddc <_Unwind_RaiseException_Phase2+0xa4>
   13e0c:	00141480 	call	14148 <abort>

00013e10 <uw_install_context.constprop.0.isra.0>:
   13e10:	deffff04 	addi	sp,sp,-4
   13e14:	df000015 	stw	fp,0(sp)
   13e18:	20800804 	addi	r2,r4,32
   13e1c:	00c00074 	movhi	r3,1
   13e20:	191e8f15 	stw	r4,31292(r3)
   13e24:	d839883a 	mov	fp,sp
   13e28:	20c00917 	ldw	r3,36(r4)
   13e2c:	21000817 	ldw	r4,32(r4)
   13e30:	16c00217 	ldw	sp,8(r2)
   13e34:	2039883a 	mov	fp,r4
   13e38:	1800683a 	jmp	r3

00013e3c <_Unwind_SjLj_Register>:
   13e3c:	00800074 	movhi	r2,1
   13e40:	109e8f17 	ldw	r2,31292(r2)
   13e44:	20800015 	stw	r2,0(r4)
   13e48:	00800074 	movhi	r2,1
   13e4c:	111e8f15 	stw	r4,31292(r2)
   13e50:	f800283a 	ret

00013e54 <_Unwind_SjLj_Unregister>:
   13e54:	20c00017 	ldw	r3,0(r4)
   13e58:	00800074 	movhi	r2,1
   13e5c:	10de8f15 	stw	r3,31292(r2)
   13e60:	f800283a 	ret

00013e64 <_Unwind_GetGR>:
   13e64:	29400084 	addi	r5,r5,2
   13e68:	20800017 	ldw	r2,0(r4)
   13e6c:	280a90ba 	slli	r5,r5,2
   13e70:	114b883a 	add	r5,r2,r5
   13e74:	28800017 	ldw	r2,0(r5)
   13e78:	f800283a 	ret

00013e7c <_Unwind_GetCFA>:
   13e7c:	20800017 	ldw	r2,0(r4)
   13e80:	10000226 	beq	r2,zero,13e8c <_Unwind_GetCFA+0x10>
   13e84:	10800a17 	ldw	r2,40(r2)
   13e88:	f800283a 	ret
   13e8c:	0005883a 	mov	r2,zero
   13e90:	f800283a 	ret

00013e94 <_Unwind_SetGR>:
   13e94:	29400084 	addi	r5,r5,2
   13e98:	20800017 	ldw	r2,0(r4)
   13e9c:	280a90ba 	slli	r5,r5,2
   13ea0:	114b883a 	add	r5,r2,r5
   13ea4:	29800015 	stw	r6,0(r5)
   13ea8:	f800283a 	ret

00013eac <_Unwind_GetIP>:
   13eac:	20800017 	ldw	r2,0(r4)
   13eb0:	10800117 	ldw	r2,4(r2)
   13eb4:	10800044 	addi	r2,r2,1
   13eb8:	f800283a 	ret

00013ebc <_Unwind_GetIPInfo>:
   13ebc:	20800017 	ldw	r2,0(r4)
   13ec0:	28000015 	stw	zero,0(r5)
   13ec4:	10000326 	beq	r2,zero,13ed4 <_Unwind_GetIPInfo+0x18>
   13ec8:	10800117 	ldw	r2,4(r2)
   13ecc:	10800044 	addi	r2,r2,1
   13ed0:	f800283a 	ret
   13ed4:	0005883a 	mov	r2,zero
   13ed8:	f800283a 	ret

00013edc <_Unwind_SetIP>:
   13edc:	20800017 	ldw	r2,0(r4)
   13ee0:	297fffc4 	addi	r5,r5,-1
   13ee4:	11400115 	stw	r5,4(r2)
   13ee8:	f800283a 	ret

00013eec <_Unwind_GetLanguageSpecificData>:
   13eec:	20800017 	ldw	r2,0(r4)
   13ef0:	10800717 	ldw	r2,28(r2)
   13ef4:	f800283a 	ret

00013ef8 <_Unwind_GetRegionStart>:
   13ef8:	0005883a 	mov	r2,zero
   13efc:	f800283a 	ret

00013f00 <_Unwind_FindEnclosingFunction>:
   13f00:	0005883a 	mov	r2,zero
   13f04:	f800283a 	ret

00013f08 <_Unwind_GetDataRelBase>:
   13f08:	0005883a 	mov	r2,zero
   13f0c:	f800283a 	ret

00013f10 <_Unwind_GetTextRelBase>:
   13f10:	0005883a 	mov	r2,zero
   13f14:	f800283a 	ret

00013f18 <_Unwind_SjLj_RaiseException>:
   13f18:	defff804 	addi	sp,sp,-32
   13f1c:	00800074 	movhi	r2,1
   13f20:	dc400515 	stw	r17,20(sp)
   13f24:	145e8f17 	ldw	r17,31292(r2)
   13f28:	dfc00715 	stw	ra,28(sp)
   13f2c:	dc800615 	stw	r18,24(sp)
   13f30:	dc000415 	stw	r16,16(sp)
   13f34:	dc400215 	stw	r17,8(sp)
   13f38:	88001426 	beq	r17,zero,13f8c <_Unwind_SjLj_RaiseException+0x74>
   13f3c:	2021883a 	mov	r16,r4
   13f40:	8805883a 	mov	r2,r17
   13f44:	dc800204 	addi	r18,sp,8
   13f48:	10800617 	ldw	r2,24(r2)
   13f4c:	10000b26 	beq	r2,zero,13f7c <_Unwind_SjLj_RaiseException+0x64>
   13f50:	81800017 	ldw	r6,0(r16)
   13f54:	81c00117 	ldw	r7,4(r16)
   13f58:	01400044 	movi	r5,1
   13f5c:	dc800115 	stw	r18,4(sp)
   13f60:	dc000015 	stw	r16,0(sp)
   13f64:	01000044 	movi	r4,1
   13f68:	103ee83a 	callr	r2
   13f6c:	10c001a0 	cmpeqi	r3,r2,6
   13f70:	18000d1e 	bne	r3,zero,13fa8 <_Unwind_SjLj_RaiseException+0x90>
   13f74:	10800218 	cmpnei	r2,r2,8
   13f78:	1000171e 	bne	r2,zero,13fd8 <_Unwind_SjLj_RaiseException+0xc0>
   13f7c:	d8800217 	ldw	r2,8(sp)
   13f80:	10800017 	ldw	r2,0(r2)
   13f84:	d8800215 	stw	r2,8(sp)
   13f88:	103fef1e 	bne	r2,zero,13f48 <_Unwind_SjLj_RaiseException+0x30>
   13f8c:	00800144 	movi	r2,5
   13f90:	dfc00717 	ldw	ra,28(sp)
   13f94:	dc800617 	ldw	r18,24(sp)
   13f98:	dc400517 	ldw	r17,20(sp)
   13f9c:	dc000417 	ldw	r16,16(sp)
   13fa0:	dec00804 	addi	sp,sp,32
   13fa4:	f800283a 	ret
   13fa8:	d8800217 	ldw	r2,8(sp)
   13fac:	80000315 	stw	zero,12(r16)
   13fb0:	d9800304 	addi	r6,sp,12
   13fb4:	80800415 	stw	r2,16(r16)
   13fb8:	900b883a 	mov	r5,r18
   13fbc:	8009883a 	mov	r4,r16
   13fc0:	dc400215 	stw	r17,8(sp)
   13fc4:	0013d380 	call	13d38 <_Unwind_RaiseException_Phase2>
   13fc8:	10c001d8 	cmpnei	r3,r2,7
   13fcc:	183ff01e 	bne	r3,zero,13f90 <_Unwind_SjLj_RaiseException+0x78>
   13fd0:	d9000217 	ldw	r4,8(sp)
   13fd4:	0013e100 	call	13e10 <uw_install_context.constprop.0.isra.0>
   13fd8:	008000c4 	movi	r2,3
   13fdc:	003fec06 	br	13f90 <_Unwind_SjLj_RaiseException+0x78>

00013fe0 <_Unwind_SjLj_ForcedUnwind>:
   13fe0:	00800074 	movhi	r2,1
   13fe4:	defffd04 	addi	sp,sp,-12
   13fe8:	10de8f17 	ldw	r3,31292(r2)
   13fec:	dfc00215 	stw	ra,8(sp)
   13ff0:	21400315 	stw	r5,12(r4)
   13ff4:	21800415 	stw	r6,16(r4)
   13ff8:	d80b883a 	mov	r5,sp
   13ffc:	d9800104 	addi	r6,sp,4
   14000:	d8c00015 	stw	r3,0(sp)
   14004:	0013c240 	call	13c24 <_Unwind_ForcedUnwind_Phase2>
   14008:	10c001e0 	cmpeqi	r3,r2,7
   1400c:	1800031e 	bne	r3,zero,1401c <_Unwind_SjLj_ForcedUnwind+0x3c>
   14010:	dfc00217 	ldw	ra,8(sp)
   14014:	dec00304 	addi	sp,sp,12
   14018:	f800283a 	ret
   1401c:	d9000017 	ldw	r4,0(sp)
   14020:	0013e100 	call	13e10 <uw_install_context.constprop.0.isra.0>

00014024 <_Unwind_SjLj_Resume>:
   14024:	00800074 	movhi	r2,1
   14028:	10de8f17 	ldw	r3,31292(r2)
   1402c:	20800317 	ldw	r2,12(r4)
   14030:	defffd04 	addi	sp,sp,-12
   14034:	dfc00215 	stw	ra,8(sp)
   14038:	d8c00015 	stw	r3,0(sp)
   1403c:	d9800104 	addi	r6,sp,4
   14040:	d80b883a 	mov	r5,sp
   14044:	1000051e 	bne	r2,zero,1405c <_Unwind_SjLj_Resume+0x38>
   14048:	0013d380 	call	13d38 <_Unwind_RaiseException_Phase2>
   1404c:	108001e0 	cmpeqi	r2,r2,7
   14050:	10000426 	beq	r2,zero,14064 <_Unwind_SjLj_Resume+0x40>
   14054:	d9000017 	ldw	r4,0(sp)
   14058:	0013e100 	call	13e10 <uw_install_context.constprop.0.isra.0>
   1405c:	0013c240 	call	13c24 <_Unwind_ForcedUnwind_Phase2>
   14060:	003ffa06 	br	1404c <_Unwind_SjLj_Resume+0x28>
   14064:	00141480 	call	14148 <abort>

00014068 <_Unwind_SjLj_Resume_or_Rethrow>:
   14068:	20800317 	ldw	r2,12(r4)
   1406c:	1000011e 	bne	r2,zero,14074 <_Unwind_SjLj_Resume_or_Rethrow+0xc>
   14070:	0013f181 	jmpi	13f18 <_Unwind_SjLj_RaiseException>
   14074:	00800074 	movhi	r2,1
   14078:	109e8f17 	ldw	r2,31292(r2)
   1407c:	defffd04 	addi	sp,sp,-12
   14080:	d9800104 	addi	r6,sp,4
   14084:	d80b883a 	mov	r5,sp
   14088:	dfc00215 	stw	ra,8(sp)
   1408c:	d8800015 	stw	r2,0(sp)
   14090:	0013c240 	call	13c24 <_Unwind_ForcedUnwind_Phase2>
   14094:	108001e0 	cmpeqi	r2,r2,7
   14098:	10000226 	beq	r2,zero,140a4 <_Unwind_SjLj_Resume_or_Rethrow+0x3c>
   1409c:	d9000017 	ldw	r4,0(sp)
   140a0:	0013e100 	call	13e10 <uw_install_context.constprop.0.isra.0>
   140a4:	00141480 	call	14148 <abort>

000140a8 <_Unwind_DeleteException>:
   140a8:	20800217 	ldw	r2,8(r4)
   140ac:	200b883a 	mov	r5,r4
   140b0:	10000226 	beq	r2,zero,140bc <_Unwind_DeleteException+0x14>
   140b4:	01000044 	movi	r4,1
   140b8:	1000683a 	jmp	r2
   140bc:	f800283a 	ret

000140c0 <_Unwind_Backtrace>:
   140c0:	00800074 	movhi	r2,1
   140c4:	109e8f17 	ldw	r2,31292(r2)
   140c8:	defffb04 	addi	sp,sp,-20
   140cc:	dc800315 	stw	r18,12(sp)
   140d0:	dc400215 	stw	r17,8(sp)
   140d4:	dc000115 	stw	r16,4(sp)
   140d8:	dfc00415 	stw	ra,16(sp)
   140dc:	d8800015 	stw	r2,0(sp)
   140e0:	2021883a 	mov	r16,r4
   140e4:	2823883a 	mov	r17,r5
   140e8:	d825883a 	mov	r18,sp
   140ec:	10000826 	beq	r2,zero,14110 <_Unwind_Backtrace+0x50>
   140f0:	880b883a 	mov	r5,r17
   140f4:	9009883a 	mov	r4,r18
   140f8:	803ee83a 	callr	r16
   140fc:	1000101e 	bne	r2,zero,14140 <_Unwind_Backtrace+0x80>
   14100:	d8800017 	ldw	r2,0(sp)
   14104:	10800017 	ldw	r2,0(r2)
   14108:	d8800015 	stw	r2,0(sp)
   1410c:	103ff81e 	bne	r2,zero,140f0 <_Unwind_Backtrace+0x30>
   14110:	880b883a 	mov	r5,r17
   14114:	9009883a 	mov	r4,r18
   14118:	803ee83a 	callr	r16
   1411c:	00c00144 	movi	r3,5
   14120:	1000071e 	bne	r2,zero,14140 <_Unwind_Backtrace+0x80>
   14124:	1805883a 	mov	r2,r3
   14128:	dfc00417 	ldw	ra,16(sp)
   1412c:	dc800317 	ldw	r18,12(sp)
   14130:	dc400217 	ldw	r17,8(sp)
   14134:	dc000117 	ldw	r16,4(sp)
   14138:	dec00504 	addi	sp,sp,20
   1413c:	f800283a 	ret
   14140:	00c000c4 	movi	r3,3
   14144:	003ff706 	br	14124 <_Unwind_Backtrace+0x64>

00014148 <abort>:
   14148:	deffff04 	addi	sp,sp,-4
   1414c:	01000184 	movi	r4,6
   14150:	dfc00015 	stw	ra,0(sp)
   14154:	00147000 	call	14700 <raise>
   14158:	01000044 	movi	r4,1
   1415c:	00148e80 	call	148e8 <_exit>

00014160 <malloc>:
   14160:	00800074 	movhi	r2,1
   14164:	200b883a 	mov	r5,r4
   14168:	111d2b17 	ldw	r4,29868(r2)
   1416c:	00142a01 	jmpi	142a0 <_malloc_r>

00014170 <free>:
   14170:	00800074 	movhi	r2,1
   14174:	200b883a 	mov	r5,r4
   14178:	111d2b17 	ldw	r4,29868(r2)
   1417c:	00141a01 	jmpi	141a0 <_free_r>

00014180 <memset>:
   14180:	2005883a 	mov	r2,r4
   14184:	218d883a 	add	r6,r4,r6
   14188:	2007883a 	mov	r3,r4
   1418c:	1980011e 	bne	r3,r6,14194 <memset+0x14>
   14190:	f800283a 	ret
   14194:	18c00044 	addi	r3,r3,1
   14198:	197fffc5 	stb	r5,-1(r3)
   1419c:	003ffb06 	br	1418c <memset+0xc>

000141a0 <_free_r>:
   141a0:	28003e26 	beq	r5,zero,1429c <_free_r+0xfc>
   141a4:	28bfff17 	ldw	r2,-4(r5)
   141a8:	defffd04 	addi	sp,sp,-12
   141ac:	dc000115 	stw	r16,4(sp)
   141b0:	dfc00215 	stw	ra,8(sp)
   141b4:	2c3fff04 	addi	r16,r5,-4
   141b8:	1000010e 	bge	r2,zero,141c0 <_free_r+0x20>
   141bc:	80a1883a 	add	r16,r16,r2
   141c0:	d9000015 	stw	r4,0(sp)
   141c4:	0014ea80 	call	14ea8 <__malloc_lock>
   141c8:	00800074 	movhi	r2,1
   141cc:	109e9117 	ldw	r2,31300(r2)
   141d0:	d9000017 	ldw	r4,0(sp)
   141d4:	1000071e 	bne	r2,zero,141f4 <_free_r+0x54>
   141d8:	80000115 	stw	zero,4(r16)
   141dc:	00800074 	movhi	r2,1
   141e0:	141e9115 	stw	r16,31300(r2)
   141e4:	dfc00217 	ldw	ra,8(sp)
   141e8:	dc000117 	ldw	r16,4(sp)
   141ec:	dec00304 	addi	sp,sp,12
   141f0:	0014ecc1 	jmpi	14ecc <__malloc_unlock>
   141f4:	8080092e 	bgeu	r16,r2,1421c <_free_r+0x7c>
   141f8:	81400017 	ldw	r5,0(r16)
   141fc:	8147883a 	add	r3,r16,r5
   14200:	10c0041e 	bne	r2,r3,14214 <_free_r+0x74>
   14204:	10c00017 	ldw	r3,0(r2)
   14208:	10800117 	ldw	r2,4(r2)
   1420c:	1947883a 	add	r3,r3,r5
   14210:	80c00015 	stw	r3,0(r16)
   14214:	80800115 	stw	r2,4(r16)
   14218:	003ff006 	br	141dc <_free_r+0x3c>
   1421c:	1007883a 	mov	r3,r2
   14220:	10800117 	ldw	r2,4(r2)
   14224:	10000126 	beq	r2,zero,1422c <_free_r+0x8c>
   14228:	80bffc2e 	bgeu	r16,r2,1421c <_free_r+0x7c>
   1422c:	19400017 	ldw	r5,0(r3)
   14230:	194d883a 	add	r6,r3,r5
   14234:	34000b1e 	bne	r6,r16,14264 <_free_r+0xc4>
   14238:	81800017 	ldw	r6,0(r16)
   1423c:	298b883a 	add	r5,r5,r6
   14240:	19400015 	stw	r5,0(r3)
   14244:	194d883a 	add	r6,r3,r5
   14248:	11bfe61e 	bne	r2,r6,141e4 <_free_r+0x44>
   1424c:	11800017 	ldw	r6,0(r2)
   14250:	10800117 	ldw	r2,4(r2)
   14254:	314b883a 	add	r5,r6,r5
   14258:	19400015 	stw	r5,0(r3)
   1425c:	18800115 	stw	r2,4(r3)
   14260:	003fe006 	br	141e4 <_free_r+0x44>
   14264:	8180032e 	bgeu	r16,r6,14274 <_free_r+0xd4>
   14268:	00800304 	movi	r2,12
   1426c:	20800015 	stw	r2,0(r4)
   14270:	003fdc06 	br	141e4 <_free_r+0x44>
   14274:	81800017 	ldw	r6,0(r16)
   14278:	818b883a 	add	r5,r16,r6
   1427c:	1140041e 	bne	r2,r5,14290 <_free_r+0xf0>
   14280:	11400017 	ldw	r5,0(r2)
   14284:	10800117 	ldw	r2,4(r2)
   14288:	298b883a 	add	r5,r5,r6
   1428c:	81400015 	stw	r5,0(r16)
   14290:	80800115 	stw	r2,4(r16)
   14294:	1c000115 	stw	r16,4(r3)
   14298:	003fd206 	br	141e4 <_free_r+0x44>
   1429c:	f800283a 	ret

000142a0 <_malloc_r>:
   142a0:	defffc04 	addi	sp,sp,-16
   142a4:	00bfff04 	movi	r2,-4
   142a8:	dc400115 	stw	r17,4(sp)
   142ac:	2c4000c4 	addi	r17,r5,3
   142b0:	88a2703a 	and	r17,r17,r2
   142b4:	8c400204 	addi	r17,r17,8
   142b8:	dc800215 	stw	r18,8(sp)
   142bc:	dfc00315 	stw	ra,12(sp)
   142c0:	dc000015 	stw	r16,0(sp)
   142c4:	88800328 	cmpgeui	r2,r17,12
   142c8:	2025883a 	mov	r18,r4
   142cc:	10001a1e 	bne	r2,zero,14338 <_malloc_r+0x98>
   142d0:	04400304 	movi	r17,12
   142d4:	89401936 	bltu	r17,r5,1433c <_malloc_r+0x9c>
   142d8:	9009883a 	mov	r4,r18
   142dc:	0014ea80 	call	14ea8 <__malloc_lock>
   142e0:	00800074 	movhi	r2,1
   142e4:	10de9117 	ldw	r3,31300(r2)
   142e8:	1821883a 	mov	r16,r3
   142ec:	80001c1e 	bne	r16,zero,14360 <_malloc_r+0xc0>
   142f0:	00800074 	movhi	r2,1
   142f4:	109e9017 	ldw	r2,31296(r2)
   142f8:	1000051e 	bne	r2,zero,14310 <_malloc_r+0x70>
   142fc:	000b883a 	mov	r5,zero
   14300:	9009883a 	mov	r4,r18
   14304:	00144900 	call	14490 <_sbrk_r>
   14308:	00c00074 	movhi	r3,1
   1430c:	189e9015 	stw	r2,31296(r3)
   14310:	880b883a 	mov	r5,r17
   14314:	9009883a 	mov	r4,r18
   14318:	00144900 	call	14490 <_sbrk_r>
   1431c:	10ffffd8 	cmpnei	r3,r2,-1
   14320:	18002d1e 	bne	r3,zero,143d8 <_malloc_r+0x138>
   14324:	00800304 	movi	r2,12
   14328:	90800015 	stw	r2,0(r18)
   1432c:	9009883a 	mov	r4,r18
   14330:	0014ecc0 	call	14ecc <__malloc_unlock>
   14334:	00000306 	br	14344 <_malloc_r+0xa4>
   14338:	883fe60e 	bge	r17,zero,142d4 <_malloc_r+0x34>
   1433c:	00800304 	movi	r2,12
   14340:	90800015 	stw	r2,0(r18)
   14344:	0005883a 	mov	r2,zero
   14348:	dfc00317 	ldw	ra,12(sp)
   1434c:	dc800217 	ldw	r18,8(sp)
   14350:	dc400117 	ldw	r17,4(sp)
   14354:	dc000017 	ldw	r16,0(sp)
   14358:	dec00404 	addi	sp,sp,16
   1435c:	f800283a 	ret
   14360:	80800017 	ldw	r2,0(r16)
   14364:	1445c83a 	sub	r2,r2,r17
   14368:	10001816 	blt	r2,zero,143cc <_malloc_r+0x12c>
   1436c:	11000330 	cmpltui	r4,r2,12
   14370:	2000041e 	bne	r4,zero,14384 <_malloc_r+0xe4>
   14374:	80800015 	stw	r2,0(r16)
   14378:	80a1883a 	add	r16,r16,r2
   1437c:	84400015 	stw	r17,0(r16)
   14380:	00000406 	br	14394 <_malloc_r+0xf4>
   14384:	80800117 	ldw	r2,4(r16)
   14388:	1c000e1e 	bne	r3,r16,143c4 <_malloc_r+0x124>
   1438c:	00c00074 	movhi	r3,1
   14390:	189e9115 	stw	r2,31300(r3)
   14394:	9009883a 	mov	r4,r18
   14398:	0014ecc0 	call	14ecc <__malloc_unlock>
   1439c:	013ffe04 	movi	r4,-8
   143a0:	808002c4 	addi	r2,r16,11
   143a4:	80c00104 	addi	r3,r16,4
   143a8:	1104703a 	and	r2,r2,r4
   143ac:	10c9c83a 	sub	r4,r2,r3
   143b0:	10ffe526 	beq	r2,r3,14348 <_malloc_r+0xa8>
   143b4:	8121883a 	add	r16,r16,r4
   143b8:	1887c83a 	sub	r3,r3,r2
   143bc:	80c00015 	stw	r3,0(r16)
   143c0:	003fe106 	br	14348 <_malloc_r+0xa8>
   143c4:	18800115 	stw	r2,4(r3)
   143c8:	003ff206 	br	14394 <_malloc_r+0xf4>
   143cc:	8007883a 	mov	r3,r16
   143d0:	84000117 	ldw	r16,4(r16)
   143d4:	003fc506 	br	142ec <_malloc_r+0x4c>
   143d8:	140000c4 	addi	r16,r2,3
   143dc:	00ffff04 	movi	r3,-4
   143e0:	80e0703a 	and	r16,r16,r3
   143e4:	143fe526 	beq	r2,r16,1437c <_malloc_r+0xdc>
   143e8:	808bc83a 	sub	r5,r16,r2
   143ec:	9009883a 	mov	r4,r18
   143f0:	00144900 	call	14490 <_sbrk_r>
   143f4:	10bfffe0 	cmpeqi	r2,r2,-1
   143f8:	103fe026 	beq	r2,zero,1437c <_malloc_r+0xdc>
   143fc:	003fc906 	br	14324 <_malloc_r+0x84>

00014400 <_puts_r>:
   14400:	defffd04 	addi	sp,sp,-12
   14404:	dc000015 	stw	r16,0(sp)
   14408:	2021883a 	mov	r16,r4
   1440c:	2809883a 	mov	r4,r5
   14410:	dfc00215 	stw	ra,8(sp)
   14414:	dc400115 	stw	r17,4(sp)
   14418:	2823883a 	mov	r17,r5
   1441c:	00147d40 	call	147d4 <strlen>
   14420:	81400217 	ldw	r5,8(r16)
   14424:	00c00074 	movhi	r3,1
   14428:	18d1fc04 	addi	r3,r3,18416
   1442c:	28c00115 	stw	r3,4(r5)
   14430:	100f883a 	mov	r7,r2
   14434:	880d883a 	mov	r6,r17
   14438:	8009883a 	mov	r4,r16
   1443c:	00147f00 	call	147f0 <__sfvwrite_small_dev>
   14440:	10ffffe0 	cmpeqi	r3,r2,-1
   14444:	1800091e 	bne	r3,zero,1446c <_puts_r+0x6c>
   14448:	81400217 	ldw	r5,8(r16)
   1444c:	01800074 	movhi	r6,1
   14450:	01c00044 	movi	r7,1
   14454:	28800117 	ldw	r2,4(r5)
   14458:	319bd204 	addi	r6,r6,28488
   1445c:	8009883a 	mov	r4,r16
   14460:	103ee83a 	callr	r2
   14464:	10bfffe0 	cmpeqi	r2,r2,-1
   14468:	0085c83a 	sub	r2,zero,r2
   1446c:	dfc00217 	ldw	ra,8(sp)
   14470:	dc400117 	ldw	r17,4(sp)
   14474:	dc000017 	ldw	r16,0(sp)
   14478:	dec00304 	addi	sp,sp,12
   1447c:	f800283a 	ret

00014480 <puts>:
   14480:	00800074 	movhi	r2,1
   14484:	200b883a 	mov	r5,r4
   14488:	111d2b17 	ldw	r4,29868(r2)
   1448c:	00144001 	jmpi	14400 <_puts_r>

00014490 <_sbrk_r>:
   14490:	defffe04 	addi	sp,sp,-8
   14494:	dc000015 	stw	r16,0(sp)
   14498:	00800074 	movhi	r2,1
   1449c:	2021883a 	mov	r16,r4
   144a0:	2809883a 	mov	r4,r5
   144a4:	dfc00115 	stw	ra,4(sp)
   144a8:	101e9215 	stw	zero,31304(r2)
   144ac:	0014ef00 	call	14ef0 <sbrk>
   144b0:	10ffffd8 	cmpnei	r3,r2,-1
   144b4:	1800041e 	bne	r3,zero,144c8 <_sbrk_r+0x38>
   144b8:	00c00074 	movhi	r3,1
   144bc:	18de9217 	ldw	r3,31304(r3)
   144c0:	18000126 	beq	r3,zero,144c8 <_sbrk_r+0x38>
   144c4:	80c00015 	stw	r3,0(r16)
   144c8:	dfc00117 	ldw	ra,4(sp)
   144cc:	dc000017 	ldw	r16,0(sp)
   144d0:	dec00204 	addi	sp,sp,8
   144d4:	f800283a 	ret

000144d8 <_init_signal_r>:
   144d8:	20800c17 	ldw	r2,48(r4)
   144dc:	1000131e 	bne	r2,zero,1452c <_init_signal_r+0x54>
   144e0:	defffe04 	addi	sp,sp,-8
   144e4:	01402004 	movi	r5,128
   144e8:	dc000015 	stw	r16,0(sp)
   144ec:	dfc00115 	stw	ra,4(sp)
   144f0:	2021883a 	mov	r16,r4
   144f4:	00142a00 	call	142a0 <_malloc_r>
   144f8:	80800c15 	stw	r2,48(r16)
   144fc:	1009883a 	mov	r4,r2
   14500:	10000826 	beq	r2,zero,14524 <_init_signal_r+0x4c>
   14504:	01802004 	movi	r6,128
   14508:	000b883a 	mov	r5,zero
   1450c:	00141800 	call	14180 <memset>
   14510:	0005883a 	mov	r2,zero
   14514:	dfc00117 	ldw	ra,4(sp)
   14518:	dc000017 	ldw	r16,0(sp)
   1451c:	dec00204 	addi	sp,sp,8
   14520:	f800283a 	ret
   14524:	00bfffc4 	movi	r2,-1
   14528:	003ffa06 	br	14514 <_init_signal_r+0x3c>
   1452c:	0005883a 	mov	r2,zero
   14530:	f800283a 	ret

00014534 <_signal_r>:
   14534:	defffc04 	addi	sp,sp,-16
   14538:	dc400115 	stw	r17,4(sp)
   1453c:	dfc00315 	stw	ra,12(sp)
   14540:	dc800215 	stw	r18,8(sp)
   14544:	dc000015 	stw	r16,0(sp)
   14548:	28800830 	cmpltui	r2,r5,32
   1454c:	2023883a 	mov	r17,r4
   14550:	1000041e 	bne	r2,zero,14564 <_signal_r+0x30>
   14554:	00800584 	movi	r2,22
   14558:	20800015 	stw	r2,0(r4)
   1455c:	00bfffc4 	movi	r2,-1
   14560:	00000906 	br	14588 <_signal_r+0x54>
   14564:	20800c17 	ldw	r2,48(r4)
   14568:	2821883a 	mov	r16,r5
   1456c:	3025883a 	mov	r18,r6
   14570:	10000b26 	beq	r2,zero,145a0 <_signal_r+0x6c>
   14574:	89400c17 	ldw	r5,48(r17)
   14578:	802090ba 	slli	r16,r16,2
   1457c:	2c21883a 	add	r16,r5,r16
   14580:	80800017 	ldw	r2,0(r16)
   14584:	84800015 	stw	r18,0(r16)
   14588:	dfc00317 	ldw	ra,12(sp)
   1458c:	dc800217 	ldw	r18,8(sp)
   14590:	dc400117 	ldw	r17,4(sp)
   14594:	dc000017 	ldw	r16,0(sp)
   14598:	dec00404 	addi	sp,sp,16
   1459c:	f800283a 	ret
   145a0:	00144d80 	call	144d8 <_init_signal_r>
   145a4:	103ff326 	beq	r2,zero,14574 <_signal_r+0x40>
   145a8:	003fec06 	br	1455c <_signal_r+0x28>

000145ac <_raise_r>:
   145ac:	defffd04 	addi	sp,sp,-12
   145b0:	dc000015 	stw	r16,0(sp)
   145b4:	dfc00215 	stw	ra,8(sp)
   145b8:	dc400115 	stw	r17,4(sp)
   145bc:	28800830 	cmpltui	r2,r5,32
   145c0:	2021883a 	mov	r16,r4
   145c4:	1000081e 	bne	r2,zero,145e8 <_raise_r+0x3c>
   145c8:	00800584 	movi	r2,22
   145cc:	20800015 	stw	r2,0(r4)
   145d0:	00bfffc4 	movi	r2,-1
   145d4:	dfc00217 	ldw	ra,8(sp)
   145d8:	dc400117 	ldw	r17,4(sp)
   145dc:	dc000017 	ldw	r16,0(sp)
   145e0:	dec00304 	addi	sp,sp,12
   145e4:	f800283a 	ret
   145e8:	20800c17 	ldw	r2,48(r4)
   145ec:	2823883a 	mov	r17,r5
   145f0:	10000426 	beq	r2,zero,14604 <_raise_r+0x58>
   145f4:	280690ba 	slli	r3,r5,2
   145f8:	10c5883a 	add	r2,r2,r3
   145fc:	10c00017 	ldw	r3,0(r2)
   14600:	18000a1e 	bne	r3,zero,1462c <_raise_r+0x80>
   14604:	8009883a 	mov	r4,r16
   14608:	001478c0 	call	1478c <_getpid_r>
   1460c:	880d883a 	mov	r6,r17
   14610:	100b883a 	mov	r5,r2
   14614:	8009883a 	mov	r4,r16
   14618:	dfc00217 	ldw	ra,8(sp)
   1461c:	dc400117 	ldw	r17,4(sp)
   14620:	dc000017 	ldw	r16,0(sp)
   14624:	dec00304 	addi	sp,sp,12
   14628:	00147401 	jmpi	14740 <_kill_r>
   1462c:	19000060 	cmpeqi	r4,r3,1
   14630:	2000091e 	bne	r4,zero,14658 <_raise_r+0xac>
   14634:	193fffd8 	cmpnei	r4,r3,-1
   14638:	2000041e 	bne	r4,zero,1464c <_raise_r+0xa0>
   1463c:	00800584 	movi	r2,22
   14640:	80800015 	stw	r2,0(r16)
   14644:	00800044 	movi	r2,1
   14648:	003fe206 	br	145d4 <_raise_r+0x28>
   1464c:	10000015 	stw	zero,0(r2)
   14650:	2809883a 	mov	r4,r5
   14654:	183ee83a 	callr	r3
   14658:	0005883a 	mov	r2,zero
   1465c:	003fdd06 	br	145d4 <_raise_r+0x28>

00014660 <__sigtramp_r>:
   14660:	28800830 	cmpltui	r2,r5,32
   14664:	1000021e 	bne	r2,zero,14670 <__sigtramp_r+0x10>
   14668:	00bfffc4 	movi	r2,-1
   1466c:	f800283a 	ret
   14670:	20800c17 	ldw	r2,48(r4)
   14674:	defffd04 	addi	sp,sp,-12
   14678:	dc400115 	stw	r17,4(sp)
   1467c:	dc000015 	stw	r16,0(sp)
   14680:	dfc00215 	stw	ra,8(sp)
   14684:	2023883a 	mov	r17,r4
   14688:	2821883a 	mov	r16,r5
   1468c:	10000726 	beq	r2,zero,146ac <__sigtramp_r+0x4c>
   14690:	88800c17 	ldw	r2,48(r17)
   14694:	800690ba 	slli	r3,r16,2
   14698:	10c7883a 	add	r3,r2,r3
   1469c:	18800017 	ldw	r2,0(r3)
   146a0:	10000a1e 	bne	r2,zero,146cc <__sigtramp_r+0x6c>
   146a4:	00800044 	movi	r2,1
   146a8:	00000306 	br	146b8 <__sigtramp_r+0x58>
   146ac:	00144d80 	call	144d8 <_init_signal_r>
   146b0:	103ff726 	beq	r2,zero,14690 <__sigtramp_r+0x30>
   146b4:	00bfffc4 	movi	r2,-1
   146b8:	dfc00217 	ldw	ra,8(sp)
   146bc:	dc400117 	ldw	r17,4(sp)
   146c0:	dc000017 	ldw	r16,0(sp)
   146c4:	dec00304 	addi	sp,sp,12
   146c8:	f800283a 	ret
   146cc:	113fffe0 	cmpeqi	r4,r2,-1
   146d0:	2000071e 	bne	r4,zero,146f0 <__sigtramp_r+0x90>
   146d4:	11000060 	cmpeqi	r4,r2,1
   146d8:	2000071e 	bne	r4,zero,146f8 <__sigtramp_r+0x98>
   146dc:	18000015 	stw	zero,0(r3)
   146e0:	8009883a 	mov	r4,r16
   146e4:	103ee83a 	callr	r2
   146e8:	0005883a 	mov	r2,zero
   146ec:	003ff206 	br	146b8 <__sigtramp_r+0x58>
   146f0:	00800084 	movi	r2,2
   146f4:	003ff006 	br	146b8 <__sigtramp_r+0x58>
   146f8:	008000c4 	movi	r2,3
   146fc:	003fee06 	br	146b8 <__sigtramp_r+0x58>

00014700 <raise>:
   14700:	00800074 	movhi	r2,1
   14704:	200b883a 	mov	r5,r4
   14708:	111d2b17 	ldw	r4,29868(r2)
   1470c:	00145ac1 	jmpi	145ac <_raise_r>

00014710 <signal>:
   14710:	00800074 	movhi	r2,1
   14714:	280d883a 	mov	r6,r5
   14718:	200b883a 	mov	r5,r4
   1471c:	111d2b17 	ldw	r4,29868(r2)
   14720:	00145341 	jmpi	14534 <_signal_r>

00014724 <_init_signal>:
   14724:	00800074 	movhi	r2,1
   14728:	111d2b17 	ldw	r4,29868(r2)
   1472c:	00144d81 	jmpi	144d8 <_init_signal_r>

00014730 <__sigtramp>:
   14730:	00800074 	movhi	r2,1
   14734:	200b883a 	mov	r5,r4
   14738:	111d2b17 	ldw	r4,29868(r2)
   1473c:	00146601 	jmpi	14660 <__sigtramp_r>

00014740 <_kill_r>:
   14740:	defffe04 	addi	sp,sp,-8
   14744:	dc000015 	stw	r16,0(sp)
   14748:	00800074 	movhi	r2,1
   1474c:	2021883a 	mov	r16,r4
   14750:	2809883a 	mov	r4,r5
   14754:	300b883a 	mov	r5,r6
   14758:	dfc00115 	stw	ra,4(sp)
   1475c:	101e9215 	stw	zero,31304(r2)
   14760:	0014c140 	call	14c14 <kill>
   14764:	10ffffd8 	cmpnei	r3,r2,-1
   14768:	1800041e 	bne	r3,zero,1477c <_kill_r+0x3c>
   1476c:	00c00074 	movhi	r3,1
   14770:	18de9217 	ldw	r3,31304(r3)
   14774:	18000126 	beq	r3,zero,1477c <_kill_r+0x3c>
   14778:	80c00015 	stw	r3,0(r16)
   1477c:	dfc00117 	ldw	ra,4(sp)
   14780:	dc000017 	ldw	r16,0(sp)
   14784:	dec00204 	addi	sp,sp,8
   14788:	f800283a 	ret

0001478c <_getpid_r>:
   1478c:	00149201 	jmpi	14920 <getpid>

00014790 <strcmp>:
   14790:	20800003 	ldbu	r2,0(r4)
   14794:	28c00003 	ldbu	r3,0(r5)
   14798:	11803fcc 	andi	r6,r2,255
   1479c:	3180201c 	xori	r6,r6,128
   147a0:	31bfe004 	addi	r6,r6,-128
   147a4:	30000426 	beq	r6,zero,147b8 <strcmp+0x28>
   147a8:	19c03fcc 	andi	r7,r3,255
   147ac:	39c0201c 	xori	r7,r7,128
   147b0:	39ffe004 	addi	r7,r7,-128
   147b4:	31c00426 	beq	r6,r7,147c8 <strcmp+0x38>
   147b8:	18c03fcc 	andi	r3,r3,255
   147bc:	10803fcc 	andi	r2,r2,255
   147c0:	10c5c83a 	sub	r2,r2,r3
   147c4:	f800283a 	ret
   147c8:	21000044 	addi	r4,r4,1
   147cc:	29400044 	addi	r5,r5,1
   147d0:	003fef06 	br	14790 <strcmp>

000147d4 <strlen>:
   147d4:	2005883a 	mov	r2,r4
   147d8:	10c00007 	ldb	r3,0(r2)
   147dc:	1800021e 	bne	r3,zero,147e8 <strlen+0x14>
   147e0:	1105c83a 	sub	r2,r2,r4
   147e4:	f800283a 	ret
   147e8:	10800044 	addi	r2,r2,1
   147ec:	003ffa06 	br	147d8 <strlen+0x4>

000147f0 <__sfvwrite_small_dev>:
   147f0:	2880000b 	ldhu	r2,0(r5)
   147f4:	1080020c 	andi	r2,r2,8
   147f8:	10002526 	beq	r2,zero,14890 <__sfvwrite_small_dev+0xa0>
   147fc:	2880008f 	ldh	r2,2(r5)
   14800:	defffb04 	addi	sp,sp,-20
   14804:	dcc00315 	stw	r19,12(sp)
   14808:	dc800215 	stw	r18,8(sp)
   1480c:	dc400115 	stw	r17,4(sp)
   14810:	dc000015 	stw	r16,0(sp)
   14814:	dfc00415 	stw	ra,16(sp)
   14818:	2027883a 	mov	r19,r4
   1481c:	2821883a 	mov	r16,r5
   14820:	3025883a 	mov	r18,r6
   14824:	3823883a 	mov	r17,r7
   14828:	1000100e 	bge	r2,zero,1486c <__sfvwrite_small_dev+0x7c>
   1482c:	8080000b 	ldhu	r2,0(r16)
   14830:	10801014 	ori	r2,r2,64
   14834:	8080000d 	sth	r2,0(r16)
   14838:	00bfffc4 	movi	r2,-1
   1483c:	00000d06 	br	14874 <__sfvwrite_small_dev+0x84>
   14840:	88810050 	cmplti	r2,r17,1025
   14844:	880f883a 	mov	r7,r17
   14848:	1000011e 	bne	r2,zero,14850 <__sfvwrite_small_dev+0x60>
   1484c:	01c10004 	movi	r7,1024
   14850:	8140008f 	ldh	r5,2(r16)
   14854:	900d883a 	mov	r6,r18
   14858:	9809883a 	mov	r4,r19
   1485c:	00148980 	call	14898 <_write_r>
   14860:	00bff20e 	bge	zero,r2,1482c <__sfvwrite_small_dev+0x3c>
   14864:	88a3c83a 	sub	r17,r17,r2
   14868:	90a5883a 	add	r18,r18,r2
   1486c:	047ff416 	blt	zero,r17,14840 <__sfvwrite_small_dev+0x50>
   14870:	0005883a 	mov	r2,zero
   14874:	dfc00417 	ldw	ra,16(sp)
   14878:	dcc00317 	ldw	r19,12(sp)
   1487c:	dc800217 	ldw	r18,8(sp)
   14880:	dc400117 	ldw	r17,4(sp)
   14884:	dc000017 	ldw	r16,0(sp)
   14888:	dec00504 	addi	sp,sp,20
   1488c:	f800283a 	ret
   14890:	00bfffc4 	movi	r2,-1
   14894:	f800283a 	ret

00014898 <_write_r>:
   14898:	defffe04 	addi	sp,sp,-8
   1489c:	dc000015 	stw	r16,0(sp)
   148a0:	00800074 	movhi	r2,1
   148a4:	2021883a 	mov	r16,r4
   148a8:	2809883a 	mov	r4,r5
   148ac:	300b883a 	mov	r5,r6
   148b0:	380d883a 	mov	r6,r7
   148b4:	dfc00115 	stw	ra,4(sp)
   148b8:	101e9215 	stw	zero,31304(r2)
   148bc:	0014fe40 	call	14fe4 <write>
   148c0:	10ffffd8 	cmpnei	r3,r2,-1
   148c4:	1800041e 	bne	r3,zero,148d8 <_write_r+0x40>
   148c8:	00c00074 	movhi	r3,1
   148cc:	18de9217 	ldw	r3,31304(r3)
   148d0:	18000126 	beq	r3,zero,148d8 <_write_r+0x40>
   148d4:	80c00015 	stw	r3,0(r16)
   148d8:	dfc00117 	ldw	ra,4(sp)
   148dc:	dc000017 	ldw	r16,0(sp)
   148e0:	dec00204 	addi	sp,sp,8
   148e4:	f800283a 	ret

000148e8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   148e8:	defffd04 	addi	sp,sp,-12
   148ec:	df000215 	stw	fp,8(sp)
   148f0:	df000204 	addi	fp,sp,8
   148f4:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   148f8:	0001883a 	nop
   148fc:	e0bffe17 	ldw	r2,-8(fp)
   14900:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   14904:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   14908:	10000226 	beq	r2,zero,14914 <_exit+0x2c>
    ALT_SIM_FAIL();
   1490c:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   14910:	00000106 	br	14918 <_exit+0x30>
    ALT_SIM_PASS();
   14914:	002af0b0 	cmpltui	zero,zero,43970
}
   14918:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1491c:	003fff06 	br	1491c <_exit+0x34>

00014920 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   14920:	deffff04 	addi	sp,sp,-4
   14924:	df000015 	stw	fp,0(sp)
   14928:	d839883a 	mov	fp,sp
  return 0;
   1492c:	0005883a 	mov	r2,zero
}
   14930:	e037883a 	mov	sp,fp
   14934:	df000017 	ldw	fp,0(sp)
   14938:	dec00104 	addi	sp,sp,4
   1493c:	f800283a 	ret

00014940 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14940:	defff904 	addi	sp,sp,-28
   14944:	dfc00615 	stw	ra,24(sp)
   14948:	df000515 	stw	fp,20(sp)
   1494c:	df000504 	addi	fp,sp,20
   14950:	e13fff15 	stw	r4,-4(fp)
   14954:	e17ffe15 	stw	r5,-8(fp)
   14958:	e1bffd15 	stw	r6,-12(fp)
   1495c:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   14960:	e0800217 	ldw	r2,8(fp)
   14964:	d8800015 	stw	r2,0(sp)
   14968:	e1fffc17 	ldw	r7,-16(fp)
   1496c:	e1bffd17 	ldw	r6,-12(fp)
   14970:	e17ffe17 	ldw	r5,-8(fp)
   14974:	e13fff17 	ldw	r4,-4(fp)
   14978:	0014af00 	call	14af0 <alt_iic_isr_register>
}  
   1497c:	e037883a 	mov	sp,fp
   14980:	dfc00117 	ldw	ra,4(sp)
   14984:	df000017 	ldw	fp,0(sp)
   14988:	dec00204 	addi	sp,sp,8
   1498c:	f800283a 	ret

00014990 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   14990:	defff904 	addi	sp,sp,-28
   14994:	df000615 	stw	fp,24(sp)
   14998:	df000604 	addi	fp,sp,24
   1499c:	e13ffb15 	stw	r4,-20(fp)
   149a0:	e17ffa15 	stw	r5,-24(fp)
   149a4:	e0bffa17 	ldw	r2,-24(fp)
   149a8:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   149ac:	0005303a 	rdctl	r2,status
   149b0:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   149b4:	e0fffe17 	ldw	r3,-8(fp)
   149b8:	00bfff84 	movi	r2,-2
   149bc:	1884703a 	and	r2,r3,r2
   149c0:	1001703a 	wrctl	status,r2
  return context;
   149c4:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   149c8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   149cc:	00c00044 	movi	r3,1
   149d0:	e0bfff17 	ldw	r2,-4(fp)
   149d4:	1884983a 	sll	r2,r3,r2
   149d8:	1007883a 	mov	r3,r2
   149dc:	d0a1f917 	ldw	r2,-30748(gp)
   149e0:	1884b03a 	or	r2,r3,r2
   149e4:	d0a1f915 	stw	r2,-30748(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   149e8:	d0a1f917 	ldw	r2,-30748(gp)
   149ec:	100170fa 	wrctl	ienable,r2
   149f0:	e0bffd17 	ldw	r2,-12(fp)
   149f4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   149f8:	e0bffc17 	ldw	r2,-16(fp)
   149fc:	1001703a 	wrctl	status,r2
}
   14a00:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
   14a04:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   14a08:	e037883a 	mov	sp,fp
   14a0c:	df000017 	ldw	fp,0(sp)
   14a10:	dec00104 	addi	sp,sp,4
   14a14:	f800283a 	ret

00014a18 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   14a18:	defff904 	addi	sp,sp,-28
   14a1c:	df000615 	stw	fp,24(sp)
   14a20:	df000604 	addi	fp,sp,24
   14a24:	e13ffb15 	stw	r4,-20(fp)
   14a28:	e17ffa15 	stw	r5,-24(fp)
   14a2c:	e0bffa17 	ldw	r2,-24(fp)
   14a30:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   14a34:	0005303a 	rdctl	r2,status
   14a38:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14a3c:	e0fffe17 	ldw	r3,-8(fp)
   14a40:	00bfff84 	movi	r2,-2
   14a44:	1884703a 	and	r2,r3,r2
   14a48:	1001703a 	wrctl	status,r2
  return context;
   14a4c:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
   14a50:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
   14a54:	00c00044 	movi	r3,1
   14a58:	e0bfff17 	ldw	r2,-4(fp)
   14a5c:	1884983a 	sll	r2,r3,r2
   14a60:	0084303a 	nor	r2,zero,r2
   14a64:	1007883a 	mov	r3,r2
   14a68:	d0a1f917 	ldw	r2,-30748(gp)
   14a6c:	1884703a 	and	r2,r3,r2
   14a70:	d0a1f915 	stw	r2,-30748(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14a74:	d0a1f917 	ldw	r2,-30748(gp)
   14a78:	100170fa 	wrctl	ienable,r2
   14a7c:	e0bffd17 	ldw	r2,-12(fp)
   14a80:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   14a84:	e0bffc17 	ldw	r2,-16(fp)
   14a88:	1001703a 	wrctl	status,r2
}
   14a8c:	0001883a 	nop
  return 0;
   14a90:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   14a94:	e037883a 	mov	sp,fp
   14a98:	df000017 	ldw	fp,0(sp)
   14a9c:	dec00104 	addi	sp,sp,4
   14aa0:	f800283a 	ret

00014aa4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   14aa4:	defffc04 	addi	sp,sp,-16
   14aa8:	df000315 	stw	fp,12(sp)
   14aac:	df000304 	addi	fp,sp,12
   14ab0:	e13ffe15 	stw	r4,-8(fp)
   14ab4:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   14ab8:	000530fa 	rdctl	r2,ienable
   14abc:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   14ac0:	00c00044 	movi	r3,1
   14ac4:	e0bffd17 	ldw	r2,-12(fp)
   14ac8:	1884983a 	sll	r2,r3,r2
   14acc:	1007883a 	mov	r3,r2
   14ad0:	e0bfff17 	ldw	r2,-4(fp)
   14ad4:	1884703a 	and	r2,r3,r2
   14ad8:	1004c03a 	cmpne	r2,r2,zero
   14adc:	10803fcc 	andi	r2,r2,255
}
   14ae0:	e037883a 	mov	sp,fp
   14ae4:	df000017 	ldw	fp,0(sp)
   14ae8:	dec00104 	addi	sp,sp,4
   14aec:	f800283a 	ret

00014af0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14af0:	defff504 	addi	sp,sp,-44
   14af4:	dfc00a15 	stw	ra,40(sp)
   14af8:	df000915 	stw	fp,36(sp)
   14afc:	df000904 	addi	fp,sp,36
   14b00:	e13ffa15 	stw	r4,-24(fp)
   14b04:	e17ff915 	stw	r5,-28(fp)
   14b08:	e1bff815 	stw	r6,-32(fp)
   14b0c:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
   14b10:	00bffa84 	movi	r2,-22
   14b14:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   14b18:	e0bff917 	ldw	r2,-28(fp)
   14b1c:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   14b20:	e0bffe17 	ldw	r2,-8(fp)
   14b24:	10800808 	cmpgei	r2,r2,32
   14b28:	1000251e 	bne	r2,zero,14bc0 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
   14b2c:	0005303a 	rdctl	r2,status
   14b30:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14b34:	e0fffc17 	ldw	r3,-16(fp)
   14b38:	00bfff84 	movi	r2,-2
   14b3c:	1884703a 	and	r2,r3,r2
   14b40:	1001703a 	wrctl	status,r2
  return context;
   14b44:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   14b48:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
   14b4c:	e0bffe17 	ldw	r2,-8(fp)
   14b50:	100890fa 	slli	r4,r2,3
   14b54:	e0fff817 	ldw	r3,-32(fp)
   14b58:	00800074 	movhi	r2,1
   14b5c:	2085883a 	add	r2,r4,r2
   14b60:	10deaa15 	stw	r3,31400(r2)
    alt_irq[id].context = isr_context;
   14b64:	e0bffe17 	ldw	r2,-8(fp)
   14b68:	100890fa 	slli	r4,r2,3
   14b6c:	e0fff717 	ldw	r3,-36(fp)
   14b70:	00800074 	movhi	r2,1
   14b74:	2085883a 	add	r2,r4,r2
   14b78:	10deab15 	stw	r3,31404(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   14b7c:	e0bff817 	ldw	r2,-32(fp)
   14b80:	10000526 	beq	r2,zero,14b98 <alt_iic_isr_register+0xa8>
   14b84:	e0bffe17 	ldw	r2,-8(fp)
   14b88:	100b883a 	mov	r5,r2
   14b8c:	e13ffa17 	ldw	r4,-24(fp)
   14b90:	00149900 	call	14990 <alt_ic_irq_enable>
   14b94:	00000406 	br	14ba8 <alt_iic_isr_register+0xb8>
   14b98:	e0bffe17 	ldw	r2,-8(fp)
   14b9c:	100b883a 	mov	r5,r2
   14ba0:	e13ffa17 	ldw	r4,-24(fp)
   14ba4:	0014a180 	call	14a18 <alt_ic_irq_disable>
   14ba8:	e0bfff15 	stw	r2,-4(fp)
   14bac:	e0bffd17 	ldw	r2,-12(fp)
   14bb0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   14bb4:	e0bffb17 	ldw	r2,-20(fp)
   14bb8:	1001703a 	wrctl	status,r2
}
   14bbc:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
   14bc0:	e0bfff17 	ldw	r2,-4(fp)
}
   14bc4:	e037883a 	mov	sp,fp
   14bc8:	dfc00117 	ldw	ra,4(sp)
   14bcc:	df000017 	ldw	fp,0(sp)
   14bd0:	dec00204 	addi	sp,sp,8
   14bd4:	f800283a 	ret

00014bd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14bd8:	defffe04 	addi	sp,sp,-8
   14bdc:	dfc00115 	stw	ra,4(sp)
   14be0:	df000015 	stw	fp,0(sp)
   14be4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14be8:	d0a09917 	ldw	r2,-32156(gp)
   14bec:	10000326 	beq	r2,zero,14bfc <alt_get_errno+0x24>
   14bf0:	d0a09917 	ldw	r2,-32156(gp)
   14bf4:	103ee83a 	callr	r2
   14bf8:	00000106 	br	14c00 <alt_get_errno+0x28>
   14bfc:	d0a1f804 	addi	r2,gp,-30752
}
   14c00:	e037883a 	mov	sp,fp
   14c04:	dfc00117 	ldw	ra,4(sp)
   14c08:	df000017 	ldw	fp,0(sp)
   14c0c:	dec00204 	addi	sp,sp,8
   14c10:	f800283a 	ret

00014c14 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   14c14:	defffb04 	addi	sp,sp,-20
   14c18:	dfc00415 	stw	ra,16(sp)
   14c1c:	df000315 	stw	fp,12(sp)
   14c20:	df000304 	addi	fp,sp,12
   14c24:	e13ffe15 	stw	r4,-8(fp)
   14c28:	e17ffd15 	stw	r5,-12(fp)
  int status = 0;
   14c2c:	e03fff15 	stw	zero,-4(fp)

  if (pid <= 0)
   14c30:	e0bffe17 	ldw	r2,-8(fp)
   14c34:	00802e16 	blt	zero,r2,14cf0 <kill+0xdc>
   14c38:	e0bffd17 	ldw	r2,-12(fp)
   14c3c:	10800828 	cmpgeui	r2,r2,32
   14c40:	1000281e 	bne	r2,zero,14ce4 <kill+0xd0>
   14c44:	e0bffd17 	ldw	r2,-12(fp)
   14c48:	100690ba 	slli	r3,r2,2
   14c4c:	00800074 	movhi	r2,1
   14c50:	1885883a 	add	r2,r3,r2
   14c54:	10931717 	ldw	r2,19548(r2)
   14c58:	1000683a 	jmp	r2
   14c5c:	00014d04 	movi	zero,1332
   14c60:	00014ce4 	muli	zero,zero,1331
   14c64:	00014ce4 	muli	zero,zero,1331
   14c68:	00014cdc 	xori	zero,zero,1331
   14c6c:	00014cdc 	xori	zero,zero,1331
   14c70:	00014cdc 	xori	zero,zero,1331
   14c74:	00014cdc 	xori	zero,zero,1331
   14c78:	00014ce4 	muli	zero,zero,1331
   14c7c:	00014cdc 	xori	zero,zero,1331
   14c80:	00014cdc 	xori	zero,zero,1331
   14c84:	00014cdc 	xori	zero,zero,1331
   14c88:	00014cdc 	xori	zero,zero,1331
   14c8c:	00014cdc 	xori	zero,zero,1331
   14c90:	00014cdc 	xori	zero,zero,1331
   14c94:	00014cdc 	xori	zero,zero,1331
   14c98:	00014cdc 	xori	zero,zero,1331
   14c9c:	00014d04 	movi	zero,1332
   14ca0:	00014ce4 	muli	zero,zero,1331
   14ca4:	00014ce4 	muli	zero,zero,1331
   14ca8:	00014ce4 	muli	zero,zero,1331
   14cac:	00014d04 	movi	zero,1332
   14cb0:	00014ce4 	muli	zero,zero,1331
   14cb4:	00014ce4 	muli	zero,zero,1331
   14cb8:	00014cdc 	xori	zero,zero,1331
   14cbc:	00014cdc 	xori	zero,zero,1331
   14cc0:	00014cdc 	xori	zero,zero,1331
   14cc4:	00014cdc 	xori	zero,zero,1331
   14cc8:	00014cdc 	xori	zero,zero,1331
   14ccc:	00014ce4 	muli	zero,zero,1331
   14cd0:	00014ce4 	muli	zero,zero,1331
   14cd4:	00014cdc 	xori	zero,zero,1331
   14cd8:	00014cdc 	xori	zero,zero,1331
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   14cdc:	0009883a 	mov	r4,zero
   14ce0:	00148e80 	call	148e8 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   14ce4:	00800584 	movi	r2,22
   14ce8:	e0bfff15 	stw	r2,-4(fp)
   14cec:	00000606 	br	14d08 <kill+0xf4>
    }
  }

  else if (pid > 0)
   14cf0:	e0bffe17 	ldw	r2,-8(fp)
   14cf4:	0080040e 	bge	zero,r2,14d08 <kill+0xf4>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   14cf8:	008000c4 	movi	r2,3
   14cfc:	e0bfff15 	stw	r2,-4(fp)
   14d00:	00000106 	br	14d08 <kill+0xf4>
      break;
   14d04:	0001883a 	nop
  }

  if (status)
   14d08:	e0bfff17 	ldw	r2,-4(fp)
   14d0c:	10000626 	beq	r2,zero,14d28 <kill+0x114>
  {
    ALT_ERRNO = status;
   14d10:	0014bd80 	call	14bd8 <alt_get_errno>
   14d14:	1007883a 	mov	r3,r2
   14d18:	e0bfff17 	ldw	r2,-4(fp)
   14d1c:	18800015 	stw	r2,0(r3)
    return -1;
   14d20:	00bfffc4 	movi	r2,-1
   14d24:	00000106 	br	14d2c <kill+0x118>
  }

  return 0;
   14d28:	0005883a 	mov	r2,zero
}
   14d2c:	e037883a 	mov	sp,fp
   14d30:	dfc00117 	ldw	ra,4(sp)
   14d34:	df000017 	ldw	fp,0(sp)
   14d38:	dec00204 	addi	sp,sp,8
   14d3c:	f800283a 	ret

00014d40 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   14d40:	defffc04 	addi	sp,sp,-16
   14d44:	df000315 	stw	fp,12(sp)
   14d48:	df000304 	addi	fp,sp,12
   14d4c:	e13fff15 	stw	r4,-4(fp)
   14d50:	e17ffe15 	stw	r5,-8(fp)
   14d54:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
   14d58:	e0fffe17 	ldw	r3,-8(fp)
   14d5c:	e0bfff17 	ldw	r2,-4(fp)
   14d60:	18800c26 	beq	r3,r2,14d94 <alt_load_section+0x54>
  {
    while( to != end )
   14d64:	00000806 	br	14d88 <alt_load_section+0x48>
    {
      *to++ = *from++;
   14d68:	e0ffff17 	ldw	r3,-4(fp)
   14d6c:	18800104 	addi	r2,r3,4
   14d70:	e0bfff15 	stw	r2,-4(fp)
   14d74:	e0bffe17 	ldw	r2,-8(fp)
   14d78:	11000104 	addi	r4,r2,4
   14d7c:	e13ffe15 	stw	r4,-8(fp)
   14d80:	18c00017 	ldw	r3,0(r3)
   14d84:	10c00015 	stw	r3,0(r2)
    while( to != end )
   14d88:	e0fffe17 	ldw	r3,-8(fp)
   14d8c:	e0bffd17 	ldw	r2,-12(fp)
   14d90:	18bff51e 	bne	r3,r2,14d68 <alt_load_section+0x28>
    }
  }
}
   14d94:	0001883a 	nop
   14d98:	e037883a 	mov	sp,fp
   14d9c:	df000017 	ldw	fp,0(sp)
   14da0:	dec00104 	addi	sp,sp,4
   14da4:	f800283a 	ret

00014da8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   14da8:	defffe04 	addi	sp,sp,-8
   14dac:	dfc00115 	stw	ra,4(sp)
   14db0:	df000015 	stw	fp,0(sp)
   14db4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   14db8:	01800074 	movhi	r6,1
   14dbc:	319d3604 	addi	r6,r6,29912
   14dc0:	01400074 	movhi	r5,1
   14dc4:	295be104 	addi	r5,r5,28548
   14dc8:	01000074 	movhi	r4,1
   14dcc:	211d3604 	addi	r4,r4,29912
   14dd0:	0014d400 	call	14d40 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   14dd4:	01800074 	movhi	r6,1
   14dd8:	31808904 	addi	r6,r6,548
   14ddc:	01400074 	movhi	r5,1
   14de0:	29400804 	addi	r5,r5,32
   14de4:	01000074 	movhi	r4,1
   14de8:	21000804 	addi	r4,r4,32
   14dec:	0014d400 	call	14d40 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   14df0:	01800074 	movhi	r6,1
   14df4:	319be104 	addi	r6,r6,28548
   14df8:	01400074 	movhi	r5,1
   14dfc:	2959bf04 	addi	r5,r5,26364
   14e00:	01000074 	movhi	r4,1
   14e04:	2119bf04 	addi	r4,r4,26364
   14e08:	0014d400 	call	14d40 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   14e0c:	00158e80 	call	158e8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   14e10:	0015ae00 	call	15ae0 <alt_icache_flush_all>
}
   14e14:	0001883a 	nop
   14e18:	e037883a 	mov	sp,fp
   14e1c:	dfc00117 	ldw	ra,4(sp)
   14e20:	df000017 	ldw	fp,0(sp)
   14e24:	dec00204 	addi	sp,sp,8
   14e28:	f800283a 	ret

00014e2c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   14e2c:	defffd04 	addi	sp,sp,-12
   14e30:	dfc00215 	stw	ra,8(sp)
   14e34:	df000115 	stw	fp,4(sp)
   14e38:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   14e3c:	0009883a 	mov	r4,zero
   14e40:	001511c0 	call	1511c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   14e44:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   14e48:	00151580 	call	15158 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   14e4c:	01800074 	movhi	r6,1
   14e50:	319bd304 	addi	r6,r6,28492
   14e54:	01400074 	movhi	r5,1
   14e58:	295bd304 	addi	r5,r5,28492
   14e5c:	01000074 	movhi	r4,1
   14e60:	211bd304 	addi	r4,r4,28492
   14e64:	0015c6c0 	call	15c6c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   14e68:	0015a180 	call	15a18 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   14e6c:	01000074 	movhi	r4,1
   14e70:	21169f04 	addi	r4,r4,23164
   14e74:	00163f00 	call	163f0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   14e78:	d0a1fa17 	ldw	r2,-30744(gp)
   14e7c:	d0e1fb17 	ldw	r3,-30740(gp)
   14e80:	d121fc17 	ldw	r4,-30736(gp)
   14e84:	200d883a 	mov	r6,r4
   14e88:	180b883a 	mov	r5,r3
   14e8c:	1009883a 	mov	r4,r2
   14e90:	00103ec0 	call	103ec <main>
   14e94:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   14e98:	01000044 	movi	r4,1
   14e9c:	001580c0 	call	1580c <close>
  exit (result);
   14ea0:	e13fff17 	ldw	r4,-4(fp)
   14ea4:	00164040 	call	16404 <exit>

00014ea8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   14ea8:	defffe04 	addi	sp,sp,-8
   14eac:	df000115 	stw	fp,4(sp)
   14eb0:	df000104 	addi	fp,sp,4
   14eb4:	e13fff15 	stw	r4,-4(fp)
}
   14eb8:	0001883a 	nop
   14ebc:	e037883a 	mov	sp,fp
   14ec0:	df000017 	ldw	fp,0(sp)
   14ec4:	dec00104 	addi	sp,sp,4
   14ec8:	f800283a 	ret

00014ecc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   14ecc:	defffe04 	addi	sp,sp,-8
   14ed0:	df000115 	stw	fp,4(sp)
   14ed4:	df000104 	addi	fp,sp,4
   14ed8:	e13fff15 	stw	r4,-4(fp)
}
   14edc:	0001883a 	nop
   14ee0:	e037883a 	mov	sp,fp
   14ee4:	df000017 	ldw	fp,0(sp)
   14ee8:	dec00104 	addi	sp,sp,4
   14eec:	f800283a 	ret

00014ef0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   14ef0:	defff904 	addi	sp,sp,-28
   14ef4:	df000615 	stw	fp,24(sp)
   14ef8:	df000604 	addi	fp,sp,24
   14efc:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
   14f00:	0005303a 	rdctl	r2,status
   14f04:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14f08:	e0fffd17 	ldw	r3,-12(fp)
   14f0c:	00bfff84 	movi	r2,-2
   14f10:	1884703a 	and	r2,r3,r2
   14f14:	1001703a 	wrctl	status,r2
  return context;
   14f18:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   14f1c:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   14f20:	d0a09317 	ldw	r2,-32180(gp)
   14f24:	10c000c4 	addi	r3,r2,3
   14f28:	00bfff04 	movi	r2,-4
   14f2c:	1884703a 	and	r2,r3,r2
   14f30:	d0a09315 	stw	r2,-32180(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   14f34:	d0e09317 	ldw	r3,-32180(gp)
   14f38:	e0bffa17 	ldw	r2,-24(fp)
   14f3c:	1887883a 	add	r3,r3,r2
   14f40:	008000b4 	movhi	r2,2
   14f44:	10a80004 	addi	r2,r2,-24576
   14f48:	10c0072e 	bgeu	r2,r3,14f68 <sbrk+0x78>
   14f4c:	e0bfff17 	ldw	r2,-4(fp)
   14f50:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   14f54:	e0bffc17 	ldw	r2,-16(fp)
   14f58:	1001703a 	wrctl	status,r2
}
   14f5c:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   14f60:	00bfffc4 	movi	r2,-1
   14f64:	00000c06 	br	14f98 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   14f68:	d0a09317 	ldw	r2,-32180(gp)
   14f6c:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
   14f70:	d0e09317 	ldw	r3,-32180(gp)
   14f74:	e0bffa17 	ldw	r2,-24(fp)
   14f78:	1885883a 	add	r2,r3,r2
   14f7c:	d0a09315 	stw	r2,-32180(gp)
   14f80:	e0bfff17 	ldw	r2,-4(fp)
   14f84:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   14f88:	e0bffb17 	ldw	r2,-20(fp)
   14f8c:	1001703a 	wrctl	status,r2
}
   14f90:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   14f94:	e0bffe17 	ldw	r2,-8(fp)
} 
   14f98:	e037883a 	mov	sp,fp
   14f9c:	df000017 	ldw	fp,0(sp)
   14fa0:	dec00104 	addi	sp,sp,4
   14fa4:	f800283a 	ret

00014fa8 <alt_get_errno>:
{
   14fa8:	defffe04 	addi	sp,sp,-8
   14fac:	dfc00115 	stw	ra,4(sp)
   14fb0:	df000015 	stw	fp,0(sp)
   14fb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14fb8:	d0a09917 	ldw	r2,-32156(gp)
   14fbc:	10000326 	beq	r2,zero,14fcc <alt_get_errno+0x24>
   14fc0:	d0a09917 	ldw	r2,-32156(gp)
   14fc4:	103ee83a 	callr	r2
   14fc8:	00000106 	br	14fd0 <alt_get_errno+0x28>
   14fcc:	d0a1f804 	addi	r2,gp,-30752
}
   14fd0:	e037883a 	mov	sp,fp
   14fd4:	dfc00117 	ldw	ra,4(sp)
   14fd8:	df000017 	ldw	fp,0(sp)
   14fdc:	dec00204 	addi	sp,sp,8
   14fe0:	f800283a 	ret

00014fe4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   14fe4:	defff904 	addi	sp,sp,-28
   14fe8:	dfc00615 	stw	ra,24(sp)
   14fec:	df000515 	stw	fp,20(sp)
   14ff0:	df000504 	addi	fp,sp,20
   14ff4:	e13ffd15 	stw	r4,-12(fp)
   14ff8:	e17ffc15 	stw	r5,-16(fp)
   14ffc:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   15000:	e0bffd17 	ldw	r2,-12(fp)
   15004:	10000916 	blt	r2,zero,1502c <write+0x48>
   15008:	e0fffd17 	ldw	r3,-12(fp)
   1500c:	1805883a 	mov	r2,r3
   15010:	1085883a 	add	r2,r2,r2
   15014:	10c5883a 	add	r2,r2,r3
   15018:	100490ba 	slli	r2,r2,2
   1501c:	00c00074 	movhi	r3,1
   15020:	18dc3a04 	addi	r3,r3,28904
   15024:	10c5883a 	add	r2,r2,r3
   15028:	00000106 	br	15030 <write+0x4c>
   1502c:	0005883a 	mov	r2,zero
   15030:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   15034:	e0bfff17 	ldw	r2,-4(fp)
   15038:	10002126 	beq	r2,zero,150c0 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1503c:	e0bfff17 	ldw	r2,-4(fp)
   15040:	10800217 	ldw	r2,8(r2)
   15044:	108000cc 	andi	r2,r2,3
   15048:	10001826 	beq	r2,zero,150ac <write+0xc8>
   1504c:	e0bfff17 	ldw	r2,-4(fp)
   15050:	10800017 	ldw	r2,0(r2)
   15054:	10800617 	ldw	r2,24(r2)
   15058:	10001426 	beq	r2,zero,150ac <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1505c:	e0bfff17 	ldw	r2,-4(fp)
   15060:	10800017 	ldw	r2,0(r2)
   15064:	10800617 	ldw	r2,24(r2)
   15068:	e0fffb17 	ldw	r3,-20(fp)
   1506c:	180d883a 	mov	r6,r3
   15070:	e17ffc17 	ldw	r5,-16(fp)
   15074:	e13fff17 	ldw	r4,-4(fp)
   15078:	103ee83a 	callr	r2
   1507c:	e0bffe15 	stw	r2,-8(fp)
   15080:	e0bffe17 	ldw	r2,-8(fp)
   15084:	1000070e 	bge	r2,zero,150a4 <write+0xc0>
      {
        ALT_ERRNO = -rval;
   15088:	0014fa80 	call	14fa8 <alt_get_errno>
   1508c:	1007883a 	mov	r3,r2
   15090:	e0bffe17 	ldw	r2,-8(fp)
   15094:	0085c83a 	sub	r2,zero,r2
   15098:	18800015 	stw	r2,0(r3)
        return -1;
   1509c:	00bfffc4 	movi	r2,-1
   150a0:	00000c06 	br	150d4 <write+0xf0>
      }
      return rval;
   150a4:	e0bffe17 	ldw	r2,-8(fp)
   150a8:	00000a06 	br	150d4 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
   150ac:	0014fa80 	call	14fa8 <alt_get_errno>
   150b0:	1007883a 	mov	r3,r2
   150b4:	00800344 	movi	r2,13
   150b8:	18800015 	stw	r2,0(r3)
   150bc:	00000406 	br	150d0 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   150c0:	0014fa80 	call	14fa8 <alt_get_errno>
   150c4:	1007883a 	mov	r3,r2
   150c8:	00801444 	movi	r2,81
   150cc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   150d0:	00bfffc4 	movi	r2,-1
}
   150d4:	e037883a 	mov	sp,fp
   150d8:	dfc00117 	ldw	ra,4(sp)
   150dc:	df000017 	ldw	fp,0(sp)
   150e0:	dec00204 	addi	sp,sp,8
   150e4:	f800283a 	ret

000150e8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   150e8:	defffd04 	addi	sp,sp,-12
   150ec:	dfc00215 	stw	ra,8(sp)
   150f0:	df000115 	stw	fp,4(sp)
   150f4:	df000104 	addi	fp,sp,4
   150f8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   150fc:	d1609604 	addi	r5,gp,-32168
   15100:	e13fff17 	ldw	r4,-4(fp)
   15104:	00159700 	call	15970 <alt_dev_llist_insert>
}
   15108:	e037883a 	mov	sp,fp
   1510c:	dfc00117 	ldw	ra,4(sp)
   15110:	df000017 	ldw	fp,0(sp)
   15114:	dec00204 	addi	sp,sp,8
   15118:	f800283a 	ret

0001511c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1511c:	defffd04 	addi	sp,sp,-12
   15120:	dfc00215 	stw	ra,8(sp)
   15124:	df000115 	stw	fp,4(sp)
   15128:	df000104 	addi	fp,sp,4
   1512c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   15130:	001617c0 	call	1617c <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   15134:	00800044 	movi	r2,1
   15138:	1001703a 	wrctl	status,r2
}
   1513c:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
   15140:	0001883a 	nop
   15144:	e037883a 	mov	sp,fp
   15148:	dfc00117 	ldw	ra,4(sp)
   1514c:	df000017 	ldw	fp,0(sp)
   15150:	dec00204 	addi	sp,sp,8
   15154:	f800283a 	ret

00015158 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   15158:	defffe04 	addi	sp,sp,-8
   1515c:	dfc00115 	stw	ra,4(sp)
   15160:	df000015 	stw	fp,0(sp)
   15164:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
   15168:	01c0fa04 	movi	r7,1000
   1516c:	01800044 	movi	r6,1
   15170:	000b883a 	mov	r5,zero
   15174:	010000b4 	movhi	r4,2
   15178:	210a0804 	addi	r4,r4,10272
   1517c:	00154700 	call	15470 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   15180:	01000074 	movhi	r4,1
   15184:	211c1a04 	addi	r4,r4,28776
   15188:	00150e80 	call	150e8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   1518c:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
   15190:	01000074 	movhi	r4,1
   15194:	211c2504 	addi	r4,r4,28820
   15198:	00150e80 	call	150e8 <alt_dev_reg>
}
   1519c:	0001883a 	nop
   151a0:	e037883a 	mov	sp,fp
   151a4:	dfc00117 	ldw	ra,4(sp)
   151a8:	df000017 	ldw	fp,0(sp)
   151ac:	dec00204 	addi	sp,sp,8
   151b0:	f800283a 	ret

000151b4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   151b4:	defffa04 	addi	sp,sp,-24
   151b8:	dfc00515 	stw	ra,20(sp)
   151bc:	df000415 	stw	fp,16(sp)
   151c0:	df000404 	addi	fp,sp,16
   151c4:	e13ffe15 	stw	r4,-8(fp)
   151c8:	e17ffd15 	stw	r5,-12(fp)
   151cc:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   151d0:	e0bffe17 	ldw	r2,-8(fp)
   151d4:	10800017 	ldw	r2,0(r2)
   151d8:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   151dc:	e0bfff17 	ldw	r2,-4(fp)
   151e0:	10c00a04 	addi	r3,r2,40
   151e4:	e0bffe17 	ldw	r2,-8(fp)
   151e8:	10800217 	ldw	r2,8(r2)
   151ec:	100f883a 	mov	r7,r2
   151f0:	e1bffc17 	ldw	r6,-16(fp)
   151f4:	e17ffd17 	ldw	r5,-12(fp)
   151f8:	1809883a 	mov	r4,r3
   151fc:	00152740 	call	15274 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   15200:	e037883a 	mov	sp,fp
   15204:	dfc00117 	ldw	ra,4(sp)
   15208:	df000017 	ldw	fp,0(sp)
   1520c:	dec00204 	addi	sp,sp,8
   15210:	f800283a 	ret

00015214 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   15214:	defffa04 	addi	sp,sp,-24
   15218:	dfc00515 	stw	ra,20(sp)
   1521c:	df000415 	stw	fp,16(sp)
   15220:	df000404 	addi	fp,sp,16
   15224:	e13ffe15 	stw	r4,-8(fp)
   15228:	e17ffd15 	stw	r5,-12(fp)
   1522c:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   15230:	e0bffe17 	ldw	r2,-8(fp)
   15234:	10800017 	ldw	r2,0(r2)
   15238:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1523c:	e0bfff17 	ldw	r2,-4(fp)
   15240:	10c00a04 	addi	r3,r2,40
   15244:	e0bffe17 	ldw	r2,-8(fp)
   15248:	10800217 	ldw	r2,8(r2)
   1524c:	100f883a 	mov	r7,r2
   15250:	e1bffc17 	ldw	r6,-16(fp)
   15254:	e17ffd17 	ldw	r5,-12(fp)
   15258:	1809883a 	mov	r4,r3
   1525c:	00153600 	call	15360 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   15260:	e037883a 	mov	sp,fp
   15264:	dfc00117 	ldw	ra,4(sp)
   15268:	df000017 	ldw	fp,0(sp)
   1526c:	dec00204 	addi	sp,sp,8
   15270:	f800283a 	ret

00015274 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   15274:	defff704 	addi	sp,sp,-36
   15278:	df000815 	stw	fp,32(sp)
   1527c:	df000804 	addi	fp,sp,32
   15280:	e13ffb15 	stw	r4,-20(fp)
   15284:	e17ffa15 	stw	r5,-24(fp)
   15288:	e1bff915 	stw	r6,-28(fp)
   1528c:	e1fff815 	stw	r7,-32(fp)
  unsigned int base = sp->base;
   15290:	e0bffb17 	ldw	r2,-20(fp)
   15294:	10800017 	ldw	r2,0(r2)
   15298:	e0bffe15 	stw	r2,-8(fp)

  char * ptr = buffer;
   1529c:	e0bffa17 	ldw	r2,-24(fp)
   152a0:	e0bfff15 	stw	r2,-4(fp)
  char * end = buffer + space;
   152a4:	e0bff917 	ldw	r2,-28(fp)
   152a8:	e0fffa17 	ldw	r3,-24(fp)
   152ac:	1885883a 	add	r2,r3,r2
   152b0:	e0bffd15 	stw	r2,-12(fp)

  while (ptr < end)
   152b4:	00001206 	br	15300 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   152b8:	e0bffe17 	ldw	r2,-8(fp)
   152bc:	10800037 	ldwio	r2,0(r2)
   152c0:	e0bffc15 	stw	r2,-16(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   152c4:	e0bffc17 	ldw	r2,-16(fp)
   152c8:	10a0000c 	andi	r2,r2,32768
   152cc:	10000626 	beq	r2,zero,152e8 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   152d0:	e0bfff17 	ldw	r2,-4(fp)
   152d4:	10c00044 	addi	r3,r2,1
   152d8:	e0ffff15 	stw	r3,-4(fp)
   152dc:	e0fffc17 	ldw	r3,-16(fp)
   152e0:	10c00005 	stb	r3,0(r2)
   152e4:	00000606 	br	15300 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   152e8:	e0ffff17 	ldw	r3,-4(fp)
   152ec:	e0bffa17 	ldw	r2,-24(fp)
   152f0:	1880071e 	bne	r3,r2,15310 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   152f4:	e0bff817 	ldw	r2,-32(fp)
   152f8:	1090000c 	andi	r2,r2,16384
   152fc:	1000061e 	bne	r2,zero,15318 <altera_avalon_jtag_uart_read+0xa4>
  while (ptr < end)
   15300:	e0ffff17 	ldw	r3,-4(fp)
   15304:	e0bffd17 	ldw	r2,-12(fp)
   15308:	18bfeb36 	bltu	r3,r2,152b8 <altera_avalon_jtag_uart_read+0x44>
   1530c:	00000306 	br	1531c <altera_avalon_jtag_uart_read+0xa8>
      break;
   15310:	0001883a 	nop
   15314:	00000106 	br	1531c <altera_avalon_jtag_uart_read+0xa8>
      break;   
   15318:	0001883a 	nop
    
  }

  if (ptr != buffer)
   1531c:	e0ffff17 	ldw	r3,-4(fp)
   15320:	e0bffa17 	ldw	r2,-24(fp)
   15324:	18800426 	beq	r3,r2,15338 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   15328:	e0ffff17 	ldw	r3,-4(fp)
   1532c:	e0bffa17 	ldw	r2,-24(fp)
   15330:	1885c83a 	sub	r2,r3,r2
   15334:	00000606 	br	15350 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   15338:	e0bff817 	ldw	r2,-32(fp)
   1533c:	1090000c 	andi	r2,r2,16384
   15340:	10000226 	beq	r2,zero,1534c <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   15344:	00bffd44 	movi	r2,-11
   15348:	00000106 	br	15350 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   1534c:	00bffec4 	movi	r2,-5
}
   15350:	e037883a 	mov	sp,fp
   15354:	df000017 	ldw	fp,0(sp)
   15358:	dec00104 	addi	sp,sp,4
   1535c:	f800283a 	ret

00015360 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   15360:	defff904 	addi	sp,sp,-28
   15364:	df000615 	stw	fp,24(sp)
   15368:	df000604 	addi	fp,sp,24
   1536c:	e13ffd15 	stw	r4,-12(fp)
   15370:	e17ffc15 	stw	r5,-16(fp)
   15374:	e1bffb15 	stw	r6,-20(fp)
   15378:	e1fffa15 	stw	r7,-24(fp)
  unsigned int base = sp->base;
   1537c:	e0bffd17 	ldw	r2,-12(fp)
   15380:	10800017 	ldw	r2,0(r2)
   15384:	e0bfff15 	stw	r2,-4(fp)

  const char * end = ptr + count;
   15388:	e0bffb17 	ldw	r2,-20(fp)
   1538c:	e0fffc17 	ldw	r3,-16(fp)
   15390:	1885883a 	add	r2,r3,r2
   15394:	e0bffe15 	stw	r2,-8(fp)

  while (ptr < end)
   15398:	00000e06 	br	153d4 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   1539c:	e0bfff17 	ldw	r2,-4(fp)
   153a0:	10800104 	addi	r2,r2,4
   153a4:	10800037 	ldwio	r2,0(r2)
   153a8:	10bfffec 	andhi	r2,r2,65535
   153ac:	10000926 	beq	r2,zero,153d4 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   153b0:	e0ffff17 	ldw	r3,-4(fp)
   153b4:	e0bffc17 	ldw	r2,-16(fp)
   153b8:	11000044 	addi	r4,r2,1
   153bc:	e13ffc15 	stw	r4,-16(fp)
   153c0:	10800003 	ldbu	r2,0(r2)
   153c4:	10803fcc 	andi	r2,r2,255
   153c8:	1080201c 	xori	r2,r2,128
   153cc:	10bfe004 	addi	r2,r2,-128
   153d0:	18800035 	stwio	r2,0(r3)
  while (ptr < end)
   153d4:	e0fffc17 	ldw	r3,-16(fp)
   153d8:	e0bffe17 	ldw	r2,-8(fp)
   153dc:	18bfef36 	bltu	r3,r2,1539c <altera_avalon_jtag_uart_write+0x3c>

  return count;
   153e0:	e0bffb17 	ldw	r2,-20(fp)
}
   153e4:	e037883a 	mov	sp,fp
   153e8:	df000017 	ldw	fp,0(sp)
   153ec:	dec00104 	addi	sp,sp,4
   153f0:	f800283a 	ret

000153f4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   153f4:	defffa04 	addi	sp,sp,-24
   153f8:	dfc00515 	stw	ra,20(sp)
   153fc:	df000415 	stw	fp,16(sp)
   15400:	df000404 	addi	fp,sp,16
   15404:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   15408:	0007883a 	mov	r3,zero
   1540c:	e0bffc17 	ldw	r2,-16(fp)
   15410:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   15414:	e0bffc17 	ldw	r2,-16(fp)
   15418:	10800104 	addi	r2,r2,4
   1541c:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
   15420:	0005303a 	rdctl	r2,status
   15424:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15428:	e0fffd17 	ldw	r3,-12(fp)
   1542c:	00bfff84 	movi	r2,-2
   15430:	1884703a 	and	r2,r3,r2
   15434:	1001703a 	wrctl	status,r2
  return context;
   15438:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1543c:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
   15440:	00160740 	call	16074 <alt_tick>
   15444:	e0bfff17 	ldw	r2,-4(fp)
   15448:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   1544c:	e0bffe17 	ldw	r2,-8(fp)
   15450:	1001703a 	wrctl	status,r2
}
   15454:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
   15458:	0001883a 	nop
   1545c:	e037883a 	mov	sp,fp
   15460:	dfc00117 	ldw	ra,4(sp)
   15464:	df000017 	ldw	fp,0(sp)
   15468:	dec00204 	addi	sp,sp,8
   1546c:	f800283a 	ret

00015470 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   15470:	defff804 	addi	sp,sp,-32
   15474:	dfc00715 	stw	ra,28(sp)
   15478:	df000615 	stw	fp,24(sp)
   1547c:	df000604 	addi	fp,sp,24
   15480:	e13ffe15 	stw	r4,-8(fp)
   15484:	e17ffd15 	stw	r5,-12(fp)
   15488:	e1bffc15 	stw	r6,-16(fp)
   1548c:	e1fffb15 	stw	r7,-20(fp)
   15490:	e0bffb17 	ldw	r2,-20(fp)
   15494:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   15498:	d0a1fe17 	ldw	r2,-30728(gp)
   1549c:	1000031e 	bne	r2,zero,154ac <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
   154a0:	e0bfff17 	ldw	r2,-4(fp)
   154a4:	d0a1fe15 	stw	r2,-30728(gp)
    return 0;
   154a8:	00000106 	br	154b0 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
   154ac:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   154b0:	e0bffe17 	ldw	r2,-8(fp)
   154b4:	10800104 	addi	r2,r2,4
   154b8:	00c001c4 	movi	r3,7
   154bc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   154c0:	d8000015 	stw	zero,0(sp)
   154c4:	e1fffe17 	ldw	r7,-8(fp)
   154c8:	01800074 	movhi	r6,1
   154cc:	3194fd04 	addi	r6,r6,21492
   154d0:	e17ffc17 	ldw	r5,-16(fp)
   154d4:	e13ffd17 	ldw	r4,-12(fp)
   154d8:	00149400 	call	14940 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   154dc:	0001883a 	nop
   154e0:	e037883a 	mov	sp,fp
   154e4:	dfc00117 	ldw	ra,4(sp)
   154e8:	df000017 	ldw	fp,0(sp)
   154ec:	dec00204 	addi	sp,sp,8
   154f0:	f800283a 	ret

000154f4 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   154f4:	defffa04 	addi	sp,sp,-24
   154f8:	dfc00515 	stw	ra,20(sp)
   154fc:	df000415 	stw	fp,16(sp)
   15500:	df000404 	addi	fp,sp,16
   15504:	e13ffe15 	stw	r4,-8(fp)
   15508:	e17ffd15 	stw	r5,-12(fp)
   1550c:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   15510:	e0bffe17 	ldw	r2,-8(fp)
   15514:	10800017 	ldw	r2,0(r2)
   15518:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   1551c:	e0bfff17 	ldw	r2,-4(fp)
   15520:	10c00a04 	addi	r3,r2,40
   15524:	e0bffe17 	ldw	r2,-8(fp)
   15528:	10800217 	ldw	r2,8(r2)
   1552c:	100f883a 	mov	r7,r2
   15530:	e1bffc17 	ldw	r6,-16(fp)
   15534:	e17ffd17 	ldw	r5,-12(fp)
   15538:	1809883a 	mov	r4,r3
   1553c:	00155f00 	call	155f0 <altera_avalon_uart_read>
      fd->fd_flags);
}
   15540:	e037883a 	mov	sp,fp
   15544:	dfc00117 	ldw	ra,4(sp)
   15548:	df000017 	ldw	fp,0(sp)
   1554c:	dec00204 	addi	sp,sp,8
   15550:	f800283a 	ret

00015554 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   15554:	defffa04 	addi	sp,sp,-24
   15558:	dfc00515 	stw	ra,20(sp)
   1555c:	df000415 	stw	fp,16(sp)
   15560:	df000404 	addi	fp,sp,16
   15564:	e13ffe15 	stw	r4,-8(fp)
   15568:	e17ffd15 	stw	r5,-12(fp)
   1556c:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   15570:	e0bffe17 	ldw	r2,-8(fp)
   15574:	10800017 	ldw	r2,0(r2)
   15578:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   1557c:	e0bfff17 	ldw	r2,-4(fp)
   15580:	10c00a04 	addi	r3,r2,40
   15584:	e0bffe17 	ldw	r2,-8(fp)
   15588:	10800217 	ldw	r2,8(r2)
   1558c:	100f883a 	mov	r7,r2
   15590:	e1bffc17 	ldw	r6,-16(fp)
   15594:	e17ffd17 	ldw	r5,-12(fp)
   15598:	1809883a 	mov	r4,r3
   1559c:	00156f00 	call	156f0 <altera_avalon_uart_write>
      fd->fd_flags);
}
   155a0:	e037883a 	mov	sp,fp
   155a4:	dfc00117 	ldw	ra,4(sp)
   155a8:	df000017 	ldw	fp,0(sp)
   155ac:	dec00204 	addi	sp,sp,8
   155b0:	f800283a 	ret

000155b4 <alt_get_errno>:
{
   155b4:	defffe04 	addi	sp,sp,-8
   155b8:	dfc00115 	stw	ra,4(sp)
   155bc:	df000015 	stw	fp,0(sp)
   155c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   155c4:	d0a09917 	ldw	r2,-32156(gp)
   155c8:	10000326 	beq	r2,zero,155d8 <alt_get_errno+0x24>
   155cc:	d0a09917 	ldw	r2,-32156(gp)
   155d0:	103ee83a 	callr	r2
   155d4:	00000106 	br	155dc <alt_get_errno+0x28>
   155d8:	d0a1f804 	addi	r2,gp,-30752
}
   155dc:	e037883a 	mov	sp,fp
   155e0:	dfc00117 	ldw	ra,4(sp)
   155e4:	df000017 	ldw	fp,0(sp)
   155e8:	dec00204 	addi	sp,sp,8
   155ec:	f800283a 	ret

000155f0 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   155f0:	defff804 	addi	sp,sp,-32
   155f4:	dfc00715 	stw	ra,28(sp)
   155f8:	df000615 	stw	fp,24(sp)
   155fc:	df000604 	addi	fp,sp,24
   15600:	e13ffd15 	stw	r4,-12(fp)
   15604:	e17ffc15 	stw	r5,-16(fp)
   15608:	e1bffb15 	stw	r6,-20(fp)
   1560c:	e1fffa15 	stw	r7,-24(fp)
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
   15610:	e0bffa17 	ldw	r2,-24(fp)
   15614:	1090000c 	andi	r2,r2,16384
   15618:	1005003a 	cmpeq	r2,r2,zero
   1561c:	10803fcc 	andi	r2,r2,255
   15620:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   15624:	e0bffd17 	ldw	r2,-12(fp)
   15628:	10800017 	ldw	r2,0(r2)
   1562c:	10800204 	addi	r2,r2,8
   15630:	10800037 	ldwio	r2,0(r2)
   15634:	e0bffe15 	stw	r2,-8(fp)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
   15638:	e0bffd17 	ldw	r2,-12(fp)
   1563c:	10800017 	ldw	r2,0(r2)
   15640:	10800204 	addi	r2,r2,8
   15644:	0007883a 	mov	r3,zero
   15648:	10c00035 	stwio	r3,0(r2)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
   1564c:	e0bffe17 	ldw	r2,-8(fp)
   15650:	1080200c 	andi	r2,r2,128
   15654:	10000b26 	beq	r2,zero,15684 <altera_avalon_uart_read+0x94>
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   15658:	e0bffd17 	ldw	r2,-12(fp)
   1565c:	10800017 	ldw	r2,0(r2)
   15660:	10800037 	ldwio	r2,0(r2)
   15664:	1007883a 	mov	r3,r2
   15668:	e0bffc17 	ldw	r2,-16(fp)
   1566c:	10c00005 	stb	r3,0(r2)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   15670:	e0bffe17 	ldw	r2,-8(fp)
   15674:	108000cc 	andi	r2,r2,3
   15678:	1000021e 	bne	r2,zero,15684 <altera_avalon_uart_read+0x94>
      ALTERA_AVALON_UART_STATUS_FE_MSK)))
      {
        return 1;
   1567c:	00800044 	movi	r2,1
   15680:	00000706 	br	156a0 <altera_avalon_uart_read+0xb0>
      }
    }
  }
  while (block);
   15684:	e0bfff17 	ldw	r2,-4(fp)
   15688:	103fe61e 	bne	r2,zero,15624 <altera_avalon_uart_read+0x34>

  ALT_ERRNO = EWOULDBLOCK;
   1568c:	00155b40 	call	155b4 <alt_get_errno>
   15690:	1007883a 	mov	r3,r2
   15694:	008002c4 	movi	r2,11
   15698:	18800015 	stw	r2,0(r3)
 
  return 0;
   1569c:	0005883a 	mov	r2,zero
}
   156a0:	e037883a 	mov	sp,fp
   156a4:	dfc00117 	ldw	ra,4(sp)
   156a8:	df000017 	ldw	fp,0(sp)
   156ac:	dec00204 	addi	sp,sp,8
   156b0:	f800283a 	ret

000156b4 <alt_get_errno>:
{
   156b4:	defffe04 	addi	sp,sp,-8
   156b8:	dfc00115 	stw	ra,4(sp)
   156bc:	df000015 	stw	fp,0(sp)
   156c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   156c4:	d0a09917 	ldw	r2,-32156(gp)
   156c8:	10000326 	beq	r2,zero,156d8 <alt_get_errno+0x24>
   156cc:	d0a09917 	ldw	r2,-32156(gp)
   156d0:	103ee83a 	callr	r2
   156d4:	00000106 	br	156dc <alt_get_errno+0x28>
   156d8:	d0a1f804 	addi	r2,gp,-30752
}
   156dc:	e037883a 	mov	sp,fp
   156e0:	dfc00117 	ldw	ra,4(sp)
   156e4:	df000017 	ldw	fp,0(sp)
   156e8:	dec00204 	addi	sp,sp,8
   156ec:	f800283a 	ret

000156f0 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   156f0:	defff704 	addi	sp,sp,-36
   156f4:	dfc00815 	stw	ra,32(sp)
   156f8:	df000715 	stw	fp,28(sp)
   156fc:	df000704 	addi	fp,sp,28
   15700:	e13ffc15 	stw	r4,-16(fp)
   15704:	e17ffb15 	stw	r5,-20(fp)
   15708:	e1bffa15 	stw	r6,-24(fp)
   1570c:	e1fff915 	stw	r7,-28(fp)
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
   15710:	e0bff917 	ldw	r2,-28(fp)
   15714:	1090000c 	andi	r2,r2,16384
   15718:	1005003a 	cmpeq	r2,r2,zero
   1571c:	10803fcc 	andi	r2,r2,255
   15720:	e0bffe15 	stw	r2,-8(fp)
  count = len;
   15724:	e0bffa17 	ldw	r2,-24(fp)
   15728:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   1572c:	e0bffc17 	ldw	r2,-16(fp)
   15730:	10800017 	ldw	r2,0(r2)
   15734:	10800204 	addi	r2,r2,8
   15738:	10800037 	ldwio	r2,0(r2)
   1573c:	e0bffd15 	stw	r2,-12(fp)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
   15740:	e0bffd17 	ldw	r2,-12(fp)
   15744:	1080100c 	andi	r2,r2,64
   15748:	10000f26 	beq	r2,zero,15788 <altera_avalon_uart_write+0x98>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
   1574c:	e0bffc17 	ldw	r2,-16(fp)
   15750:	10800017 	ldw	r2,0(r2)
   15754:	10800104 	addi	r2,r2,4
   15758:	1009883a 	mov	r4,r2
   1575c:	e0bffb17 	ldw	r2,-20(fp)
   15760:	10c00044 	addi	r3,r2,1
   15764:	e0fffb15 	stw	r3,-20(fp)
   15768:	10800003 	ldbu	r2,0(r2)
   1576c:	10803fcc 	andi	r2,r2,255
   15770:	1080201c 	xori	r2,r2,128
   15774:	10bfe004 	addi	r2,r2,-128
   15778:	20800035 	stwio	r2,0(r4)
      count--;
   1577c:	e0bfff17 	ldw	r2,-4(fp)
   15780:	10bfffc4 	addi	r2,r2,-1
   15784:	e0bfff15 	stw	r2,-4(fp)
    }
  }
  while (block && count);
   15788:	e0bffe17 	ldw	r2,-8(fp)
   1578c:	10000226 	beq	r2,zero,15798 <altera_avalon_uart_write+0xa8>
   15790:	e0bfff17 	ldw	r2,-4(fp)
   15794:	103fe51e 	bne	r2,zero,1572c <altera_avalon_uart_write+0x3c>

  if (count)
   15798:	e0bfff17 	ldw	r2,-4(fp)
   1579c:	10000426 	beq	r2,zero,157b0 <altera_avalon_uart_write+0xc0>
  {
    ALT_ERRNO = EWOULDBLOCK;
   157a0:	00156b40 	call	156b4 <alt_get_errno>
   157a4:	1007883a 	mov	r3,r2
   157a8:	008002c4 	movi	r2,11
   157ac:	18800015 	stw	r2,0(r3)
  }

  return (len - count);
   157b0:	e0fffa17 	ldw	r3,-24(fp)
   157b4:	e0bfff17 	ldw	r2,-4(fp)
   157b8:	1885c83a 	sub	r2,r3,r2
}
   157bc:	e037883a 	mov	sp,fp
   157c0:	dfc00117 	ldw	ra,4(sp)
   157c4:	df000017 	ldw	fp,0(sp)
   157c8:	dec00204 	addi	sp,sp,8
   157cc:	f800283a 	ret

000157d0 <alt_get_errno>:
{
   157d0:	defffe04 	addi	sp,sp,-8
   157d4:	dfc00115 	stw	ra,4(sp)
   157d8:	df000015 	stw	fp,0(sp)
   157dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   157e0:	d0a09917 	ldw	r2,-32156(gp)
   157e4:	10000326 	beq	r2,zero,157f4 <alt_get_errno+0x24>
   157e8:	d0a09917 	ldw	r2,-32156(gp)
   157ec:	103ee83a 	callr	r2
   157f0:	00000106 	br	157f8 <alt_get_errno+0x28>
   157f4:	d0a1f804 	addi	r2,gp,-30752
}
   157f8:	e037883a 	mov	sp,fp
   157fc:	dfc00117 	ldw	ra,4(sp)
   15800:	df000017 	ldw	fp,0(sp)
   15804:	dec00204 	addi	sp,sp,8
   15808:	f800283a 	ret

0001580c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1580c:	defffb04 	addi	sp,sp,-20
   15810:	dfc00415 	stw	ra,16(sp)
   15814:	df000315 	stw	fp,12(sp)
   15818:	df000304 	addi	fp,sp,12
   1581c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   15820:	e0bffd17 	ldw	r2,-12(fp)
   15824:	10000916 	blt	r2,zero,1584c <close+0x40>
   15828:	e0fffd17 	ldw	r3,-12(fp)
   1582c:	1805883a 	mov	r2,r3
   15830:	1085883a 	add	r2,r2,r2
   15834:	10c5883a 	add	r2,r2,r3
   15838:	100490ba 	slli	r2,r2,2
   1583c:	00c00074 	movhi	r3,1
   15840:	18dc3a04 	addi	r3,r3,28904
   15844:	10c5883a 	add	r2,r2,r3
   15848:	00000106 	br	15850 <close+0x44>
   1584c:	0005883a 	mov	r2,zero
   15850:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
   15854:	e0bfff17 	ldw	r2,-4(fp)
   15858:	10001926 	beq	r2,zero,158c0 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   1585c:	e0bfff17 	ldw	r2,-4(fp)
   15860:	10800017 	ldw	r2,0(r2)
   15864:	10800417 	ldw	r2,16(r2)
   15868:	10000626 	beq	r2,zero,15884 <close+0x78>
   1586c:	e0bfff17 	ldw	r2,-4(fp)
   15870:	10800017 	ldw	r2,0(r2)
   15874:	10800417 	ldw	r2,16(r2)
   15878:	e13fff17 	ldw	r4,-4(fp)
   1587c:	103ee83a 	callr	r2
   15880:	00000106 	br	15888 <close+0x7c>
   15884:	0005883a 	mov	r2,zero
   15888:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   1588c:	e13ffd17 	ldw	r4,-12(fp)
   15890:	0015f600 	call	15f60 <alt_release_fd>
    if (rval < 0)
   15894:	e0bffe17 	ldw	r2,-8(fp)
   15898:	1000070e 	bge	r2,zero,158b8 <close+0xac>
    {
      ALT_ERRNO = -rval;
   1589c:	00157d00 	call	157d0 <alt_get_errno>
   158a0:	1007883a 	mov	r3,r2
   158a4:	e0bffe17 	ldw	r2,-8(fp)
   158a8:	0085c83a 	sub	r2,zero,r2
   158ac:	18800015 	stw	r2,0(r3)
      return -1;
   158b0:	00bfffc4 	movi	r2,-1
   158b4:	00000706 	br	158d4 <close+0xc8>
    }
    return 0;
   158b8:	0005883a 	mov	r2,zero
   158bc:	00000506 	br	158d4 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   158c0:	00157d00 	call	157d0 <alt_get_errno>
   158c4:	1007883a 	mov	r3,r2
   158c8:	00801444 	movi	r2,81
   158cc:	18800015 	stw	r2,0(r3)
    return -1;
   158d0:	00bfffc4 	movi	r2,-1
  }
}
   158d4:	e037883a 	mov	sp,fp
   158d8:	dfc00117 	ldw	ra,4(sp)
   158dc:	df000017 	ldw	fp,0(sp)
   158e0:	dec00204 	addi	sp,sp,8
   158e4:	f800283a 	ret

000158e8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   158e8:	deffff04 	addi	sp,sp,-4
   158ec:	df000015 	stw	fp,0(sp)
   158f0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   158f4:	0001883a 	nop
   158f8:	e037883a 	mov	sp,fp
   158fc:	df000017 	ldw	fp,0(sp)
   15900:	dec00104 	addi	sp,sp,4
   15904:	f800283a 	ret

00015908 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   15908:	defffc04 	addi	sp,sp,-16
   1590c:	df000315 	stw	fp,12(sp)
   15910:	df000304 	addi	fp,sp,12
   15914:	e13fff15 	stw	r4,-4(fp)
   15918:	e17ffe15 	stw	r5,-8(fp)
   1591c:	e1bffd15 	stw	r6,-12(fp)
  return len;
   15920:	e0bffd17 	ldw	r2,-12(fp)
}
   15924:	e037883a 	mov	sp,fp
   15928:	df000017 	ldw	fp,0(sp)
   1592c:	dec00104 	addi	sp,sp,4
   15930:	f800283a 	ret

00015934 <alt_get_errno>:
{
   15934:	defffe04 	addi	sp,sp,-8
   15938:	dfc00115 	stw	ra,4(sp)
   1593c:	df000015 	stw	fp,0(sp)
   15940:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15944:	d0a09917 	ldw	r2,-32156(gp)
   15948:	10000326 	beq	r2,zero,15958 <alt_get_errno+0x24>
   1594c:	d0a09917 	ldw	r2,-32156(gp)
   15950:	103ee83a 	callr	r2
   15954:	00000106 	br	1595c <alt_get_errno+0x28>
   15958:	d0a1f804 	addi	r2,gp,-30752
}
   1595c:	e037883a 	mov	sp,fp
   15960:	dfc00117 	ldw	ra,4(sp)
   15964:	df000017 	ldw	fp,0(sp)
   15968:	dec00204 	addi	sp,sp,8
   1596c:	f800283a 	ret

00015970 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   15970:	defffa04 	addi	sp,sp,-24
   15974:	dfc00515 	stw	ra,20(sp)
   15978:	df000415 	stw	fp,16(sp)
   1597c:	df000404 	addi	fp,sp,16
   15980:	e13ffd15 	stw	r4,-12(fp)
   15984:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   15988:	e0bffd17 	ldw	r2,-12(fp)
   1598c:	10000326 	beq	r2,zero,1599c <alt_dev_llist_insert+0x2c>
   15990:	e0bffd17 	ldw	r2,-12(fp)
   15994:	10800217 	ldw	r2,8(r2)
   15998:	1000061e 	bne	r2,zero,159b4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1599c:	00159340 	call	15934 <alt_get_errno>
   159a0:	1007883a 	mov	r3,r2
   159a4:	00800584 	movi	r2,22
   159a8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   159ac:	00bffa84 	movi	r2,-22
   159b0:	00001406 	br	15a04 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   159b4:	e0bffd17 	ldw	r2,-12(fp)
   159b8:	e0fffc17 	ldw	r3,-16(fp)
   159bc:	e0ffff15 	stw	r3,-4(fp)
   159c0:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   159c4:	e0bffe17 	ldw	r2,-8(fp)
   159c8:	e0ffff17 	ldw	r3,-4(fp)
   159cc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   159d0:	e0bfff17 	ldw	r2,-4(fp)
   159d4:	10c00017 	ldw	r3,0(r2)
   159d8:	e0bffe17 	ldw	r2,-8(fp)
   159dc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   159e0:	e0bfff17 	ldw	r2,-4(fp)
   159e4:	10800017 	ldw	r2,0(r2)
   159e8:	e0fffe17 	ldw	r3,-8(fp)
   159ec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   159f0:	e0bfff17 	ldw	r2,-4(fp)
   159f4:	e0fffe17 	ldw	r3,-8(fp)
   159f8:	10c00015 	stw	r3,0(r2)
}
   159fc:	0001883a 	nop

  return 0;  
   15a00:	0005883a 	mov	r2,zero
}
   15a04:	e037883a 	mov	sp,fp
   15a08:	dfc00117 	ldw	ra,4(sp)
   15a0c:	df000017 	ldw	fp,0(sp)
   15a10:	dec00204 	addi	sp,sp,8
   15a14:	f800283a 	ret

00015a18 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   15a18:	defffd04 	addi	sp,sp,-12
   15a1c:	dfc00215 	stw	ra,8(sp)
   15a20:	df000115 	stw	fp,4(sp)
   15a24:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   15a28:	00800074 	movhi	r2,1
   15a2c:	1099bd04 	addi	r2,r2,26356
   15a30:	e0bfff15 	stw	r2,-4(fp)
   15a34:	00000606 	br	15a50 <_do_ctors+0x38>
        (*ctor) (); 
   15a38:	e0bfff17 	ldw	r2,-4(fp)
   15a3c:	10800017 	ldw	r2,0(r2)
   15a40:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   15a44:	e0bfff17 	ldw	r2,-4(fp)
   15a48:	10bfff04 	addi	r2,r2,-4
   15a4c:	e0bfff15 	stw	r2,-4(fp)
   15a50:	e0ffff17 	ldw	r3,-4(fp)
   15a54:	00800074 	movhi	r2,1
   15a58:	1099ba44 	addi	r2,r2,26345
   15a5c:	18bff62e 	bgeu	r3,r2,15a38 <_do_ctors+0x20>
}
   15a60:	0001883a 	nop
   15a64:	0001883a 	nop
   15a68:	e037883a 	mov	sp,fp
   15a6c:	dfc00117 	ldw	ra,4(sp)
   15a70:	df000017 	ldw	fp,0(sp)
   15a74:	dec00204 	addi	sp,sp,8
   15a78:	f800283a 	ret

00015a7c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   15a7c:	defffd04 	addi	sp,sp,-12
   15a80:	dfc00215 	stw	ra,8(sp)
   15a84:	df000115 	stw	fp,4(sp)
   15a88:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   15a8c:	00800074 	movhi	r2,1
   15a90:	1099be04 	addi	r2,r2,26360
   15a94:	e0bfff15 	stw	r2,-4(fp)
   15a98:	00000606 	br	15ab4 <_do_dtors+0x38>
        (*dtor) (); 
   15a9c:	e0bfff17 	ldw	r2,-4(fp)
   15aa0:	10800017 	ldw	r2,0(r2)
   15aa4:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   15aa8:	e0bfff17 	ldw	r2,-4(fp)
   15aac:	10bfff04 	addi	r2,r2,-4
   15ab0:	e0bfff15 	stw	r2,-4(fp)
   15ab4:	e0ffff17 	ldw	r3,-4(fp)
   15ab8:	00800074 	movhi	r2,1
   15abc:	1099be04 	addi	r2,r2,26360
   15ac0:	18bff62e 	bgeu	r3,r2,15a9c <_do_dtors+0x20>
}
   15ac4:	0001883a 	nop
   15ac8:	0001883a 	nop
   15acc:	e037883a 	mov	sp,fp
   15ad0:	dfc00117 	ldw	ra,4(sp)
   15ad4:	df000017 	ldw	fp,0(sp)
   15ad8:	dec00204 	addi	sp,sp,8
   15adc:	f800283a 	ret

00015ae0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   15ae0:	deffff04 	addi	sp,sp,-4
   15ae4:	df000015 	stw	fp,0(sp)
   15ae8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   15aec:	0001883a 	nop
   15af0:	e037883a 	mov	sp,fp
   15af4:	df000017 	ldw	fp,0(sp)
   15af8:	dec00104 	addi	sp,sp,4
   15afc:	f800283a 	ret

00015b00 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   15b00:	defffe04 	addi	sp,sp,-8
   15b04:	df000115 	stw	fp,4(sp)
   15b08:	df000104 	addi	fp,sp,4
   15b0c:	e13fff15 	stw	r4,-4(fp)
   15b10:	e0bfff17 	ldw	r2,-4(fp)
   15b14:	10bffe84 	addi	r2,r2,-6
   15b18:	10c00428 	cmpgeui	r3,r2,16
   15b1c:	1800191e 	bne	r3,zero,15b84 <alt_exception_cause_generated_bad_addr+0x84>
   15b20:	100690ba 	slli	r3,r2,2
   15b24:	00800074 	movhi	r2,1
   15b28:	1885883a 	add	r2,r3,r2
   15b2c:	1096cd17 	ldw	r2,23348(r2)
   15b30:	1000683a 	jmp	r2
   15b34:	00015b74 	movhi	zero,1389
   15b38:	00015b74 	movhi	zero,1389
   15b3c:	00015b84 	movi	zero,1390
   15b40:	00015b84 	movi	zero,1390
   15b44:	00015b84 	movi	zero,1390
   15b48:	00015b74 	movhi	zero,1389
   15b4c:	00015b7c 	xorhi	zero,zero,1389
   15b50:	00015b84 	movi	zero,1390
   15b54:	00015b74 	movhi	zero,1389
   15b58:	00015b74 	movhi	zero,1389
   15b5c:	00015b84 	movi	zero,1390
   15b60:	00015b74 	movhi	zero,1389
   15b64:	00015b7c 	xorhi	zero,zero,1389
   15b68:	00015b84 	movi	zero,1390
   15b6c:	00015b84 	movi	zero,1390
   15b70:	00015b74 	movhi	zero,1389
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   15b74:	00800044 	movi	r2,1
   15b78:	00000306 	br	15b88 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   15b7c:	0005883a 	mov	r2,zero
   15b80:	00000106 	br	15b88 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
   15b84:	0005883a 	mov	r2,zero
  }
}
   15b88:	e037883a 	mov	sp,fp
   15b8c:	df000017 	ldw	fp,0(sp)
   15b90:	dec00104 	addi	sp,sp,4
   15b94:	f800283a 	ret

00015b98 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   15b98:	defff904 	addi	sp,sp,-28
   15b9c:	dfc00615 	stw	ra,24(sp)
   15ba0:	df000515 	stw	fp,20(sp)
   15ba4:	df000504 	addi	fp,sp,20
   15ba8:	e13ffe15 	stw	r4,-8(fp)
   15bac:	e17ffd15 	stw	r5,-12(fp)
   15bb0:	e1bffc15 	stw	r6,-16(fp)
   15bb4:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   15bb8:	e1bffb17 	ldw	r6,-20(fp)
   15bbc:	e17ffc17 	ldw	r5,-16(fp)
   15bc0:	e13ffd17 	ldw	r4,-12(fp)
   15bc4:	0015e000 	call	15e00 <open>
   15bc8:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   15bcc:	e0bfff17 	ldw	r2,-4(fp)
   15bd0:	10002016 	blt	r2,zero,15c54 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
   15bd4:	e0ffff17 	ldw	r3,-4(fp)
   15bd8:	1805883a 	mov	r2,r3
   15bdc:	1085883a 	add	r2,r2,r2
   15be0:	10c5883a 	add	r2,r2,r3
   15be4:	100490ba 	slli	r2,r2,2
   15be8:	00c00074 	movhi	r3,1
   15bec:	10c7883a 	add	r3,r2,r3
   15bf0:	18dc3a17 	ldw	r3,28904(r3)
   15bf4:	e0bffe17 	ldw	r2,-8(fp)
   15bf8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   15bfc:	e0ffff17 	ldw	r3,-4(fp)
   15c00:	1805883a 	mov	r2,r3
   15c04:	1085883a 	add	r2,r2,r2
   15c08:	10c5883a 	add	r2,r2,r3
   15c0c:	100490ba 	slli	r2,r2,2
   15c10:	00c00074 	movhi	r3,1
   15c14:	10c7883a 	add	r3,r2,r3
   15c18:	18dc3b17 	ldw	r3,28908(r3)
   15c1c:	e0bffe17 	ldw	r2,-8(fp)
   15c20:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   15c24:	e0ffff17 	ldw	r3,-4(fp)
   15c28:	1805883a 	mov	r2,r3
   15c2c:	1085883a 	add	r2,r2,r2
   15c30:	10c5883a 	add	r2,r2,r3
   15c34:	100490ba 	slli	r2,r2,2
   15c38:	00c00074 	movhi	r3,1
   15c3c:	10c7883a 	add	r3,r2,r3
   15c40:	18dc3c17 	ldw	r3,28912(r3)
   15c44:	e0bffe17 	ldw	r2,-8(fp)
   15c48:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   15c4c:	e13fff17 	ldw	r4,-4(fp)
   15c50:	0015f600 	call	15f60 <alt_release_fd>
  }
} 
   15c54:	0001883a 	nop
   15c58:	e037883a 	mov	sp,fp
   15c5c:	dfc00117 	ldw	ra,4(sp)
   15c60:	df000017 	ldw	fp,0(sp)
   15c64:	dec00204 	addi	sp,sp,8
   15c68:	f800283a 	ret

00015c6c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   15c6c:	defffb04 	addi	sp,sp,-20
   15c70:	dfc00415 	stw	ra,16(sp)
   15c74:	df000315 	stw	fp,12(sp)
   15c78:	df000304 	addi	fp,sp,12
   15c7c:	e13fff15 	stw	r4,-4(fp)
   15c80:	e17ffe15 	stw	r5,-8(fp)
   15c84:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   15c88:	01c07fc4 	movi	r7,511
   15c8c:	01800044 	movi	r6,1
   15c90:	e17fff17 	ldw	r5,-4(fp)
   15c94:	01000074 	movhi	r4,1
   15c98:	211c3d04 	addi	r4,r4,28916
   15c9c:	0015b980 	call	15b98 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   15ca0:	01c07fc4 	movi	r7,511
   15ca4:	000d883a 	mov	r6,zero
   15ca8:	e17ffe17 	ldw	r5,-8(fp)
   15cac:	01000074 	movhi	r4,1
   15cb0:	211c3a04 	addi	r4,r4,28904
   15cb4:	0015b980 	call	15b98 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   15cb8:	01c07fc4 	movi	r7,511
   15cbc:	01800044 	movi	r6,1
   15cc0:	e17ffd17 	ldw	r5,-12(fp)
   15cc4:	01000074 	movhi	r4,1
   15cc8:	211c4004 	addi	r4,r4,28928
   15ccc:	0015b980 	call	15b98 <alt_open_fd>
}  
   15cd0:	0001883a 	nop
   15cd4:	e037883a 	mov	sp,fp
   15cd8:	dfc00117 	ldw	ra,4(sp)
   15cdc:	df000017 	ldw	fp,0(sp)
   15ce0:	dec00204 	addi	sp,sp,8
   15ce4:	f800283a 	ret

00015ce8 <alt_get_errno>:
{
   15ce8:	defffe04 	addi	sp,sp,-8
   15cec:	dfc00115 	stw	ra,4(sp)
   15cf0:	df000015 	stw	fp,0(sp)
   15cf4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15cf8:	d0a09917 	ldw	r2,-32156(gp)
   15cfc:	10000326 	beq	r2,zero,15d0c <alt_get_errno+0x24>
   15d00:	d0a09917 	ldw	r2,-32156(gp)
   15d04:	103ee83a 	callr	r2
   15d08:	00000106 	br	15d10 <alt_get_errno+0x28>
   15d0c:	d0a1f804 	addi	r2,gp,-30752
}
   15d10:	e037883a 	mov	sp,fp
   15d14:	dfc00117 	ldw	ra,4(sp)
   15d18:	df000017 	ldw	fp,0(sp)
   15d1c:	dec00204 	addi	sp,sp,8
   15d20:	f800283a 	ret

00015d24 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   15d24:	defffd04 	addi	sp,sp,-12
   15d28:	df000215 	stw	fp,8(sp)
   15d2c:	df000204 	addi	fp,sp,8
   15d30:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   15d34:	e0bffe17 	ldw	r2,-8(fp)
   15d38:	10800217 	ldw	r2,8(r2)
   15d3c:	10d00034 	orhi	r3,r2,16384
   15d40:	e0bffe17 	ldw	r2,-8(fp)
   15d44:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   15d48:	e03fff15 	stw	zero,-4(fp)
   15d4c:	00002306 	br	15ddc <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   15d50:	e0ffff17 	ldw	r3,-4(fp)
   15d54:	1805883a 	mov	r2,r3
   15d58:	1085883a 	add	r2,r2,r2
   15d5c:	10c5883a 	add	r2,r2,r3
   15d60:	100490ba 	slli	r2,r2,2
   15d64:	00c00074 	movhi	r3,1
   15d68:	10c7883a 	add	r3,r2,r3
   15d6c:	18dc3a17 	ldw	r3,28904(r3)
   15d70:	e0bffe17 	ldw	r2,-8(fp)
   15d74:	10800017 	ldw	r2,0(r2)
   15d78:	1880151e 	bne	r3,r2,15dd0 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   15d7c:	e0ffff17 	ldw	r3,-4(fp)
   15d80:	1805883a 	mov	r2,r3
   15d84:	1085883a 	add	r2,r2,r2
   15d88:	10c5883a 	add	r2,r2,r3
   15d8c:	100490ba 	slli	r2,r2,2
   15d90:	00c00074 	movhi	r3,1
   15d94:	10c7883a 	add	r3,r2,r3
   15d98:	189c3c17 	ldw	r2,28912(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
   15d9c:	10000c0e 	bge	r2,zero,15dd0 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
   15da0:	e0ffff17 	ldw	r3,-4(fp)
   15da4:	1805883a 	mov	r2,r3
   15da8:	1085883a 	add	r2,r2,r2
   15dac:	10c5883a 	add	r2,r2,r3
   15db0:	100490ba 	slli	r2,r2,2
   15db4:	00c00074 	movhi	r3,1
   15db8:	18dc3a04 	addi	r3,r3,28904
   15dbc:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   15dc0:	e0fffe17 	ldw	r3,-8(fp)
   15dc4:	18800226 	beq	r3,r2,15dd0 <alt_file_locked+0xac>
    {
      return -EACCES;
   15dc8:	00bffcc4 	movi	r2,-13
   15dcc:	00000806 	br	15df0 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
   15dd0:	e0bfff17 	ldw	r2,-4(fp)
   15dd4:	10800044 	addi	r2,r2,1
   15dd8:	e0bfff15 	stw	r2,-4(fp)
   15ddc:	d0a09817 	ldw	r2,-32160(gp)
   15de0:	1007883a 	mov	r3,r2
   15de4:	e0bfff17 	ldw	r2,-4(fp)
   15de8:	18bfd92e 	bgeu	r3,r2,15d50 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   15dec:	0005883a 	mov	r2,zero
}
   15df0:	e037883a 	mov	sp,fp
   15df4:	df000017 	ldw	fp,0(sp)
   15df8:	dec00104 	addi	sp,sp,4
   15dfc:	f800283a 	ret

00015e00 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   15e00:	defff604 	addi	sp,sp,-40
   15e04:	dfc00915 	stw	ra,36(sp)
   15e08:	df000815 	stw	fp,32(sp)
   15e0c:	df000804 	addi	fp,sp,32
   15e10:	e13ffa15 	stw	r4,-24(fp)
   15e14:	e17ff915 	stw	r5,-28(fp)
   15e18:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   15e1c:	00bfffc4 	movi	r2,-1
   15e20:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   15e24:	00bffb44 	movi	r2,-19
   15e28:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   15e2c:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   15e30:	d1609604 	addi	r5,gp,-32168
   15e34:	e13ffa17 	ldw	r4,-24(fp)
   15e38:	00161a00 	call	161a0 <alt_find_dev>
   15e3c:	e0bfff15 	stw	r2,-4(fp)
   15e40:	e0bfff17 	ldw	r2,-4(fp)
   15e44:	1000051e 	bne	r2,zero,15e5c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   15e48:	e13ffa17 	ldw	r4,-24(fp)
   15e4c:	00162300 	call	16230 <alt_find_file>
   15e50:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   15e54:	00800044 	movi	r2,1
   15e58:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   15e5c:	e0bfff17 	ldw	r2,-4(fp)
   15e60:	10002c26 	beq	r2,zero,15f14 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   15e64:	e13fff17 	ldw	r4,-4(fp)
   15e68:	00163380 	call	16338 <alt_get_fd>
   15e6c:	e0bffe15 	stw	r2,-8(fp)
   15e70:	e0bffe17 	ldw	r2,-8(fp)
   15e74:	1000030e 	bge	r2,zero,15e84 <open+0x84>
    {
      status = index;
   15e78:	e0bffe17 	ldw	r2,-8(fp)
   15e7c:	e0bffd15 	stw	r2,-12(fp)
   15e80:	00002606 	br	15f1c <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   15e84:	e0fffe17 	ldw	r3,-8(fp)
   15e88:	1805883a 	mov	r2,r3
   15e8c:	1085883a 	add	r2,r2,r2
   15e90:	10c5883a 	add	r2,r2,r3
   15e94:	100490ba 	slli	r2,r2,2
   15e98:	00c00074 	movhi	r3,1
   15e9c:	18dc3a04 	addi	r3,r3,28904
   15ea0:	10c5883a 	add	r2,r2,r3
   15ea4:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   15ea8:	e0fff917 	ldw	r3,-28(fp)
   15eac:	00900034 	movhi	r2,16384
   15eb0:	10bfffc4 	addi	r2,r2,-1
   15eb4:	1886703a 	and	r3,r3,r2
   15eb8:	e0bffb17 	ldw	r2,-20(fp)
   15ebc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   15ec0:	e0bffc17 	ldw	r2,-16(fp)
   15ec4:	1000051e 	bne	r2,zero,15edc <open+0xdc>
   15ec8:	e13ffb17 	ldw	r4,-20(fp)
   15ecc:	0015d240 	call	15d24 <alt_file_locked>
   15ed0:	e0bffd15 	stw	r2,-12(fp)
   15ed4:	e0bffd17 	ldw	r2,-12(fp)
   15ed8:	10001016 	blt	r2,zero,15f1c <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   15edc:	e0bfff17 	ldw	r2,-4(fp)
   15ee0:	10800317 	ldw	r2,12(r2)
   15ee4:	10000826 	beq	r2,zero,15f08 <open+0x108>
   15ee8:	e0bfff17 	ldw	r2,-4(fp)
   15eec:	10800317 	ldw	r2,12(r2)
   15ef0:	e1fff817 	ldw	r7,-32(fp)
   15ef4:	e1bff917 	ldw	r6,-28(fp)
   15ef8:	e17ffa17 	ldw	r5,-24(fp)
   15efc:	e13ffb17 	ldw	r4,-20(fp)
   15f00:	103ee83a 	callr	r2
   15f04:	00000106 	br	15f0c <open+0x10c>
   15f08:	0005883a 	mov	r2,zero
   15f0c:	e0bffd15 	stw	r2,-12(fp)
   15f10:	00000206 	br	15f1c <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   15f14:	00bffb44 	movi	r2,-19
   15f18:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   15f1c:	e0bffd17 	ldw	r2,-12(fp)
   15f20:	1000090e 	bge	r2,zero,15f48 <open+0x148>
  {
    alt_release_fd (index);  
   15f24:	e13ffe17 	ldw	r4,-8(fp)
   15f28:	0015f600 	call	15f60 <alt_release_fd>
    ALT_ERRNO = -status;
   15f2c:	0015ce80 	call	15ce8 <alt_get_errno>
   15f30:	1007883a 	mov	r3,r2
   15f34:	e0bffd17 	ldw	r2,-12(fp)
   15f38:	0085c83a 	sub	r2,zero,r2
   15f3c:	18800015 	stw	r2,0(r3)
    return -1;
   15f40:	00bfffc4 	movi	r2,-1
   15f44:	00000106 	br	15f4c <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   15f48:	e0bffe17 	ldw	r2,-8(fp)
}
   15f4c:	e037883a 	mov	sp,fp
   15f50:	dfc00117 	ldw	ra,4(sp)
   15f54:	df000017 	ldw	fp,0(sp)
   15f58:	dec00204 	addi	sp,sp,8
   15f5c:	f800283a 	ret

00015f60 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   15f60:	defffe04 	addi	sp,sp,-8
   15f64:	df000115 	stw	fp,4(sp)
   15f68:	df000104 	addi	fp,sp,4
   15f6c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   15f70:	e0bfff17 	ldw	r2,-4(fp)
   15f74:	108000d0 	cmplti	r2,r2,3
   15f78:	1000101e 	bne	r2,zero,15fbc <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
   15f7c:	e0ffff17 	ldw	r3,-4(fp)
   15f80:	1805883a 	mov	r2,r3
   15f84:	1085883a 	add	r2,r2,r2
   15f88:	10c5883a 	add	r2,r2,r3
   15f8c:	100490ba 	slli	r2,r2,2
   15f90:	00c00074 	movhi	r3,1
   15f94:	10c7883a 	add	r3,r2,r3
   15f98:	181c3c15 	stw	zero,28912(r3)
    alt_fd_list[fd].dev      = 0;
   15f9c:	e0ffff17 	ldw	r3,-4(fp)
   15fa0:	1805883a 	mov	r2,r3
   15fa4:	1085883a 	add	r2,r2,r2
   15fa8:	10c5883a 	add	r2,r2,r3
   15fac:	100490ba 	slli	r2,r2,2
   15fb0:	00c00074 	movhi	r3,1
   15fb4:	10c7883a 	add	r3,r2,r3
   15fb8:	181c3a15 	stw	zero,28904(r3)
  }
}
   15fbc:	0001883a 	nop
   15fc0:	e037883a 	mov	sp,fp
   15fc4:	df000017 	ldw	fp,0(sp)
   15fc8:	dec00104 	addi	sp,sp,4
   15fcc:	f800283a 	ret

00015fd0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   15fd0:	defffa04 	addi	sp,sp,-24
   15fd4:	df000515 	stw	fp,20(sp)
   15fd8:	df000504 	addi	fp,sp,20
   15fdc:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
   15fe0:	0005303a 	rdctl	r2,status
   15fe4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15fe8:	e0fffc17 	ldw	r3,-16(fp)
   15fec:	00bfff84 	movi	r2,-2
   15ff0:	1884703a 	and	r2,r3,r2
   15ff4:	1001703a 	wrctl	status,r2
  return context;
   15ff8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   15ffc:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
   16000:	e0bffb17 	ldw	r2,-20(fp)
   16004:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   16008:	e0bffd17 	ldw	r2,-12(fp)
   1600c:	10800017 	ldw	r2,0(r2)
   16010:	e0fffd17 	ldw	r3,-12(fp)
   16014:	18c00117 	ldw	r3,4(r3)
   16018:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1601c:	e0bffd17 	ldw	r2,-12(fp)
   16020:	10800117 	ldw	r2,4(r2)
   16024:	e0fffd17 	ldw	r3,-12(fp)
   16028:	18c00017 	ldw	r3,0(r3)
   1602c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   16030:	e0bffd17 	ldw	r2,-12(fp)
   16034:	e0fffd17 	ldw	r3,-12(fp)
   16038:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1603c:	e0bffd17 	ldw	r2,-12(fp)
   16040:	e0fffd17 	ldw	r3,-12(fp)
   16044:	10c00015 	stw	r3,0(r2)
} 
   16048:	0001883a 	nop
   1604c:	e0bfff17 	ldw	r2,-4(fp)
   16050:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   16054:	e0bffe17 	ldw	r2,-8(fp)
   16058:	1001703a 	wrctl	status,r2
}
   1605c:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
   16060:	0001883a 	nop
   16064:	e037883a 	mov	sp,fp
   16068:	df000017 	ldw	fp,0(sp)
   1606c:	dec00104 	addi	sp,sp,4
   16070:	f800283a 	ret

00016074 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   16074:	defffb04 	addi	sp,sp,-20
   16078:	dfc00415 	stw	ra,16(sp)
   1607c:	df000315 	stw	fp,12(sp)
   16080:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   16084:	d0a09a17 	ldw	r2,-32152(gp)
   16088:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1608c:	d0a1ff17 	ldw	r2,-30724(gp)
   16090:	10800044 	addi	r2,r2,1
   16094:	d0a1ff15 	stw	r2,-30724(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   16098:	00002e06 	br	16154 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1609c:	e0bfff17 	ldw	r2,-4(fp)
   160a0:	10800017 	ldw	r2,0(r2)
   160a4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   160a8:	e0bfff17 	ldw	r2,-4(fp)
   160ac:	10800403 	ldbu	r2,16(r2)
   160b0:	10803fcc 	andi	r2,r2,255
   160b4:	10000426 	beq	r2,zero,160c8 <alt_tick+0x54>
   160b8:	d0a1ff17 	ldw	r2,-30724(gp)
   160bc:	1000021e 	bne	r2,zero,160c8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   160c0:	e0bfff17 	ldw	r2,-4(fp)
   160c4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   160c8:	e0bfff17 	ldw	r2,-4(fp)
   160cc:	10800217 	ldw	r2,8(r2)
   160d0:	d0e1ff17 	ldw	r3,-30724(gp)
   160d4:	18801d36 	bltu	r3,r2,1614c <alt_tick+0xd8>
   160d8:	e0bfff17 	ldw	r2,-4(fp)
   160dc:	10800403 	ldbu	r2,16(r2)
   160e0:	10803fcc 	andi	r2,r2,255
   160e4:	1000191e 	bne	r2,zero,1614c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   160e8:	e0bfff17 	ldw	r2,-4(fp)
   160ec:	10800317 	ldw	r2,12(r2)
   160f0:	e0ffff17 	ldw	r3,-4(fp)
   160f4:	18c00517 	ldw	r3,20(r3)
   160f8:	1809883a 	mov	r4,r3
   160fc:	103ee83a 	callr	r2
   16100:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   16104:	e0bffd17 	ldw	r2,-12(fp)
   16108:	1000031e 	bne	r2,zero,16118 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1610c:	e13fff17 	ldw	r4,-4(fp)
   16110:	0015fd00 	call	15fd0 <alt_alarm_stop>
   16114:	00000d06 	br	1614c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   16118:	e0bfff17 	ldw	r2,-4(fp)
   1611c:	10c00217 	ldw	r3,8(r2)
   16120:	e0bffd17 	ldw	r2,-12(fp)
   16124:	1887883a 	add	r3,r3,r2
   16128:	e0bfff17 	ldw	r2,-4(fp)
   1612c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   16130:	e0bfff17 	ldw	r2,-4(fp)
   16134:	10c00217 	ldw	r3,8(r2)
   16138:	d0a1ff17 	ldw	r2,-30724(gp)
   1613c:	1880032e 	bgeu	r3,r2,1614c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   16140:	e0bfff17 	ldw	r2,-4(fp)
   16144:	00c00044 	movi	r3,1
   16148:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1614c:	e0bffe17 	ldw	r2,-8(fp)
   16150:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
   16154:	e0ffff17 	ldw	r3,-4(fp)
   16158:	d0a09a04 	addi	r2,gp,-32152
   1615c:	18bfcf1e 	bne	r3,r2,1609c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   16160:	0001883a 	nop
}
   16164:	0001883a 	nop
   16168:	e037883a 	mov	sp,fp
   1616c:	dfc00117 	ldw	ra,4(sp)
   16170:	df000017 	ldw	fp,0(sp)
   16174:	dec00204 	addi	sp,sp,8
   16178:	f800283a 	ret

0001617c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1617c:	deffff04 	addi	sp,sp,-4
   16180:	df000015 	stw	fp,0(sp)
   16184:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   16188:	000170fa 	wrctl	ienable,zero
}
   1618c:	0001883a 	nop
   16190:	e037883a 	mov	sp,fp
   16194:	df000017 	ldw	fp,0(sp)
   16198:	dec00104 	addi	sp,sp,4
   1619c:	f800283a 	ret

000161a0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   161a0:	defffa04 	addi	sp,sp,-24
   161a4:	dfc00515 	stw	ra,20(sp)
   161a8:	df000415 	stw	fp,16(sp)
   161ac:	df000404 	addi	fp,sp,16
   161b0:	e13ffd15 	stw	r4,-12(fp)
   161b4:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
   161b8:	e0bffc17 	ldw	r2,-16(fp)
   161bc:	10800017 	ldw	r2,0(r2)
   161c0:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   161c4:	e13ffd17 	ldw	r4,-12(fp)
   161c8:	00147d40 	call	147d4 <strlen>
   161cc:	10800044 	addi	r2,r2,1
   161d0:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   161d4:	00000d06 	br	1620c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   161d8:	e0bfff17 	ldw	r2,-4(fp)
   161dc:	10800217 	ldw	r2,8(r2)
   161e0:	e0fffe17 	ldw	r3,-8(fp)
   161e4:	180d883a 	mov	r6,r3
   161e8:	e17ffd17 	ldw	r5,-12(fp)
   161ec:	1009883a 	mov	r4,r2
   161f0:	00164240 	call	16424 <memcmp>
   161f4:	1000021e 	bne	r2,zero,16200 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   161f8:	e0bfff17 	ldw	r2,-4(fp)
   161fc:	00000706 	br	1621c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   16200:	e0bfff17 	ldw	r2,-4(fp)
   16204:	10800017 	ldw	r2,0(r2)
   16208:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
   1620c:	e0ffff17 	ldw	r3,-4(fp)
   16210:	e0bffc17 	ldw	r2,-16(fp)
   16214:	18bff01e 	bne	r3,r2,161d8 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
   16218:	0005883a 	mov	r2,zero
}
   1621c:	e037883a 	mov	sp,fp
   16220:	dfc00117 	ldw	ra,4(sp)
   16224:	df000017 	ldw	fp,0(sp)
   16228:	dec00204 	addi	sp,sp,8
   1622c:	f800283a 	ret

00016230 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   16230:	defffb04 	addi	sp,sp,-20
   16234:	dfc00415 	stw	ra,16(sp)
   16238:	df000315 	stw	fp,12(sp)
   1623c:	df000304 	addi	fp,sp,12
   16240:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   16244:	d0a09417 	ldw	r2,-32176(gp)
   16248:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1624c:	00003106 	br	16314 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   16250:	e0bfff17 	ldw	r2,-4(fp)
   16254:	10800217 	ldw	r2,8(r2)
   16258:	1009883a 	mov	r4,r2
   1625c:	00147d40 	call	147d4 <strlen>
   16260:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   16264:	e0bfff17 	ldw	r2,-4(fp)
   16268:	10c00217 	ldw	r3,8(r2)
   1626c:	e0bffe17 	ldw	r2,-8(fp)
   16270:	10bfffc4 	addi	r2,r2,-1
   16274:	1885883a 	add	r2,r3,r2
   16278:	10800003 	ldbu	r2,0(r2)
   1627c:	10803fcc 	andi	r2,r2,255
   16280:	1080201c 	xori	r2,r2,128
   16284:	10bfe004 	addi	r2,r2,-128
   16288:	10800bd8 	cmpnei	r2,r2,47
   1628c:	1000031e 	bne	r2,zero,1629c <alt_find_file+0x6c>
    {
      len -= 1;
   16290:	e0bffe17 	ldw	r2,-8(fp)
   16294:	10bfffc4 	addi	r2,r2,-1
   16298:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1629c:	e0bffe17 	ldw	r2,-8(fp)
   162a0:	e0fffd17 	ldw	r3,-12(fp)
   162a4:	1885883a 	add	r2,r3,r2
   162a8:	10800003 	ldbu	r2,0(r2)
   162ac:	10803fcc 	andi	r2,r2,255
   162b0:	1080201c 	xori	r2,r2,128
   162b4:	10bfe004 	addi	r2,r2,-128
   162b8:	10800be0 	cmpeqi	r2,r2,47
   162bc:	1000081e 	bne	r2,zero,162e0 <alt_find_file+0xb0>
   162c0:	e0bffe17 	ldw	r2,-8(fp)
   162c4:	e0fffd17 	ldw	r3,-12(fp)
   162c8:	1885883a 	add	r2,r3,r2
   162cc:	10800003 	ldbu	r2,0(r2)
   162d0:	10803fcc 	andi	r2,r2,255
   162d4:	1080201c 	xori	r2,r2,128
   162d8:	10bfe004 	addi	r2,r2,-128
   162dc:	10000a1e 	bne	r2,zero,16308 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   162e0:	e0bfff17 	ldw	r2,-4(fp)
   162e4:	10800217 	ldw	r2,8(r2)
   162e8:	e0fffe17 	ldw	r3,-8(fp)
   162ec:	180d883a 	mov	r6,r3
   162f0:	e17ffd17 	ldw	r5,-12(fp)
   162f4:	1009883a 	mov	r4,r2
   162f8:	00164240 	call	16424 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
   162fc:	1000021e 	bne	r2,zero,16308 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
   16300:	e0bfff17 	ldw	r2,-4(fp)
   16304:	00000706 	br	16324 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   16308:	e0bfff17 	ldw	r2,-4(fp)
   1630c:	10800017 	ldw	r2,0(r2)
   16310:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
   16314:	e0ffff17 	ldw	r3,-4(fp)
   16318:	d0a09404 	addi	r2,gp,-32176
   1631c:	18bfcc1e 	bne	r3,r2,16250 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
   16320:	0005883a 	mov	r2,zero
}
   16324:	e037883a 	mov	sp,fp
   16328:	dfc00117 	ldw	ra,4(sp)
   1632c:	df000017 	ldw	fp,0(sp)
   16330:	dec00204 	addi	sp,sp,8
   16334:	f800283a 	ret

00016338 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   16338:	defffc04 	addi	sp,sp,-16
   1633c:	df000315 	stw	fp,12(sp)
   16340:	df000304 	addi	fp,sp,12
   16344:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   16348:	00bffa04 	movi	r2,-24
   1634c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   16350:	e03fff15 	stw	zero,-4(fp)
   16354:	00001d06 	br	163cc <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   16358:	e0ffff17 	ldw	r3,-4(fp)
   1635c:	1805883a 	mov	r2,r3
   16360:	1085883a 	add	r2,r2,r2
   16364:	10c5883a 	add	r2,r2,r3
   16368:	100490ba 	slli	r2,r2,2
   1636c:	00c00074 	movhi	r3,1
   16370:	10c7883a 	add	r3,r2,r3
   16374:	189c3a17 	ldw	r2,28904(r3)
   16378:	1000111e 	bne	r2,zero,163c0 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   1637c:	e0ffff17 	ldw	r3,-4(fp)
   16380:	1805883a 	mov	r2,r3
   16384:	1085883a 	add	r2,r2,r2
   16388:	10c5883a 	add	r2,r2,r3
   1638c:	100490ba 	slli	r2,r2,2
   16390:	e13ffd17 	ldw	r4,-12(fp)
   16394:	00c00074 	movhi	r3,1
   16398:	10c7883a 	add	r3,r2,r3
   1639c:	191c3a15 	stw	r4,28904(r3)
      if (i > alt_max_fd)
   163a0:	d0e09817 	ldw	r3,-32160(gp)
   163a4:	e0bfff17 	ldw	r2,-4(fp)
   163a8:	1880020e 	bge	r3,r2,163b4 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   163ac:	e0bfff17 	ldw	r2,-4(fp)
   163b0:	d0a09815 	stw	r2,-32160(gp)
      }
      rc = i;
   163b4:	e0bfff17 	ldw	r2,-4(fp)
   163b8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   163bc:	00000706 	br	163dc <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
   163c0:	e0bfff17 	ldw	r2,-4(fp)
   163c4:	10800044 	addi	r2,r2,1
   163c8:	e0bfff15 	stw	r2,-4(fp)
   163cc:	e0bfff17 	ldw	r2,-4(fp)
   163d0:	10800810 	cmplti	r2,r2,32
   163d4:	103fe01e 	bne	r2,zero,16358 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
   163d8:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   163dc:	e0bffe17 	ldw	r2,-8(fp)
}
   163e0:	e037883a 	mov	sp,fp
   163e4:	df000017 	ldw	fp,0(sp)
   163e8:	dec00104 	addi	sp,sp,4
   163ec:	f800283a 	ret

000163f0 <atexit>:
   163f0:	200b883a 	mov	r5,r4
   163f4:	000f883a 	mov	r7,zero
   163f8:	000d883a 	mov	r6,zero
   163fc:	0009883a 	mov	r4,zero
   16400:	00164541 	jmpi	16454 <__register_exitproc>

00016404 <exit>:
   16404:	defffe04 	addi	sp,sp,-8
   16408:	000b883a 	mov	r5,zero
   1640c:	dc000015 	stw	r16,0(sp)
   16410:	dfc00115 	stw	ra,4(sp)
   16414:	2021883a 	mov	r16,r4
   16418:	00165700 	call	16570 <__call_exitprocs>
   1641c:	8009883a 	mov	r4,r16
   16420:	00148e80 	call	148e8 <_exit>

00016424 <memcmp>:
   16424:	0007883a 	mov	r3,zero
   16428:	30c0021e 	bne	r6,r3,16434 <memcmp+0x10>
   1642c:	0005883a 	mov	r2,zero
   16430:	f800283a 	ret
   16434:	20c5883a 	add	r2,r4,r3
   16438:	18c00044 	addi	r3,r3,1
   1643c:	28cf883a 	add	r7,r5,r3
   16440:	10800003 	ldbu	r2,0(r2)
   16444:	39ffffc3 	ldbu	r7,-1(r7)
   16448:	11fff726 	beq	r2,r7,16428 <memcmp+0x4>
   1644c:	11c5c83a 	sub	r2,r2,r7
   16450:	f800283a 	ret

00016454 <__register_exitproc>:
   16454:	00800074 	movhi	r2,1
   16458:	109d2a17 	ldw	r2,29864(r2)
   1645c:	defff904 	addi	sp,sp,-28
   16460:	dc000015 	stw	r16,0(sp)
   16464:	14000d17 	ldw	r16,52(r2)
   16468:	dd400515 	stw	r21,20(sp)
   1646c:	dd000415 	stw	r20,16(sp)
   16470:	dcc00315 	stw	r19,12(sp)
   16474:	dc800215 	stw	r18,8(sp)
   16478:	dfc00615 	stw	ra,24(sp)
   1647c:	dc400115 	stw	r17,4(sp)
   16480:	2025883a 	mov	r18,r4
   16484:	2827883a 	mov	r19,r5
   16488:	302b883a 	mov	r21,r6
   1648c:	3829883a 	mov	r20,r7
   16490:	8000081e 	bne	r16,zero,164b4 <__register_exitproc+0x60>
   16494:	14000e04 	addi	r16,r2,56
   16498:	00c00034 	movhi	r3,0
   1649c:	14000d15 	stw	r16,52(r2)
   164a0:	18c00004 	addi	r3,r3,0
   164a4:	18000326 	beq	r3,zero,164b4 <__register_exitproc+0x60>
   164a8:	00c00034 	movhi	r3,0
   164ac:	18c00017 	ldw	r3,0(r3)
   164b0:	10c03015 	stw	r3,192(r2)
   164b4:	84400117 	ldw	r17,4(r16)
   164b8:	88800810 	cmplti	r2,r17,32
   164bc:	10000a1e 	bne	r2,zero,164e8 <__register_exitproc+0x94>
   164c0:	00bfffc4 	movi	r2,-1
   164c4:	dfc00617 	ldw	ra,24(sp)
   164c8:	dd400517 	ldw	r21,20(sp)
   164cc:	dd000417 	ldw	r20,16(sp)
   164d0:	dcc00317 	ldw	r19,12(sp)
   164d4:	dc800217 	ldw	r18,8(sp)
   164d8:	dc400117 	ldw	r17,4(sp)
   164dc:	dc000017 	ldw	r16,0(sp)
   164e0:	dec00704 	addi	sp,sp,28
   164e4:	f800283a 	ret
   164e8:	90001926 	beq	r18,zero,16550 <__register_exitproc+0xfc>
   164ec:	80802217 	ldw	r2,136(r16)
   164f0:	1000091e 	bne	r2,zero,16518 <__register_exitproc+0xc4>
   164f4:	00800074 	movhi	r2,1
   164f8:	10905804 	addi	r2,r2,16736
   164fc:	103ff026 	beq	r2,zero,164c0 <__register_exitproc+0x6c>
   16500:	01004204 	movi	r4,264
   16504:	00141600 	call	14160 <malloc>
   16508:	103fed26 	beq	r2,zero,164c0 <__register_exitproc+0x6c>
   1650c:	10004015 	stw	zero,256(r2)
   16510:	10004115 	stw	zero,260(r2)
   16514:	80802215 	stw	r2,136(r16)
   16518:	880890ba 	slli	r4,r17,2
   1651c:	00c00044 	movi	r3,1
   16520:	1c46983a 	sll	r3,r3,r17
   16524:	1109883a 	add	r4,r2,r4
   16528:	25400015 	stw	r21,0(r4)
   1652c:	11404017 	ldw	r5,256(r2)
   16530:	94800098 	cmpnei	r18,r18,2
   16534:	28cab03a 	or	r5,r5,r3
   16538:	11404015 	stw	r5,256(r2)
   1653c:	25002015 	stw	r20,128(r4)
   16540:	9000031e 	bne	r18,zero,16550 <__register_exitproc+0xfc>
   16544:	11004117 	ldw	r4,260(r2)
   16548:	20c6b03a 	or	r3,r4,r3
   1654c:	10c04115 	stw	r3,260(r2)
   16550:	88800044 	addi	r2,r17,1
   16554:	8c400084 	addi	r17,r17,2
   16558:	882290ba 	slli	r17,r17,2
   1655c:	80800115 	stw	r2,4(r16)
   16560:	0005883a 	mov	r2,zero
   16564:	8461883a 	add	r16,r16,r17
   16568:	84c00015 	stw	r19,0(r16)
   1656c:	003fd506 	br	164c4 <__register_exitproc+0x70>

00016570 <__call_exitprocs>:
   16570:	defff604 	addi	sp,sp,-40
   16574:	00800074 	movhi	r2,1
   16578:	dd800615 	stw	r22,24(sp)
   1657c:	159d2a17 	ldw	r22,29864(r2)
   16580:	dd400515 	stw	r21,20(sp)
   16584:	dd000415 	stw	r20,16(sp)
   16588:	dfc00915 	stw	ra,36(sp)
   1658c:	df000815 	stw	fp,32(sp)
   16590:	ddc00715 	stw	r23,28(sp)
   16594:	dcc00315 	stw	r19,12(sp)
   16598:	dc800215 	stw	r18,8(sp)
   1659c:	dc400115 	stw	r17,4(sp)
   165a0:	dc000015 	stw	r16,0(sp)
   165a4:	202b883a 	mov	r21,r4
   165a8:	2829883a 	mov	r20,r5
   165ac:	b4400d17 	ldw	r17,52(r22)
   165b0:	88000726 	beq	r17,zero,165d0 <__call_exitprocs+0x60>
   165b4:	8c000117 	ldw	r16,4(r17)
   165b8:	8cc02217 	ldw	r19,136(r17)
   165bc:	84bfffc4 	addi	r18,r16,-1
   165c0:	802090ba 	slli	r16,r16,2
   165c4:	9c2f883a 	add	r23,r19,r16
   165c8:	8c21883a 	add	r16,r17,r16
   165cc:	90000c0e 	bge	r18,zero,16600 <__call_exitprocs+0x90>
   165d0:	dfc00917 	ldw	ra,36(sp)
   165d4:	df000817 	ldw	fp,32(sp)
   165d8:	ddc00717 	ldw	r23,28(sp)
   165dc:	dd800617 	ldw	r22,24(sp)
   165e0:	dd400517 	ldw	r21,20(sp)
   165e4:	dd000417 	ldw	r20,16(sp)
   165e8:	dcc00317 	ldw	r19,12(sp)
   165ec:	dc800217 	ldw	r18,8(sp)
   165f0:	dc400117 	ldw	r17,4(sp)
   165f4:	dc000017 	ldw	r16,0(sp)
   165f8:	dec00a04 	addi	sp,sp,40
   165fc:	f800283a 	ret
   16600:	a0000726 	beq	r20,zero,16620 <__call_exitprocs+0xb0>
   16604:	9800041e 	bne	r19,zero,16618 <__call_exitprocs+0xa8>
   16608:	94bfffc4 	addi	r18,r18,-1
   1660c:	bdffff04 	addi	r23,r23,-4
   16610:	843fff04 	addi	r16,r16,-4
   16614:	003fed06 	br	165cc <__call_exitprocs+0x5c>
   16618:	b8c01f17 	ldw	r3,124(r23)
   1661c:	1d3ffa1e 	bne	r3,r20,16608 <__call_exitprocs+0x98>
   16620:	89000117 	ldw	r4,4(r17)
   16624:	80c00117 	ldw	r3,4(r16)
   16628:	213fffc4 	addi	r4,r4,-1
   1662c:	24800f1e 	bne	r4,r18,1666c <__call_exitprocs+0xfc>
   16630:	8c800115 	stw	r18,4(r17)
   16634:	183ff426 	beq	r3,zero,16608 <__call_exitprocs+0x98>
   16638:	8f000117 	ldw	fp,4(r17)
   1663c:	98000526 	beq	r19,zero,16654 <__call_exitprocs+0xe4>
   16640:	00800044 	movi	r2,1
   16644:	148c983a 	sll	r6,r2,r18
   16648:	99004017 	ldw	r4,256(r19)
   1664c:	3108703a 	and	r4,r6,r4
   16650:	2000081e 	bne	r4,zero,16674 <__call_exitprocs+0x104>
   16654:	183ee83a 	callr	r3
   16658:	89000117 	ldw	r4,4(r17)
   1665c:	b0c00d17 	ldw	r3,52(r22)
   16660:	273fd21e 	bne	r4,fp,165ac <__call_exitprocs+0x3c>
   16664:	88ffe826 	beq	r17,r3,16608 <__call_exitprocs+0x98>
   16668:	003fd006 	br	165ac <__call_exitprocs+0x3c>
   1666c:	80000115 	stw	zero,4(r16)
   16670:	003ff006 	br	16634 <__call_exitprocs+0xc4>
   16674:	99404117 	ldw	r5,260(r19)
   16678:	b93fff17 	ldw	r4,-4(r23)
   1667c:	314c703a 	and	r6,r6,r5
   16680:	3000041e 	bne	r6,zero,16694 <__call_exitprocs+0x124>
   16684:	200b883a 	mov	r5,r4
   16688:	a809883a 	mov	r4,r21
   1668c:	183ee83a 	callr	r3
   16690:	003ff106 	br	16658 <__call_exitprocs+0xe8>
   16694:	183ee83a 	callr	r3
   16698:	003fef06 	br	16658 <__call_exitprocs+0xe8>
   1669c:	0001ffff 	0x1ffff
   166a0:	0201ffff 	0x201ffff
   166a4:	ffff0000 	call	ffff000 <_gp+0xffdfd98>
   166a8:	00000201 	jmpi	20 <__alt_mem_onchip_mem-0xffe0>
   166ac:	0201ffff 	0x201ffff
   166b0:	883a0000 	call	883a000 <_gp+0x881ad98>
   166b4:	010d00ff 	0x10d00ff
   166b8:	01010002 	0x1010002
	...
   166c4:	010d00ff 	0x10d00ff
   166c8:	01010004 	movi	r4,1024
   166cc:	00000100 	call	10 <__alt_mem_onchip_mem-0xfff0>
   166d0:	00000000 	call	0 <__alt_mem_onchip_mem-0x10000>
   166d4:	011100ff 	0x11100ff
   166d8:	01010004 	movi	r4,1024
   166dc:	7f000105 	stb	fp,4(r15)
   166e0:	007d0000 	call	7d000 <_gp+0x5dd98>
   166e4:	00000000 	call	0 <__alt_mem_onchip_mem-0x10000>
   166e8:	01883a00 	call	1883a0 <_gp+0x169138>
   166ec:	000105a8 	cmpgeui	zero,zero,1046
   166f0:	000112f0 	cmpltui	zero,zero,1099
   166f4:	00013368 	cmpgeui	zero,zero,1229
   166f8:	00011320 	cmpeqi	zero,zero,1100
