
jiwy_controller.elf:     file format elf32-littlenios2
jiwy_controller.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010224

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00007390 memsz 0x00007390 flags r-x
    LOAD off    0x000083b0 vaddr 0x000173b0 paddr 0x00017904 align 2**12
         filesz 0x00000554 memsz 0x00000554 flags rw-
    LOAD off    0x00008e58 vaddr 0x00017e58 paddr 0x00017e58 align 2**12
         filesz 0x00000000 memsz 0x00000188 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006904  00010224  00010224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000888  00016b28  00016b28  00007b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000554  000173b0  00017904  000083b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000188  00017e58  00017e58  00008e58  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00017fe0  00017fe0  00008904  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00008904  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001030  00000000  00000000  00008938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00020479  00000000  00000000  00009968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000bccd  00000000  00000000  00029de1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   0000ed66  00000000  00000000  00035aae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  000029f0  00000000  00000000  00044814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000094fd  00000000  00000000  00047204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000730a  00000000  00000000  00050701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000010  00000000  00000000  00057a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015d0  00000000  00000000  00057a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  00060147  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0006014a  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006014d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006014e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0006014f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00060153  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00060157  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0006015b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00060164  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0006016d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000013  00000000  00000000  00060176  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002a  00000000  00000000  00060189  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010224 l    d  .text	00000000 .text
00016b28 l    d  .rodata	00000000 .rodata
000173b0 l    d  .rwdata	00000000 .rwdata
00017e58 l    d  .bss	00000000 .bss
00017fe0 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/Users/gteho/Repositories/EMSYS-LAB/nios/software/jiwy_controller_bsp//obj/HAL/src/crt0.o
0001025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.cpp
00017694 l     O .rwdata	00000001 _ZStL19piecewise_construct
00017695 l     O .rwdata	00000001 _ZStL13allocator_arg
00017696 l     O .rwdata	00000001 _ZStL6ignore
00017697 l     O .rwdata	00000001 _ZN6SerialL12MESSAGE_SIZEE
000103d4 l     F .text	00000198 _Z41__static_initialization_and_destruction_0ii
0001056c l     F .text	00000030 _GLOBAL__sub_I_uart
00000000 l    df *ABS*	00000000 encoder.cpp
00000000 l    df *ABS*	00000000 motor.cpp
00000000 l    df *ABS*	00000000 uart.cpp
000176a0 l     O .rwdata	00000001 _ZStL19piecewise_construct
000176a1 l     O .rwdata	00000001 _ZStL13allocator_arg
000176a2 l     O .rwdata	00000001 _ZStL6ignore
000176a3 l     O .rwdata	00000001 _ZN6SerialL12MESSAGE_SIZEE
000113a0 l     F .text	00000074 _Z41__static_initialization_and_destruction_0ii
00011414 l     F .text	00000030 _GLOBAL__sub_I__ZN6Serial4UART10uart_readyE
00011444 l     F .text	00000030 _GLOBAL__sub_D__ZN6Serial4UART10uart_readyE
00000000 l    df *ABS*	00000000 eh_personality.cc
00011cd4 l     F .text	00000090 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv
00011d64 l     F .text	000001e8 _ZL28read_encoded_value_with_basehjPKhPj
00011f4c l     F .text	00000070 _ZL21base_of_encoded_valuehP15_Unwind_Context
00011fbc l     F .text	0000012c _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
000120e8 l     F .text	00000110 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
00012b6c l     F .text	00000068 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 function_type_info.cc
00000000 l    df *ABS*	00000000 pointer_type_info.cc
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 functional.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 del_ops.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
000134b8 l     F .text	000000cc _ZN12_GLOBAL__N_14pool4freeEPv.constprop.0
00017ed0 l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
00013584 l     F .text	00000090 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.0
00013734 l     F .text	00000064 _GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
00017e6c l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 fundamental_type_info.cc
00000000 l    df *ABS*	00000000 pbase_type_info.cc
000178cc l     O .rwdata	00000008 _ZZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvjE3pmf
000178c8 l     O .rwdata	00000004 _ZZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvjE2pm
00000000 l    df *ABS*	00000000 pmem_type_info.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 eh_aux_runtime.cc
00000000 l    df *ABS*	00000000 bad_array_new.cc
00000000 l    df *ABS*	00000000 bad_cast.cc
00000000 l    df *ABS*	00000000 bad_typeid.cc
00000000 l    df *ABS*	00000000 bad_alloc.cc
00000000 l    df *ABS*	00000000 unwind-sjlj.c
00013ff0 l     F .text	00000114 _Unwind_ForcedUnwind_Phase2
00017e74 l     O .bss	00000004 fc_static
00014104 l     F .text	000000d8 _Unwind_RaiseException_Phase2
000141dc l     F .text	0000002c uw_install_context.constprop.0.isra.0
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000173b0 l     O .rwdata	000000e4 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_kill.c
00015004 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001516c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000178e0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000153d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00015514 l     F .text	00000034 alt_dev_reg
00017494 l     O .rwdata	0000002c jtag_uart
000174c0 l     O .rwdata	0000002c uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00015820 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
000159e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00015ae0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_close.c
00015bfc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00015d34 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00015d60 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00015fc4 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00016114 l     F .text	0000003c alt_get_errno
00016150 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00017e94 g     O .bss	00000004 alt_instruction_exception_handler
0001369c g     F .text	00000028 __cxa_free_exception
0001312c g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
0001710c  w    O .rodata	00000010 _ZTIPKDs
00012af8 g     F .text	00000014 _ZSt10unexpectedv
000110b0 g     F .text	000000dc _ZN6Serial4UART10uart_0_isrEPv
000178b0  w    O .rwdata	00000008 _ZTIw
00017890  w    O .rwdata	00000008 _ZTIc
00015258 g     F .text	0000007c alt_main
0001482c g     F .text	00000080 _puts_r
00017ee0 g     O .bss	00000100 alt_irq
000139d0 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
00017888  w    O .rwdata	00000008 _ZTIa
000116d8  w    F .text	00000140 _ZNSt8functionIFvRN6Serial10rx_messageEEEC1ERKS4_
00014288 g     F .text	00000020 .hidden _Unwind_GetIPInfo
00017904 g       *ABS*	00000000 __flash_rwdata_start
00016f9c  w    O .rodata	00000010 _ZTIPy
0001772c  w    O .rwdata	00000002 _ZTSa
00010bac  w    F .text	00000024 _ZSt7forwardIRN6Serial10rx_messageEEOT_RNSt16remove_referenceIS3_E4typeE
00016d00  w    O .rodata	00000014 _ZTVSt17bad_function_call
00012c98 g     F .text	00000084 __cxa_rethrow
00014220 g     F .text	00000010 .hidden _Unwind_SjLj_Unregister
00012b3c g     F .text	00000024 _ZSt14set_unexpectedPFvvE
0001702c  w    O .rodata	00000010 _ZTIPKi
00014278 g     F .text	00000010 .hidden _Unwind_GetIP
00017fe0 g       *ABS*	00000000 __alt_heap_start
0001776c  w    O .rwdata	00000003 _ZTSPj
00010764  w    F .text	00000094 _ZN6Serial10tx_messageC2Ell
00011974  w    F .text	00000038 _ZNKSt8functionIFvRN6Serial10rx_messageEEEcvbEv
00014b6c g     F .text	0000004c _kill_r
00010dd8  w    F .text	00000058 _ZSt13__invoke_implIvRPFvRN6Serial10rx_messageEEJS2_EET_St14__invoke_otherOT0_DpOT1_
00013fa8 g     F .text	00000010 _ZNSt9bad_allocD2Ev
00010f58 g     F .text	00000064 _ZN5Plant5MotorC2Emm
00014960 g     F .text	00000078 _signal_r
00017790  w    O .rwdata	00000003 _ZTSPx
0001164c  w    F .text	0000005c _ZSt4copyIPhS0_ET0_T_S2_S1_
00017898  w    O .rwdata	00000008 _ZTIDi
000177f0  w    O .rwdata	00000005 _ZTSPKDd
00017784  w    O .rwdata	00000003 _ZTSPm
000106f4  w    F .text	00000070 _ZN6Serial10rx_message13getSecondWordEv
00013708 g     F .text	0000002c __cxa_free_dependent_exception
00011014 g     F .text	00000058 _ZN5Plant5Motor13setSecondWordEm
00012e60 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
00016c38  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
000152f8 g     F .text	00000024 __malloc_unlock
000176f8  w    O .rwdata	00000005 _ZTSPKDu
0001723c  w    O .rodata	00000024 _ZTVN10__cxxabiv129__pointer_to_member_type_infoE
000139d0 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
00013964 g     F .text	00000020 _ZSt18uncaught_exceptionv
00010260 g     F .text	000000ac _Z17handleUartMessageRN6Serial10rx_messageE
000112c8 g     F .text	000000d8 _ZN6Serial4UART14convertToArrayENS_10tx_messageE
00013df8 g     F .text	0000000c __cxa_deleted_virtual
00016f1c  w    O .rodata	00000010 _ZTIPDn
000118ec  w    F .text	00000088 _ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_
0001454c g     F .text	00000060 memmove
00011618  w    F .text	00000034 _ZNSt5arrayIhLj4EE3endEv
00017768  w    O .rwdata	00000002 _ZTSj
000139a0 g     F .text	00000004 _ZNSt9exceptionD2Ev
00016be4  w    O .rodata	00000024 _ZTSN10__cxxabiv119__pointer_type_infoE
00012d74 g     F .text	00000010 _ZN10__cxxabiv119__pointer_type_infoD1Ev
000172d4  w    O .rodata	0000000c _ZTISt8bad_cast
00016e1c  w    O .rodata	00000014 _ZTVSt13bad_exception
000165a8 g     F .text	00000024 altera_nios2_gen2_irq_init
00010830  w    F .text	00000150 _ZNSt8functionIFvRN6Serial10rx_messageEEEC2IPS3_vvEET_
00017714  w    O .rwdata	00000004 _ZTSPDi
00013eac g     F .text	00000010 _ZNSt20bad_array_new_lengthD1Ev
000176d8  w    O .rwdata	00000002 _ZTSb
000114d8  w    F .text	0000003c _ZNSt5arrayIhLj4EEixEj
00010000 g     F .entry	0000000c __reset
00017728  w    O .rwdata	00000004 _ZTSPKc
000142c4 g     F .text	00000008 .hidden _Unwind_GetRegionStart
000177a0  w    O .rwdata	00000004 _ZTSPKy
000176e0  w    O .rwdata	00000004 _ZTSPKb
000119ac  w    F .text	00000024 _ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_
00010020 g       *ABS*	00000000 __flash_exceptions_start
00011c6c  w    F .text	00000068 _ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_
0001704c  w    O .rodata	00000010 _ZTIPKt
00017730  w    O .rwdata	00000003 _ZTSPa
00017e80 g     O .bss	00000004 errno
00011c2c  w    F .text	00000040 _ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_
00017e65 g     O .bss	00000004 _ZN6Serial4UART7rx_dataE
000176d4  w    O .rwdata	00000004 _ZTSPKv
0001448c g     F .text	00000088 .hidden _Unwind_Backtrace
0001716c  w    O .rodata	00000010 _ZTIPKb
00017e8c g     O .bss	00000004 alt_argv
0001f694 g       *ABS*	00000000 _gp
00013f64 g     F .text	00000038 _ZNSt10bad_typeidD0Ev
00013a08 g     F .text	00000010 _ZN10__cxxabiv123__fundamental_type_infoD1Ev
00017eb0 g     O .bss	00000010 pan_motor
00013f10 g     F .text	00000038 _ZNSt8bad_castD0Ev
00014d4c g     F .text	00000020 getpid
00012890 g     F .text	0000017c __cxa_call_unexpected
00010e30  w    F .text	00000060 _ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE
000137f0 g     F .text	00000008 __cxa_get_exception_ptr
0001777c  w    O .rwdata	00000004 _ZTSPKl
00017514 g     O .rwdata	00000180 alt_fd_list
00011bc4  w    F .text	00000040 _ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_
00013a78 g     F .text	00000038 _ZN10__cxxabiv117__pbase_type_infoD0Ev
00016ffc  w    O .rodata	00000010 _ZTIPl
000143ac g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
00014248 g     F .text	00000018 .hidden _Unwind_GetCFA
00017870  w    O .rwdata	00000008 _ZTIt
00012b0c g     F .text	00000024 _ZSt13set_terminatePFvvE
000165cc g     F .text	00000090 alt_find_dev
000176d0  w    O .rwdata	00000003 _ZTSPv
000136c4 g     F .text	00000044 __cxa_allocate_dependent_exception
00017ec0 g     O .bss	00000010 _ZN6Serial4UART8callbackE
00010d90  w    F .text	00000024 _ZSt11__addressofIKPFvRN6Serial10rx_messageEEEPT_RS6_
00013284 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
00016098 g     F .text	0000007c alt_io_redirect
00016b28 g       *ABS*	00000000 __DTOR_END__
00010a1c  w    F .text	00000058 _ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E9_M_invokeERKSt9_Any_dataS2_
00017200  w    O .rodata	0000002e _ZTSN10__cxxabiv129__pointer_to_member_type_infoE
0001719c  w    O .rodata	00000010 _ZTIPv
0001329c g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
00011ba0  w    F .text	00000024 _ZSt12__niter_baseIPhET_S1_
000148ac g     F .text	00000010 puts
000178b8  w    O .rwdata	00000008 _ZTIb
000171d0  w    O .rodata	0000000c _ZTIN10__cxxabiv117__pbase_type_infoE
00015f2c g     F .text	00000098 alt_exception_cause_generated_bad_addr
00017718  w    O .rwdata	00000005 _ZTSPKDi
00016fec  w    O .rodata	00000010 _ZTIPKl
00012d84 g     F .text	00000038 _ZN10__cxxabiv119__pointer_type_infoD0Ev
00013eac g     F .text	00000010 _ZNSt20bad_array_new_lengthD2Ev
000156a0 g     F .text	000000ec altera_avalon_jtag_uart_read
0001452c g     F .text	00000010 malloc
0001727c  w    O .rodata	00000019 _ZTSSt20bad_array_new_length
00011474  w    F .text	0000002c _ZNKSt14_Function_base8_M_emptyEv
000149d8 g     F .text	000000b4 _raise_r
00016f0c  w    O .rodata	00000010 _ZTIPKDn
00017754  w    O .rwdata	00000003 _ZTSPt
0001118c g     F .text	00000090 _ZN6Serial4UARTC1ESt8functionIFvRNS_10rx_messageEEE
00013a18 g     F .text	00000038 _ZN10__cxxabiv123__fundamental_type_infoD0Ev
00010ef8 g     F .text	00000034 _ZN5Plant7EncoderC1Em
00014bb8 g     F .text	00000004 _getpid_r
00013984 g     F .text	0000001c _ZSt19uncaught_exceptionsv
00013614 g     F .text	00000030 _ZN9__gnu_cxx9__freeresEv
00017810  w    O .rwdata	00000008 _ZTIDd
00013350 g     F .text	0000009c _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
000177b8  w    O .rwdata	00000004 _ZTSPKd
00014a8c g     F .text	000000a0 __sigtramp_r
000148bc g     F .text	00000048 _sbrk_r
000139a8 g     F .text	0000000c _ZGTtNKSt9exception4whatEv
00016ca8  w    O .rodata	00000020 _ZTVSt9type_info
00013a68 g     F .text	00000010 _ZN10__cxxabiv117__pbase_type_infoD1Ev
000139a8 g     F .text	0000000c _ZNKSt9exception4whatEv
00017788  w    O .rwdata	00000004 _ZTSPKm
000178f4 g     O .rwdata	00000004 alt_max_fd
000170fc  w    O .rodata	00000010 _ZTIPDi
00017354  w    O .rodata	0000000c _ZTISt9bad_alloc
00016f7c  w    O .rodata	00000010 _ZTIPf
00016c14  w    O .rodata	00000024 _ZTVN10__cxxabiv119__pointer_type_infoE
00016edc  w    O .rodata	00000010 _ZTIPDd
00016cf4  w    O .rodata	0000000c _ZTISt17bad_function_call
00016c6c  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
00013f00 g     F .text	00000010 _ZNSt8bad_castD1Ev
000132e4 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
000134b0 g     F .text	00000004 _ZdlPv
000178d4 g     O .rwdata	00000004 _global_impure_ptr
00017fe0 g       *ABS*	00000000 __bss_end
0001779c  w    O .rwdata	00000003 _ZTSPy
000176f0  w    O .rwdata	00000003 _ZTSDu
00014f1c g     F .text	000000e8 alt_iic_isr_register
00017764  w    O .rwdata	00000004 _ZTSPKi
0001717c  w    O .rodata	00000010 _ZTIPb
000164a0 g     F .text	00000108 alt_tick
00014208 g     F .text	00000018 .hidden _Unwind_SjLj_Register
00011894  w    F .text	00000034 _ZNSt5arrayIhLj4EE4dataEv
00011a5c  w    F .text	00000024 _ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_
00014514 g     F .text	00000018 abort
00017e5c g     O .bss	00000004 tilt_encoder
00017840  w    O .rwdata	00000008 _ZTIy
00016eac  w    O .rodata	00000010 _ZTIPKDe
000138b0 g     F .text	000000b4 __cxa_end_catch
00014ed0 g     F .text	0000004c alt_ic_irq_enabled
000139a4 g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
00016f6c  w    O .rodata	00000010 _ZTIPKf
00010764  w    F .text	00000094 _ZN6Serial10tx_messageC1Ell
000163fc g     F .text	000000a4 alt_alarm_stop
000105e8  w    F .text	00000024 _ZNKSt9_Any_data9_M_accessEv
00016f5c  w    O .rodata	00000010 _ZTIPd
00017e84 g     O .bss	00000004 alt_irq_active
00012ad4 g     F .text	00000014 _ZSt9terminatev
00017744  w    O .rwdata	00000002 _ZTSs
000177cc  w    O .rwdata	00000004 _ZTSPDn
00010000 g       *ABS*	00000000 __alt_mem_onchip_mem
000171dc  w    O .rodata	00000024 _ZTVN10__cxxabiv117__pbase_type_infoE
000100fc g     F .exceptions	000000c8 alt_irq_handler
00010638  w    F .text	0000008c _ZNSt14_Function_baseD2Ev
000174ec g     O .rwdata	00000028 alt_dev_null
00011c04  w    F .text	00000028 _ZSt12__niter_wrapIPhET_RKS1_S1_
00017760  w    O .rwdata	00000003 _ZTSPi
000139dc g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
000177a8  w    O .rwdata	00000003 _ZTSPf
0001714c  w    O .rodata	00000010 _ZTIPKw
000177b4  w    O .rwdata	00000003 _ZTSPd
000177dc  w    O .rwdata	00000004 _ZTSPDf
00016d14  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
00015d14 g     F .text	00000020 alt_dcache_flush_all
00017848  w    O .rwdata	00000008 _ZTIx
000176e8  w    O .rwdata	00000003 _ZTSPw
000176b0  w    O .rwdata	00000008 _ZTISt9exception
000177e8  w    O .rwdata	00000003 _ZTSDd
000177e0  w    O .rwdata	00000005 _ZTSPKDf
00017780  w    O .rwdata	00000002 _ZTSm
00017904 g       *ABS*	00000000 __ram_rwdata_end
0001703c  w    O .rodata	00000010 _ZTIPi
00013128 g     F .text	00000004 _ZNSt9type_infoD1Ev
000178ec g     O .rwdata	00000008 alt_dev_list
000139dc g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
00015410 g     F .text	00000104 write
00012d34 g     F .text	00000038 _ZN10__cxxabiv120__function_type_infoD0Ev
00017704  w    O .rwdata	00000004 _ZTSPDs
0001313c g     F .text	00000008 _ZNSt9type_infoD0Ev
000173b0 g       *ABS*	00000000 __ram_rodata_end
000134b4 g     F .text	00000004 _ZdlPvj
00017838  w    O .rwdata	00000008 _ZTIf
00015040 g     F .text	0000012c kill
00017778  w    O .rwdata	00000003 _ZTSPl
00010b0c  w    F .text	00000060 _ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE
00012d1c g     F .text	00000008 _ZNK10__cxxabiv120__function_type_info15__is_function_pEv
00017708  w    O .rwdata	00000005 _ZTSPKDs
0001707c  w    O .rodata	00000010 _ZTIPs
0001059c  w    F .text	00000028 _ZnwjPv
00013134 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
00017700  w    O .rwdata	00000003 _ZTSDs
00017794  w    O .rwdata	00000004 _ZTSPKx
00012bd4 g     F .text	00000064 __cxa_init_primary_exception
00012b30 g     F .text	0000000c _ZSt13get_terminatev
00017fe0 g       *ABS*	00000000 end
000177d8  w    O .rwdata	00000003 _ZTSDf
00013194 g     F .text	00000010 _ZNSt17bad_function_callD2Ev
00017720  w    O .rwdata	00000002 _ZTSc
00010bd0  w    F .text	00000064 _ZSt10__invoke_rIvRPFvRN6Serial10rx_messageEEJS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_
00015b1c g     F .text	000000e0 altera_avalon_uart_write
00014474 g     F .text	00000018 .hidden _Unwind_DeleteException
00017770  w    O .rwdata	00000004 _ZTSPKj
000101c4 g     F .exceptions	00000060 alt_instruction_exception_entry
000133ec g     F .text	000000c4 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
00016b15 g       *ABS*	00000000 __CTOR_LIST__
0001a000 g       *ABS*	00000000 __alt_stack_pointer
00016fdc  w    O .rodata	00000010 _ZTIPm
0001589c g     F .text	00000084 alt_avalon_timer_sc_init
00015980 g     F .text	00000060 altera_avalon_uart_write_fd
0001320c g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
0001578c g     F .text	00000094 altera_avalon_jtag_uart_write
000107f8  w    F .text	00000038 _ZNSt8functionIFvRN6Serial10rx_messageEEED1Ev
00016da4  w    O .rodata	00000012 _ZTSSt13bad_exception
00010830  w    F .text	00000150 _ZNSt8functionIFvRN6Serial10rx_messageEEEC1IPS3_vvEET_
00017738  w    O .rwdata	00000002 _ZTSh
00013ea0 g     F .text	0000000c _ZNKSt20bad_array_new_length4whatEv
000145cc g     F .text	00000100 _free_r
00013ef4 g     F .text	0000000c _ZNKSt8bad_cast4whatEv
000109a8  w    F .text	00000024 _ZSt4moveIRPFvRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOS7_
00017e60 g     O .bss	00000004 pan_encoder
0001699c g     F .text	0000012c __call_exitprocs
00010e90  w    F .text	00000038 _ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE
00010224 g     F .text	0000003c _start
00017e98 g     O .bss	00000004 _alt_tick_rate
00010f58 g     F .text	00000064 _ZN5Plant5MotorC1Emm
00016c98  w    O .rodata	0000000d _ZTSSt9type_info
00013a68 g     F .text	00000010 _ZN10__cxxabiv117__pbase_type_infoD2Ev
00013f9c g     F .text	0000000c _ZNKSt9bad_alloc4whatEv
00013dec g     F .text	0000000c __cxa_pure_virtual
00017360  w    O .rodata	00000014 _ZTVSt9bad_alloc
00017e9c g     O .bss	00000004 _alt_nticks
00014b3c g     F .text	00000014 signal
00015584 g     F .text	0000005c alt_sys_init
000176dc  w    O .rwdata	00000003 _ZTSPb
000178a0  w    O .rwdata	00000008 _ZTIDs
0001709c  w    O .rodata	00000010 _ZTIPh
0001715c  w    O .rodata	00000010 _ZTIPw
00017314  w    O .rodata	0000000c _ZTISt10bad_typeid
00016880 g     F .text	0000011c __register_exitproc
00017344  w    O .rodata	0000000d _ZTSSt9bad_alloc
000172a4  w    O .rodata	00000014 _ZTVSt20bad_array_new_length
000139b4 g     F .text	0000000c _ZGTtNKSt13bad_exception4whatEv
00012ea8 g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
00010c94  w    F .text	000000cc _ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation
000118c8  w    F .text	00000024 _ZSt12__miter_baseIPhET_S1_
00017880  w    O .rwdata	00000008 _ZTIh
00016fac  w    O .rodata	00000010 _ZTIPKx
00010f2c g     F .text	0000002c _ZN5Plant7Encoder8readDataEv
0001158c  w    F .text	0000005c _ZNSt8functionIFvRN6Serial10rx_messageEEEaSERKS4_
000173b0 g       *ABS*	00000000 __ram_rwdata_start
000142e4 g     F .text	000000c8 .hidden _Unwind_SjLj_RaiseException
00016b28 g       *ABS*	00000000 __ram_rodata_start
000143f0 g     F .text	00000044 .hidden _Unwind_SjLj_Resume
0001060c  w    F .text	0000002c _ZNSt14_Function_baseC1Ev
00016e44  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
00017860  w    O .rwdata	00000008 _ZTIj
00013ebc g     F .text	00000038 _ZNSt20bad_array_new_lengthD0Ev
00017830  w    O .rwdata	00000008 _ZTId
00013e6c g     F .text	00000034 __cxa_throw_bad_array_new_length
00013128 g     F .text	00000004 _ZNSt9type_infoD2Ev
00011818  w    F .text	0000007c _ZNSt8functionIFvRN6Serial10rx_messageEEE4swapERS4_
000177c8  w    O .rwdata	00000003 _ZTSDn
000139e0 g     F .text	00000008 _ZN10__cxxabiv119__foreign_exceptionD0Ev
00013d0c g     F .text	00000010 _ZN10__cxxabiv129__pointer_to_member_type_infoD2Ev
000130a4 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
0001700c  w    O .rodata	00000010 _ZTIPKj
00012d6c g     F .text	00000008 _ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv
00016e80  w    O .rodata	0000000c _ZTIN10__cxxabiv123__fundamental_type_infoE
000155e0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00016764 g     F .text	000000b8 alt_get_fd
00010c64  w    F .text	00000030 _ZNSt9_Any_data9_M_accessIPPFvRN6Serial10rx_messageEEEERT_v
00010b6c  w    F .text	00000040 _ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE14_M_get_pointerERKSt9_Any_data
000177d0  w    O .rwdata	00000005 _ZTSPKDn
000176c0  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
00016bb8  w    O .rodata	0000000c _ZTIN10__cxxabiv120__function_type_infoE
000177ac  w    O .rwdata	00000004 _ZTSPKf
00017734  w    O .rwdata	00000004 _ZTSPKa
00016850 g     F .text	00000030 memcmp
00017fe0 g       *ABS*	00000000 __alt_stack_base
00013fb8 g     F .text	00000038 _ZNSt9bad_allocD0Ev
00012e60 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
00013a08 g     F .text	00000010 _ZN10__cxxabiv123__fundamental_type_infoD2Ev
000176f4  w    O .rwdata	00000004 _ZTSPDu
00014434 g     F .text	00000040 .hidden _Unwind_SjLj_Resume_or_Rethrow
000172c8  w    O .rodata	0000000c _ZTSSt8bad_cast
0001312c g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
00012d74 g     F .text	00000010 _ZN10__cxxabiv119__pointer_type_infoD2Ev
00010ef8 g     F .text	00000034 _ZN5Plant7EncoderC2Em
00017698  w    O .rwdata	00000008 _ZTIFvRN6Serial10rx_messageEE
000119d0  w    F .text	0000008c _ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_
00010d60  w    F .text	00000030 _ZNKSt9_Any_data9_M_accessIPFvRN6Serial10rx_messageEEEERKT_v
00016e08  w    O .rodata	00000014 _ZTVSt9exception
000139d4 g     F .text	00000008 _ZN10__cxxabiv115__forced_unwindD0Ev
0001665c g     F .text	00000108 alt_find_file
00015d9c g     F .text	000000a8 alt_dev_llist_insert
000152d4 g     F .text	00000024 __malloc_lock
000107f8  w    F .text	00000038 _ZNSt8functionIFvRN6Serial10rx_messageEEED2Ev
0001531c g     F .text	000000b8 sbrk
00013d1c g     F .text	00000038 _ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev
00016d44  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
00012c38 g     F .text	00000060 __cxa_throw
000142a8 g     F .text	00000010 .hidden _Unwind_SetIP
00016b58  w    O .rodata	0000001b _ZTSPFvRN6Serial10rx_messageEE
00016efc  w    O .rodata	00000010 _ZTIPDf
00017868  w    O .rwdata	00000008 _ZTIi
00016f8c  w    O .rodata	00000010 _ZTIPKy
00014c1c g     F .text	000000a8 __sfvwrite_small_dev
0001713c  w    O .rodata	00000010 _ZTIPDu
00011b10  w    F .text	0000006c _ZSt4swapIPFvRKSt9_Any_dataRN6Serial10rx_messageEEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_
00017e58 g       *ABS*	00000000 __bss_start
000145ac g     F .text	00000020 memset
0001030c g     F .text	000000c8 main
000177bc  w    O .rwdata	00000002 _ZTSe
00017e64 g     O .bss	00000001 _ZN6Serial4UART10uart_readyE
00017e90 g     O .bss	00000004 alt_envp
00017320  w    O .rodata	00000014 _ZTVSt10bad_typeid
00015640 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00017828  w    O .rwdata	00000008 _ZTIe
000139e8 g     F .text	00000004 _ZGTtNKSt9exceptionD1Ev
000139f0 g     F .text	0000000c __cxa_get_globals_fast
00016b74  w    O .rodata	0000001a _ZTSFvRN6Serial10rx_messageEE
000131d8 g     F .text	00000034 _ZSt25__throw_bad_function_callv
000172e0  w    O .rodata	00000014 _ZTVSt8bad_cast
0001a000 g       *ABS*	00000000 __alt_heap_limit
000177a4  w    O .rwdata	00000002 _ZTSf
00013f48 g     F .text	0000000c _ZNKSt10bad_typeid4whatEv
000170cc  w    O .rodata	00000010 _ZTIPKc
000146cc g     F .text	00000160 _malloc_r
00013188 g     F .text	0000000c _ZNKSt17bad_function_call4whatEv
00016fcc  w    O .rodata	00000010 _ZTIPKm
000139b4 g     F .text	0000000c _ZNKSt13bad_exception4whatEv
000178f8 g     O .rwdata	00000004 alt_errno
00014b50 g     F .text	0000000c _init_signal
00016d38  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
000170ec  w    O .rodata	00000010 _ZTIPKDi
000139a4 g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
00017298  w    O .rodata	0000000c _ZTISt20bad_array_new_length
00013d0c g     F .text	00000010 _ZN10__cxxabiv129__pointer_to_member_type_infoD1Ev
00016f2c  w    O .rodata	00000010 _ZTIPKe
00016b24 g       *ABS*	00000000 __CTOR_END__
00010638  w    F .text	0000008c _ZNSt14_Function_baseD1Ev
00017710  w    O .rwdata	00000003 _ZTSDi
00017e69 g     O .bss	00000001 _ZN6Serial4UART6rx_lenE
00014bbc g     F .text	00000044 strcmp
0001706c  w    O .rodata	00000010 _ZTIPKs
000170dc  w    O .rodata	00000010 _ZTIPc
00017820  w    O .rwdata	00000008 _ZTIDn
00016b28 g       *ABS*	00000000 __flash_rodata_start
00016e30  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
000106c4  w    F .text	00000030 _ZN6Serial10rx_message12getFirstWordEv
00016b24 g       *ABS*	00000000 __DTOR_LIST__
00017818  w    O .rwdata	00000008 _ZTIDf
00013f00 g     F .text	00000010 _ZNSt8bad_castD2Ev
000177c0  w    O .rwdata	00000003 _ZTSPe
000176e4  w    O .rwdata	00000002 _ZTSw
00015548 g     F .text	0000003c alt_irq_init
00017724  w    O .rwdata	00000003 _ZTSPc
0001638c g     F .text	00000070 alt_release_fd
00012e70 g     F .text	00000038 _ZN10__cxxabiv120__si_class_type_infoD0Ev
00013ab0 g     F .text	0000025c _ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj
000114a0  w    F .text	00000038 _ZNSt8functionIFvRN6Serial10rx_messageEEEC1Ev
00016eec  w    O .rodata	00000010 _ZTIPKDf
00017800  w    O .rwdata	00000005 _ZTSPKDe
000116d8  w    F .text	00000140 _ZNSt8functionIFvRN6Serial10rx_messageEEEC2ERKS4_
00010980  w    F .text	00000028 _ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE21_M_not_empty_functionIS4_EEbPT_
0001681c g     F .text	00000014 atexit
00014cc4 g     F .text	00000050 _write_r
00013e04 g     F .text	00000034 __cxa_bad_cast
000142dc g     F .text	00000008 .hidden _Unwind_GetTextRelBase
00013798 g     F .text	00000058 __cxa_call_terminate
00017850  w    O .rwdata	00000008 _ZTIm
00011aec  w    F .text	00000024 _ZSt4moveIRPFvRKSt9_Any_dataRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOSA_
000178d8 g     O .rwdata	00000004 _impure_ptr
000176b8  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
00016bc4  w    O .rodata	00000020 _ZTVN10__cxxabiv120__function_type_infoE
00017e88 g     O .bss	00000004 alt_argc
00016e8c  w    O .rodata	00000020 _ZTVN10__cxxabiv123__fundamental_type_infoE
00015ea8 g     F .text	00000064 _do_dtors
00010a74  w    F .text	00000098 _ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation
00017230  w    O .rodata	0000000c _ZTIN10__cxxabiv129__pointer_to_member_type_infoE
000109cc  w    F .text	00000050 _ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE15_M_init_functorERSt9_Any_dataOS5_
000115e8  w    F .text	00000030 _ZNSt5arrayIhLj4EE5beginEv
0001712c  w    O .rodata	00000010 _ZTIPKDu
00011514  w    F .text	00000078 _ZNKSt8functionIFvRN6Serial10rx_messageEEEclES2_
00012b60 g     F .text	0000000c _ZSt14get_unexpectedv
00010020 g       .exceptions	00000000 alt_irq_entry
0001121c g     F .text	000000ac _ZN6Serial4UART8sendDataESt5arrayIhLj4EE
000177f8  w    O .rwdata	00000003 _ZTSDe
000142cc g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
000170ac  w    O .rodata	00000010 _ZTIPKa
00011a80  w    F .text	0000006c _ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_
000178e4 g     O .rwdata	00000008 alt_fs_list
00016de4  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
000178a8  w    O .rwdata	00000008 _ZTIDu
0001701c  w    O .rodata	00000010 _ZTIPj
000142b8 g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
000177fc  w    O .rwdata	00000004 _ZTSPDe
000137f8 g     F .text	000000b8 __cxa_begin_catch
00017740  w    O .rwdata	00000004 _ZTSPKh
0001118c g     F .text	00000090 _ZN6Serial4UARTC2ESt8functionIFvRNS_10rx_messageEEE
0001329c g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
00012ae8 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
0001718c  w    O .rodata	00000010 _ZTIPKv
000177c4  w    O .rwdata	00000004 _ZTSPKe
000131a4 g     F .text	00000034 _ZNSt17bad_function_callD0Ev
000116a8  w    F .text	00000030 _ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj
00010020 g       *ABS*	00000000 __ram_exceptions_start
00016cdc  w    O .rodata	00000016 _ZTSSt17bad_function_call
000176cc  w    O .rwdata	00000002 _ZTSv
00013194 g     F .text	00000010 _ZNSt17bad_function_callD1Ev
000139c8 g     F .text	00000008 _ZNSt13bad_exceptionD0Ev
0001060c  w    F .text	0000002c _ZNSt14_Function_baseC2Ev
000176c8 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
00017750  w    O .rwdata	00000002 _ZTSt
00012dbc g     F .text	000000a4 _ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj
0001705c  w    O .rodata	00000010 _ZTIPt
00014d6c g     F .text	00000050 alt_ic_isr_register
00013644 g     F .text	00000058 __cxa_allocate_exception
00016f4c  w    O .rodata	00000010 _ZTIPKd
00016c60  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
0001708c  w    O .rodata	00000010 _ZTIPKh
00017904 g       *ABS*	00000000 _edata
00015920 g     F .text	00000060 altera_avalon_uart_read_fd
00017fe0 g       *ABS*	00000000 _end
000121f8 g     F .text	00000698 __gxx_personality_sj0
00010224 g       *ABS*	00000000 __ram_exceptions_end
0001775c  w    O .rwdata	00000002 _ZTSi
00010db4  w    F .text	00000024 _ZSt7forwardIRPFvRN6Serial10rx_messageEEEOT_RNSt16remove_referenceIS6_E4typeE
00017798  w    O .rwdata	00000002 _ZTSy
000139a0 g     F .text	00000004 _ZNSt9exceptionD1Ev
000171ac  w    O .rodata	00000022 _ZTSN10__cxxabiv117__pbase_type_infoE
00014e44 g     F .text	0000008c alt_ic_irq_disable
00017774  w    O .rwdata	00000002 _ZTSl
000178c0  w    O .rwdata	00000008 _ZTIv
00017748  w    O .rwdata	00000003 _ZTSPs
00016830 g     F .text	00000020 exit
00014260 g     F .text	00000018 .hidden _Unwind_SetGR
00013008 g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
00012a0c g     F .text	000000c8 _ZN10__cxxabiv111__terminateEPFvvE
00016b90  w    O .rodata	00000025 _ZTSN10__cxxabiv120__function_type_infoE
00013fa8 g     F .text	00000010 _ZNSt9bad_allocD1Ev
00010c34  w    F .text	00000030 _ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v
0001106c g     F .text	00000044 _ZN5Plant5Motor4stopEv
0001a000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00017e58 g     O .bss	00000001 uart
000177b0  w    O .rwdata	00000002 _ZTSd
00017858  w    O .rwdata	00000008 _ZTIl
000177ec  w    O .rwdata	00000004 _ZTSPDd
00016db8  w    O .rodata	0000000c _ZTISt13bad_exception
00016ebc  w    O .rodata	00000010 _ZTIPDe
000114a0  w    F .text	00000038 _ZNSt8functionIFvRN6Serial10rx_messageEEEC2Ev
000105c4  w    F .text	00000024 _ZNSt9_Any_data9_M_accessEv
00013a50  w    F .text	00000018 _ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj
00012d24 g     F .text	00000010 _ZN10__cxxabiv120__function_type_infoD2Ev
00016fbc  w    O .rodata	00000010 _ZTIPx
00014d14 g     F .text	00000038 _exit
00014230 g     F .text	00000018 .hidden _Unwind_GetGR
000139fc g     F .text	0000000c __cxa_get_globals
000176a4 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
00014c00 g     F .text	0000001c strlen
00014904 g     F .text	0000005c _init_signal_r
000176a8  w    O .rwdata	00000008 _ZTISt9type_info
0001622c g     F .text	00000160 open
00016f3c  w    O .rodata	00000010 _ZTIPe
000139ec g     F .text	00000004 _ZGTtNKSt13bad_exceptionD1Ev
00016d94  w    O .rodata	0000000d _ZTSSt9exception
00017e78 g     O .bss	00000004 __malloc_sbrk_start
00017304  w    O .rodata	0000000f _ZTSSt10bad_typeid
00017808  w    O .rwdata	00000008 _ZTIDe
00017ea0 g     O .bss	00000010 tilt_motor
00013e38 g     F .text	00000034 __cxa_bad_typeid
000139c0 g     F .text	00000008 _ZNSt9exceptionD0Ev
00010fbc g     F .text	00000058 _ZN5Plant5Motor12setFrequencyEm
00015f0c g     F .text	00000020 alt_icache_flush_all
0001778c  w    O .rwdata	00000002 _ZTSx
00013f54 g     F .text	00000010 _ZNSt10bad_typeidD1Ev
000142d4 g     F .text	00000008 .hidden _Unwind_GetDataRelBase
00011b7c  w    F .text	00000024 _ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh
000178dc g     O .rwdata	00000004 alt_priority_mask
00017e7c g     O .bss	00000004 __malloc_free_list
00014dbc g     F .text	00000088 alt_ic_irq_enable
00017878  w    O .rwdata	00000008 _ZTIs
00015a1c g     F .text	000000c4 altera_avalon_uart_read
000170bc  w    O .rodata	00000010 _ZTIPa
000176ec  w    O .rwdata	00000004 _ZTSPKw
00012d24 g     F .text	00000010 _ZN10__cxxabiv120__function_type_infoD1Ev
00013f54 g     F .text	00000010 _ZNSt10bad_typeidD2Ev
0001711c  w    O .rodata	00000010 _ZTIPDs
00016ecc  w    O .rodata	00000010 _ZTIPKDd
000178fc g     O .rwdata	00000008 alt_alarm_list
00016e58  w    O .rodata	00000028 _ZTSN10__cxxabiv123__fundamental_type_infoE
00015e44 g     F .text	00000064 _do_ctors
00014b5c g     F .text	00000010 __sigtramp
00010ec8  w    F .text	00000030 _ZNSt9_Any_data9_M_accessIPFvRN6Serial10rx_messageEEEERT_v
00016c08  w    O .rodata	0000000c _ZTIN10__cxxabiv119__pointer_type_infoE
00015c38 g     F .text	000000dc close
0001773c  w    O .rwdata	00000003 _ZTSPh
00016dc4  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
000151d4 g     F .text	00000084 alt_load
00013144 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
0001774c  w    O .rwdata	00000004 _ZTSPKs
00013d54 g     F .text	00000098 _ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj
00014b2c g     F .text	00000010 raise
00017758  w    O .rwdata	00000004 _ZTSPKt
0001453c g     F .text	00000010 free
000132ac g     F .text	00000038 _ZN10__cxxabiv117__class_type_infoD0Ev
00016b48  w    O .rodata	00000010 _ZTIPFvRN6Serial10rx_messageEE



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408914 	ori	at,at,548
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101c40 	call	101c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffc15 	stw	r2,-16(fp)

  return active;
   10118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0ffff17 	ldw	r3,-4(fp)
   10130:	e0bffe17 	ldw	r2,-8(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001126 	beq	r2,zero,10180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	e0bffd17 	ldw	r2,-12(fp)
   10140:	100690fa 	slli	r3,r2,3
   10144:	00800074 	movhi	r2,1
   10148:	1885883a 	add	r2,r3,r2
   1014c:	10dfb817 	ldw	r3,32480(r2)
   10150:	e0bffd17 	ldw	r2,-12(fp)
   10154:	100890fa 	slli	r4,r2,3
   10158:	00800074 	movhi	r2,1
   1015c:	2085883a 	add	r2,r4,r2
   10160:	109fb917 	ldw	r2,32484(r2)
   10164:	1009883a 	mov	r4,r2
   10168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   1016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
   10170:	0005313a 	rdctl	r2,ipending
   10174:	e0bffb15 	stw	r2,-20(fp)
  return active;
   10178:	e0bffb17 	ldw	r2,-20(fp)
   1017c:	00000706 	br	1019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
   10180:	e0bffe17 	ldw	r2,-8(fp)
   10184:	1085883a 	add	r2,r2,r2
   10188:	e0bffe15 	stw	r2,-8(fp)
      i++;
   1018c:	e0bffd17 	ldw	r2,-12(fp)
   10190:	10800044 	addi	r2,r2,1
   10194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
   10198:	003fe406 	br	1012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
   1019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   101a0:	e0bfff17 	ldw	r2,-4(fp)
   101a4:	103fde1e 	bne	r2,zero,10120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101a8:	0001883a 	nop
}
   101ac:	0001883a 	nop
   101b0:	e037883a 	mov	sp,fp
   101b4:	dfc00117 	ldw	ra,4(sp)
   101b8:	df000017 	ldw	fp,0(sp)
   101bc:	dec00204 	addi	sp,sp,8
   101c0:	f800283a 	ret

000101c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101c4:	defffb04 	addi	sp,sp,-20
   101c8:	dfc00415 	stw	ra,16(sp)
   101cc:	df000315 	stw	fp,12(sp)
   101d0:	df000304 	addi	fp,sp,12
   101d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101d8:	00bfffc4 	movi	r2,-1
   101dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
   101e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101e4:	d0a20017 	ldw	r2,-30720(gp)
   101e8:	10000726 	beq	r2,zero,10208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101ec:	d0a20017 	ldw	r2,-30720(gp)
   101f0:	e0ffff17 	ldw	r3,-4(fp)
   101f4:	e1bffe17 	ldw	r6,-8(fp)
   101f8:	e17ffd17 	ldw	r5,-12(fp)
   101fc:	1809883a 	mov	r4,r3
   10200:	103ee83a 	callr	r2
   10204:	00000206 	br	10210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   1020c:	0005883a 	mov	r2,zero
}
   10210:	e037883a 	mov	sp,fp
   10214:	dfc00117 	ldw	ra,4(sp)
   10218:	df000017 	ldw	fp,0(sp)
   1021c:	dec00204 	addi	sp,sp,8
   10220:	f800283a 	ret

Disassembly of section .text:

00010224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10224:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10228:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
   1022c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   10230:	d6bda514 	ori	gp,gp,63124
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10234:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10238:	109f9614 	ori	r2,r2,32344

    movhi r3, %hi(__bss_end)
   1023c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10240:	18dff814 	ori	r3,r3,32736

    beq r2, r3, 1f
   10244:	10c00326 	beq	r2,r3,10254 <_start+0x30>

0:
    stw zero, (r2)
   10248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   1024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10250:	10fffd36 	bltu	r2,r3,10248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10254:	00151d40 	call	151d4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10258:	00152580 	call	15258 <alt_main>

0001025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   1025c:	003fff06 	br	1025c <alt_after_alt_main>

00010260 <_Z17handleUartMessageRN6Serial10rx_messageE>:
// Setup Motors.
Plant::Motor tilt_motor = Plant::Motor(MOTOR_PWM_0_SLAVE_1_BASE, MOTOR_PWM_0_SLAVE_2_BASE);
Plant::Motor pan_motor = Plant::Motor(MOTOR_PWM_1_SLAVE_1_BASE, MOTOR_PWM_1_SLAVE_2_BASE);

void handleUartMessage(Serial::rx_message &received_message)
{
   10260:	defffd04 	addi	sp,sp,-12
   10264:	dfc00215 	stw	ra,8(sp)
   10268:	df000115 	stw	fp,4(sp)
   1026c:	df000104 	addi	fp,sp,4
   10270:	e13fff15 	stw	r4,-4(fp)
	// Determine for which motor this message is intended.
	switch (received_message.motor)
   10274:	e0bfff17 	ldw	r2,-4(fp)
   10278:	10800017 	ldw	r2,0(r2)
   1027c:	1004d7fa 	srli	r2,r2,31
   10280:	10803fcc 	andi	r2,r2,255
   10284:	10800060 	cmpeqi	r2,r2,1
   10288:	10000d1e 	bne	r2,zero,102c0 <_Z17handleUartMessageRN6Serial10rx_messageE+0x60>
	{
		case 0:
		{
			tilt_motor.setFrequency(received_message.getFirstWord());
   1028c:	e13fff17 	ldw	r4,-4(fp)
   10290:	00106c40 	call	106c4 <_ZN6Serial10rx_message12getFirstWordEv>
   10294:	100b883a 	mov	r5,r2
   10298:	01000074 	movhi	r4,1
   1029c:	211fa804 	addi	r4,r4,32416
   102a0:	0010fbc0 	call	10fbc <_ZN5Plant5Motor12setFrequencyEm>
			tilt_motor.setSecondWord(received_message.getSecondWord());
   102a4:	e13fff17 	ldw	r4,-4(fp)
   102a8:	00106f40 	call	106f4 <_ZN6Serial10rx_message13getSecondWordEv>
   102ac:	100b883a 	mov	r5,r2
   102b0:	01000074 	movhi	r4,1
   102b4:	211fa804 	addi	r4,r4,32416
   102b8:	00110140 	call	11014 <_ZN5Plant5Motor13setSecondWordEm>
			break;
   102bc:	00000d06 	br	102f4 <_Z17handleUartMessageRN6Serial10rx_messageE+0x94>
		}

		case 1:
		{
			pan_motor.setFrequency(received_message.getFirstWord());
   102c0:	e13fff17 	ldw	r4,-4(fp)
   102c4:	00106c40 	call	106c4 <_ZN6Serial10rx_message12getFirstWordEv>
   102c8:	100b883a 	mov	r5,r2
   102cc:	01000074 	movhi	r4,1
   102d0:	211fac04 	addi	r4,r4,32432
   102d4:	0010fbc0 	call	10fbc <_ZN5Plant5Motor12setFrequencyEm>
			pan_motor.setSecondWord(received_message.getSecondWord());
   102d8:	e13fff17 	ldw	r4,-4(fp)
   102dc:	00106f40 	call	106f4 <_ZN6Serial10rx_message13getSecondWordEv>
   102e0:	100b883a 	mov	r5,r2
   102e4:	01000074 	movhi	r4,1
   102e8:	211fac04 	addi	r4,r4,32432
   102ec:	00110140 	call	11014 <_ZN5Plant5Motor13setSecondWordEm>
			break;
   102f0:	0001883a 	nop
		}
	}
}
   102f4:	0001883a 	nop
   102f8:	e037883a 	mov	sp,fp
   102fc:	dfc00117 	ldw	ra,4(sp)
   10300:	df000017 	ldw	fp,0(sp)
   10304:	dec00204 	addi	sp,sp,8
   10308:	f800283a 	ret

0001030c <main>:
/**
 * Motor 0 = tilt
 * Motor 1 = pan
 */
int main()
{
   1030c:	defff604 	addi	sp,sp,-40
   10310:	dfc00915 	stw	ra,36(sp)
   10314:	df000815 	stw	fp,32(sp)
   10318:	df000804 	addi	fp,sp,32
	// Print startup message.
	printf("JIWY motor controller running..\n");
   1031c:	01000074 	movhi	r4,1
   10320:	211aca04 	addi	r4,r4,27432
   10324:	00148ac0 	call	148ac <puts>

	int32_t prev_tilt = 0;
   10328:	e03fff15 	stw	zero,-4(fp)
	int32_t prev_pan = 0;
   1032c:	e03ffe15 	stw	zero,-8(fp)

	while(1)
	{
		int32_t tilt = tilt_encoder.readData();
   10330:	d121f204 	addi	r4,gp,-30776
   10334:	0010f2c0 	call	10f2c <_ZN5Plant7Encoder8readDataEv>
   10338:	e0bffd15 	stw	r2,-12(fp)

		if (tilt != prev_tilt)
   1033c:	e0fffd17 	ldw	r3,-12(fp)
   10340:	e0bfff17 	ldw	r2,-4(fp)
   10344:	18800e26 	beq	r3,r2,10380 <main+0x74>
		{
			prev_tilt = tilt;
   10348:	e0bffd17 	ldw	r2,-12(fp)
   1034c:	e0bfff15 	stw	r2,-4(fp)
			Serial::tx_message message(tilt, 0);
   10350:	e0bff904 	addi	r2,fp,-28
   10354:	000d883a 	mov	r6,zero
   10358:	e17ffd17 	ldw	r5,-12(fp)
   1035c:	1009883a 	mov	r4,r2
   10360:	00107640 	call	10764 <_ZN6Serial10tx_messageC1Ell>
			uart.sendData(uart.convertToArray(message));
   10364:	e17ff917 	ldw	r5,-28(fp)
   10368:	d121f104 	addi	r4,gp,-30780
   1036c:	00112c80 	call	112c8 <_ZN6Serial4UART14convertToArrayENS_10tx_messageE>
   10370:	e0bffa15 	stw	r2,-24(fp)
   10374:	e17ffa17 	ldw	r5,-24(fp)
   10378:	d121f104 	addi	r4,gp,-30780
   1037c:	001121c0 	call	1121c <_ZN6Serial4UART8sendDataESt5arrayIhLj4EE>
		}

		int32_t pan = pan_encoder.readData();
   10380:	d121f304 	addi	r4,gp,-30772
   10384:	0010f2c0 	call	10f2c <_ZN5Plant7Encoder8readDataEv>
   10388:	e0bffc15 	stw	r2,-16(fp)

		if (pan != prev_pan)
   1038c:	e0fffc17 	ldw	r3,-16(fp)
   10390:	e0bffe17 	ldw	r2,-8(fp)
   10394:	18bfe626 	beq	r3,r2,10330 <main+0x24>
		{
			prev_pan = pan;
   10398:	e0bffc17 	ldw	r2,-16(fp)
   1039c:	e0bffe15 	stw	r2,-8(fp)
			Serial::tx_message message(pan, 1);
   103a0:	e0bff804 	addi	r2,fp,-32
   103a4:	01800044 	movi	r6,1
   103a8:	e17ffc17 	ldw	r5,-16(fp)
   103ac:	1009883a 	mov	r4,r2
   103b0:	00107640 	call	10764 <_ZN6Serial10tx_messageC1Ell>
			uart.sendData(uart.convertToArray(message));
   103b4:	e17ff817 	ldw	r5,-32(fp)
   103b8:	d121f104 	addi	r4,gp,-30780
   103bc:	00112c80 	call	112c8 <_ZN6Serial4UART14convertToArrayENS_10tx_messageE>
   103c0:	e0bffb15 	stw	r2,-20(fp)
   103c4:	e17ffb17 	ldw	r5,-20(fp)
   103c8:	d121f104 	addi	r4,gp,-30780
   103cc:	001121c0 	call	1121c <_ZN6Serial4UART8sendDataESt5arrayIhLj4EE>
		}

		//usleep(10);
	}
   103d0:	003fd706 	br	10330 <main+0x24>

000103d4 <_Z41__static_initialization_and_destruction_0ii>:

	return 0;
}
   103d4:	deffe204 	addi	sp,sp,-120
   103d8:	dfc01d15 	stw	ra,116(sp)
   103dc:	df001c15 	stw	fp,112(sp)
   103e0:	ddc01b15 	stw	r23,108(sp)
   103e4:	dd801a15 	stw	r22,104(sp)
   103e8:	dd401915 	stw	r21,100(sp)
   103ec:	dd001815 	stw	r20,96(sp)
   103f0:	dcc01715 	stw	r19,92(sp)
   103f4:	dc801615 	stw	r18,88(sp)
   103f8:	dc401515 	stw	r17,84(sp)
   103fc:	dc001415 	stw	r16,80(sp)
   10400:	df001c04 	addi	fp,sp,112
   10404:	e13ff315 	stw	r4,-52(fp)
   10408:	e17ff215 	stw	r5,-56(fp)
   1040c:	00800074 	movhi	r2,1
   10410:	10887e04 	addi	r2,r2,8696
   10414:	e0bfeb15 	stw	r2,-84(fp)
   10418:	00800074 	movhi	r2,1
   1041c:	109ab484 	addi	r2,r2,27346
   10420:	e0bfec15 	stw	r2,-80(fp)
   10424:	e0bfed04 	addi	r2,fp,-76
   10428:	17000015 	stw	fp,0(r2)
   1042c:	00c00074 	movhi	r3,1
   10430:	18c14104 	addi	r3,r3,1284
   10434:	10c00115 	stw	r3,4(r2)
   10438:	16c00215 	stw	sp,8(r2)
   1043c:	e0bfe504 	addi	r2,fp,-108
   10440:	1009883a 	mov	r4,r2
   10444:	00142080 	call	14208 <_Unwind_SjLj_Register>
   10448:	e0bff317 	ldw	r2,-52(fp)
   1044c:	10800058 	cmpnei	r2,r2,1
   10450:	1000361e 	bne	r2,zero,1052c <_Z41__static_initialization_and_destruction_0ii+0x158>
   10454:	e0fff217 	ldw	r3,-56(fp)
   10458:	00bfffd4 	movui	r2,65535
   1045c:	1880331e 	bne	r3,r2,1052c <_Z41__static_initialization_and_destruction_0ii+0x158>
Serial::UART uart = Serial::UART(handleUartMessage);
   10460:	e0fff404 	addi	r3,fp,-48
   10464:	00bfffc4 	movi	r2,-1
   10468:	e0bfe615 	stw	r2,-104(fp)
   1046c:	01400074 	movhi	r5,1
   10470:	29409804 	addi	r5,r5,608
   10474:	1809883a 	mov	r4,r3
   10478:	00108300 	call	10830 <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1IPS3_vvEET_>
   1047c:	e0fff404 	addi	r3,fp,-48
   10480:	00800044 	movi	r2,1
   10484:	e0bfe615 	stw	r2,-104(fp)
   10488:	180b883a 	mov	r5,r3
   1048c:	d121f104 	addi	r4,gp,-30780
   10490:	001118c0 	call	1118c <_ZN6Serial4UARTC1ESt8functionIFvRNS_10rx_messageEEE>
   10494:	e0bff404 	addi	r2,fp,-48
   10498:	1009883a 	mov	r4,r2
   1049c:	00107f80 	call	107f8 <_ZNSt8functionIFvRN6Serial10rx_messageEEED1Ev>
Plant::Encoder tilt_encoder = Plant::Encoder(QUADRATURE_ENCODER_0_BASE);
   104a0:	014000b4 	movhi	r5,2
   104a4:	00bfffc4 	movi	r2,-1
   104a8:	e0bfe615 	stw	r2,-104(fp)
   104ac:	29490004 	addi	r5,r5,9216
   104b0:	d121f204 	addi	r4,gp,-30776
   104b4:	0010ef80 	call	10ef8 <_ZN5Plant7EncoderC1Em>
Plant::Encoder pan_encoder = Plant::Encoder(QUADRATURE_ENCODER_1_BASE);
   104b8:	014000b4 	movhi	r5,2
   104bc:	29480004 	addi	r5,r5,8192
   104c0:	d121f304 	addi	r4,gp,-30772
   104c4:	0010ef80 	call	10ef8 <_ZN5Plant7EncoderC1Em>
Plant::Motor tilt_motor = Plant::Motor(MOTOR_PWM_0_SLAVE_1_BASE, MOTOR_PWM_0_SLAVE_2_BASE);
   104c8:	018000b4 	movhi	r6,2
   104cc:	31850004 	addi	r6,r6,5120
   104d0:	014000b4 	movhi	r5,2
   104d4:	29470004 	addi	r5,r5,7168
   104d8:	01000074 	movhi	r4,1
   104dc:	211fa804 	addi	r4,r4,32416
   104e0:	0010f580 	call	10f58 <_ZN5Plant5MotorC1Emm>
Plant::Motor pan_motor = Plant::Motor(MOTOR_PWM_1_SLAVE_1_BASE, MOTOR_PWM_1_SLAVE_2_BASE);
   104e4:	018000b4 	movhi	r6,2
   104e8:	31840004 	addi	r6,r6,4096
   104ec:	014000b4 	movhi	r5,2
   104f0:	29460004 	addi	r5,r5,6144
   104f4:	01000074 	movhi	r4,1
   104f8:	211fac04 	addi	r4,r4,32432
   104fc:	0010f580 	call	10f58 <_ZN5Plant5MotorC1Emm>
}
   10500:	00000a06 	br	1052c <_Z41__static_initialization_and_destruction_0ii+0x158>
Serial::UART uart = Serial::UART(handleUartMessage);
   10504:	e0bfe717 	ldw	r2,-100(fp)
   10508:	e0bfe415 	stw	r2,-112(fp)
   1050c:	e0bff404 	addi	r2,fp,-48
   10510:	1009883a 	mov	r4,r2
   10514:	00107f80 	call	107f8 <_ZNSt8functionIFvRN6Serial10rx_messageEEED1Ev>
   10518:	e0ffe417 	ldw	r3,-112(fp)
   1051c:	00bfffc4 	movi	r2,-1
   10520:	e0bfe615 	stw	r2,-104(fp)
   10524:	1809883a 	mov	r4,r3
   10528:	00143f00 	call	143f0 <_Unwind_SjLj_Resume>
   1052c:	e0bfe504 	addi	r2,fp,-108
   10530:	1009883a 	mov	r4,r2
   10534:	00142200 	call	14220 <_Unwind_SjLj_Unregister>
}
   10538:	e6fff804 	addi	sp,fp,-32
   1053c:	dfc00917 	ldw	ra,36(sp)
   10540:	df000817 	ldw	fp,32(sp)
   10544:	ddc00717 	ldw	r23,28(sp)
   10548:	dd800617 	ldw	r22,24(sp)
   1054c:	dd400517 	ldw	r21,20(sp)
   10550:	dd000417 	ldw	r20,16(sp)
   10554:	dcc00317 	ldw	r19,12(sp)
   10558:	dc800217 	ldw	r18,8(sp)
   1055c:	dc400117 	ldw	r17,4(sp)
   10560:	dc000017 	ldw	r16,0(sp)
   10564:	dec00a04 	addi	sp,sp,40
   10568:	f800283a 	ret

0001056c <_GLOBAL__sub_I_uart>:
   1056c:	defffe04 	addi	sp,sp,-8
   10570:	dfc00115 	stw	ra,4(sp)
   10574:	df000015 	stw	fp,0(sp)
   10578:	d839883a 	mov	fp,sp
   1057c:	017fffd4 	movui	r5,65535
   10580:	01000044 	movi	r4,1
   10584:	00103d40 	call	103d4 <_Z41__static_initialization_and_destruction_0ii>
   10588:	e037883a 	mov	sp,fp
   1058c:	dfc00117 	ldw	ra,4(sp)
   10590:	df000017 	ldw	fp,0(sp)
   10594:	dec00204 	addi	sp,sp,8
   10598:	f800283a 	ret

0001059c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
   1059c:	defffd04 	addi	sp,sp,-12
   105a0:	df000215 	stw	fp,8(sp)
   105a4:	df000204 	addi	fp,sp,8
   105a8:	e13fff15 	stw	r4,-4(fp)
   105ac:	e17ffe15 	stw	r5,-8(fp)
   105b0:	e0bffe17 	ldw	r2,-8(fp)
   105b4:	e037883a 	mov	sp,fp
   105b8:	df000017 	ldw	fp,0(sp)
   105bc:	dec00104 	addi	sp,sp,4
   105c0:	f800283a 	ret

000105c4 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
   105c4:	defffe04 	addi	sp,sp,-8
   105c8:	df000115 	stw	fp,4(sp)
   105cc:	df000104 	addi	fp,sp,4
   105d0:	e13fff15 	stw	r4,-4(fp)
   105d4:	e0bfff17 	ldw	r2,-4(fp)
   105d8:	e037883a 	mov	sp,fp
   105dc:	df000017 	ldw	fp,0(sp)
   105e0:	dec00104 	addi	sp,sp,4
   105e4:	f800283a 	ret

000105e8 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
   105e8:	defffe04 	addi	sp,sp,-8
   105ec:	df000115 	stw	fp,4(sp)
   105f0:	df000104 	addi	fp,sp,4
   105f4:	e13fff15 	stw	r4,-4(fp)
   105f8:	e0bfff17 	ldw	r2,-4(fp)
   105fc:	e037883a 	mov	sp,fp
   10600:	df000017 	ldw	fp,0(sp)
   10604:	dec00104 	addi	sp,sp,4
   10608:	f800283a 	ret

0001060c <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   1060c:	defffe04 	addi	sp,sp,-8
   10610:	df000115 	stw	fp,4(sp)
   10614:	df000104 	addi	fp,sp,4
   10618:	e13fff15 	stw	r4,-4(fp)
   1061c:	e0bfff17 	ldw	r2,-4(fp)
   10620:	10000215 	stw	zero,8(r2)
   10624:	0001883a 	nop
   10628:	e037883a 	mov	sp,fp
   1062c:	df000017 	ldw	fp,0(sp)
   10630:	dec00104 	addi	sp,sp,4
   10634:	f800283a 	ret

00010638 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
   10638:	defff004 	addi	sp,sp,-64
   1063c:	dfc00f15 	stw	ra,60(sp)
   10640:	df000e15 	stw	fp,56(sp)
   10644:	df000e04 	addi	fp,sp,56
   10648:	e13fff15 	stw	r4,-4(fp)
   1064c:	00800074 	movhi	r2,1
   10650:	10887e04 	addi	r2,r2,8696
   10654:	e0bff815 	stw	r2,-32(fp)
   10658:	00800074 	movhi	r2,1
   1065c:	109ab204 	addi	r2,r2,27336
   10660:	e0bff915 	stw	r2,-28(fp)
   10664:	e0bff204 	addi	r2,fp,-56
   10668:	1009883a 	mov	r4,r2
   1066c:	00142080 	call	14208 <_Unwind_SjLj_Register>
    {
      if (_M_manager)
   10670:	e0bfff17 	ldw	r2,-4(fp)
   10674:	10800217 	ldw	r2,8(r2)
   10678:	10000926 	beq	r2,zero,106a0 <_ZNSt14_Function_baseD1Ev+0x68>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   1067c:	e0bfff17 	ldw	r2,-4(fp)
   10680:	10800217 	ldw	r2,8(r2)
   10684:	e0ffff17 	ldw	r3,-4(fp)
   10688:	e13fff17 	ldw	r4,-4(fp)
   1068c:	e03ff315 	stw	zero,-52(fp)
   10690:	018000c4 	movi	r6,3
   10694:	200b883a 	mov	r5,r4
   10698:	1809883a 	mov	r4,r3
   1069c:	103ee83a 	callr	r2
    }
   106a0:	0001883a 	nop
   106a4:	e0bff204 	addi	r2,fp,-56
   106a8:	1009883a 	mov	r4,r2
   106ac:	00142200 	call	14220 <_Unwind_SjLj_Unregister>
   106b0:	e037883a 	mov	sp,fp
   106b4:	dfc00117 	ldw	ra,4(sp)
   106b8:	df000017 	ldw	fp,0(sp)
   106bc:	dec00204 	addi	sp,sp,8
   106c0:	f800283a 	ret

000106c4 <_ZN6Serial10rx_message12getFirstWordEv>:
		uint32_t getFullField()
		{
			return (freq << 18) | (duty << 4) | (direction << 2) | (enable << 1) | motor;
		}

		uint32_t getFirstWord()
   106c4:	defffe04 	addi	sp,sp,-8
   106c8:	df000115 	stw	fp,4(sp)
   106cc:	df000104 	addi	fp,sp,4
   106d0:	e13fff15 	stw	r4,-4(fp)
		{
			return freq;
   106d4:	e0bfff17 	ldw	r2,-4(fp)
   106d8:	10800017 	ldw	r2,0(r2)
   106dc:	108fffcc 	andi	r2,r2,16383
   106e0:	10bfffcc 	andi	r2,r2,65535
		}
   106e4:	e037883a 	mov	sp,fp
   106e8:	df000017 	ldw	fp,0(sp)
   106ec:	dec00104 	addi	sp,sp,4
   106f0:	f800283a 	ret

000106f4 <_ZN6Serial10rx_message13getSecondWordEv>:

		uint32_t getSecondWord()
   106f4:	defffe04 	addi	sp,sp,-8
   106f8:	df000115 	stw	fp,4(sp)
   106fc:	df000104 	addi	fp,sp,4
   10700:	e13fff15 	stw	r4,-4(fp)
		{
			return (duty << 16) | (direction << 14) | enable << 13;
   10704:	e0bfff17 	ldw	r2,-4(fp)
   10708:	10800017 	ldw	r2,0(r2)
   1070c:	1004d3ba 	srli	r2,r2,14
   10710:	108fffcc 	andi	r2,r2,16383
   10714:	10bfffcc 	andi	r2,r2,65535
   10718:	1006943a 	slli	r3,r2,16
   1071c:	e0bfff17 	ldw	r2,-4(fp)
   10720:	10800017 	ldw	r2,0(r2)
   10724:	1004d73a 	srli	r2,r2,28
   10728:	108000cc 	andi	r2,r2,3
   1072c:	10803fcc 	andi	r2,r2,255
   10730:	100493ba 	slli	r2,r2,14
   10734:	1886b03a 	or	r3,r3,r2
   10738:	e0bfff17 	ldw	r2,-4(fp)
   1073c:	10800017 	ldw	r2,0(r2)
   10740:	1004d7ba 	srli	r2,r2,30
   10744:	1080004c 	andi	r2,r2,1
   10748:	10803fcc 	andi	r2,r2,255
   1074c:	1004937a 	slli	r2,r2,13
   10750:	1884b03a 	or	r2,r3,r2
		}
   10754:	e037883a 	mov	sp,fp
   10758:	df000017 	ldw	fp,0(sp)
   1075c:	dec00104 	addi	sp,sp,4
   10760:	f800283a 	ret

00010764 <_ZN6Serial10tx_messageC1Ell>:
	struct tx_message
	{
		int32_t encoder_value : 31;
		int32_t motor : 1;

		tx_message(int32_t encoder_value, int32_t motor_value) :
   10764:	defffc04 	addi	sp,sp,-16
   10768:	df000315 	stw	fp,12(sp)
   1076c:	df000304 	addi	fp,sp,12
   10770:	e13fff15 	stw	r4,-4(fp)
   10774:	e17ffe15 	stw	r5,-8(fp)
   10778:	e1bffd15 	stw	r6,-12(fp)
				encoder_value(encoder_value),
   1077c:	e0bffe17 	ldw	r2,-8(fp)
   10780:	1085883a 	add	r2,r2,r2
   10784:	1009d07a 	srai	r4,r2,1
				motor (motor_value)
   10788:	e0ffff17 	ldw	r3,-4(fp)
   1078c:	00a00034 	movhi	r2,32768
   10790:	10bfffc4 	addi	r2,r2,-1
   10794:	2084703a 	and	r2,r4,r2
   10798:	19000017 	ldw	r4,0(r3)
   1079c:	2120002c 	andhi	r4,r4,32768
   107a0:	2084b03a 	or	r2,r4,r2
   107a4:	18800015 	stw	r2,0(r3)
   107a8:	e0bffd17 	ldw	r2,-12(fp)
   107ac:	100491fa 	slli	r2,r2,7
   107b0:	10803fcc 	andi	r2,r2,255
   107b4:	1080201c 	xori	r2,r2,128
   107b8:	10bfe004 	addi	r2,r2,-128
   107bc:	1005d1fa 	srai	r2,r2,7
   107c0:	e0ffff17 	ldw	r3,-4(fp)
   107c4:	10803fcc 	andi	r2,r2,255
   107c8:	100897fa 	slli	r4,r2,31
   107cc:	19400017 	ldw	r5,0(r3)
   107d0:	00a00034 	movhi	r2,32768
   107d4:	10bfffc4 	addi	r2,r2,-1
   107d8:	2884703a 	and	r2,r5,r2
   107dc:	1104b03a 	or	r2,r2,r4
   107e0:	18800015 	stw	r2,0(r3)
		{}
   107e4:	0001883a 	nop
   107e8:	e037883a 	mov	sp,fp
   107ec:	df000017 	ldw	fp,0(sp)
   107f0:	dec00104 	addi	sp,sp,4
   107f4:	f800283a 	ret

000107f8 <_ZNSt8functionIFvRN6Serial10rx_messageEEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   107f8:	defffd04 	addi	sp,sp,-12
   107fc:	dfc00215 	stw	ra,8(sp)
   10800:	df000115 	stw	fp,4(sp)
   10804:	df000104 	addi	fp,sp,4
   10808:	e13fff15 	stw	r4,-4(fp)
   1080c:	e0bfff17 	ldw	r2,-4(fp)
   10810:	1009883a 	mov	r4,r2
   10814:	00106380 	call	10638 <_ZNSt14_Function_baseD1Ev>
   10818:	0001883a 	nop
   1081c:	e037883a 	mov	sp,fp
   10820:	dfc00117 	ldw	ra,4(sp)
   10824:	df000017 	ldw	fp,0(sp)
   10828:	dec00204 	addi	sp,sp,8
   1082c:	f800283a 	ret

00010830 <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1IPS3_vvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
   10830:	deffe604 	addi	sp,sp,-104
   10834:	dfc01915 	stw	ra,100(sp)
   10838:	df001815 	stw	fp,96(sp)
   1083c:	ddc01715 	stw	r23,92(sp)
   10840:	dd801615 	stw	r22,88(sp)
   10844:	dd401515 	stw	r21,84(sp)
   10848:	dd001415 	stw	r20,80(sp)
   1084c:	dcc01315 	stw	r19,76(sp)
   10850:	dc801215 	stw	r18,72(sp)
   10854:	dc401115 	stw	r17,68(sp)
   10858:	dc001015 	stw	r16,64(sp)
   1085c:	df001804 	addi	fp,sp,96
   10860:	e13ff715 	stw	r4,-36(fp)
   10864:	e17ff615 	stw	r5,-40(fp)
   10868:	00800074 	movhi	r2,1
   1086c:	10887e04 	addi	r2,r2,8696
   10870:	e0bfef15 	stw	r2,-68(fp)
   10874:	00800074 	movhi	r2,1
   10878:	109ab304 	addi	r2,r2,27340
   1087c:	e0bff015 	stw	r2,-64(fp)
   10880:	e0bff104 	addi	r2,fp,-60
   10884:	17000015 	stw	fp,0(r2)
   10888:	00c00074 	movhi	r3,1
   1088c:	18c24504 	addi	r3,r3,2324
   10890:	10c00115 	stw	r3,4(r2)
   10894:	16c00215 	stw	sp,8(r2)
   10898:	e0bfe904 	addi	r2,fp,-92
   1089c:	1009883a 	mov	r4,r2
   108a0:	00142080 	call	14208 <_Unwind_SjLj_Register>
      function(_Functor __f)
      : _Function_base()
   108a4:	e0bff717 	ldw	r2,-36(fp)
   108a8:	1009883a 	mov	r4,r2
   108ac:	001060c0 	call	1060c <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
   108b0:	e0bff617 	ldw	r2,-40(fp)
   108b4:	1009883a 	mov	r4,r2
   108b8:	00109800 	call	10980 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE21_M_not_empty_functionIS4_EEbPT_>
   108bc:	10803fcc 	andi	r2,r2,255
   108c0:	10001e26 	beq	r2,zero,1093c <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1IPS3_vvEET_+0x10c>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
   108c4:	e0bff717 	ldw	r2,-36(fp)
   108c8:	e0bfe815 	stw	r2,-96(fp)
   108cc:	e0bff604 	addi	r2,fp,-40
   108d0:	1009883a 	mov	r4,r2
   108d4:	00109a80 	call	109a8 <_ZSt4moveIRPFvRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOS7_>
   108d8:	1007883a 	mov	r3,r2
   108dc:	00800044 	movi	r2,1
   108e0:	e0bfea15 	stw	r2,-88(fp)
   108e4:	180b883a 	mov	r5,r3
   108e8:	e13fe817 	ldw	r4,-96(fp)
   108ec:	00109cc0 	call	109cc <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE15_M_init_functorERSt9_Any_dataOS5_>
	    _M_invoker = &_My_handler::_M_invoke;
   108f0:	e0fff717 	ldw	r3,-36(fp)
   108f4:	00800074 	movhi	r2,1
   108f8:	10828704 	addi	r2,r2,2588
   108fc:	18800315 	stw	r2,12(r3)
	    _M_manager = &_My_handler::_M_manager;
   10900:	e0fff717 	ldw	r3,-36(fp)
   10904:	00800074 	movhi	r2,1
   10908:	10829d04 	addi	r2,r2,2676
   1090c:	18800215 	stw	r2,8(r3)
	  }
      }
   10910:	00000a06 	br	1093c <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1IPS3_vvEET_+0x10c>
      : _Function_base()
   10914:	e0bfeb17 	ldw	r2,-84(fp)
   10918:	e0bfe815 	stw	r2,-96(fp)
   1091c:	e0bff717 	ldw	r2,-36(fp)
   10920:	1009883a 	mov	r4,r2
   10924:	00106380 	call	10638 <_ZNSt14_Function_baseD1Ev>
   10928:	e0ffe817 	ldw	r3,-96(fp)
   1092c:	00bfffc4 	movi	r2,-1
   10930:	e0bfea15 	stw	r2,-88(fp)
   10934:	1809883a 	mov	r4,r3
   10938:	00143f00 	call	143f0 <_Unwind_SjLj_Resume>
      }
   1093c:	0001883a 	nop
   10940:	e0bfe904 	addi	r2,fp,-92
   10944:	1009883a 	mov	r4,r2
   10948:	00142200 	call	14220 <_Unwind_SjLj_Unregister>
   1094c:	e6fff804 	addi	sp,fp,-32
   10950:	dfc00917 	ldw	ra,36(sp)
   10954:	df000817 	ldw	fp,32(sp)
   10958:	ddc00717 	ldw	r23,28(sp)
   1095c:	dd800617 	ldw	r22,24(sp)
   10960:	dd400517 	ldw	r21,20(sp)
   10964:	dd000417 	ldw	r20,16(sp)
   10968:	dcc00317 	ldw	r19,12(sp)
   1096c:	dc800217 	ldw	r18,8(sp)
   10970:	dc400117 	ldw	r17,4(sp)
   10974:	dc000017 	ldw	r16,0(sp)
   10978:	dec00a04 	addi	sp,sp,40
   1097c:	f800283a 	ret

00010980 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE21_M_not_empty_functionIS4_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
   10980:	defffe04 	addi	sp,sp,-8
   10984:	df000115 	stw	fp,4(sp)
   10988:	df000104 	addi	fp,sp,4
   1098c:	e13fff15 	stw	r4,-4(fp)
	  { return __fp != nullptr; }
   10990:	e0bfff17 	ldw	r2,-4(fp)
   10994:	1004c03a 	cmpne	r2,r2,zero
   10998:	e037883a 	mov	sp,fp
   1099c:	df000017 	ldw	fp,0(sp)
   109a0:	dec00104 	addi	sp,sp,4
   109a4:	f800283a 	ret

000109a8 <_ZSt4moveIRPFvRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
   109a8:	defffe04 	addi	sp,sp,-8
   109ac:	df000115 	stw	fp,4(sp)
   109b0:	df000104 	addi	fp,sp,4
   109b4:	e13fff15 	stw	r4,-4(fp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   109b8:	e0bfff17 	ldw	r2,-4(fp)
   109bc:	e037883a 	mov	sp,fp
   109c0:	df000017 	ldw	fp,0(sp)
   109c4:	dec00104 	addi	sp,sp,4
   109c8:	f800283a 	ret

000109cc <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE15_M_init_functorERSt9_Any_dataOS5_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
   109cc:	defffb04 	addi	sp,sp,-20
   109d0:	dfc00415 	stw	ra,16(sp)
   109d4:	df000315 	stw	fp,12(sp)
   109d8:	dc000215 	stw	r16,8(sp)
   109dc:	df000304 	addi	fp,sp,12
   109e0:	e13ffe15 	stw	r4,-8(fp)
   109e4:	e17ffd15 	stw	r5,-12(fp)
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
   109e8:	e13ffd17 	ldw	r4,-12(fp)
   109ec:	00109a80 	call	109a8 <_ZSt4moveIRPFvRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOS7_>
   109f0:	800d883a 	mov	r6,r16
   109f4:	100b883a 	mov	r5,r2
   109f8:	e13ffe17 	ldw	r4,-8(fp)
   109fc:	0010b0c0 	call	10b0c <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>
   10a00:	0001883a 	nop
   10a04:	e6ffff04 	addi	sp,fp,-4
   10a08:	dfc00217 	ldw	ra,8(sp)
   10a0c:	df000117 	ldw	fp,4(sp)
   10a10:	dc000017 	ldw	r16,0(sp)
   10a14:	dec00304 	addi	sp,sp,12
   10a18:	f800283a 	ret

00010a1c <_ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E9_M_invokeERKSt9_Any_dataS2_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   10a1c:	defffb04 	addi	sp,sp,-20
   10a20:	dfc00415 	stw	ra,16(sp)
   10a24:	df000315 	stw	fp,12(sp)
   10a28:	dc000215 	stw	r16,8(sp)
   10a2c:	df000304 	addi	fp,sp,12
   10a30:	e13ffe15 	stw	r4,-8(fp)
   10a34:	e17ffd15 	stw	r5,-12(fp)
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
   10a38:	e13ffe17 	ldw	r4,-8(fp)
   10a3c:	0010b6c0 	call	10b6c <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE14_M_get_pointerERKSt9_Any_data>
   10a40:	1021883a 	mov	r16,r2
   10a44:	e13ffd17 	ldw	r4,-12(fp)
   10a48:	0010bac0 	call	10bac <_ZSt7forwardIRN6Serial10rx_messageEEOT_RNSt16remove_referenceIS3_E4typeE>
   10a4c:	100b883a 	mov	r5,r2
   10a50:	8009883a 	mov	r4,r16
   10a54:	0010bd00 	call	10bd0 <_ZSt10__invoke_rIvRPFvRN6Serial10rx_messageEEJS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>
				     std::forward<_ArgTypes>(__args)...);
   10a58:	0001883a 	nop
      }
   10a5c:	e6ffff04 	addi	sp,fp,-4
   10a60:	dfc00217 	ldw	ra,8(sp)
   10a64:	df000117 	ldw	fp,4(sp)
   10a68:	dc000017 	ldw	r16,0(sp)
   10a6c:	dec00304 	addi	sp,sp,12
   10a70:	f800283a 	ret

00010a74 <_ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   10a74:	defffa04 	addi	sp,sp,-24
   10a78:	dfc00515 	stw	ra,20(sp)
   10a7c:	df000415 	stw	fp,16(sp)
   10a80:	dc000315 	stw	r16,12(sp)
   10a84:	df000404 	addi	fp,sp,16
   10a88:	e13ffe15 	stw	r4,-8(fp)
   10a8c:	e17ffd15 	stw	r5,-12(fp)
   10a90:	e1bffc15 	stw	r6,-16(fp)
	switch (__op)
   10a94:	e0bffc17 	ldw	r2,-16(fp)
   10a98:	10000326 	beq	r2,zero,10aa8 <_ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x34>
   10a9c:	10800060 	cmpeqi	r2,r2,1
   10aa0:	1000081e 	bne	r2,zero,10ac4 <_ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x50>
   10aa4:	00000e06 	br	10ae0 <_ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6c>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
   10aa8:	e13ffe17 	ldw	r4,-8(fp)
   10aac:	0010c340 	call	10c34 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
   10ab0:	1007883a 	mov	r3,r2
   10ab4:	00800074 	movhi	r2,1
   10ab8:	109ad204 	addi	r2,r2,27464
   10abc:	18800015 	stw	r2,0(r3)
	    break;
   10ac0:	00000b06 	br	10af0 <_ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x7c>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   10ac4:	e13ffe17 	ldw	r4,-8(fp)
   10ac8:	0010c640 	call	10c64 <_ZNSt9_Any_data9_M_accessIPPFvRN6Serial10rx_messageEEEERT_v>
   10acc:	1021883a 	mov	r16,r2
   10ad0:	e13ffd17 	ldw	r4,-12(fp)
   10ad4:	0010b6c0 	call	10b6c <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE14_M_get_pointerERKSt9_Any_data>
   10ad8:	80800015 	stw	r2,0(r16)
	    break;
   10adc:	00000406 	br	10af0 <_ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x7c>
	    _Base::_M_manager(__dest, __source, __op);
   10ae0:	e1bffc17 	ldw	r6,-16(fp)
   10ae4:	e17ffd17 	ldw	r5,-12(fp)
   10ae8:	e13ffe17 	ldw	r4,-8(fp)
   10aec:	0010c940 	call	10c94 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
   10af0:	0005883a 	mov	r2,zero
      }
   10af4:	e6ffff04 	addi	sp,fp,-4
   10af8:	dfc00217 	ldw	ra,8(sp)
   10afc:	df000117 	ldw	fp,4(sp)
   10b00:	dc000017 	ldw	r16,0(sp)
   10b04:	dec00304 	addi	sp,sp,12
   10b08:	f800283a 	ret

00010b0c <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
   10b0c:	defffa04 	addi	sp,sp,-24
   10b10:	dfc00515 	stw	ra,20(sp)
   10b14:	df000415 	stw	fp,16(sp)
   10b18:	dc000315 	stw	r16,12(sp)
   10b1c:	df000404 	addi	fp,sp,16
   10b20:	e13ffe15 	stw	r4,-8(fp)
   10b24:	e17ffd15 	stw	r5,-12(fp)
   10b28:	e1bffcc5 	stb	r6,-13(fp)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   10b2c:	e13ffd17 	ldw	r4,-12(fp)
   10b30:	00109a80 	call	109a8 <_ZSt4moveIRPFvRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOS7_>
   10b34:	14000017 	ldw	r16,0(r2)
   10b38:	e13ffe17 	ldw	r4,-8(fp)
   10b3c:	00105c40 	call	105c4 <_ZNSt9_Any_data9_M_accessEv>
   10b40:	100b883a 	mov	r5,r2
   10b44:	01000104 	movi	r4,4
   10b48:	001059c0 	call	1059c <_ZnwjPv>
   10b4c:	14000015 	stw	r16,0(r2)
   10b50:	0001883a 	nop
   10b54:	e6ffff04 	addi	sp,fp,-4
   10b58:	dfc00217 	ldw	ra,8(sp)
   10b5c:	df000117 	ldw	fp,4(sp)
   10b60:	dc000017 	ldw	r16,0(sp)
   10b64:	dec00304 	addi	sp,sp,12
   10b68:	f800283a 	ret

00010b6c <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
   10b6c:	defffc04 	addi	sp,sp,-16
   10b70:	dfc00315 	stw	ra,12(sp)
   10b74:	df000215 	stw	fp,8(sp)
   10b78:	df000204 	addi	fp,sp,8
   10b7c:	e13ffe15 	stw	r4,-8(fp)
	      const _Functor& __f = __source._M_access<_Functor>();
   10b80:	e13ffe17 	ldw	r4,-8(fp)
   10b84:	0010d600 	call	10d60 <_ZNKSt9_Any_data9_M_accessIPFvRN6Serial10rx_messageEEEERKT_v>
   10b88:	e0bfff15 	stw	r2,-4(fp)
	      return const_cast<_Functor*>(std::__addressof(__f));
   10b8c:	e13fff17 	ldw	r4,-4(fp)
   10b90:	0010d900 	call	10d90 <_ZSt11__addressofIKPFvRN6Serial10rx_messageEEEPT_RS6_>
   10b94:	0001883a 	nop
	}
   10b98:	e037883a 	mov	sp,fp
   10b9c:	dfc00117 	ldw	ra,4(sp)
   10ba0:	df000017 	ldw	fp,0(sp)
   10ba4:	dec00204 	addi	sp,sp,8
   10ba8:	f800283a 	ret

00010bac <_ZSt7forwardIRN6Serial10rx_messageEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   10bac:	defffe04 	addi	sp,sp,-8
   10bb0:	df000115 	stw	fp,4(sp)
   10bb4:	df000104 	addi	fp,sp,4
   10bb8:	e13fff15 	stw	r4,-4(fp)
    { return static_cast<_Tp&&>(__t); }
   10bbc:	e0bfff17 	ldw	r2,-4(fp)
   10bc0:	e037883a 	mov	sp,fp
   10bc4:	df000017 	ldw	fp,0(sp)
   10bc8:	dec00104 	addi	sp,sp,4
   10bcc:	f800283a 	ret

00010bd0 <_ZSt10__invoke_rIvRPFvRN6Serial10rx_messageEEJS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
   10bd0:	defffa04 	addi	sp,sp,-24
   10bd4:	dfc00515 	stw	ra,20(sp)
   10bd8:	df000415 	stw	fp,16(sp)
   10bdc:	dc400315 	stw	r17,12(sp)
   10be0:	dc000215 	stw	r16,8(sp)
   10be4:	df000404 	addi	fp,sp,16
   10be8:	e13ffd15 	stw	r4,-12(fp)
   10bec:	e17ffc15 	stw	r5,-16(fp)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
   10bf0:	e13ffd17 	ldw	r4,-12(fp)
   10bf4:	0010db40 	call	10db4 <_ZSt7forwardIRPFvRN6Serial10rx_messageEEEOT_RNSt16remove_referenceIS6_E4typeE>
   10bf8:	1021883a 	mov	r16,r2
   10bfc:	e13ffc17 	ldw	r4,-16(fp)
   10c00:	0010bac0 	call	10bac <_ZSt7forwardIRN6Serial10rx_messageEEOT_RNSt16remove_referenceIS3_E4typeE>
   10c04:	100d883a 	mov	r6,r2
   10c08:	800b883a 	mov	r5,r16
   10c0c:	8809883a 	mov	r4,r17
   10c10:	0010dd80 	call	10dd8 <_ZSt13__invoke_implIvRPFvRN6Serial10rx_messageEEJS2_EET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
   10c14:	0001883a 	nop
   10c18:	e6fffe04 	addi	sp,fp,-8
   10c1c:	dfc00317 	ldw	ra,12(sp)
   10c20:	df000217 	ldw	fp,8(sp)
   10c24:	dc400117 	ldw	r17,4(sp)
   10c28:	dc000017 	ldw	r16,0(sp)
   10c2c:	dec00404 	addi	sp,sp,16
   10c30:	f800283a 	ret

00010c34 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
   10c34:	defffd04 	addi	sp,sp,-12
   10c38:	dfc00215 	stw	ra,8(sp)
   10c3c:	df000115 	stw	fp,4(sp)
   10c40:	df000104 	addi	fp,sp,4
   10c44:	e13fff15 	stw	r4,-4(fp)
      { return *static_cast<_Tp*>(_M_access()); }
   10c48:	e13fff17 	ldw	r4,-4(fp)
   10c4c:	00105c40 	call	105c4 <_ZNSt9_Any_data9_M_accessEv>
   10c50:	e037883a 	mov	sp,fp
   10c54:	dfc00117 	ldw	ra,4(sp)
   10c58:	df000017 	ldw	fp,0(sp)
   10c5c:	dec00204 	addi	sp,sp,8
   10c60:	f800283a 	ret

00010c64 <_ZNSt9_Any_data9_M_accessIPPFvRN6Serial10rx_messageEEEERT_v>:
      _M_access()
   10c64:	defffd04 	addi	sp,sp,-12
   10c68:	dfc00215 	stw	ra,8(sp)
   10c6c:	df000115 	stw	fp,4(sp)
   10c70:	df000104 	addi	fp,sp,4
   10c74:	e13fff15 	stw	r4,-4(fp)
      { return *static_cast<_Tp*>(_M_access()); }
   10c78:	e13fff17 	ldw	r4,-4(fp)
   10c7c:	00105c40 	call	105c4 <_ZNSt9_Any_data9_M_accessEv>
   10c80:	e037883a 	mov	sp,fp
   10c84:	dfc00117 	ldw	ra,4(sp)
   10c88:	df000017 	ldw	fp,0(sp)
   10c8c:	dec00204 	addi	sp,sp,8
   10c90:	f800283a 	ret

00010c94 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   10c94:	defffa04 	addi	sp,sp,-24
   10c98:	dfc00515 	stw	ra,20(sp)
   10c9c:	df000415 	stw	fp,16(sp)
   10ca0:	dc000315 	stw	r16,12(sp)
   10ca4:	df000404 	addi	fp,sp,16
   10ca8:	e13ffe15 	stw	r4,-8(fp)
   10cac:	e17ffd15 	stw	r5,-12(fp)
   10cb0:	e1bffc15 	stw	r6,-16(fp)
	  switch (__op)
   10cb4:	e0bffc17 	ldw	r2,-16(fp)
   10cb8:	10c000e0 	cmpeqi	r3,r2,3
   10cbc:	18001d1e 	bne	r3,zero,10d34 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0xa0>
   10cc0:	10c00108 	cmpgei	r3,r2,4
   10cc4:	18001f1e 	bne	r3,zero,10d44 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0xb0>
   10cc8:	10c000a0 	cmpeqi	r3,r2,2
   10ccc:	1800141e 	bne	r3,zero,10d20 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x8c>
   10cd0:	10c000c8 	cmpgei	r3,r2,3
   10cd4:	18001b1e 	bne	r3,zero,10d44 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0xb0>
   10cd8:	10000326 	beq	r2,zero,10ce8 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x54>
   10cdc:	10800060 	cmpeqi	r2,r2,1
   10ce0:	1000081e 	bne	r2,zero,10d04 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x70>
   10ce4:	00001706 	br	10d44 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0xb0>
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
   10ce8:	e13ffe17 	ldw	r4,-8(fp)
   10cec:	0010c340 	call	10c34 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
   10cf0:	1007883a 	mov	r3,r2
   10cf4:	00800074 	movhi	r2,1
   10cf8:	109ad204 	addi	r2,r2,27464
   10cfc:	18800015 	stw	r2,0(r3)
	      break;
   10d00:	00001006 	br	10d44 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0xb0>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   10d04:	e13ffe17 	ldw	r4,-8(fp)
   10d08:	0010c640 	call	10c64 <_ZNSt9_Any_data9_M_accessIPPFvRN6Serial10rx_messageEEEERT_v>
   10d0c:	1021883a 	mov	r16,r2
   10d10:	e13ffd17 	ldw	r4,-12(fp)
   10d14:	0010b6c0 	call	10b6c <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE14_M_get_pointerERKSt9_Any_data>
   10d18:	80800015 	stw	r2,0(r16)
	      break;
   10d1c:	00000906 	br	10d44 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0xb0>
	      _M_clone(__dest, __source, _Local_storage());
   10d20:	400d883a 	mov	r6,r8
   10d24:	e17ffd17 	ldw	r5,-12(fp)
   10d28:	e13ffe17 	ldw	r4,-8(fp)
   10d2c:	0010e300 	call	10e30 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>
	      break;
   10d30:	00000406 	br	10d44 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0xb0>
	      _M_destroy(__dest, _Local_storage());
   10d34:	380b883a 	mov	r5,r7
   10d38:	e13ffe17 	ldw	r4,-8(fp)
   10d3c:	0010e900 	call	10e90 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
   10d40:	0001883a 	nop
	  return false;
   10d44:	0005883a 	mov	r2,zero
	}
   10d48:	e6ffff04 	addi	sp,fp,-4
   10d4c:	dfc00217 	ldw	ra,8(sp)
   10d50:	df000117 	ldw	fp,4(sp)
   10d54:	dc000017 	ldw	r16,0(sp)
   10d58:	dec00304 	addi	sp,sp,12
   10d5c:	f800283a 	ret

00010d60 <_ZNKSt9_Any_data9_M_accessIPFvRN6Serial10rx_messageEEEERKT_v>:
      _M_access() const
   10d60:	defffd04 	addi	sp,sp,-12
   10d64:	dfc00215 	stw	ra,8(sp)
   10d68:	df000115 	stw	fp,4(sp)
   10d6c:	df000104 	addi	fp,sp,4
   10d70:	e13fff15 	stw	r4,-4(fp)
      { return *static_cast<const _Tp*>(_M_access()); }
   10d74:	e13fff17 	ldw	r4,-4(fp)
   10d78:	00105e80 	call	105e8 <_ZNKSt9_Any_data9_M_accessEv>
   10d7c:	e037883a 	mov	sp,fp
   10d80:	dfc00117 	ldw	ra,4(sp)
   10d84:	df000017 	ldw	fp,0(sp)
   10d88:	dec00204 	addi	sp,sp,8
   10d8c:	f800283a 	ret

00010d90 <_ZSt11__addressofIKPFvRN6Serial10rx_messageEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   10d90:	defffe04 	addi	sp,sp,-8
   10d94:	df000115 	stw	fp,4(sp)
   10d98:	df000104 	addi	fp,sp,4
   10d9c:	e13fff15 	stw	r4,-4(fp)
    { return __builtin_addressof(__r); }
   10da0:	e0bfff17 	ldw	r2,-4(fp)
   10da4:	e037883a 	mov	sp,fp
   10da8:	df000017 	ldw	fp,0(sp)
   10dac:	dec00104 	addi	sp,sp,4
   10db0:	f800283a 	ret

00010db4 <_ZSt7forwardIRPFvRN6Serial10rx_messageEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   10db4:	defffe04 	addi	sp,sp,-8
   10db8:	df000115 	stw	fp,4(sp)
   10dbc:	df000104 	addi	fp,sp,4
   10dc0:	e13fff15 	stw	r4,-4(fp)
    { return static_cast<_Tp&&>(__t); }
   10dc4:	e0bfff17 	ldw	r2,-4(fp)
   10dc8:	e037883a 	mov	sp,fp
   10dcc:	df000017 	ldw	fp,0(sp)
   10dd0:	dec00104 	addi	sp,sp,4
   10dd4:	f800283a 	ret

00010dd8 <_ZSt13__invoke_implIvRPFvRN6Serial10rx_messageEEJS2_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
   10dd8:	defffa04 	addi	sp,sp,-24
   10ddc:	dfc00515 	stw	ra,20(sp)
   10de0:	df000415 	stw	fp,16(sp)
   10de4:	dc000315 	stw	r16,12(sp)
   10de8:	df000404 	addi	fp,sp,16
   10dec:	e13ffec5 	stb	r4,-5(fp)
   10df0:	e17ffd15 	stw	r5,-12(fp)
   10df4:	e1bffc15 	stw	r6,-16(fp)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   10df8:	e13ffd17 	ldw	r4,-12(fp)
   10dfc:	0010db40 	call	10db4 <_ZSt7forwardIRPFvRN6Serial10rx_messageEEEOT_RNSt16remove_referenceIS6_E4typeE>
   10e00:	14000017 	ldw	r16,0(r2)
   10e04:	e13ffc17 	ldw	r4,-16(fp)
   10e08:	0010bac0 	call	10bac <_ZSt7forwardIRN6Serial10rx_messageEEOT_RNSt16remove_referenceIS3_E4typeE>
   10e0c:	1009883a 	mov	r4,r2
   10e10:	803ee83a 	callr	r16
   10e14:	0001883a 	nop
   10e18:	e6ffff04 	addi	sp,fp,-4
   10e1c:	dfc00217 	ldw	ra,8(sp)
   10e20:	df000117 	ldw	fp,4(sp)
   10e24:	dc000017 	ldw	r16,0(sp)
   10e28:	dec00304 	addi	sp,sp,12
   10e2c:	f800283a 	ret

00010e30 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
   10e30:	defffa04 	addi	sp,sp,-24
   10e34:	dfc00515 	stw	ra,20(sp)
   10e38:	df000415 	stw	fp,16(sp)
   10e3c:	dc000315 	stw	r16,12(sp)
   10e40:	df000404 	addi	fp,sp,16
   10e44:	e13ffe15 	stw	r4,-8(fp)
   10e48:	e17ffd15 	stw	r5,-12(fp)
   10e4c:	e1bffcc5 	stb	r6,-13(fp)
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   10e50:	e13ffd17 	ldw	r4,-12(fp)
   10e54:	0010d600 	call	10d60 <_ZNKSt9_Any_data9_M_accessIPFvRN6Serial10rx_messageEEEERKT_v>
   10e58:	14000017 	ldw	r16,0(r2)
   10e5c:	e13ffe17 	ldw	r4,-8(fp)
   10e60:	00105c40 	call	105c4 <_ZNSt9_Any_data9_M_accessEv>
   10e64:	100b883a 	mov	r5,r2
   10e68:	01000104 	movi	r4,4
   10e6c:	001059c0 	call	1059c <_ZnwjPv>
   10e70:	14000015 	stw	r16,0(r2)
	}
   10e74:	0001883a 	nop
   10e78:	e6ffff04 	addi	sp,fp,-4
   10e7c:	dfc00217 	ldw	ra,8(sp)
   10e80:	df000117 	ldw	fp,4(sp)
   10e84:	dc000017 	ldw	r16,0(sp)
   10e88:	dec00304 	addi	sp,sp,12
   10e8c:	f800283a 	ret

00010e90 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
   10e90:	defffc04 	addi	sp,sp,-16
   10e94:	dfc00315 	stw	ra,12(sp)
   10e98:	df000215 	stw	fp,8(sp)
   10e9c:	df000204 	addi	fp,sp,8
   10ea0:	e13fff15 	stw	r4,-4(fp)
   10ea4:	e17ffec5 	stb	r5,-5(fp)
	  __victim._M_access<_Functor>().~_Functor();
   10ea8:	e13fff17 	ldw	r4,-4(fp)
   10eac:	0010ec80 	call	10ec8 <_ZNSt9_Any_data9_M_accessIPFvRN6Serial10rx_messageEEEERT_v>
	}
   10eb0:	0001883a 	nop
   10eb4:	e037883a 	mov	sp,fp
   10eb8:	dfc00117 	ldw	ra,4(sp)
   10ebc:	df000017 	ldw	fp,0(sp)
   10ec0:	dec00204 	addi	sp,sp,8
   10ec4:	f800283a 	ret

00010ec8 <_ZNSt9_Any_data9_M_accessIPFvRN6Serial10rx_messageEEEERT_v>:
      _M_access()
   10ec8:	defffd04 	addi	sp,sp,-12
   10ecc:	dfc00215 	stw	ra,8(sp)
   10ed0:	df000115 	stw	fp,4(sp)
   10ed4:	df000104 	addi	fp,sp,4
   10ed8:	e13fff15 	stw	r4,-4(fp)
      { return *static_cast<_Tp*>(_M_access()); }
   10edc:	e13fff17 	ldw	r4,-4(fp)
   10ee0:	00105c40 	call	105c4 <_ZNSt9_Any_data9_M_accessEv>
   10ee4:	e037883a 	mov	sp,fp
   10ee8:	dfc00117 	ldw	ra,4(sp)
   10eec:	df000017 	ldw	fp,0(sp)
   10ef0:	dec00204 	addi	sp,sp,8
   10ef4:	f800283a 	ret

00010ef8 <_ZN5Plant7EncoderC1Em>:
#include "encoder.hpp"

Plant::Encoder::Encoder(uint32_t base_address) :
   10ef8:	defffd04 	addi	sp,sp,-12
   10efc:	df000215 	stw	fp,8(sp)
   10f00:	df000204 	addi	fp,sp,8
   10f04:	e13fff15 	stw	r4,-4(fp)
   10f08:	e17ffe15 	stw	r5,-8(fp)
	base_address(base_address)
   10f0c:	e0bfff17 	ldw	r2,-4(fp)
   10f10:	e0fffe17 	ldw	r3,-8(fp)
   10f14:	10c00015 	stw	r3,0(r2)
{}
   10f18:	0001883a 	nop
   10f1c:	e037883a 	mov	sp,fp
   10f20:	df000017 	ldw	fp,0(sp)
   10f24:	dec00104 	addi	sp,sp,4
   10f28:	f800283a 	ret

00010f2c <_ZN5Plant7Encoder8readDataEv>:

int32_t Plant::Encoder::readData()
{
   10f2c:	defffe04 	addi	sp,sp,-8
   10f30:	df000115 	stw	fp,4(sp)
   10f34:	df000104 	addi	fp,sp,4
   10f38:	e13fff15 	stw	r4,-4(fp)
	return IORD_32DIRECT(base_address, 0);
   10f3c:	e0bfff17 	ldw	r2,-4(fp)
   10f40:	10800017 	ldw	r2,0(r2)
   10f44:	10800037 	ldwio	r2,0(r2)
}
   10f48:	e037883a 	mov	sp,fp
   10f4c:	df000017 	ldw	fp,0(sp)
   10f50:	dec00104 	addi	sp,sp,4
   10f54:	f800283a 	ret

00010f58 <_ZN5Plant5MotorC1Emm>:
#include "motor.hpp"

Plant::Motor::Motor(uint32_t base_address_first_word, uint32_t base_address_second_word) :
   10f58:	defffb04 	addi	sp,sp,-20
   10f5c:	dfc00415 	stw	ra,16(sp)
   10f60:	df000315 	stw	fp,12(sp)
   10f64:	df000304 	addi	fp,sp,12
   10f68:	e13fff15 	stw	r4,-4(fp)
   10f6c:	e17ffe15 	stw	r5,-8(fp)
   10f70:	e1bffd15 	stw	r6,-12(fp)
	base_address_first_word(base_address_first_word),
	base_address_second_word(base_address_second_word)
   10f74:	e0bfff17 	ldw	r2,-4(fp)
   10f78:	e0fffe17 	ldw	r3,-8(fp)
   10f7c:	10c00015 	stw	r3,0(r2)
   10f80:	e0bfff17 	ldw	r2,-4(fp)
   10f84:	e0fffd17 	ldw	r3,-12(fp)
   10f88:	10c00115 	stw	r3,4(r2)
   10f8c:	e0bfff17 	ldw	r2,-4(fp)
   10f90:	10000215 	stw	zero,8(r2)
   10f94:	e0bfff17 	ldw	r2,-4(fp)
   10f98:	10000315 	stw	zero,12(r2)
{
	stop();
   10f9c:	e13fff17 	ldw	r4,-4(fp)
   10fa0:	001106c0 	call	1106c <_ZN5Plant5Motor4stopEv>
}
   10fa4:	0001883a 	nop
   10fa8:	e037883a 	mov	sp,fp
   10fac:	dfc00117 	ldw	ra,4(sp)
   10fb0:	df000017 	ldw	fp,0(sp)
   10fb4:	dec00204 	addi	sp,sp,8
   10fb8:	f800283a 	ret

00010fbc <_ZN5Plant5Motor12setFrequencyEm>:

void Plant::Motor::setFrequency(uint32_t new_frequency)
{
   10fbc:	defffd04 	addi	sp,sp,-12
   10fc0:	df000215 	stw	fp,8(sp)
   10fc4:	df000204 	addi	fp,sp,8
   10fc8:	e13fff15 	stw	r4,-4(fp)
   10fcc:	e17ffe15 	stw	r5,-8(fp)
	if (frequency != new_frequency)
   10fd0:	e0bfff17 	ldw	r2,-4(fp)
   10fd4:	10800217 	ldw	r2,8(r2)
   10fd8:	e0fffe17 	ldw	r3,-8(fp)
   10fdc:	18800826 	beq	r3,r2,11000 <_ZN5Plant5Motor12setFrequencyEm+0x44>
	{
		IOWR_32DIRECT(base_address_first_word, 0, new_frequency);
   10fe0:	e0bfff17 	ldw	r2,-4(fp)
   10fe4:	10800017 	ldw	r2,0(r2)
   10fe8:	1007883a 	mov	r3,r2
   10fec:	e0bffe17 	ldw	r2,-8(fp)
   10ff0:	18800035 	stwio	r2,0(r3)
		frequency = new_frequency;
   10ff4:	e0bfff17 	ldw	r2,-4(fp)
   10ff8:	e0fffe17 	ldw	r3,-8(fp)
   10ffc:	10c00215 	stw	r3,8(r2)
	}
}
   11000:	0001883a 	nop
   11004:	e037883a 	mov	sp,fp
   11008:	df000017 	ldw	fp,0(sp)
   1100c:	dec00104 	addi	sp,sp,4
   11010:	f800283a 	ret

00011014 <_ZN5Plant5Motor13setSecondWordEm>:

void  Plant::Motor::setSecondWord(uint32_t new_word)
{
   11014:	defffd04 	addi	sp,sp,-12
   11018:	df000215 	stw	fp,8(sp)
   1101c:	df000204 	addi	fp,sp,8
   11020:	e13fff15 	stw	r4,-4(fp)
   11024:	e17ffe15 	stw	r5,-8(fp)
	if (second_word != new_word)
   11028:	e0bfff17 	ldw	r2,-4(fp)
   1102c:	10800317 	ldw	r2,12(r2)
   11030:	e0fffe17 	ldw	r3,-8(fp)
   11034:	18800826 	beq	r3,r2,11058 <_ZN5Plant5Motor13setSecondWordEm+0x44>
	{
		IOWR_32DIRECT(base_address_second_word, 0, new_word);
   11038:	e0bfff17 	ldw	r2,-4(fp)
   1103c:	10800117 	ldw	r2,4(r2)
   11040:	1007883a 	mov	r3,r2
   11044:	e0bffe17 	ldw	r2,-8(fp)
   11048:	18800035 	stwio	r2,0(r3)
		second_word = new_word;
   1104c:	e0bfff17 	ldw	r2,-4(fp)
   11050:	e0fffe17 	ldw	r3,-8(fp)
   11054:	10c00315 	stw	r3,12(r2)
	}
}
   11058:	0001883a 	nop
   1105c:	e037883a 	mov	sp,fp
   11060:	df000017 	ldw	fp,0(sp)
   11064:	dec00104 	addi	sp,sp,4
   11068:	f800283a 	ret

0001106c <_ZN5Plant5Motor4stopEv>:

void Plant::Motor::stop()
{
   1106c:	defffe04 	addi	sp,sp,-8
   11070:	df000115 	stw	fp,4(sp)
   11074:	df000104 	addi	fp,sp,4
   11078:	e13fff15 	stw	r4,-4(fp)
	// Set all values to zero.
	IOWR_32DIRECT(base_address_first_word, 0, 0);
   1107c:	e0bfff17 	ldw	r2,-4(fp)
   11080:	10800017 	ldw	r2,0(r2)
   11084:	0007883a 	mov	r3,zero
   11088:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(base_address_second_word, 0, 0);
   1108c:	e0bfff17 	ldw	r2,-4(fp)
   11090:	10800117 	ldw	r2,4(r2)
   11094:	0007883a 	mov	r3,zero
   11098:	10c00035 	stwio	r3,0(r2)
}
   1109c:	0001883a 	nop
   110a0:	e037883a 	mov	sp,fp
   110a4:	df000017 	ldw	fp,0(sp)
   110a8:	dec00104 	addi	sp,sp,4
   110ac:	f800283a 	ret

000110b0 <_ZN6Serial4UART10uart_0_isrEPv>:
std::array<uint8_t, Serial::MESSAGE_SIZE> Serial::UART::rx_data;
alt_u8 Serial::UART::rx_len = 0;
std::function<void(Serial::rx_message &received_message)> Serial::UART::callback;

void Serial::UART::uart_0_isr(void *)
{
   110b0:	defffa04 	addi	sp,sp,-24
   110b4:	dfc00515 	stw	ra,20(sp)
   110b8:	df000415 	stw	fp,16(sp)
   110bc:	dc000315 	stw	r16,12(sp)
   110c0:	df000404 	addi	fp,sp,16
   110c4:	e13ffc15 	stw	r4,-16(fp)
	// Check if the UART buffer is empty or if there are more messages waiting.
	alt_u16 status = IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE);
   110c8:	008000b4 	movhi	r2,2
   110cc:	108a0237 	ldwio	r2,10248(r2)
   110d0:	e0bffe8d 	sth	r2,-6(fp)

	if(status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   110d4:	e0bffe8b 	ldhu	r2,-6(fp)
   110d8:	1080200c 	andi	r2,r2,128
   110dc:	10001326 	beq	r2,zero,1112c <_ZN6Serial4UART10uart_0_isrEPv+0x7c>
	{
		rx_data[rx_len] = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);
   110e0:	008000b4 	movhi	r2,2
   110e4:	140a0037 	ldwio	r16,10240(r2)
   110e8:	d0a1f543 	ldbu	r2,-30763(gp)
   110ec:	10803fcc 	andi	r2,r2,255
   110f0:	100b883a 	mov	r5,r2
   110f4:	d121f444 	addi	r4,gp,-30767
   110f8:	00114d80 	call	114d8 <_ZNSt5arrayIhLj4EEixEj>
   110fc:	8007883a 	mov	r3,r16
   11100:	10c00005 	stb	r3,0(r2)
		rx_len ++ ;
   11104:	d0a1f543 	ldbu	r2,-30763(gp)
   11108:	10800044 	addi	r2,r2,1
   1110c:	d0a1f545 	stb	r2,-30763(gp)

		if (rx_len >= MESSAGE_SIZE)
   11110:	d0a1f543 	ldbu	r2,-30763(gp)
   11114:	10803fcc 	andi	r2,r2,255
   11118:	10800130 	cmpltui	r2,r2,4
   1111c:	1000031e 	bne	r2,zero,1112c <_ZN6Serial4UART10uart_0_isrEPv+0x7c>
		{
			uart_ready = true;
   11120:	00800044 	movi	r2,1
   11124:	d0a1f405 	stb	r2,-30768(gp)
			rx_len = 0;
   11128:	d021f545 	stb	zero,-30763(gp)
		}
	}

	if (uart_ready)
   1112c:	d0a1f403 	ldbu	r2,-30768(gp)
   11130:	10803fcc 	andi	r2,r2,255
   11134:	10000e26 	beq	r2,zero,11170 <_ZN6Serial4UART10uart_0_isrEPv+0xc0>
	{
		uart_ready = 0;
   11138:	d021f405 	stb	zero,-30768(gp)

		Serial::rx_message received_message;
		std::memcpy(&received_message, &rx_data, MESSAGE_SIZE);
   1113c:	d0a1f443 	ldbu	r2,-30767(gp)
   11140:	e0bffd05 	stb	r2,-12(fp)
   11144:	d0a1f483 	ldbu	r2,-30766(gp)
   11148:	e0bffd45 	stb	r2,-11(fp)
   1114c:	d0a1f4c3 	ldbu	r2,-30765(gp)
   11150:	e0bffd85 	stb	r2,-10(fp)
   11154:	d0a1f503 	ldbu	r2,-30764(gp)
   11158:	e0bffdc5 	stb	r2,-9(fp)

		callback(received_message);
   1115c:	e0bffd04 	addi	r2,fp,-12
   11160:	100b883a 	mov	r5,r2
   11164:	01000074 	movhi	r4,1
   11168:	211fb004 	addi	r4,r4,32448
   1116c:	00115140 	call	11514 <_ZNKSt8functionIFvRN6Serial10rx_messageEEEclES2_>
	}
}
   11170:	0001883a 	nop
   11174:	e6ffff04 	addi	sp,fp,-4
   11178:	dfc00217 	ldw	ra,8(sp)
   1117c:	df000117 	ldw	fp,4(sp)
   11180:	dc000017 	ldw	r16,0(sp)
   11184:	dec00304 	addi	sp,sp,12
   11188:	f800283a 	ret

0001118c <_ZN6Serial4UARTC1ESt8functionIFvRNS_10rx_messageEEE>:

Serial::UART::UART(std::function<void(Serial::rx_message &received_message)> func)
   1118c:	defffa04 	addi	sp,sp,-24
   11190:	dfc00515 	stw	ra,20(sp)
   11194:	df000415 	stw	fp,16(sp)
   11198:	df000404 	addi	fp,sp,16
   1119c:	e13ffe15 	stw	r4,-8(fp)
   111a0:	e17ffd15 	stw	r5,-12(fp)
{
	callback = func;
   111a4:	e17ffd17 	ldw	r5,-12(fp)
   111a8:	01000074 	movhi	r4,1
   111ac:	211fb004 	addi	r4,r4,32448
   111b0:	001158c0 	call	1158c <_ZNSt8functionIFvRN6Serial10rx_messageEEEaSERKS4_>

	// Clear status flag.
	IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE, 0x00);
   111b4:	0007883a 	mov	r3,zero
   111b8:	008000b4 	movhi	r2,2
   111bc:	10ca0235 	stwio	r3,10248(r2)

	// Read the useless value in the empty receive register.
	IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);
   111c0:	008000b4 	movhi	r2,2
   111c4:	108a0037 	ldwio	r2,10240(r2)

	// Setup RX IRQ routine.
	alt_u16 control = ALTERA_AVALON_UART_CONTROL_RRDY_MSK | ALTERA_AVALON_UART_CONTROL_E_MSK;
   111c8:	00806004 	movi	r2,384
   111cc:	e0bfff8d 	sth	r2,-2(fp)
	IOWR_ALTERA_AVALON_UART_CONTROL (UART_0_BASE, control);
   111d0:	e0ffff8b 	ldhu	r3,-2(fp)
   111d4:	008000b4 	movhi	r2,2
   111d8:	10ca0335 	stwio	r3,10252(r2)

	// Install IRQ service routine.
    alt_ic_isr_register(UART_0_IRQ_INTERRUPT_CONTROLLER_ID, UART_0_IRQ, uart_0_isr, NULL, NULL);
   111dc:	d8000015 	stw	zero,0(sp)
   111e0:	000f883a 	mov	r7,zero
   111e4:	01800074 	movhi	r6,1
   111e8:	31842c04 	addi	r6,r6,4272
   111ec:	014000c4 	movi	r5,3
   111f0:	0009883a 	mov	r4,zero
   111f4:	0014d6c0 	call	14d6c <alt_ic_isr_register>

    // Enable interrupt.
	IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
   111f8:	00c02004 	movi	r3,128
   111fc:	008000b4 	movhi	r2,2
   11200:	10ca0335 	stwio	r3,10252(r2)
}
   11204:	0001883a 	nop
   11208:	e037883a 	mov	sp,fp
   1120c:	dfc00117 	ldw	ra,4(sp)
   11210:	df000017 	ldw	fp,0(sp)
   11214:	dec00204 	addi	sp,sp,8
   11218:	f800283a 	ret

0001121c <_ZN6Serial4UART8sendDataESt5arrayIhLj4EE>:


void Serial::UART::sendData(std::array<uint8_t, 4> data)
{
   1121c:	defff704 	addi	sp,sp,-36
   11220:	dfc00815 	stw	ra,32(sp)
   11224:	df000715 	stw	fp,28(sp)
   11228:	df000704 	addi	fp,sp,28
   1122c:	e13ffa15 	stw	r4,-24(fp)
   11230:	e17ff915 	stw	r5,-28(fp)
	for (uint8_t data_byte : data)
   11234:	e0bff904 	addi	r2,fp,-28
   11238:	e0bffd15 	stw	r2,-12(fp)
   1123c:	e13ffd17 	ldw	r4,-12(fp)
   11240:	00115e80 	call	115e8 <_ZNSt5arrayIhLj4EE5beginEv>
   11244:	e0bfff15 	stw	r2,-4(fp)
   11248:	e13ffd17 	ldw	r4,-12(fp)
   1124c:	00116180 	call	11618 <_ZNSt5arrayIhLj4EE3endEv>
   11250:	e0bffc15 	stw	r2,-16(fp)
   11254:	e0ffff17 	ldw	r3,-4(fp)
   11258:	e0bffc17 	ldw	r2,-16(fp)
   1125c:	18801426 	beq	r3,r2,112b0 <_ZN6Serial4UART8sendDataESt5arrayIhLj4EE+0x94>
   11260:	e0bfff17 	ldw	r2,-4(fp)
   11264:	10800003 	ldbu	r2,0(r2)
   11268:	e0bffbc5 	stb	r2,-17(fp)
	{
		alt_u8 status = IORD_ALTERA_AVALON_UART_STATUS (UART_0_BASE);
   1126c:	008000b4 	movhi	r2,2
   11270:	108a0237 	ldwio	r2,10248(r2)
   11274:	e0bffec5 	stb	r2,-5(fp)

		// Wait for sending to finish.
		while (! (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK))
   11278:	e0bffec3 	ldbu	r2,-5(fp)
   1127c:	1080100c 	andi	r2,r2,64
   11280:	1000041e 	bne	r2,zero,11294 <_ZN6Serial4UART8sendDataESt5arrayIhLj4EE+0x78>
		{
			status = IORD_ALTERA_AVALON_UART_STATUS (UART_0_BASE);
   11284:	008000b4 	movhi	r2,2
   11288:	108a0237 	ldwio	r2,10248(r2)
   1128c:	e0bffec5 	stb	r2,-5(fp)
		while (! (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK))
   11290:	003ff906 	br	11278 <_ZN6Serial4UART8sendDataESt5arrayIhLj4EE+0x5c>
		}

		IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, data_byte);
   11294:	e0fffbc3 	ldbu	r3,-17(fp)
   11298:	008000b4 	movhi	r2,2
   1129c:	10ca0135 	stwio	r3,10244(r2)
	for (uint8_t data_byte : data)
   112a0:	e0bfff17 	ldw	r2,-4(fp)
   112a4:	10800044 	addi	r2,r2,1
   112a8:	e0bfff15 	stw	r2,-4(fp)
   112ac:	003fe906 	br	11254 <_ZN6Serial4UART8sendDataESt5arrayIhLj4EE+0x38>
	}
}
   112b0:	0001883a 	nop
   112b4:	e037883a 	mov	sp,fp
   112b8:	dfc00117 	ldw	ra,4(sp)
   112bc:	df000017 	ldw	fp,0(sp)
   112c0:	dec00204 	addi	sp,sp,8
   112c4:	f800283a 	ret

000112c8 <_ZN6Serial4UART14convertToArrayENS_10tx_messageE>:

std::array<uint8_t, 4> Serial::UART::convertToArray(tx_message msg)
{
   112c8:	defff904 	addi	sp,sp,-28
   112cc:	dfc00615 	stw	ra,24(sp)
   112d0:	df000515 	stw	fp,20(sp)
   112d4:	dc000415 	stw	r16,16(sp)
   112d8:	df000504 	addi	fp,sp,20
   112dc:	e13ffc15 	stw	r4,-16(fp)
   112e0:	e17ffb15 	stw	r5,-20(fp)
    std::array<uint8_t, 4> temp{};
   112e4:	e03ffd15 	stw	zero,-12(fp)
    std::copy(
   112e8:	e43ffb04 	addi	r16,fp,-20
   112ec:	84000104 	addi	r16,r16,4
            reinterpret_cast<uint8_t *>(&msg),
            reinterpret_cast<uint8_t *>(&msg) + 4,
            &temp[0]
   112f0:	e0bffd04 	addi	r2,fp,-12
   112f4:	000b883a 	mov	r5,zero
   112f8:	1009883a 	mov	r4,r2
   112fc:	00114d80 	call	114d8 <_ZNSt5arrayIhLj4EEixEj>
   11300:	1007883a 	mov	r3,r2
    std::copy(
   11304:	e0bffb04 	addi	r2,fp,-20
   11308:	180d883a 	mov	r6,r3
   1130c:	800b883a 	mov	r5,r16
   11310:	1009883a 	mov	r4,r2
   11314:	001164c0 	call	1164c <_ZSt4copyIPhS0_ET0_T_S2_S1_>
    );
    return temp;
   11318:	e0bffd17 	ldw	r2,-12(fp)
   1131c:	e0bffe15 	stw	r2,-8(fp)
   11320:	0005883a 	mov	r2,zero
   11324:	e0fffe03 	ldbu	r3,-8(fp)
   11328:	18c03fcc 	andi	r3,r3,255
   1132c:	013fc004 	movi	r4,-256
   11330:	1104703a 	and	r2,r2,r4
   11334:	10c4b03a 	or	r2,r2,r3
   11338:	e0fffe43 	ldbu	r3,-7(fp)
   1133c:	18c03fcc 	andi	r3,r3,255
   11340:	1808923a 	slli	r4,r3,8
   11344:	00fffff4 	movhi	r3,65535
   11348:	18c03fc4 	addi	r3,r3,255
   1134c:	10c4703a 	and	r2,r2,r3
   11350:	1104b03a 	or	r2,r2,r4
   11354:	e0fffe83 	ldbu	r3,-6(fp)
   11358:	18c03fcc 	andi	r3,r3,255
   1135c:	1808943a 	slli	r4,r3,16
   11360:	00ffc074 	movhi	r3,65281
   11364:	18ffffc4 	addi	r3,r3,-1
   11368:	10c4703a 	and	r2,r2,r3
   1136c:	1104b03a 	or	r2,r2,r4
   11370:	e0fffec3 	ldbu	r3,-5(fp)
   11374:	1808963a 	slli	r4,r3,24
   11378:	00c04034 	movhi	r3,256
   1137c:	18ffffc4 	addi	r3,r3,-1
   11380:	10c4703a 	and	r2,r2,r3
   11384:	1104b03a 	or	r2,r2,r4
}
   11388:	e6ffff04 	addi	sp,fp,-4
   1138c:	dfc00217 	ldw	ra,8(sp)
   11390:	df000117 	ldw	fp,4(sp)
   11394:	dc000017 	ldw	r16,0(sp)
   11398:	dec00304 	addi	sp,sp,12
   1139c:	f800283a 	ret

000113a0 <_Z41__static_initialization_and_destruction_0ii>:
   113a0:	defffc04 	addi	sp,sp,-16
   113a4:	dfc00315 	stw	ra,12(sp)
   113a8:	df000215 	stw	fp,8(sp)
   113ac:	df000204 	addi	fp,sp,8
   113b0:	e13fff15 	stw	r4,-4(fp)
   113b4:	e17ffe15 	stw	r5,-8(fp)
   113b8:	e0bfff17 	ldw	r2,-4(fp)
   113bc:	10800058 	cmpnei	r2,r2,1
   113c0:	1000061e 	bne	r2,zero,113dc <_Z41__static_initialization_and_destruction_0ii+0x3c>
   113c4:	e0fffe17 	ldw	r3,-8(fp)
   113c8:	00bfffd4 	movui	r2,65535
   113cc:	1880031e 	bne	r3,r2,113dc <_Z41__static_initialization_and_destruction_0ii+0x3c>
std::function<void(Serial::rx_message &received_message)> Serial::UART::callback;
   113d0:	01000074 	movhi	r4,1
   113d4:	211fb004 	addi	r4,r4,32448
   113d8:	00114a00 	call	114a0 <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1Ev>
   113dc:	e0bfff17 	ldw	r2,-4(fp)
   113e0:	1000061e 	bne	r2,zero,113fc <_Z41__static_initialization_and_destruction_0ii+0x5c>
   113e4:	e0fffe17 	ldw	r3,-8(fp)
   113e8:	00bfffd4 	movui	r2,65535
   113ec:	1880031e 	bne	r3,r2,113fc <_Z41__static_initialization_and_destruction_0ii+0x5c>
   113f0:	01000074 	movhi	r4,1
   113f4:	211fb004 	addi	r4,r4,32448
   113f8:	00107f80 	call	107f8 <_ZNSt8functionIFvRN6Serial10rx_messageEEED1Ev>
}
   113fc:	0001883a 	nop
   11400:	e037883a 	mov	sp,fp
   11404:	dfc00117 	ldw	ra,4(sp)
   11408:	df000017 	ldw	fp,0(sp)
   1140c:	dec00204 	addi	sp,sp,8
   11410:	f800283a 	ret

00011414 <_GLOBAL__sub_I__ZN6Serial4UART10uart_readyE>:
   11414:	defffe04 	addi	sp,sp,-8
   11418:	dfc00115 	stw	ra,4(sp)
   1141c:	df000015 	stw	fp,0(sp)
   11420:	d839883a 	mov	fp,sp
   11424:	017fffd4 	movui	r5,65535
   11428:	01000044 	movi	r4,1
   1142c:	00113a00 	call	113a0 <_Z41__static_initialization_and_destruction_0ii>
   11430:	e037883a 	mov	sp,fp
   11434:	dfc00117 	ldw	ra,4(sp)
   11438:	df000017 	ldw	fp,0(sp)
   1143c:	dec00204 	addi	sp,sp,8
   11440:	f800283a 	ret

00011444 <_GLOBAL__sub_D__ZN6Serial4UART10uart_readyE>:
   11444:	defffe04 	addi	sp,sp,-8
   11448:	dfc00115 	stw	ra,4(sp)
   1144c:	df000015 	stw	fp,0(sp)
   11450:	d839883a 	mov	fp,sp
   11454:	017fffd4 	movui	r5,65535
   11458:	0009883a 	mov	r4,zero
   1145c:	00113a00 	call	113a0 <_Z41__static_initialization_and_destruction_0ii>
   11460:	e037883a 	mov	sp,fp
   11464:	dfc00117 	ldw	ra,4(sp)
   11468:	df000017 	ldw	fp,0(sp)
   1146c:	dec00204 	addi	sp,sp,8
   11470:	f800283a 	ret

00011474 <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
   11474:	defffe04 	addi	sp,sp,-8
   11478:	df000115 	stw	fp,4(sp)
   1147c:	df000104 	addi	fp,sp,4
   11480:	e13fff15 	stw	r4,-4(fp)
   11484:	e0bfff17 	ldw	r2,-4(fp)
   11488:	10800217 	ldw	r2,8(r2)
   1148c:	1005003a 	cmpeq	r2,r2,zero
   11490:	e037883a 	mov	sp,fp
   11494:	df000017 	ldw	fp,0(sp)
   11498:	dec00104 	addi	sp,sp,4
   1149c:	f800283a 	ret

000114a0 <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1Ev>:
      function() noexcept
   114a0:	defffd04 	addi	sp,sp,-12
   114a4:	dfc00215 	stw	ra,8(sp)
   114a8:	df000115 	stw	fp,4(sp)
   114ac:	df000104 	addi	fp,sp,4
   114b0:	e13fff15 	stw	r4,-4(fp)
      : _Function_base() { }
   114b4:	e0bfff17 	ldw	r2,-4(fp)
   114b8:	1009883a 	mov	r4,r2
   114bc:	001060c0 	call	1060c <_ZNSt14_Function_baseC1Ev>
   114c0:	0001883a 	nop
   114c4:	e037883a 	mov	sp,fp
   114c8:	dfc00117 	ldw	ra,4(sp)
   114cc:	df000017 	ldw	fp,0(sp)
   114d0:	dec00204 	addi	sp,sp,8
   114d4:	f800283a 	ret

000114d8 <_ZNSt5arrayIhLj4EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
   114d8:	defffc04 	addi	sp,sp,-16
   114dc:	dfc00315 	stw	ra,12(sp)
   114e0:	df000215 	stw	fp,8(sp)
   114e4:	df000204 	addi	fp,sp,8
   114e8:	e13fff15 	stw	r4,-4(fp)
   114ec:	e17ffe15 	stw	r5,-8(fp)
      { return _AT_Type::_S_ref(_M_elems, __n); }
   114f0:	e0bfff17 	ldw	r2,-4(fp)
   114f4:	e17ffe17 	ldw	r5,-8(fp)
   114f8:	1009883a 	mov	r4,r2
   114fc:	00116a80 	call	116a8 <_ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj>
   11500:	e037883a 	mov	sp,fp
   11504:	dfc00117 	ldw	ra,4(sp)
   11508:	df000017 	ldw	fp,0(sp)
   1150c:	dec00204 	addi	sp,sp,8
   11510:	f800283a 	ret

00011514 <_ZNKSt8functionIFvRN6Serial10rx_messageEEEclES2_>:

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   11514:	defffa04 	addi	sp,sp,-24
   11518:	dfc00515 	stw	ra,20(sp)
   1151c:	df000415 	stw	fp,16(sp)
   11520:	dc400315 	stw	r17,12(sp)
   11524:	dc000215 	stw	r16,8(sp)
   11528:	df000404 	addi	fp,sp,16
   1152c:	e13ffd15 	stw	r4,-12(fp)
   11530:	e17ffc15 	stw	r5,-16(fp)
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   11534:	e0bffd17 	ldw	r2,-12(fp)
   11538:	1009883a 	mov	r4,r2
   1153c:	00114740 	call	11474 <_ZNKSt14_Function_base8_M_emptyEv>
   11540:	10803fcc 	andi	r2,r2,255
   11544:	10000126 	beq	r2,zero,1154c <_ZNKSt8functionIFvRN6Serial10rx_messageEEEclES2_+0x38>
	__throw_bad_function_call();
   11548:	00131d80 	call	131d8 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   1154c:	e0bffd17 	ldw	r2,-12(fp)
   11550:	14000317 	ldw	r16,12(r2)
   11554:	e47ffd17 	ldw	r17,-12(fp)
   11558:	e13ffc17 	ldw	r4,-16(fp)
   1155c:	0010bac0 	call	10bac <_ZSt7forwardIRN6Serial10rx_messageEEOT_RNSt16remove_referenceIS3_E4typeE>
   11560:	100b883a 	mov	r5,r2
   11564:	8809883a 	mov	r4,r17
   11568:	803ee83a 	callr	r16
   1156c:	0001883a 	nop
    }
   11570:	e6fffe04 	addi	sp,fp,-8
   11574:	dfc00317 	ldw	ra,12(sp)
   11578:	df000217 	ldw	fp,8(sp)
   1157c:	dc400117 	ldw	r17,4(sp)
   11580:	dc000017 	ldw	r16,0(sp)
   11584:	dec00404 	addi	sp,sp,16
   11588:	f800283a 	ret

0001158c <_ZNSt8functionIFvRN6Serial10rx_messageEEEaSERKS4_>:
      operator=(const function& __x)
   1158c:	defff804 	addi	sp,sp,-32
   11590:	dfc00715 	stw	ra,28(sp)
   11594:	df000615 	stw	fp,24(sp)
   11598:	df000604 	addi	fp,sp,24
   1159c:	e13ffb15 	stw	r4,-20(fp)
   115a0:	e17ffa15 	stw	r5,-24(fp)
	function(__x).swap(*this);
   115a4:	e0bffc04 	addi	r2,fp,-16
   115a8:	e17ffa17 	ldw	r5,-24(fp)
   115ac:	1009883a 	mov	r4,r2
   115b0:	00116d80 	call	116d8 <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1ERKS4_>
   115b4:	e0bffc04 	addi	r2,fp,-16
   115b8:	e17ffb17 	ldw	r5,-20(fp)
   115bc:	1009883a 	mov	r4,r2
   115c0:	00118180 	call	11818 <_ZNSt8functionIFvRN6Serial10rx_messageEEE4swapERS4_>
   115c4:	e0bffc04 	addi	r2,fp,-16
   115c8:	1009883a 	mov	r4,r2
   115cc:	00107f80 	call	107f8 <_ZNSt8functionIFvRN6Serial10rx_messageEEED1Ev>
	return *this;
   115d0:	e0bffb17 	ldw	r2,-20(fp)
      }
   115d4:	e037883a 	mov	sp,fp
   115d8:	dfc00117 	ldw	ra,4(sp)
   115dc:	df000017 	ldw	fp,0(sp)
   115e0:	dec00204 	addi	sp,sp,8
   115e4:	f800283a 	ret

000115e8 <_ZNSt5arrayIhLj4EE5beginEv>:
      begin() noexcept
   115e8:	defffd04 	addi	sp,sp,-12
   115ec:	dfc00215 	stw	ra,8(sp)
   115f0:	df000115 	stw	fp,4(sp)
   115f4:	df000104 	addi	fp,sp,4
   115f8:	e13fff15 	stw	r4,-4(fp)
      { return iterator(data()); }
   115fc:	e13fff17 	ldw	r4,-4(fp)
   11600:	00118940 	call	11894 <_ZNSt5arrayIhLj4EE4dataEv>
   11604:	e037883a 	mov	sp,fp
   11608:	dfc00117 	ldw	ra,4(sp)
   1160c:	df000017 	ldw	fp,0(sp)
   11610:	dec00204 	addi	sp,sp,8
   11614:	f800283a 	ret

00011618 <_ZNSt5arrayIhLj4EE3endEv>:
      end() noexcept
   11618:	defffd04 	addi	sp,sp,-12
   1161c:	dfc00215 	stw	ra,8(sp)
   11620:	df000115 	stw	fp,4(sp)
   11624:	df000104 	addi	fp,sp,4
   11628:	e13fff15 	stw	r4,-4(fp)
      { return iterator(data() + _Nm); }
   1162c:	e13fff17 	ldw	r4,-4(fp)
   11630:	00118940 	call	11894 <_ZNSt5arrayIhLj4EE4dataEv>
   11634:	10800104 	addi	r2,r2,4
   11638:	e037883a 	mov	sp,fp
   1163c:	dfc00117 	ldw	ra,4(sp)
   11640:	df000017 	ldw	fp,0(sp)
   11644:	dec00204 	addi	sp,sp,8
   11648:	f800283a 	ret

0001164c <_ZSt4copyIPhS0_ET0_T_S2_S1_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
   1164c:	defffa04 	addi	sp,sp,-24
   11650:	dfc00515 	stw	ra,20(sp)
   11654:	df000415 	stw	fp,16(sp)
   11658:	dc000315 	stw	r16,12(sp)
   1165c:	df000404 	addi	fp,sp,16
   11660:	e13ffe15 	stw	r4,-8(fp)
   11664:	e17ffd15 	stw	r5,-12(fp)
   11668:	e1bffc15 	stw	r6,-16(fp)
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
   1166c:	e13ffe17 	ldw	r4,-8(fp)
   11670:	00118c80 	call	118c8 <_ZSt12__miter_baseIPhET_S1_>
   11674:	1021883a 	mov	r16,r2
   11678:	e13ffd17 	ldw	r4,-12(fp)
   1167c:	00118c80 	call	118c8 <_ZSt12__miter_baseIPhET_S1_>
   11680:	e1bffc17 	ldw	r6,-16(fp)
   11684:	100b883a 	mov	r5,r2
   11688:	8009883a 	mov	r4,r16
   1168c:	00118ec0 	call	118ec <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>
    }
   11690:	e6ffff04 	addi	sp,fp,-4
   11694:	dfc00217 	ldw	ra,8(sp)
   11698:	df000117 	ldw	fp,4(sp)
   1169c:	dc000017 	ldw	r16,0(sp)
   116a0:	dec00304 	addi	sp,sp,12
   116a4:	f800283a 	ret

000116a8 <_ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
   116a8:	defffd04 	addi	sp,sp,-12
   116ac:	df000215 	stw	fp,8(sp)
   116b0:	df000204 	addi	fp,sp,8
   116b4:	e13fff15 	stw	r4,-4(fp)
   116b8:	e17ffe15 	stw	r5,-8(fp)
      { return const_cast<_Tp&>(__t[__n]); }
   116bc:	e0ffff17 	ldw	r3,-4(fp)
   116c0:	e0bffe17 	ldw	r2,-8(fp)
   116c4:	1885883a 	add	r2,r3,r2
   116c8:	e037883a 	mov	sp,fp
   116cc:	df000017 	ldw	fp,0(sp)
   116d0:	dec00104 	addi	sp,sp,4
   116d4:	f800283a 	ret

000116d8 <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1ERKS4_>:
    function<_Res(_ArgTypes...)>::
   116d8:	deffe604 	addi	sp,sp,-104
   116dc:	dfc01915 	stw	ra,100(sp)
   116e0:	df001815 	stw	fp,96(sp)
   116e4:	ddc01715 	stw	r23,92(sp)
   116e8:	dd801615 	stw	r22,88(sp)
   116ec:	dd401515 	stw	r21,84(sp)
   116f0:	dd001415 	stw	r20,80(sp)
   116f4:	dcc01315 	stw	r19,76(sp)
   116f8:	dc801215 	stw	r18,72(sp)
   116fc:	dc401115 	stw	r17,68(sp)
   11700:	dc001015 	stw	r16,64(sp)
   11704:	df001804 	addi	fp,sp,96
   11708:	e13ff715 	stw	r4,-36(fp)
   1170c:	e17ff615 	stw	r5,-40(fp)
   11710:	00800074 	movhi	r2,1
   11714:	10887e04 	addi	r2,r2,8696
   11718:	e0bfef15 	stw	r2,-68(fp)
   1171c:	00800074 	movhi	r2,1
   11720:	109ab604 	addi	r2,r2,27352
   11724:	e0bff015 	stw	r2,-64(fp)
   11728:	e0bff104 	addi	r2,fp,-60
   1172c:	17000015 	stw	fp,0(r2)
   11730:	00c00074 	movhi	r3,1
   11734:	18c5eb04 	addi	r3,r3,6060
   11738:	10c00115 	stw	r3,4(r2)
   1173c:	16c00215 	stw	sp,8(r2)
   11740:	e0bfe904 	addi	r2,fp,-92
   11744:	1009883a 	mov	r4,r2
   11748:	00142080 	call	14208 <_Unwind_SjLj_Register>
    : _Function_base()
   1174c:	e0bff717 	ldw	r2,-36(fp)
   11750:	1009883a 	mov	r4,r2
   11754:	001060c0 	call	1060c <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
   11758:	e13ff617 	ldw	r4,-40(fp)
   1175c:	00119740 	call	11974 <_ZNKSt8functionIFvRN6Serial10rx_messageEEEcvbEv>
   11760:	10803fcc 	andi	r2,r2,255
   11764:	10001b26 	beq	r2,zero,117d4 <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1ERKS4_+0xfc>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   11768:	e0bff617 	ldw	r2,-40(fp)
   1176c:	10800217 	ldw	r2,8(r2)
   11770:	e13ff717 	ldw	r4,-36(fp)
   11774:	e17ff617 	ldw	r5,-40(fp)
   11778:	00c00044 	movi	r3,1
   1177c:	e0ffea15 	stw	r3,-88(fp)
   11780:	01800084 	movi	r6,2
   11784:	103ee83a 	callr	r2
	  _M_invoker = __x._M_invoker;
   11788:	e0bff617 	ldw	r2,-40(fp)
   1178c:	10c00317 	ldw	r3,12(r2)
   11790:	e0bff717 	ldw	r2,-36(fp)
   11794:	10c00315 	stw	r3,12(r2)
	  _M_manager = __x._M_manager;
   11798:	e0bff617 	ldw	r2,-40(fp)
   1179c:	10c00217 	ldw	r3,8(r2)
   117a0:	e0bff717 	ldw	r2,-36(fp)
   117a4:	10c00215 	stw	r3,8(r2)
    }
   117a8:	00000a06 	br	117d4 <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1ERKS4_+0xfc>
    : _Function_base()
   117ac:	e0bfeb17 	ldw	r2,-84(fp)
   117b0:	e0bfe815 	stw	r2,-96(fp)
   117b4:	e0bff717 	ldw	r2,-36(fp)
   117b8:	1009883a 	mov	r4,r2
   117bc:	00106380 	call	10638 <_ZNSt14_Function_baseD1Ev>
   117c0:	e0ffe817 	ldw	r3,-96(fp)
   117c4:	00bfffc4 	movi	r2,-1
   117c8:	e0bfea15 	stw	r2,-88(fp)
   117cc:	1809883a 	mov	r4,r3
   117d0:	00143f00 	call	143f0 <_Unwind_SjLj_Resume>
    }
   117d4:	0001883a 	nop
   117d8:	e0bfe904 	addi	r2,fp,-92
   117dc:	1009883a 	mov	r4,r2
   117e0:	00142200 	call	14220 <_Unwind_SjLj_Unregister>
   117e4:	e6fff804 	addi	sp,fp,-32
   117e8:	dfc00917 	ldw	ra,36(sp)
   117ec:	df000817 	ldw	fp,32(sp)
   117f0:	ddc00717 	ldw	r23,28(sp)
   117f4:	dd800617 	ldw	r22,24(sp)
   117f8:	dd400517 	ldw	r21,20(sp)
   117fc:	dd000417 	ldw	r20,16(sp)
   11800:	dcc00317 	ldw	r19,12(sp)
   11804:	dc800217 	ldw	r18,8(sp)
   11808:	dc400117 	ldw	r17,4(sp)
   1180c:	dc000017 	ldw	r16,0(sp)
   11810:	dec00a04 	addi	sp,sp,40
   11814:	f800283a 	ret

00011818 <_ZNSt8functionIFvRN6Serial10rx_messageEEE4swapERS4_>:
      void swap(function& __x) noexcept
   11818:	defffc04 	addi	sp,sp,-16
   1181c:	dfc00315 	stw	ra,12(sp)
   11820:	df000215 	stw	fp,8(sp)
   11824:	df000204 	addi	fp,sp,8
   11828:	e13fff15 	stw	r4,-4(fp)
   1182c:	e17ffe15 	stw	r5,-8(fp)
	std::swap(_M_functor, __x._M_functor);
   11830:	e0bfff17 	ldw	r2,-4(fp)
   11834:	e0fffe17 	ldw	r3,-8(fp)
   11838:	180b883a 	mov	r5,r3
   1183c:	1009883a 	mov	r4,r2
   11840:	00119d00 	call	119d0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
   11844:	e0bfff17 	ldw	r2,-4(fp)
   11848:	10c00204 	addi	r3,r2,8
   1184c:	e0bffe17 	ldw	r2,-8(fp)
   11850:	10800204 	addi	r2,r2,8
   11854:	100b883a 	mov	r5,r2
   11858:	1809883a 	mov	r4,r3
   1185c:	0011a800 	call	11a80 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
   11860:	e0bfff17 	ldw	r2,-4(fp)
   11864:	10c00304 	addi	r3,r2,12
   11868:	e0bffe17 	ldw	r2,-8(fp)
   1186c:	10800304 	addi	r2,r2,12
   11870:	100b883a 	mov	r5,r2
   11874:	1809883a 	mov	r4,r3
   11878:	0011b100 	call	11b10 <_ZSt4swapIPFvRKSt9_Any_dataRN6Serial10rx_messageEEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
   1187c:	0001883a 	nop
   11880:	e037883a 	mov	sp,fp
   11884:	dfc00117 	ldw	ra,4(sp)
   11888:	df000017 	ldw	fp,0(sp)
   1188c:	dec00204 	addi	sp,sp,8
   11890:	f800283a 	ret

00011894 <_ZNSt5arrayIhLj4EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
   11894:	defffd04 	addi	sp,sp,-12
   11898:	dfc00215 	stw	ra,8(sp)
   1189c:	df000115 	stw	fp,4(sp)
   118a0:	df000104 	addi	fp,sp,4
   118a4:	e13fff15 	stw	r4,-4(fp)
      { return _AT_Type::_S_ptr(_M_elems); }
   118a8:	e0bfff17 	ldw	r2,-4(fp)
   118ac:	1009883a 	mov	r4,r2
   118b0:	0011b7c0 	call	11b7c <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>
   118b4:	e037883a 	mov	sp,fp
   118b8:	dfc00117 	ldw	ra,4(sp)
   118bc:	df000017 	ldw	fp,0(sp)
   118c0:	dec00204 	addi	sp,sp,8
   118c4:	f800283a 	ret

000118c8 <_ZSt12__miter_baseIPhET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
   118c8:	defffe04 	addi	sp,sp,-8
   118cc:	df000115 	stw	fp,4(sp)
   118d0:	df000104 	addi	fp,sp,4
   118d4:	e13fff15 	stw	r4,-4(fp)
    { return __it; }
   118d8:	e0bfff17 	ldw	r2,-4(fp)
   118dc:	e037883a 	mov	sp,fp
   118e0:	df000017 	ldw	fp,0(sp)
   118e4:	dec00104 	addi	sp,sp,4
   118e8:	f800283a 	ret

000118ec <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
   118ec:	defff904 	addi	sp,sp,-28
   118f0:	dfc00615 	stw	ra,24(sp)
   118f4:	df000515 	stw	fp,20(sp)
   118f8:	dc400415 	stw	r17,16(sp)
   118fc:	dc000315 	stw	r16,12(sp)
   11900:	df000504 	addi	fp,sp,20
   11904:	e13ffd15 	stw	r4,-12(fp)
   11908:	e17ffc15 	stw	r5,-16(fp)
   1190c:	e1bffb15 	stw	r6,-20(fp)
      return std::__niter_wrap(__result,
   11910:	e13ffd17 	ldw	r4,-12(fp)
   11914:	0011ba00 	call	11ba0 <_ZSt12__niter_baseIPhET_S1_>
   11918:	1021883a 	mov	r16,r2
   1191c:	e13ffc17 	ldw	r4,-16(fp)
   11920:	0011ba00 	call	11ba0 <_ZSt12__niter_baseIPhET_S1_>
   11924:	1023883a 	mov	r17,r2
   11928:	e0bffb17 	ldw	r2,-20(fp)
   1192c:	1009883a 	mov	r4,r2
   11930:	0011ba00 	call	11ba0 <_ZSt12__niter_baseIPhET_S1_>
   11934:	100d883a 	mov	r6,r2
   11938:	880b883a 	mov	r5,r17
   1193c:	8009883a 	mov	r4,r16
   11940:	0011bc40 	call	11bc4 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>
   11944:	1007883a 	mov	r3,r2
   11948:	e0bffb04 	addi	r2,fp,-20
   1194c:	180b883a 	mov	r5,r3
   11950:	1009883a 	mov	r4,r2
   11954:	0011c040 	call	11c04 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
    }
   11958:	e6fffe04 	addi	sp,fp,-8
   1195c:	dfc00317 	ldw	ra,12(sp)
   11960:	df000217 	ldw	fp,8(sp)
   11964:	dc400117 	ldw	r17,4(sp)
   11968:	dc000017 	ldw	r16,0(sp)
   1196c:	dec00404 	addi	sp,sp,16
   11970:	f800283a 	ret

00011974 <_ZNKSt8functionIFvRN6Serial10rx_messageEEEcvbEv>:
      explicit operator bool() const noexcept
   11974:	defffd04 	addi	sp,sp,-12
   11978:	dfc00215 	stw	ra,8(sp)
   1197c:	df000115 	stw	fp,4(sp)
   11980:	df000104 	addi	fp,sp,4
   11984:	e13fff15 	stw	r4,-4(fp)
      { return !_M_empty(); }
   11988:	e0bfff17 	ldw	r2,-4(fp)
   1198c:	1009883a 	mov	r4,r2
   11990:	00114740 	call	11474 <_ZNKSt14_Function_base8_M_emptyEv>
   11994:	1080005c 	xori	r2,r2,1
   11998:	e037883a 	mov	sp,fp
   1199c:	dfc00117 	ldw	ra,4(sp)
   119a0:	df000017 	ldw	fp,0(sp)
   119a4:	dec00204 	addi	sp,sp,8
   119a8:	f800283a 	ret

000119ac <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
   119ac:	defffe04 	addi	sp,sp,-8
   119b0:	df000115 	stw	fp,4(sp)
   119b4:	df000104 	addi	fp,sp,4
   119b8:	e13fff15 	stw	r4,-4(fp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   119bc:	e0bfff17 	ldw	r2,-4(fp)
   119c0:	e037883a 	mov	sp,fp
   119c4:	df000017 	ldw	fp,0(sp)
   119c8:	dec00104 	addi	sp,sp,4
   119cc:	f800283a 	ret

000119d0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   119d0:	defffa04 	addi	sp,sp,-24
   119d4:	dfc00515 	stw	ra,20(sp)
   119d8:	df000415 	stw	fp,16(sp)
   119dc:	df000404 	addi	fp,sp,16
   119e0:	e13ffd15 	stw	r4,-12(fp)
   119e4:	e17ffc15 	stw	r5,-16(fp)
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   119e8:	e13ffd17 	ldw	r4,-12(fp)
   119ec:	00119ac0 	call	119ac <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
   119f0:	10c00017 	ldw	r3,0(r2)
   119f4:	e0fffe15 	stw	r3,-8(fp)
   119f8:	10800117 	ldw	r2,4(r2)
   119fc:	e0bfff15 	stw	r2,-4(fp)
      __a = _GLIBCXX_MOVE(__b);
   11a00:	e13ffc17 	ldw	r4,-16(fp)
   11a04:	00119ac0 	call	119ac <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
   11a08:	1007883a 	mov	r3,r2
   11a0c:	e0bffd17 	ldw	r2,-12(fp)
   11a10:	19000017 	ldw	r4,0(r3)
   11a14:	11000015 	stw	r4,0(r2)
   11a18:	18c00117 	ldw	r3,4(r3)
   11a1c:	10c00115 	stw	r3,4(r2)
      __b = _GLIBCXX_MOVE(__tmp);
   11a20:	e0bffe04 	addi	r2,fp,-8
   11a24:	1009883a 	mov	r4,r2
   11a28:	00119ac0 	call	119ac <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
   11a2c:	1007883a 	mov	r3,r2
   11a30:	e0bffc17 	ldw	r2,-16(fp)
   11a34:	19000017 	ldw	r4,0(r3)
   11a38:	11000015 	stw	r4,0(r2)
   11a3c:	18c00117 	ldw	r3,4(r3)
   11a40:	10c00115 	stw	r3,4(r2)
    }
   11a44:	0001883a 	nop
   11a48:	e037883a 	mov	sp,fp
   11a4c:	dfc00117 	ldw	ra,4(sp)
   11a50:	df000017 	ldw	fp,0(sp)
   11a54:	dec00204 	addi	sp,sp,8
   11a58:	f800283a 	ret

00011a5c <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
   11a5c:	defffe04 	addi	sp,sp,-8
   11a60:	df000115 	stw	fp,4(sp)
   11a64:	df000104 	addi	fp,sp,4
   11a68:	e13fff15 	stw	r4,-4(fp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   11a6c:	e0bfff17 	ldw	r2,-4(fp)
   11a70:	e037883a 	mov	sp,fp
   11a74:	df000017 	ldw	fp,0(sp)
   11a78:	dec00104 	addi	sp,sp,4
   11a7c:	f800283a 	ret

00011a80 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
   11a80:	defffb04 	addi	sp,sp,-20
   11a84:	dfc00415 	stw	ra,16(sp)
   11a88:	df000315 	stw	fp,12(sp)
   11a8c:	df000304 	addi	fp,sp,12
   11a90:	e13ffe15 	stw	r4,-8(fp)
   11a94:	e17ffd15 	stw	r5,-12(fp)
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   11a98:	e13ffe17 	ldw	r4,-8(fp)
   11a9c:	0011a5c0 	call	11a5c <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
   11aa0:	10800017 	ldw	r2,0(r2)
   11aa4:	e0bfff15 	stw	r2,-4(fp)
      __a = _GLIBCXX_MOVE(__b);
   11aa8:	e13ffd17 	ldw	r4,-12(fp)
   11aac:	0011a5c0 	call	11a5c <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
   11ab0:	10c00017 	ldw	r3,0(r2)
   11ab4:	e0bffe17 	ldw	r2,-8(fp)
   11ab8:	10c00015 	stw	r3,0(r2)
      __b = _GLIBCXX_MOVE(__tmp);
   11abc:	e0bfff04 	addi	r2,fp,-4
   11ac0:	1009883a 	mov	r4,r2
   11ac4:	0011a5c0 	call	11a5c <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
   11ac8:	10c00017 	ldw	r3,0(r2)
   11acc:	e0bffd17 	ldw	r2,-12(fp)
   11ad0:	10c00015 	stw	r3,0(r2)
    }
   11ad4:	0001883a 	nop
   11ad8:	e037883a 	mov	sp,fp
   11adc:	dfc00117 	ldw	ra,4(sp)
   11ae0:	df000017 	ldw	fp,0(sp)
   11ae4:	dec00204 	addi	sp,sp,8
   11ae8:	f800283a 	ret

00011aec <_ZSt4moveIRPFvRKSt9_Any_dataRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
   11aec:	defffe04 	addi	sp,sp,-8
   11af0:	df000115 	stw	fp,4(sp)
   11af4:	df000104 	addi	fp,sp,4
   11af8:	e13fff15 	stw	r4,-4(fp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   11afc:	e0bfff17 	ldw	r2,-4(fp)
   11b00:	e037883a 	mov	sp,fp
   11b04:	df000017 	ldw	fp,0(sp)
   11b08:	dec00104 	addi	sp,sp,4
   11b0c:	f800283a 	ret

00011b10 <_ZSt4swapIPFvRKSt9_Any_dataRN6Serial10rx_messageEEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
   11b10:	defffb04 	addi	sp,sp,-20
   11b14:	dfc00415 	stw	ra,16(sp)
   11b18:	df000315 	stw	fp,12(sp)
   11b1c:	df000304 	addi	fp,sp,12
   11b20:	e13ffe15 	stw	r4,-8(fp)
   11b24:	e17ffd15 	stw	r5,-12(fp)
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   11b28:	e13ffe17 	ldw	r4,-8(fp)
   11b2c:	0011aec0 	call	11aec <_ZSt4moveIRPFvRKSt9_Any_dataRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOSA_>
   11b30:	10800017 	ldw	r2,0(r2)
   11b34:	e0bfff15 	stw	r2,-4(fp)
      __a = _GLIBCXX_MOVE(__b);
   11b38:	e13ffd17 	ldw	r4,-12(fp)
   11b3c:	0011aec0 	call	11aec <_ZSt4moveIRPFvRKSt9_Any_dataRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOSA_>
   11b40:	10c00017 	ldw	r3,0(r2)
   11b44:	e0bffe17 	ldw	r2,-8(fp)
   11b48:	10c00015 	stw	r3,0(r2)
      __b = _GLIBCXX_MOVE(__tmp);
   11b4c:	e0bfff04 	addi	r2,fp,-4
   11b50:	1009883a 	mov	r4,r2
   11b54:	0011aec0 	call	11aec <_ZSt4moveIRPFvRKSt9_Any_dataRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOSA_>
   11b58:	10c00017 	ldw	r3,0(r2)
   11b5c:	e0bffd17 	ldw	r2,-12(fp)
   11b60:	10c00015 	stw	r3,0(r2)
    }
   11b64:	0001883a 	nop
   11b68:	e037883a 	mov	sp,fp
   11b6c:	dfc00117 	ldw	ra,4(sp)
   11b70:	df000017 	ldw	fp,0(sp)
   11b74:	dec00204 	addi	sp,sp,8
   11b78:	f800283a 	ret

00011b7c <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>:
      _S_ptr(const _Type& __t) noexcept
   11b7c:	defffe04 	addi	sp,sp,-8
   11b80:	df000115 	stw	fp,4(sp)
   11b84:	df000104 	addi	fp,sp,4
   11b88:	e13fff15 	stw	r4,-4(fp)
      { return const_cast<_Tp*>(__t); }
   11b8c:	e0bfff17 	ldw	r2,-4(fp)
   11b90:	e037883a 	mov	sp,fp
   11b94:	df000017 	ldw	fp,0(sp)
   11b98:	dec00104 	addi	sp,sp,4
   11b9c:	f800283a 	ret

00011ba0 <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
   11ba0:	defffe04 	addi	sp,sp,-8
   11ba4:	df000115 	stw	fp,4(sp)
   11ba8:	df000104 	addi	fp,sp,4
   11bac:	e13fff15 	stw	r4,-4(fp)
    { return __it; }
   11bb0:	e0bfff17 	ldw	r2,-4(fp)
   11bb4:	e037883a 	mov	sp,fp
   11bb8:	df000017 	ldw	fp,0(sp)
   11bbc:	dec00104 	addi	sp,sp,4
   11bc0:	f800283a 	ret

00011bc4 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
   11bc4:	defffb04 	addi	sp,sp,-20
   11bc8:	dfc00415 	stw	ra,16(sp)
   11bcc:	df000315 	stw	fp,12(sp)
   11bd0:	df000304 	addi	fp,sp,12
   11bd4:	e13fff15 	stw	r4,-4(fp)
   11bd8:	e17ffe15 	stw	r5,-8(fp)
   11bdc:	e1bffd15 	stw	r6,-12(fp)
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
   11be0:	e1bffd17 	ldw	r6,-12(fp)
   11be4:	e17ffe17 	ldw	r5,-8(fp)
   11be8:	e13fff17 	ldw	r4,-4(fp)
   11bec:	0011c2c0 	call	11c2c <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>
   11bf0:	e037883a 	mov	sp,fp
   11bf4:	dfc00117 	ldw	ra,4(sp)
   11bf8:	df000017 	ldw	fp,0(sp)
   11bfc:	dec00204 	addi	sp,sp,8
   11c00:	f800283a 	ret

00011c04 <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
   11c04:	defffd04 	addi	sp,sp,-12
   11c08:	df000215 	stw	fp,8(sp)
   11c0c:	df000204 	addi	fp,sp,8
   11c10:	e13fff15 	stw	r4,-4(fp)
   11c14:	e17ffe15 	stw	r5,-8(fp)
    { return __res; }
   11c18:	e0bffe17 	ldw	r2,-8(fp)
   11c1c:	e037883a 	mov	sp,fp
   11c20:	df000017 	ldw	fp,0(sp)
   11c24:	dec00104 	addi	sp,sp,4
   11c28:	f800283a 	ret

00011c2c <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
   11c2c:	defffb04 	addi	sp,sp,-20
   11c30:	dfc00415 	stw	ra,16(sp)
   11c34:	df000315 	stw	fp,12(sp)
   11c38:	df000304 	addi	fp,sp,12
   11c3c:	e13fff15 	stw	r4,-4(fp)
   11c40:	e17ffe15 	stw	r5,-8(fp)
   11c44:	e1bffd15 	stw	r6,-12(fp)
			      _Category>::__copy_m(__first, __last, __result);
   11c48:	e1bffd17 	ldw	r6,-12(fp)
   11c4c:	e17ffe17 	ldw	r5,-8(fp)
   11c50:	e13fff17 	ldw	r4,-4(fp)
   11c54:	0011c6c0 	call	11c6c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
    }
   11c58:	e037883a 	mov	sp,fp
   11c5c:	dfc00117 	ldw	ra,4(sp)
   11c60:	df000017 	ldw	fp,0(sp)
   11c64:	dec00204 	addi	sp,sp,8
   11c68:	f800283a 	ret

00011c6c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   11c6c:	defffa04 	addi	sp,sp,-24
   11c70:	dfc00515 	stw	ra,20(sp)
   11c74:	df000415 	stw	fp,16(sp)
   11c78:	df000404 	addi	fp,sp,16
   11c7c:	e13ffe15 	stw	r4,-8(fp)
   11c80:	e17ffd15 	stw	r5,-12(fp)
   11c84:	e1bffc15 	stw	r6,-16(fp)
	  const ptrdiff_t _Num = __last - __first;
   11c88:	e0fffd17 	ldw	r3,-12(fp)
   11c8c:	e0bffe17 	ldw	r2,-8(fp)
   11c90:	1885c83a 	sub	r2,r3,r2
   11c94:	e0bfff15 	stw	r2,-4(fp)
	  if (_Num)
   11c98:	e0bfff17 	ldw	r2,-4(fp)
   11c9c:	10000526 	beq	r2,zero,11cb4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x48>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   11ca0:	e0bfff17 	ldw	r2,-4(fp)
   11ca4:	100d883a 	mov	r6,r2
   11ca8:	e17ffe17 	ldw	r5,-8(fp)
   11cac:	e13ffc17 	ldw	r4,-16(fp)
   11cb0:	001454c0 	call	1454c <memmove>
	  return __result + _Num;
   11cb4:	e0bfff17 	ldw	r2,-4(fp)
   11cb8:	e0fffc17 	ldw	r3,-16(fp)
   11cbc:	1885883a 	add	r2,r3,r2
	}
   11cc0:	e037883a 	mov	sp,fp
   11cc4:	dfc00117 	ldw	ra,4(sp)
   11cc8:	df000017 	ldw	fp,0(sp)
   11ccc:	dec00204 	addi	sp,sp,8
   11cd0:	f800283a 	ret

00011cd4 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>:
   11cd4:	28800017 	ldw	r2,0(r5)
   11cd8:	30c00017 	ldw	r3,0(r6)
   11cdc:	defffb04 	addi	sp,sp,-20
   11ce0:	10800217 	ldw	r2,8(r2)
   11ce4:	dc800315 	stw	r18,12(sp)
   11ce8:	dc400215 	stw	r17,8(sp)
   11cec:	dc000115 	stw	r16,4(sp)
   11cf0:	dfc00415 	stw	ra,16(sp)
   11cf4:	2023883a 	mov	r17,r4
   11cf8:	d8c00015 	stw	r3,0(sp)
   11cfc:	2809883a 	mov	r4,r5
   11d00:	2821883a 	mov	r16,r5
   11d04:	3025883a 	mov	r18,r6
   11d08:	103ee83a 	callr	r2
   11d0c:	10803fcc 	andi	r2,r2,255
   11d10:	10000326 	beq	r2,zero,11d20 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x4c>
   11d14:	d8800017 	ldw	r2,0(sp)
   11d18:	10800017 	ldw	r2,0(r2)
   11d1c:	d8800015 	stw	r2,0(sp)
   11d20:	88800017 	ldw	r2,0(r17)
   11d24:	01c00044 	movi	r7,1
   11d28:	d80d883a 	mov	r6,sp
   11d2c:	10800417 	ldw	r2,16(r2)
   11d30:	800b883a 	mov	r5,r16
   11d34:	8809883a 	mov	r4,r17
   11d38:	103ee83a 	callr	r2
   11d3c:	10c03fcc 	andi	r3,r2,255
   11d40:	18000226 	beq	r3,zero,11d4c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x78>
   11d44:	d8c00017 	ldw	r3,0(sp)
   11d48:	90c00015 	stw	r3,0(r18)
   11d4c:	dfc00417 	ldw	ra,16(sp)
   11d50:	dc800317 	ldw	r18,12(sp)
   11d54:	dc400217 	ldw	r17,8(sp)
   11d58:	dc000117 	ldw	r16,4(sp)
   11d5c:	dec00504 	addi	sp,sp,20
   11d60:	f800283a 	ret

00011d64 <_ZL28read_encoded_value_with_basehjPKhPj>:
   11d64:	20803fcc 	andi	r2,r4,255
   11d68:	10801418 	cmpnei	r2,r2,80
   11d6c:	10002c26 	beq	r2,zero,11e20 <_ZL28read_encoded_value_with_basehjPKhPj+0xbc>
   11d70:	208003cc 	andi	r2,r4,15
   11d74:	10c00368 	cmpgeui	r3,r2,13
   11d78:	1800711e 	bne	r3,zero,11f40 <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
   11d7c:	100490ba 	slli	r2,r2,2
   11d80:	00c00074 	movhi	r3,1
   11d84:	10c7883a 	add	r3,r2,r3
   11d88:	18876417 	ldw	r2,7568(r3)
   11d8c:	1000683a 	jmp	r2
   11d90:	00011dc4 	movi	zero,1143
   11d94:	00011eb4 	movhi	zero,1146
   11d98:	00011e78 	rdprs	zero,zero,1145
   11d9c:	00011dc4 	movi	zero,1143
   11da0:	00011e48 	cmpgei	zero,zero,1145
   11da4:	00011f40 	call	11f4 <__alt_mem_onchip_mem-0xee0c>
   11da8:	00011f40 	call	11f4 <__alt_mem_onchip_mem-0xee0c>
   11dac:	00011f40 	call	11f4 <__alt_mem_onchip_mem-0xee0c>
   11db0:	00011f40 	call	11f4 <__alt_mem_onchip_mem-0xee0c>
   11db4:	00011eec 	andhi	zero,zero,1147
   11db8:	00011e90 	cmplti	zero,zero,1146
   11dbc:	00011dc4 	movi	zero,1143
   11dc0:	00011e48 	cmpgei	zero,zero,1145
   11dc4:	32000043 	ldbu	r8,1(r6)
   11dc8:	30800083 	ldbu	r2,2(r6)
   11dcc:	30c000c3 	ldbu	r3,3(r6)
   11dd0:	32400003 	ldbu	r9,0(r6)
   11dd4:	4010923a 	slli	r8,r8,8
   11dd8:	1004943a 	slli	r2,r2,16
   11ddc:	1806963a 	slli	r3,r3,24
   11de0:	4250b03a 	or	r8,r8,r9
   11de4:	1204b03a 	or	r2,r2,r8
   11de8:	1886b03a 	or	r3,r3,r2
   11dec:	30800104 	addi	r2,r6,4
   11df0:	18000926 	beq	r3,zero,11e18 <_ZL28read_encoded_value_with_basehjPKhPj+0xb4>
   11df4:	22001c0c 	andi	r8,r4,112
   11df8:	42000418 	cmpnei	r8,r8,16
   11dfc:	4000011e 	bne	r8,zero,11e04 <_ZL28read_encoded_value_with_basehjPKhPj+0xa0>
   11e00:	300b883a 	mov	r5,r6
   11e04:	21003fcc 	andi	r4,r4,255
   11e08:	2100201c 	xori	r4,r4,128
   11e0c:	213fe004 	addi	r4,r4,-128
   11e10:	1947883a 	add	r3,r3,r5
   11e14:	20000916 	blt	r4,zero,11e3c <_ZL28read_encoded_value_with_basehjPKhPj+0xd8>
   11e18:	38c00015 	stw	r3,0(r7)
   11e1c:	f800283a 	ret
   11e20:	308000c4 	addi	r2,r6,3
   11e24:	01bfff04 	movi	r6,-4
   11e28:	1184703a 	and	r2,r2,r6
   11e2c:	10c00017 	ldw	r3,0(r2)
   11e30:	10800104 	addi	r2,r2,4
   11e34:	38c00015 	stw	r3,0(r7)
   11e38:	f800283a 	ret
   11e3c:	18c00017 	ldw	r3,0(r3)
   11e40:	38c00015 	stw	r3,0(r7)
   11e44:	f800283a 	ret
   11e48:	32000043 	ldbu	r8,1(r6)
   11e4c:	30800083 	ldbu	r2,2(r6)
   11e50:	30c000c3 	ldbu	r3,3(r6)
   11e54:	32400003 	ldbu	r9,0(r6)
   11e58:	4010923a 	slli	r8,r8,8
   11e5c:	1004943a 	slli	r2,r2,16
   11e60:	1806963a 	slli	r3,r3,24
   11e64:	4250b03a 	or	r8,r8,r9
   11e68:	1204b03a 	or	r2,r2,r8
   11e6c:	1886b03a 	or	r3,r3,r2
   11e70:	30800204 	addi	r2,r6,8
   11e74:	003fde06 	br	11df0 <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
   11e78:	30c00043 	ldbu	r3,1(r6)
   11e7c:	32000003 	ldbu	r8,0(r6)
   11e80:	30800084 	addi	r2,r6,2
   11e84:	1806923a 	slli	r3,r3,8
   11e88:	1a06b03a 	or	r3,r3,r8
   11e8c:	003fd806 	br	11df0 <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
   11e90:	30c00043 	ldbu	r3,1(r6)
   11e94:	32000003 	ldbu	r8,0(r6)
   11e98:	30800084 	addi	r2,r6,2
   11e9c:	1806923a 	slli	r3,r3,8
   11ea0:	1a06b03a 	or	r3,r3,r8
   11ea4:	18ffffcc 	andi	r3,r3,65535
   11ea8:	18e0001c 	xori	r3,r3,32768
   11eac:	18e00004 	addi	r3,r3,-32768
   11eb0:	003fcf06 	br	11df0 <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
   11eb4:	3005883a 	mov	r2,r6
   11eb8:	0007883a 	mov	r3,zero
   11ebc:	0015883a 	mov	r10,zero
   11ec0:	12000003 	ldbu	r8,0(r2)
   11ec4:	10800044 	addi	r2,r2,1
   11ec8:	42401fcc 	andi	r9,r8,127
   11ecc:	4a92983a 	sll	r9,r9,r10
   11ed0:	42003fcc 	andi	r8,r8,255
   11ed4:	4200201c 	xori	r8,r8,128
   11ed8:	423fe004 	addi	r8,r8,-128
   11edc:	1a46b03a 	or	r3,r3,r9
   11ee0:	528001c4 	addi	r10,r10,7
   11ee4:	403ff616 	blt	r8,zero,11ec0 <_ZL28read_encoded_value_with_basehjPKhPj+0x15c>
   11ee8:	003fc106 	br	11df0 <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
   11eec:	3005883a 	mov	r2,r6
   11ef0:	0007883a 	mov	r3,zero
   11ef4:	0013883a 	mov	r9,zero
   11ef8:	12800003 	ldbu	r10,0(r2)
   11efc:	10800044 	addi	r2,r2,1
   11f00:	52001fcc 	andi	r8,r10,127
   11f04:	4250983a 	sll	r8,r8,r9
   11f08:	52c03fcc 	andi	r11,r10,255
   11f0c:	5ac0201c 	xori	r11,r11,128
   11f10:	5affe004 	addi	r11,r11,-128
   11f14:	1a06b03a 	or	r3,r3,r8
   11f18:	4a4001c4 	addi	r9,r9,7
   11f1c:	583ff616 	blt	r11,zero,11ef8 <_ZL28read_encoded_value_with_basehjPKhPj+0x194>
   11f20:	4a000828 	cmpgeui	r8,r9,32
   11f24:	403fb21e 	bne	r8,zero,11df0 <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
   11f28:	5280100c 	andi	r10,r10,64
   11f2c:	503fb026 	beq	r10,zero,11df0 <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
   11f30:	023fffc4 	movi	r8,-1
   11f34:	4252983a 	sll	r9,r8,r9
   11f38:	1a46b03a 	or	r3,r3,r9
   11f3c:	003fad06 	br	11df4 <_ZL28read_encoded_value_with_basehjPKhPj+0x90>
   11f40:	deffff04 	addi	sp,sp,-4
   11f44:	dfc00015 	stw	ra,0(sp)
   11f48:	00145140 	call	14514 <abort>

00011f4c <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   11f4c:	20803fcc 	andi	r2,r4,255
   11f50:	10803fe0 	cmpeqi	r2,r2,255
   11f54:	1000161e 	bne	r2,zero,11fb0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x64>
   11f58:	2007883a 	mov	r3,r4
   11f5c:	18801c0c 	andi	r2,r3,112
   11f60:	2809883a 	mov	r4,r5
   11f64:	11400c20 	cmpeqi	r5,r2,48
   11f68:	2800131e 	bne	r5,zero,11fb8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
   11f6c:	11400c68 	cmpgeui	r5,r2,49
   11f70:	2800031e 	bne	r5,zero,11f80 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x34>
   11f74:	11400820 	cmpeqi	r5,r2,32
   11f78:	28000426 	beq	r5,zero,11f8c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
   11f7c:	00142dc1 	jmpi	142dc <_Unwind_GetTextRelBase>
   11f80:	10c01020 	cmpeqi	r3,r2,64
   11f84:	18000826 	beq	r3,zero,11fa8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
   11f88:	00142c41 	jmpi	142c4 <_Unwind_GetRegionStart>
   11f8c:	10800868 	cmpgeui	r2,r2,33
   11f90:	1000021e 	bne	r2,zero,11f9c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x50>
   11f94:	18c0180c 	andi	r3,r3,96
   11f98:	18000526 	beq	r3,zero,11fb0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x64>
   11f9c:	deffff04 	addi	sp,sp,-4
   11fa0:	dfc00015 	stw	ra,0(sp)
   11fa4:	00145140 	call	14514 <abort>
   11fa8:	10801420 	cmpeqi	r2,r2,80
   11fac:	103ffb26 	beq	r2,zero,11f9c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x50>
   11fb0:	0005883a 	mov	r2,zero
   11fb4:	f800283a 	ret
   11fb8:	00142d41 	jmpi	142d4 <_Unwind_GetDataRelBase>

00011fbc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   11fbc:	defffb04 	addi	sp,sp,-20
   11fc0:	dc800215 	stw	r18,8(sp)
   11fc4:	dc400115 	stw	r17,4(sp)
   11fc8:	dc000015 	stw	r16,0(sp)
   11fcc:	dfc00415 	stw	ra,16(sp)
   11fd0:	dcc00315 	stw	r19,12(sp)
   11fd4:	2025883a 	mov	r18,r4
   11fd8:	2821883a 	mov	r16,r5
   11fdc:	3023883a 	mov	r17,r6
   11fe0:	20003d26 	beq	r4,zero,120d8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
   11fe4:	00142c40 	call	142c4 <_Unwind_GetRegionStart>
   11fe8:	88800015 	stw	r2,0(r17)
   11fec:	84c00003 	ldbu	r19,0(r16)
   11ff0:	84000044 	addi	r16,r16,1
   11ff4:	98c03fe0 	cmpeqi	r3,r19,255
   11ff8:	18002d26 	beq	r3,zero,120b0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xf4>
   11ffc:	88800115 	stw	r2,4(r17)
   12000:	81000003 	ldbu	r4,0(r16)
   12004:	80800044 	addi	r2,r16,1
   12008:	20c03fcc 	andi	r3,r4,255
   1200c:	89000505 	stb	r4,20(r17)
   12010:	18c03fe0 	cmpeqi	r3,r3,255
   12014:	1800321e 	bne	r3,zero,120e0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
   12018:	000d883a 	mov	r6,zero
   1201c:	000b883a 	mov	r5,zero
   12020:	10c00003 	ldbu	r3,0(r2)
   12024:	10800044 	addi	r2,r2,1
   12028:	19001fcc 	andi	r4,r3,127
   1202c:	2148983a 	sll	r4,r4,r5
   12030:	18c03fcc 	andi	r3,r3,255
   12034:	18c0201c 	xori	r3,r3,128
   12038:	18ffe004 	addi	r3,r3,-128
   1203c:	310cb03a 	or	r6,r6,r4
   12040:	294001c4 	addi	r5,r5,7
   12044:	183ff616 	blt	r3,zero,12020 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x64>
   12048:	118d883a 	add	r6,r2,r6
   1204c:	89800315 	stw	r6,12(r17)
   12050:	10c00003 	ldbu	r3,0(r2)
   12054:	000f883a 	mov	r7,zero
   12058:	10800044 	addi	r2,r2,1
   1205c:	88c00545 	stb	r3,21(r17)
   12060:	000b883a 	mov	r5,zero
   12064:	10c00003 	ldbu	r3,0(r2)
   12068:	10800044 	addi	r2,r2,1
   1206c:	19001fcc 	andi	r4,r3,127
   12070:	2148983a 	sll	r4,r4,r5
   12074:	18c03fcc 	andi	r3,r3,255
   12078:	18c0201c 	xori	r3,r3,128
   1207c:	18ffe004 	addi	r3,r3,-128
   12080:	390eb03a 	or	r7,r7,r4
   12084:	294001c4 	addi	r5,r5,7
   12088:	183ff616 	blt	r3,zero,12064 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xa8>
   1208c:	11cf883a 	add	r7,r2,r7
   12090:	89c00415 	stw	r7,16(r17)
   12094:	dfc00417 	ldw	ra,16(sp)
   12098:	dcc00317 	ldw	r19,12(sp)
   1209c:	dc800217 	ldw	r18,8(sp)
   120a0:	dc400117 	ldw	r17,4(sp)
   120a4:	dc000017 	ldw	r16,0(sp)
   120a8:	dec00504 	addi	sp,sp,20
   120ac:	f800283a 	ret
   120b0:	900b883a 	mov	r5,r18
   120b4:	9809883a 	mov	r4,r19
   120b8:	0011f4c0 	call	11f4c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   120bc:	800d883a 	mov	r6,r16
   120c0:	89c00104 	addi	r7,r17,4
   120c4:	100b883a 	mov	r5,r2
   120c8:	9809883a 	mov	r4,r19
   120cc:	0011d640 	call	11d64 <_ZL28read_encoded_value_with_basehjPKhPj>
   120d0:	1021883a 	mov	r16,r2
   120d4:	003fca06 	br	12000 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x44>
   120d8:	0005883a 	mov	r2,zero
   120dc:	003fc206 	br	11fe8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x2c>
   120e0:	88000315 	stw	zero,12(r17)
   120e4:	003fda06 	br	12050 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x94>

000120e8 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
   120e8:	defffa04 	addi	sp,sp,-24
   120ec:	dc000215 	stw	r16,8(sp)
   120f0:	24000317 	ldw	r16,12(r4)
   120f4:	01ce303a 	nor	r7,zero,r7
   120f8:	dc800415 	stw	r18,16(sp)
   120fc:	dc400315 	stw	r17,12(sp)
   12100:	dfc00515 	stw	ra,20(sp)
   12104:	2025883a 	mov	r18,r4
   12108:	2823883a 	mov	r17,r5
   1210c:	d9800015 	stw	r6,0(sp)
   12110:	81e1883a 	add	r16,r16,r7
   12114:	000f883a 	mov	r7,zero
   12118:	000d883a 	mov	r6,zero
   1211c:	80800003 	ldbu	r2,0(r16)
   12120:	84000044 	addi	r16,r16,1
   12124:	10c01fcc 	andi	r3,r2,127
   12128:	1986983a 	sll	r3,r3,r6
   1212c:	10803fcc 	andi	r2,r2,255
   12130:	1080201c 	xori	r2,r2,128
   12134:	10bfe004 	addi	r2,r2,-128
   12138:	38ceb03a 	or	r7,r7,r3
   1213c:	318001c4 	addi	r6,r6,7
   12140:	103ff616 	blt	r2,zero,1211c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x34>
   12144:	38002926 	beq	r7,zero,121ec <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x104>
   12148:	90800503 	ldbu	r2,20(r18)
   1214c:	11003fcc 	andi	r4,r2,255
   12150:	20c03fe0 	cmpeqi	r3,r4,255
   12154:	1800231e 	bne	r3,zero,121e4 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xfc>
   12158:	108001cc 	andi	r2,r2,7
   1215c:	10c000a0 	cmpeqi	r3,r2,2
   12160:	18001d1e 	bne	r3,zero,121d8 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xf0>
   12164:	10c000e8 	cmpgeui	r3,r2,3
   12168:	18001726 	beq	r3,zero,121c8 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xe0>
   1216c:	10c000e0 	cmpeqi	r3,r2,3
   12170:	1800161e 	bne	r3,zero,121cc <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xe4>
   12174:	10800120 	cmpeqi	r2,r2,4
   12178:	10001e26 	beq	r2,zero,121f4 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x10c>
   1217c:	380e90fa 	slli	r7,r7,3
   12180:	01c5c83a 	sub	r2,zero,r7
   12184:	91800317 	ldw	r6,12(r18)
   12188:	91400217 	ldw	r5,8(r18)
   1218c:	d9c00104 	addi	r7,sp,4
   12190:	308d883a 	add	r6,r6,r2
   12194:	0011d640 	call	11d64 <_ZL28read_encoded_value_with_basehjPKhPj>
   12198:	d9000117 	ldw	r4,4(sp)
   1219c:	d80d883a 	mov	r6,sp
   121a0:	880b883a 	mov	r5,r17
   121a4:	0011cd40 	call	11cd4 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
   121a8:	10c03fcc 	andi	r3,r2,255
   121ac:	183fd926 	beq	r3,zero,12114 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x2c>
   121b0:	dfc00517 	ldw	ra,20(sp)
   121b4:	dc800417 	ldw	r18,16(sp)
   121b8:	dc400317 	ldw	r17,12(sp)
   121bc:	dc000217 	ldw	r16,8(sp)
   121c0:	dec00604 	addi	sp,sp,24
   121c4:	f800283a 	ret
   121c8:	10000a1e 	bne	r2,zero,121f4 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x10c>
   121cc:	380e90ba 	slli	r7,r7,2
   121d0:	01c5c83a 	sub	r2,zero,r7
   121d4:	003feb06 	br	12184 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x9c>
   121d8:	39cf883a 	add	r7,r7,r7
   121dc:	01c5c83a 	sub	r2,zero,r7
   121e0:	003fe806 	br	12184 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x9c>
   121e4:	0005883a 	mov	r2,zero
   121e8:	003fe606 	br	12184 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x9c>
   121ec:	0005883a 	mov	r2,zero
   121f0:	003fef06 	br	121b0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xc8>
   121f4:	00145140 	call	14514 <abort>

000121f8 <__gxx_personality_sj0>:
   121f8:	deffdb04 	addi	sp,sp,-148
   121fc:	02000074 	movhi	r8,1
   12200:	00c00074 	movhi	r3,1
   12204:	00800074 	movhi	r2,1
   12208:	108a1b04 	addi	r2,r2,10348
   1220c:	d9000015 	stw	r4,0(sp)
   12210:	42087e04 	addi	r8,r8,8696
   12214:	18dab804 	addi	r3,r3,27360
   12218:	d9000d04 	addi	r4,sp,52
   1221c:	d8801615 	stw	r2,88(sp)
   12220:	dfc02415 	stw	ra,144(sp)
   12224:	df002315 	stw	fp,140(sp)
   12228:	d9400315 	stw	r5,12(sp)
   1222c:	d9800115 	stw	r6,4(sp)
   12230:	d9c00215 	stw	r7,8(sp)
   12234:	da001315 	stw	r8,76(sp)
   12238:	d8c01415 	stw	r3,80(sp)
   1223c:	df001515 	stw	fp,84(sp)
   12240:	dec01715 	stw	sp,92(sp)
   12244:	00142080 	call	14208 <_Unwind_SjLj_Register>
   12248:	d8800017 	ldw	r2,0(sp)
   1224c:	d8001a15 	stw	zero,104(sp)
   12250:	d8001b15 	stw	zero,108(sp)
   12254:	10800058 	cmpnei	r2,r2,1
   12258:	1000471e 	bne	r2,zero,12378 <__gxx_personality_sj0+0x180>
   1225c:	d9800117 	ldw	r6,4(sp)
   12260:	00af3574 	movhi	r2,48341
   12264:	10b54004 	addi	r2,r2,-11008
   12268:	3085883a 	add	r2,r6,r2
   1226c:	d8800715 	stw	r2,28(sp)
   12270:	1185803a 	cmpltu	r2,r2,r6
   12274:	d9800217 	ldw	r6,8(sp)
   12278:	00ee2cb4 	movhi	r3,47282
   1227c:	d9000317 	ldw	r4,12(sp)
   12280:	18eaaf04 	addi	r3,r3,-21828
   12284:	30c7883a 	add	r3,r6,r3
   12288:	10c7883a 	add	r3,r2,r3
   1228c:	21000198 	cmpnei	r4,r4,6
   12290:	d8c00615 	stw	r3,24(sp)
   12294:	2000011e 	bne	r4,zero,1229c <__gxx_personality_sj0+0xa4>
   12298:	1800d026 	beq	r3,zero,125dc <__gxx_personality_sj0+0x3e4>
   1229c:	d9002617 	ldw	r4,152(sp)
   122a0:	00bfffc4 	movi	r2,-1
   122a4:	d8800e15 	stw	r2,56(sp)
   122a8:	00142b80 	call	142b8 <_Unwind_GetLanguageSpecificData>
   122ac:	d8800515 	stw	r2,20(sp)
   122b0:	10005d26 	beq	r2,zero,12428 <__gxx_personality_sj0+0x230>
   122b4:	d9400517 	ldw	r5,20(sp)
   122b8:	d9002617 	ldw	r4,152(sp)
   122bc:	d9801d04 	addi	r6,sp,116
   122c0:	00bfffc4 	movi	r2,-1
   122c4:	d8800e15 	stw	r2,56(sp)
   122c8:	0011fbc0 	call	11fbc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   122cc:	d9002203 	ldbu	r4,136(sp)
   122d0:	d9402617 	ldw	r5,152(sp)
   122d4:	d8800015 	stw	r2,0(sp)
   122d8:	0011f4c0 	call	11f4c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   122dc:	d9002617 	ldw	r4,152(sp)
   122e0:	d9401b04 	addi	r5,sp,108
   122e4:	d8801f15 	stw	r2,124(sp)
   122e8:	00142880 	call	14288 <_Unwind_GetIPInfo>
   122ec:	d8c01b17 	ldw	r3,108(sp)
   122f0:	d8800115 	stw	r2,4(sp)
   122f4:	18004f26 	beq	r3,zero,12434 <__gxx_personality_sj0+0x23c>
   122f8:	d8800117 	ldw	r2,4(sp)
   122fc:	10004a16 	blt	r2,zero,12428 <__gxx_personality_sj0+0x230>
   12300:	1000381e 	bne	r2,zero,123e4 <__gxx_personality_sj0+0x1ec>
   12304:	d8000415 	stw	zero,16(sp)
   12308:	d8000215 	stw	zero,8(sp)
   1230c:	00800044 	movi	r2,1
   12310:	d8c00317 	ldw	r3,12(sp)
   12314:	18c0004c 	andi	r3,r3,1
   12318:	1801061e 	bne	r3,zero,12734 <__gxx_personality_sj0+0x53c>
   1231c:	d8c00317 	ldw	r3,12(sp)
   12320:	18c0020c 	andi	r3,r3,8
   12324:	18010a26 	beq	r3,zero,12750 <__gxx_personality_sj0+0x558>
   12328:	10800058 	cmpnei	r2,r2,1
   1232c:	10015126 	beq	r2,zero,12874 <__gxx_personality_sj0+0x67c>
   12330:	d8800417 	ldw	r2,16(sp)
   12334:	10014a16 	blt	r2,zero,12860 <__gxx_personality_sj0+0x668>
   12338:	d9002617 	ldw	r4,152(sp)
   1233c:	d9802517 	ldw	r6,148(sp)
   12340:	00bfffc4 	movi	r2,-1
   12344:	000b883a 	mov	r5,zero
   12348:	d8800e15 	stw	r2,56(sp)
   1234c:	00142600 	call	14260 <_Unwind_SetGR>
   12350:	d9800417 	ldw	r6,16(sp)
   12354:	d9002617 	ldw	r4,152(sp)
   12358:	01400044 	movi	r5,1
   1235c:	00142600 	call	14260 <_Unwind_SetGR>
   12360:	d9400117 	ldw	r5,4(sp)
   12364:	d9002617 	ldw	r4,152(sp)
   12368:	00142a80 	call	142a8 <_Unwind_SetIP>
   1236c:	008001c4 	movi	r2,7
   12370:	d8800015 	stw	r2,0(sp)
   12374:	00000206 	br	12380 <__gxx_personality_sj0+0x188>
   12378:	008000c4 	movi	r2,3
   1237c:	d8800015 	stw	r2,0(sp)
   12380:	d9000d04 	addi	r4,sp,52
   12384:	00142200 	call	14220 <_Unwind_SjLj_Unregister>
   12388:	d8800017 	ldw	r2,0(sp)
   1238c:	dfc02417 	ldw	ra,144(sp)
   12390:	df002317 	ldw	fp,140(sp)
   12394:	dec02504 	addi	sp,sp,148
   12398:	f800283a 	ret
   1239c:	000b883a 	mov	r5,zero
   123a0:	0009883a 	mov	r4,zero
   123a4:	d8c00017 	ldw	r3,0(sp)
   123a8:	18800003 	ldbu	r2,0(r3)
   123ac:	18c00044 	addi	r3,r3,1
   123b0:	d8c00015 	stw	r3,0(sp)
   123b4:	10c01fcc 	andi	r3,r2,127
   123b8:	1906983a 	sll	r3,r3,r4
   123bc:	10803fcc 	andi	r2,r2,255
   123c0:	1080201c 	xori	r2,r2,128
   123c4:	10bfe004 	addi	r2,r2,-128
   123c8:	28cab03a 	or	r5,r5,r3
   123cc:	210001c4 	addi	r4,r4,7
   123d0:	103ff416 	blt	r2,zero,123a4 <__gxx_personality_sj0+0x1ac>
   123d4:	d8800117 	ldw	r2,4(sp)
   123d8:	10bfffc4 	addi	r2,r2,-1
   123dc:	d8800115 	stw	r2,4(sp)
   123e0:	10001726 	beq	r2,zero,12440 <__gxx_personality_sj0+0x248>
   123e4:	000d883a 	mov	r6,zero
   123e8:	0009883a 	mov	r4,zero
   123ec:	d8c00017 	ldw	r3,0(sp)
   123f0:	18800003 	ldbu	r2,0(r3)
   123f4:	18c00044 	addi	r3,r3,1
   123f8:	d8c00015 	stw	r3,0(sp)
   123fc:	10c01fcc 	andi	r3,r2,127
   12400:	1906983a 	sll	r3,r3,r4
   12404:	10803fcc 	andi	r2,r2,255
   12408:	1080201c 	xori	r2,r2,128
   1240c:	10bfe004 	addi	r2,r2,-128
   12410:	30ccb03a 	or	r6,r6,r3
   12414:	210001c4 	addi	r4,r4,7
   12418:	103ff416 	blt	r2,zero,123ec <__gxx_personality_sj0+0x1f4>
   1241c:	003fdf06 	br	1239c <__gxx_personality_sj0+0x1a4>
   12420:	d88008c3 	ldbu	r2,35(sp)
   12424:	10008c1e 	bne	r2,zero,12658 <__gxx_personality_sj0+0x460>
   12428:	00800204 	movi	r2,8
   1242c:	d8800015 	stw	r2,0(sp)
   12430:	003fd306 	br	12380 <__gxx_personality_sj0+0x188>
   12434:	10bfffc4 	addi	r2,r2,-1
   12438:	d8800115 	stw	r2,4(sp)
   1243c:	003fae06 	br	122f8 <__gxx_personality_sj0+0x100>
   12440:	30800044 	addi	r2,r6,1
   12444:	d8800a15 	stw	r2,40(sp)
   12448:	283ff626 	beq	r5,zero,12424 <__gxx_personality_sj0+0x22c>
   1244c:	d8800a17 	ldw	r2,40(sp)
   12450:	103ff526 	beq	r2,zero,12428 <__gxx_personality_sj0+0x230>
   12454:	d8802117 	ldw	r2,132(sp)
   12458:	297fffc4 	addi	r5,r5,-1
   1245c:	1145883a 	add	r2,r2,r5
   12460:	d8800215 	stw	r2,8(sp)
   12464:	10007c26 	beq	r2,zero,12658 <__gxx_personality_sj0+0x460>
   12468:	d8800317 	ldw	r2,12(sp)
   1246c:	1080020c 	andi	r2,r2,8
   12470:	d8800b15 	stw	r2,44(sp)
   12474:	1000bf1e 	bne	r2,zero,12774 <__gxx_personality_sj0+0x57c>
   12478:	d8800617 	ldw	r2,24(sp)
   1247c:	1000e526 	beq	r2,zero,12814 <__gxx_personality_sj0+0x61c>
   12480:	00800074 	movhi	r2,1
   12484:	109db004 	addi	r2,r2,30400
   12488:	d8800915 	stw	r2,36(sp)
   1248c:	d8800717 	ldw	r2,28(sp)
   12490:	d80008c5 	stb	zero,35(sp)
   12494:	108000a8 	cmpgeui	r2,r2,2
   12498:	d8800c15 	stw	r2,48(sp)
   1249c:	d8800217 	ldw	r2,8(sp)
   124a0:	000f883a 	mov	r7,zero
   124a4:	0007883a 	mov	r3,zero
   124a8:	d8800015 	stw	r2,0(sp)
   124ac:	d8800017 	ldw	r2,0(sp)
   124b0:	11000003 	ldbu	r4,0(r2)
   124b4:	10800044 	addi	r2,r2,1
   124b8:	d8800015 	stw	r2,0(sp)
   124bc:	20801fcc 	andi	r2,r4,127
   124c0:	10c4983a 	sll	r2,r2,r3
   124c4:	21403fcc 	andi	r5,r4,255
   124c8:	2940201c 	xori	r5,r5,128
   124cc:	297fe004 	addi	r5,r5,-128
   124d0:	388eb03a 	or	r7,r7,r2
   124d4:	18c001c4 	addi	r3,r3,7
   124d8:	283ff416 	blt	r5,zero,124ac <__gxx_personality_sj0+0x2b4>
   124dc:	18800828 	cmpgeui	r2,r3,32
   124e0:	1000061e 	bne	r2,zero,124fc <__gxx_personality_sj0+0x304>
   124e4:	2100100c 	andi	r4,r4,64
   124e8:	20000426 	beq	r4,zero,124fc <__gxx_personality_sj0+0x304>
   124ec:	00800044 	movi	r2,1
   124f0:	10c6983a 	sll	r3,r2,r3
   124f4:	00c7c83a 	sub	r3,zero,r3
   124f8:	38ceb03a 	or	r7,r7,r3
   124fc:	d9400017 	ldw	r5,0(sp)
   12500:	d9c00415 	stw	r7,16(sp)
   12504:	d8000115 	stw	zero,4(sp)
   12508:	0007883a 	mov	r3,zero
   1250c:	29000003 	ldbu	r4,0(r5)
   12510:	da000117 	ldw	r8,4(sp)
   12514:	29400044 	addi	r5,r5,1
   12518:	20801fcc 	andi	r2,r4,127
   1251c:	10c4983a 	sll	r2,r2,r3
   12520:	21803fcc 	andi	r6,r4,255
   12524:	3180201c 	xori	r6,r6,128
   12528:	4084b03a 	or	r2,r8,r2
   1252c:	31bfe004 	addi	r6,r6,-128
   12530:	d8800115 	stw	r2,4(sp)
   12534:	18c001c4 	addi	r3,r3,7
   12538:	303ff416 	blt	r6,zero,1250c <__gxx_personality_sj0+0x314>
   1253c:	18800828 	cmpgeui	r2,r3,32
   12540:	1000081e 	bne	r2,zero,12564 <__gxx_personality_sj0+0x36c>
   12544:	2100100c 	andi	r4,r4,64
   12548:	20000626 	beq	r4,zero,12564 <__gxx_personality_sj0+0x36c>
   1254c:	00800044 	movi	r2,1
   12550:	10c6983a 	sll	r3,r2,r3
   12554:	d8800117 	ldw	r2,4(sp)
   12558:	00c7c83a 	sub	r3,zero,r3
   1255c:	10c4b03a 	or	r2,r2,r3
   12560:	d8800115 	stw	r2,4(sp)
   12564:	38004726 	beq	r7,zero,12684 <__gxx_personality_sj0+0x48c>
   12568:	01c04916 	blt	zero,r7,12690 <__gxx_personality_sj0+0x498>
   1256c:	d8800917 	ldw	r2,36(sp)
   12570:	10000426 	beq	r2,zero,12584 <__gxx_personality_sj0+0x38c>
   12574:	d8800b17 	ldw	r2,44(sp)
   12578:	1000021e 	bne	r2,zero,12584 <__gxx_personality_sj0+0x38c>
   1257c:	d8800617 	ldw	r2,24(sp)
   12580:	10008026 	beq	r2,zero,12784 <__gxx_personality_sj0+0x58c>
   12584:	d8802017 	ldw	r2,128(sp)
   12588:	01ce303a 	nor	r7,zero,r7
   1258c:	000b883a 	mov	r5,zero
   12590:	11cf883a 	add	r7,r2,r7
   12594:	0009883a 	mov	r4,zero
   12598:	38800003 	ldbu	r2,0(r7)
   1259c:	39c00044 	addi	r7,r7,1
   125a0:	10c01fcc 	andi	r3,r2,127
   125a4:	1906983a 	sll	r3,r3,r4
   125a8:	10803fcc 	andi	r2,r2,255
   125ac:	1080201c 	xori	r2,r2,128
   125b0:	10bfe004 	addi	r2,r2,-128
   125b4:	28cab03a 	or	r5,r5,r3
   125b8:	210001c4 	addi	r4,r4,7
   125bc:	103ff616 	blt	r2,zero,12598 <__gxx_personality_sj0+0x3a0>
   125c0:	28005126 	beq	r5,zero,12708 <__gxx_personality_sj0+0x510>
   125c4:	d8800117 	ldw	r2,4(sp)
   125c8:	103f9526 	beq	r2,zero,12420 <__gxx_personality_sj0+0x228>
   125cc:	d8c00017 	ldw	r3,0(sp)
   125d0:	1885883a 	add	r2,r3,r2
   125d4:	d8800215 	stw	r2,8(sp)
   125d8:	003fb006 	br	1249c <__gxx_personality_sj0+0x2a4>
   125dc:	d8800717 	ldw	r2,28(sp)
   125e0:	108000a8 	cmpgeui	r2,r2,2
   125e4:	103f2d1e 	bne	r2,zero,1229c <__gxx_personality_sj0+0xa4>
   125e8:	d8802517 	ldw	r2,148(sp)
   125ec:	10bffe17 	ldw	r2,-8(r2)
   125f0:	d8800115 	stw	r2,4(sp)
   125f4:	10005d26 	beq	r2,zero,1276c <__gxx_personality_sj0+0x574>
   125f8:	d8802517 	ldw	r2,148(sp)
   125fc:	10bffb17 	ldw	r2,-20(r2)
   12600:	d8800415 	stw	r2,16(sp)
   12604:	d8802517 	ldw	r2,148(sp)
   12608:	10bffd17 	ldw	r2,-12(r2)
   1260c:	d8800515 	stw	r2,20(sp)
   12610:	d8800417 	ldw	r2,16(sp)
   12614:	103f480e 	bge	r2,zero,12338 <__gxx_personality_sj0+0x140>
   12618:	d9002617 	ldw	r4,152(sp)
   1261c:	d9400517 	ldw	r5,20(sp)
   12620:	d9801d04 	addi	r6,sp,116
   12624:	00bfffc4 	movi	r2,-1
   12628:	d8800e15 	stw	r2,56(sp)
   1262c:	0011fbc0 	call	11fbc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   12630:	d9402617 	ldw	r5,152(sp)
   12634:	d9002203 	ldbu	r4,136(sp)
   12638:	0011f4c0 	call	11f4c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1263c:	d9002203 	ldbu	r4,136(sp)
   12640:	d9402617 	ldw	r5,152(sp)
   12644:	d8801f15 	stw	r2,124(sp)
   12648:	0011f4c0 	call	11f4c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1264c:	d8c02517 	ldw	r3,148(sp)
   12650:	18bffe15 	stw	r2,-8(r3)
   12654:	003f3806 	br	12338 <__gxx_personality_sj0+0x140>
   12658:	d8800317 	ldw	r2,12(sp)
   1265c:	1080004c 	andi	r2,r2,1
   12660:	103f711e 	bne	r2,zero,12428 <__gxx_personality_sj0+0x230>
   12664:	d8800317 	ldw	r2,12(sp)
   12668:	1080020c 	andi	r2,r2,8
   1266c:	d8800415 	stw	r2,16(sp)
   12670:	10008126 	beq	r2,zero,12878 <__gxx_personality_sj0+0x680>
   12674:	d8800a17 	ldw	r2,40(sp)
   12678:	d8000415 	stw	zero,16(sp)
   1267c:	d8800115 	stw	r2,4(sp)
   12680:	003f2d06 	br	12338 <__gxx_personality_sj0+0x140>
   12684:	00800044 	movi	r2,1
   12688:	d88008c5 	stb	r2,35(sp)
   1268c:	003fcd06 	br	125c4 <__gxx_personality_sj0+0x3cc>
   12690:	d8802203 	ldbu	r2,136(sp)
   12694:	11003fcc 	andi	r4,r2,255
   12698:	20c03fe0 	cmpeqi	r3,r4,255
   1269c:	18002a1e 	bne	r3,zero,12748 <__gxx_personality_sj0+0x550>
   126a0:	108001cc 	andi	r2,r2,7
   126a4:	10c000a0 	cmpeqi	r3,r2,2
   126a8:	18001f1e 	bne	r3,zero,12728 <__gxx_personality_sj0+0x530>
   126ac:	10c000e8 	cmpgeui	r3,r2,3
   126b0:	18001926 	beq	r3,zero,12718 <__gxx_personality_sj0+0x520>
   126b4:	10c000e0 	cmpeqi	r3,r2,3
   126b8:	1800181e 	bne	r3,zero,1271c <__gxx_personality_sj0+0x524>
   126bc:	10800120 	cmpeqi	r2,r2,4
   126c0:	10007026 	beq	r2,zero,12884 <__gxx_personality_sj0+0x68c>
   126c4:	380490fa 	slli	r2,r7,3
   126c8:	0085c83a 	sub	r2,zero,r2
   126cc:	d9802017 	ldw	r6,128(sp)
   126d0:	d9401f17 	ldw	r5,124(sp)
   126d4:	d9c01c04 	addi	r7,sp,112
   126d8:	308d883a 	add	r6,r6,r2
   126dc:	00bfffc4 	movi	r2,-1
   126e0:	d8800e15 	stw	r2,56(sp)
   126e4:	0011d640 	call	11d64 <_ZL28read_encoded_value_with_basehjPKhPj>
   126e8:	d9001c17 	ldw	r4,112(sp)
   126ec:	20000626 	beq	r4,zero,12708 <__gxx_personality_sj0+0x510>
   126f0:	d9400917 	ldw	r5,36(sp)
   126f4:	283fb326 	beq	r5,zero,125c4 <__gxx_personality_sj0+0x3cc>
   126f8:	d9801a04 	addi	r6,sp,104
   126fc:	0011cd40 	call	11cd4 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
   12700:	10803fcc 	andi	r2,r2,255
   12704:	103faf26 	beq	r2,zero,125c4 <__gxx_personality_sj0+0x3cc>
   12708:	d8800a17 	ldw	r2,40(sp)
   1270c:	d8800115 	stw	r2,4(sp)
   12710:	008000c4 	movi	r2,3
   12714:	003efe06 	br	12310 <__gxx_personality_sj0+0x118>
   12718:	10005a1e 	bne	r2,zero,12884 <__gxx_personality_sj0+0x68c>
   1271c:	380490ba 	slli	r2,r7,2
   12720:	0085c83a 	sub	r2,zero,r2
   12724:	003fe906 	br	126cc <__gxx_personality_sj0+0x4d4>
   12728:	39cf883a 	add	r7,r7,r7
   1272c:	01c5c83a 	sub	r2,zero,r7
   12730:	003fe606 	br	126cc <__gxx_personality_sj0+0x4d4>
   12734:	d8800617 	ldw	r2,24(sp)
   12738:	10002326 	beq	r2,zero,127c8 <__gxx_personality_sj0+0x5d0>
   1273c:	00800184 	movi	r2,6
   12740:	d8800015 	stw	r2,0(sp)
   12744:	003f0e06 	br	12380 <__gxx_personality_sj0+0x188>
   12748:	0005883a 	mov	r2,zero
   1274c:	003fdf06 	br	126cc <__gxx_personality_sj0+0x4d4>
   12750:	d8c00617 	ldw	r3,24(sp)
   12754:	183ef41e 	bne	r3,zero,12328 <__gxx_personality_sj0+0x130>
   12758:	d8c00717 	ldw	r3,28(sp)
   1275c:	18c000a8 	cmpgeui	r3,r3,2
   12760:	183ef11e 	bne	r3,zero,12328 <__gxx_personality_sj0+0x130>
   12764:	10800060 	cmpeqi	r2,r2,1
   12768:	103fa926 	beq	r2,zero,12610 <__gxx_personality_sj0+0x418>
   1276c:	d9002517 	ldw	r4,148(sp)
   12770:	00137980 	call	13798 <__cxa_call_terminate>
   12774:	00800074 	movhi	r2,1
   12778:	109dae04 	addi	r2,r2,30392
   1277c:	d8800915 	stw	r2,36(sp)
   12780:	003f4206 	br	1248c <__gxx_personality_sj0+0x294>
   12784:	d8800c17 	ldw	r2,48(sp)
   12788:	103f7e1e 	bne	r2,zero,12584 <__gxx_personality_sj0+0x38c>
   1278c:	d9801a17 	ldw	r6,104(sp)
   12790:	d9400917 	ldw	r5,36(sp)
   12794:	00bfffc4 	movi	r2,-1
   12798:	d9001d04 	addi	r4,sp,116
   1279c:	d8800e15 	stw	r2,56(sp)
   127a0:	00120e80 	call	120e8 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   127a4:	10803fcc 	andi	r2,r2,255
   127a8:	103f861e 	bne	r2,zero,125c4 <__gxx_personality_sj0+0x3cc>
   127ac:	d8800317 	ldw	r2,12(sp)
   127b0:	1080004c 	andi	r2,r2,1
   127b4:	1000271e 	bne	r2,zero,12854 <__gxx_personality_sj0+0x65c>
   127b8:	d8800a17 	ldw	r2,40(sp)
   127bc:	d8800115 	stw	r2,4(sp)
   127c0:	008000c4 	movi	r2,3
   127c4:	003fe406 	br	12758 <__gxx_personality_sj0+0x560>
   127c8:	d8800717 	ldw	r2,28(sp)
   127cc:	108000a8 	cmpgeui	r2,r2,2
   127d0:	103fda1e 	bne	r2,zero,1273c <__gxx_personality_sj0+0x544>
   127d4:	d8802517 	ldw	r2,148(sp)
   127d8:	d8c00417 	ldw	r3,16(sp)
   127dc:	10fffb15 	stw	r3,-20(r2)
   127e0:	d8c00217 	ldw	r3,8(sp)
   127e4:	10fffc15 	stw	r3,-16(r2)
   127e8:	d8c00517 	ldw	r3,20(sp)
   127ec:	10fffd15 	stw	r3,-12(r2)
   127f0:	d8c02517 	ldw	r3,148(sp)
   127f4:	d8801a17 	ldw	r2,104(sp)
   127f8:	18bfff15 	stw	r2,-4(r3)
   127fc:	1805883a 	mov	r2,r3
   12800:	d8c00117 	ldw	r3,4(sp)
   12804:	10fffe15 	stw	r3,-8(r2)
   12808:	00800184 	movi	r2,6
   1280c:	d8800015 	stw	r2,0(sp)
   12810:	003edb06 	br	12380 <__gxx_personality_sj0+0x188>
   12814:	d8800717 	ldw	r2,28(sp)
   12818:	108000a8 	cmpgeui	r2,r2,2
   1281c:	103f181e 	bne	r2,zero,12480 <__gxx_personality_sj0+0x288>
   12820:	d8802517 	ldw	r2,148(sp)
   12824:	10800003 	ldbu	r2,0(r2)
   12828:	1080004c 	andi	r2,r2,1
   1282c:	10000626 	beq	r2,zero,12848 <__gxx_personality_sj0+0x650>
   12830:	d8802517 	ldw	r2,148(sp)
   12834:	10bff517 	ldw	r2,-44(r2)
   12838:	10fff017 	ldw	r3,-64(r2)
   1283c:	d8801a15 	stw	r2,104(sp)
   12840:	d8c00915 	stw	r3,36(sp)
   12844:	003f1106 	br	1248c <__gxx_personality_sj0+0x294>
   12848:	d8802517 	ldw	r2,148(sp)
   1284c:	10800504 	addi	r2,r2,20
   12850:	003ff906 	br	12838 <__gxx_personality_sj0+0x640>
   12854:	d8800a17 	ldw	r2,40(sp)
   12858:	d8800115 	stw	r2,4(sp)
   1285c:	003fdd06 	br	127d4 <__gxx_personality_sj0+0x5dc>
   12860:	00800044 	movi	r2,1
   12864:	d8800e15 	stw	r2,56(sp)
   12868:	0012af80 	call	12af8 <_ZSt10unexpectedv>
   1286c:	d9000f17 	ldw	r4,60(sp)
   12870:	00137f80 	call	137f8 <__cxa_begin_catch>
   12874:	0012ad40 	call	12ad4 <_ZSt9terminatev>
   12878:	d8800a17 	ldw	r2,40(sp)
   1287c:	d8800115 	stw	r2,4(sp)
   12880:	003ead06 	br	12338 <__gxx_personality_sj0+0x140>
   12884:	00bfffc4 	movi	r2,-1
   12888:	d8800e15 	stw	r2,56(sp)
   1288c:	00145140 	call	14514 <abort>

00012890 <__cxa_call_unexpected>:
   12890:	deffe704 	addi	sp,sp,-100
   12894:	01400074 	movhi	r5,1
   12898:	00c00074 	movhi	r3,1
   1289c:	00800074 	movhi	r2,1
   128a0:	29487e04 	addi	r5,r5,8696
   128a4:	18dabc04 	addi	r3,r3,27376
   128a8:	108a4404 	addi	r2,r2,10512
   128ac:	d9000015 	stw	r4,0(sp)
   128b0:	d9000404 	addi	r4,sp,16
   128b4:	d9400a15 	stw	r5,40(sp)
   128b8:	d8c00b15 	stw	r3,44(sp)
   128bc:	dfc01815 	stw	ra,96(sp)
   128c0:	d8800d15 	stw	r2,52(sp)
   128c4:	df001715 	stw	fp,92(sp)
   128c8:	df000c15 	stw	fp,48(sp)
   128cc:	dec00e15 	stw	sp,56(sp)
   128d0:	00142080 	call	14208 <_Unwind_SjLj_Register>
   128d4:	d9000017 	ldw	r4,0(sp)
   128d8:	00137f80 	call	137f8 <__cxa_begin_catch>
   128dc:	d8c00017 	ldw	r3,0(sp)
   128e0:	197ffd17 	ldw	r5,-12(r3)
   128e4:	18bffe17 	ldw	r2,-8(r3)
   128e8:	193ff717 	ldw	r4,-36(r3)
   128ec:	d9400115 	stw	r5,4(sp)
   128f0:	197ffb17 	ldw	r5,-20(r3)
   128f4:	18fff817 	ldw	r3,-32(r3)
   128f8:	d8801315 	stw	r2,76(sp)
   128fc:	00800044 	movi	r2,1
   12900:	d9400015 	stw	r5,0(sp)
   12904:	d8c00215 	stw	r3,8(sp)
   12908:	d8800515 	stw	r2,20(sp)
   1290c:	0012ae80 	call	12ae8 <_ZN10__cxxabiv112__unexpectedEPFvvE>
   12910:	d8c00617 	ldw	r3,24(sp)
   12914:	d8800517 	ldw	r2,20(sp)
   12918:	d8c00315 	stw	r3,12(sp)
   1291c:	10002b1e 	bne	r2,zero,129cc <__cxa_call_unexpected+0x13c>
   12920:	d9000317 	ldw	r4,12(sp)
   12924:	00137f80 	call	137f8 <__cxa_begin_catch>
   12928:	00139f00 	call	139f0 <__cxa_get_globals_fast>
   1292c:	10800017 	ldw	r2,0(r2)
   12930:	10c00b03 	ldbu	r3,44(r2)
   12934:	18c0004c 	andi	r3,r3,1
   12938:	18002e26 	beq	r3,zero,129f4 <__cxa_call_unexpected+0x164>
   1293c:	10800017 	ldw	r2,0(r2)
   12940:	d8800315 	stw	r2,12(sp)
   12944:	d9400117 	ldw	r5,4(sp)
   12948:	00800084 	movi	r2,2
   1294c:	d9801104 	addi	r6,sp,68
   12950:	0009883a 	mov	r4,zero
   12954:	d8800515 	stw	r2,20(sp)
   12958:	0011fbc0 	call	11fbc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   1295c:	d9800317 	ldw	r6,12(sp)
   12960:	d9c00017 	ldw	r7,0(sp)
   12964:	d9001104 	addi	r4,sp,68
   12968:	317ff017 	ldw	r5,-64(r6)
   1296c:	00120e80 	call	120e8 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   12970:	10803fcc 	andi	r2,r2,255
   12974:	1000221e 	bne	r2,zero,12a00 <__cxa_call_unexpected+0x170>
   12978:	d9c00017 	ldw	r7,0(sp)
   1297c:	01400074 	movhi	r5,1
   12980:	00800084 	movi	r2,2
   12984:	000d883a 	mov	r6,zero
   12988:	295b6e04 	addi	r5,r5,28088
   1298c:	d9001104 	addi	r4,sp,68
   12990:	d8800515 	stw	r2,20(sp)
   12994:	00120e80 	call	120e8 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   12998:	10803fcc 	andi	r2,r2,255
   1299c:	10001926 	beq	r2,zero,12a04 <__cxa_call_unexpected+0x174>
   129a0:	01000104 	movi	r4,4
   129a4:	00136440 	call	13644 <__cxa_allocate_exception>
   129a8:	1009883a 	mov	r4,r2
   129ac:	00800074 	movhi	r2,1
   129b0:	01800074 	movhi	r6,1
   129b4:	01400074 	movhi	r5,1
   129b8:	109b8904 	addi	r2,r2,28196
   129bc:	318e6904 	addi	r6,r6,14756
   129c0:	295b6e04 	addi	r5,r5,28088
   129c4:	20800015 	stw	r2,0(r4)
   129c8:	0012c380 	call	12c38 <__cxa_throw>
   129cc:	10bfffc4 	addi	r2,r2,-1
   129d0:	10000126 	beq	r2,zero,129d8 <__cxa_call_unexpected+0x148>
   129d4:	003b68fa 	trap	3
   129d8:	d8000515 	stw	zero,20(sp)
   129dc:	00138b00 	call	138b0 <__cxa_end_catch>
   129e0:	00138b00 	call	138b0 <__cxa_end_catch>
   129e4:	d9000317 	ldw	r4,12(sp)
   129e8:	00bfffc4 	movi	r2,-1
   129ec:	d8800515 	stw	r2,20(sp)
   129f0:	00143f00 	call	143f0 <_Unwind_SjLj_Resume>
   129f4:	10801004 	addi	r2,r2,64
   129f8:	d8800315 	stw	r2,12(sp)
   129fc:	003fd106 	br	12944 <__cxa_call_unexpected+0xb4>
   12a00:	0012c980 	call	12c98 <__cxa_rethrow>
   12a04:	d9000217 	ldw	r4,8(sp)
   12a08:	0012a0c0 	call	12a0c <_ZN10__cxxabiv111__terminateEPFvvE>

00012a0c <_ZN10__cxxabiv111__terminateEPFvvE>:
   12a0c:	deffef04 	addi	sp,sp,-68
   12a10:	01400074 	movhi	r5,1
   12a14:	00c00074 	movhi	r3,1
   12a18:	00800074 	movhi	r2,1
   12a1c:	200d883a 	mov	r6,r4
   12a20:	108a9a04 	addi	r2,r2,10856
   12a24:	29487e04 	addi	r5,r5,8696
   12a28:	18dac004 	addi	r3,r3,27392
   12a2c:	d9000204 	addi	r4,sp,8
   12a30:	d8800b15 	stw	r2,44(sp)
   12a34:	dfc01015 	stw	ra,64(sp)
   12a38:	df000f15 	stw	fp,60(sp)
   12a3c:	d9800015 	stw	r6,0(sp)
   12a40:	d9400815 	stw	r5,32(sp)
   12a44:	d8c00915 	stw	r3,36(sp)
   12a48:	df000a15 	stw	fp,40(sp)
   12a4c:	dec00c15 	stw	sp,48(sp)
   12a50:	00142080 	call	14208 <_Unwind_SjLj_Register>
   12a54:	00800044 	movi	r2,1
   12a58:	d8800315 	stw	r2,12(sp)
   12a5c:	d8800017 	ldw	r2,0(sp)
   12a60:	103ee83a 	callr	r2
   12a64:	00145140 	call	14514 <abort>
   12a68:	d8c00417 	ldw	r3,16(sp)
   12a6c:	d8800317 	ldw	r2,12(sp)
   12a70:	d8c00015 	stw	r3,0(sp)
   12a74:	d8c00517 	ldw	r3,20(sp)
   12a78:	d8c00115 	stw	r3,4(sp)
   12a7c:	1000051e 	bne	r2,zero,12a94 <_ZN10__cxxabiv111__terminateEPFvvE+0x88>
   12a80:	d9000017 	ldw	r4,0(sp)
   12a84:	00137f80 	call	137f8 <__cxa_begin_catch>
   12a88:	00800084 	movi	r2,2
   12a8c:	d8800315 	stw	r2,12(sp)
   12a90:	00145140 	call	14514 <abort>
   12a94:	10bfffc4 	addi	r2,r2,-1
   12a98:	10000126 	beq	r2,zero,12aa0 <_ZN10__cxxabiv111__terminateEPFvvE+0x94>
   12a9c:	003b68fa 	trap	3
   12aa0:	d8000315 	stw	zero,12(sp)
   12aa4:	00138b00 	call	138b0 <__cxa_end_catch>
   12aa8:	d8c00117 	ldw	r3,4(sp)
   12aac:	18bfffe0 	cmpeqi	r2,r3,-1
   12ab0:	10000426 	beq	r2,zero,12ac4 <_ZN10__cxxabiv111__terminateEPFvvE+0xb8>
   12ab4:	d8800117 	ldw	r2,4(sp)
   12ab8:	d9000017 	ldw	r4,0(sp)
   12abc:	d8800315 	stw	r2,12(sp)
   12ac0:	00128900 	call	12890 <__cxa_call_unexpected>
   12ac4:	d9000017 	ldw	r4,0(sp)
   12ac8:	00bfffc4 	movi	r2,-1
   12acc:	d8800315 	stw	r2,12(sp)
   12ad0:	00143f00 	call	143f0 <_Unwind_SjLj_Resume>

00012ad4 <_ZSt9terminatev>:
   12ad4:	00800074 	movhi	r2,1
   12ad8:	111db217 	ldw	r4,30408(r2)
   12adc:	deffff04 	addi	sp,sp,-4
   12ae0:	dfc00015 	stw	ra,0(sp)
   12ae4:	0012a0c0 	call	12a0c <_ZN10__cxxabiv111__terminateEPFvvE>

00012ae8 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   12ae8:	deffff04 	addi	sp,sp,-4
   12aec:	dfc00015 	stw	ra,0(sp)
   12af0:	203ee83a 	callr	r4
   12af4:	0012ad40 	call	12ad4 <_ZSt9terminatev>

00012af8 <_ZSt10unexpectedv>:
   12af8:	00800074 	movhi	r2,1
   12afc:	111da917 	ldw	r4,30372(r2)
   12b00:	deffff04 	addi	sp,sp,-4
   12b04:	dfc00015 	stw	ra,0(sp)
   12b08:	0012ae80 	call	12ae8 <_ZN10__cxxabiv112__unexpectedEPFvvE>

00012b0c <_ZSt13set_terminatePFvvE>:
   12b0c:	20000526 	beq	r4,zero,12b24 <_ZSt13set_terminatePFvvE+0x18>
   12b10:	00c00074 	movhi	r3,1
   12b14:	00800074 	movhi	r2,1
   12b18:	109db217 	ldw	r2,30408(r2)
   12b1c:	191db215 	stw	r4,30408(r3)
   12b20:	f800283a 	ret
   12b24:	01000074 	movhi	r4,1
   12b28:	21114504 	addi	r4,r4,17684
   12b2c:	003ff806 	br	12b10 <_ZSt13set_terminatePFvvE+0x4>

00012b30 <_ZSt13get_terminatev>:
   12b30:	00800074 	movhi	r2,1
   12b34:	109db217 	ldw	r2,30408(r2)
   12b38:	f800283a 	ret

00012b3c <_ZSt14set_unexpectedPFvvE>:
   12b3c:	20000526 	beq	r4,zero,12b54 <_ZSt14set_unexpectedPFvvE+0x18>
   12b40:	00c00074 	movhi	r3,1
   12b44:	00800074 	movhi	r2,1
   12b48:	109da917 	ldw	r2,30372(r2)
   12b4c:	191da915 	stw	r4,30372(r3)
   12b50:	f800283a 	ret
   12b54:	01000074 	movhi	r4,1
   12b58:	210ab504 	addi	r4,r4,10964
   12b5c:	003ff806 	br	12b40 <_ZSt14set_unexpectedPFvvE+0x4>

00012b60 <_ZSt14get_unexpectedv>:
   12b60:	00800074 	movhi	r2,1
   12b64:	109da917 	ldw	r2,30372(r2)
   12b68:	f800283a 	ret

00012b6c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
   12b6c:	defffe04 	addi	sp,sp,-8
   12b70:	dfc00115 	stw	ra,4(sp)
   12b74:	dc000015 	stw	r16,0(sp)
   12b78:	210000b0 	cmpltui	r4,r4,2
   12b7c:	20001326 	beq	r4,zero,12bcc <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x60>
   12b80:	28bff417 	ldw	r2,-48(r5)
   12b84:	10ffffc4 	addi	r3,r2,-1
   12b88:	28fff415 	stw	r3,-48(r5)
   12b8c:	10800058 	cmpnei	r2,r2,1
   12b90:	10000426 	beq	r2,zero,12ba4 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x38>
   12b94:	dfc00117 	ldw	ra,4(sp)
   12b98:	dc000017 	ldw	r16,0(sp)
   12b9c:	dec00204 	addi	sp,sp,8
   12ba0:	f800283a 	ret
   12ba4:	28bff617 	ldw	r2,-40(r5)
   12ba8:	2c000504 	addi	r16,r5,20
   12bac:	10000226 	beq	r2,zero,12bb8 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x4c>
   12bb0:	8009883a 	mov	r4,r16
   12bb4:	103ee83a 	callr	r2
   12bb8:	8009883a 	mov	r4,r16
   12bbc:	dfc00117 	ldw	ra,4(sp)
   12bc0:	dc000017 	ldw	r16,0(sp)
   12bc4:	dec00204 	addi	sp,sp,8
   12bc8:	001369c1 	jmpi	1369c <__cxa_free_exception>
   12bcc:	293ff817 	ldw	r4,-32(r5)
   12bd0:	0012a0c0 	call	12a0c <_ZN10__cxxabiv111__terminateEPFvvE>

00012bd4 <__cxa_init_primary_exception>:
   12bd4:	defffe04 	addi	sp,sp,-8
   12bd8:	dfc00115 	stw	ra,4(sp)
   12bdc:	dc000015 	stw	r16,0(sp)
   12be0:	217ff015 	stw	r5,-64(r4)
   12be4:	21bff115 	stw	r6,-60(r4)
   12be8:	203fef15 	stw	zero,-68(r4)
   12bec:	2021883a 	mov	r16,r4
   12bf0:	0012b600 	call	12b60 <_ZSt14get_unexpectedv>
   12bf4:	80bff215 	stw	r2,-56(r16)
   12bf8:	0012b300 	call	12b30 <_ZSt13get_terminatev>
   12bfc:	0150caf4 	movhi	r5,17195
   12c00:	0111d3b4 	movhi	r4,18254
   12c04:	00c00074 	movhi	r3,1
   12c08:	294ac004 	addi	r5,r5,11008
   12c0c:	211550c4 	addi	r4,r4,21827
   12c10:	18cadb04 	addi	r3,r3,11116
   12c14:	80bff315 	stw	r2,-52(r16)
   12c18:	80bfef04 	addi	r2,r16,-68
   12c1c:	817ffb15 	stw	r5,-20(r16)
   12c20:	813ffc15 	stw	r4,-16(r16)
   12c24:	80fffd15 	stw	r3,-12(r16)
   12c28:	dfc00117 	ldw	ra,4(sp)
   12c2c:	dc000017 	ldw	r16,0(sp)
   12c30:	dec00204 	addi	sp,sp,8
   12c34:	f800283a 	ret

00012c38 <__cxa_throw>:
   12c38:	defffc04 	addi	sp,sp,-16
   12c3c:	dfc00315 	stw	ra,12(sp)
   12c40:	dc800215 	stw	r18,8(sp)
   12c44:	dc400115 	stw	r17,4(sp)
   12c48:	dc000015 	stw	r16,0(sp)
   12c4c:	2823883a 	mov	r17,r5
   12c50:	2021883a 	mov	r16,r4
   12c54:	3025883a 	mov	r18,r6
   12c58:	00139fc0 	call	139fc <__cxa_get_globals>
   12c5c:	10c00117 	ldw	r3,4(r2)
   12c60:	900d883a 	mov	r6,r18
   12c64:	880b883a 	mov	r5,r17
   12c68:	18c00044 	addi	r3,r3,1
   12c6c:	8009883a 	mov	r4,r16
   12c70:	10c00115 	stw	r3,4(r2)
   12c74:	0012bd40 	call	12bd4 <__cxa_init_primary_exception>
   12c78:	14000c04 	addi	r16,r2,48
   12c7c:	00c00044 	movi	r3,1
   12c80:	10c00015 	stw	r3,0(r2)
   12c84:	8009883a 	mov	r4,r16
   12c88:	00142e40 	call	142e4 <_Unwind_SjLj_RaiseException>
   12c8c:	8009883a 	mov	r4,r16
   12c90:	00137f80 	call	137f8 <__cxa_begin_catch>
   12c94:	0012ad40 	call	12ad4 <_ZSt9terminatev>

00012c98 <__cxa_rethrow>:
   12c98:	defffe04 	addi	sp,sp,-8
   12c9c:	dfc00115 	stw	ra,4(sp)
   12ca0:	dc000015 	stw	r16,0(sp)
   12ca4:	00139fc0 	call	139fc <__cxa_get_globals>
   12ca8:	10c00117 	ldw	r3,4(r2)
   12cac:	11000017 	ldw	r4,0(r2)
   12cb0:	18c00044 	addi	r3,r3,1
   12cb4:	10c00115 	stw	r3,4(r2)
   12cb8:	20001126 	beq	r4,zero,12d00 <__cxa_rethrow+0x68>
   12cbc:	20c00b17 	ldw	r3,44(r4)
   12cc0:	21800c17 	ldw	r6,48(r4)
   12cc4:	016f3574 	movhi	r5,48341
   12cc8:	29754004 	addi	r5,r5,-11008
   12ccc:	01ee2cb4 	movhi	r7,47282
   12cd0:	39eaaf04 	addi	r7,r7,-21828
   12cd4:	194b883a 	add	r5,r3,r5
   12cd8:	28c7803a 	cmpltu	r3,r5,r3
   12cdc:	31cd883a 	add	r6,r6,r7
   12ce0:	1987883a 	add	r3,r3,r6
   12ce4:	18000726 	beq	r3,zero,12d04 <__cxa_rethrow+0x6c>
   12ce8:	10000015 	stw	zero,0(r2)
   12cec:	24000b04 	addi	r16,r4,44
   12cf0:	8009883a 	mov	r4,r16
   12cf4:	00144340 	call	14434 <_Unwind_SjLj_Resume_or_Rethrow>
   12cf8:	8009883a 	mov	r4,r16
   12cfc:	00137f80 	call	137f8 <__cxa_begin_catch>
   12d00:	0012ad40 	call	12ad4 <_ZSt9terminatev>
   12d04:	294000a8 	cmpgeui	r5,r5,2
   12d08:	283ff71e 	bne	r5,zero,12ce8 <__cxa_rethrow+0x50>
   12d0c:	20800517 	ldw	r2,20(r4)
   12d10:	0085c83a 	sub	r2,zero,r2
   12d14:	20800515 	stw	r2,20(r4)
   12d18:	003ff406 	br	12cec <__cxa_rethrow+0x54>

00012d1c <_ZNK10__cxxabiv120__function_type_info15__is_function_pEv>:
   12d1c:	00800044 	movi	r2,1
   12d20:	f800283a 	ret

00012d24 <_ZN10__cxxabiv120__function_type_infoD1Ev>:
   12d24:	00800074 	movhi	r2,1
   12d28:	109af304 	addi	r2,r2,27596
   12d2c:	20800015 	stw	r2,0(r4)
   12d30:	00131281 	jmpi	13128 <_ZNSt9type_infoD1Ev>

00012d34 <_ZN10__cxxabiv120__function_type_infoD0Ev>:
   12d34:	defffe04 	addi	sp,sp,-8
   12d38:	00800074 	movhi	r2,1
   12d3c:	dc000015 	stw	r16,0(sp)
   12d40:	dfc00115 	stw	ra,4(sp)
   12d44:	109af304 	addi	r2,r2,27596
   12d48:	20800015 	stw	r2,0(r4)
   12d4c:	2021883a 	mov	r16,r4
   12d50:	00131280 	call	13128 <_ZNSt9type_infoD1Ev>
   12d54:	01400204 	movi	r5,8
   12d58:	8009883a 	mov	r4,r16
   12d5c:	dfc00117 	ldw	ra,4(sp)
   12d60:	dc000017 	ldw	r16,0(sp)
   12d64:	dec00204 	addi	sp,sp,8
   12d68:	00134b41 	jmpi	134b4 <_ZdlPvj>

00012d6c <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
   12d6c:	00800044 	movi	r2,1
   12d70:	f800283a 	ret

00012d74 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
   12d74:	00800074 	movhi	r2,1
   12d78:	109b0704 	addi	r2,r2,27676
   12d7c:	20800015 	stw	r2,0(r4)
   12d80:	0013a681 	jmpi	13a68 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>

00012d84 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
   12d84:	defffe04 	addi	sp,sp,-8
   12d88:	00800074 	movhi	r2,1
   12d8c:	dc000015 	stw	r16,0(sp)
   12d90:	dfc00115 	stw	ra,4(sp)
   12d94:	109b0704 	addi	r2,r2,27676
   12d98:	20800015 	stw	r2,0(r4)
   12d9c:	2021883a 	mov	r16,r4
   12da0:	0013a680 	call	13a68 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
   12da4:	01400404 	movi	r5,16
   12da8:	8009883a 	mov	r4,r16
   12dac:	dfc00117 	ldw	ra,4(sp)
   12db0:	dc000017 	ldw	r16,0(sp)
   12db4:	dec00204 	addi	sp,sp,8
   12db8:	00134b41 	jmpi	134b4 <_ZdlPvj>

00012dbc <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
   12dbc:	defffb04 	addi	sp,sp,-20
   12dc0:	dc800315 	stw	r18,12(sp)
   12dc4:	dc400215 	stw	r17,8(sp)
   12dc8:	dfc00415 	stw	ra,16(sp)
   12dcc:	388000a8 	cmpgeui	r2,r7,2
   12dd0:	24800317 	ldw	r18,12(r4)
   12dd4:	2823883a 	mov	r17,r5
   12dd8:	10000a26 	beq	r2,zero,12e04 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x48>
   12ddc:	90800017 	ldw	r2,0(r18)
   12de0:	89400317 	ldw	r5,12(r17)
   12de4:	39c00084 	addi	r7,r7,2
   12de8:	10800417 	ldw	r2,16(r2)
   12dec:	9009883a 	mov	r4,r18
   12df0:	dfc00417 	ldw	ra,16(sp)
   12df4:	dc800317 	ldw	r18,12(sp)
   12df8:	dc400217 	ldw	r17,8(sp)
   12dfc:	dec00504 	addi	sp,sp,20
   12e00:	1000683a 	jmp	r2
   12e04:	00800074 	movhi	r2,1
   12e08:	91000117 	ldw	r4,4(r18)
   12e0c:	115e3117 	ldw	r5,30916(r2)
   12e10:	21400926 	beq	r4,r5,12e38 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x7c>
   12e14:	20800007 	ldb	r2,0(r4)
   12e18:	10800aa0 	cmpeqi	r2,r2,42
   12e1c:	103fef1e 	bne	r2,zero,12ddc <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x20>
   12e20:	d9c00115 	stw	r7,4(sp)
   12e24:	d9800015 	stw	r6,0(sp)
   12e28:	0014bbc0 	call	14bbc <strcmp>
   12e2c:	d9800017 	ldw	r6,0(sp)
   12e30:	d9c00117 	ldw	r7,4(sp)
   12e34:	103fe91e 	bne	r2,zero,12ddc <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x20>
   12e38:	89000317 	ldw	r4,12(r17)
   12e3c:	20800017 	ldw	r2,0(r4)
   12e40:	10800317 	ldw	r2,12(r2)
   12e44:	103ee83a 	callr	r2
   12e48:	1080005c 	xori	r2,r2,1
   12e4c:	dfc00417 	ldw	ra,16(sp)
   12e50:	dc800317 	ldw	r18,12(sp)
   12e54:	dc400217 	ldw	r17,8(sp)
   12e58:	dec00504 	addi	sp,sp,20
   12e5c:	f800283a 	ret

00012e60 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   12e60:	00800074 	movhi	r2,1
   12e64:	109b1d04 	addi	r2,r2,27764
   12e68:	20800015 	stw	r2,0(r4)
   12e6c:	001329c1 	jmpi	1329c <_ZN10__cxxabiv117__class_type_infoD1Ev>

00012e70 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   12e70:	defffe04 	addi	sp,sp,-8
   12e74:	00800074 	movhi	r2,1
   12e78:	dc000015 	stw	r16,0(sp)
   12e7c:	dfc00115 	stw	ra,4(sp)
   12e80:	109b1d04 	addi	r2,r2,27764
   12e84:	20800015 	stw	r2,0(r4)
   12e88:	2021883a 	mov	r16,r4
   12e8c:	001329c0 	call	1329c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   12e90:	01400304 	movi	r5,12
   12e94:	8009883a 	mov	r4,r16
   12e98:	dfc00117 	ldw	ra,4(sp)
   12e9c:	dc000017 	ldw	r16,0(sp)
   12ea0:	dec00204 	addi	sp,sp,8
   12ea4:	00134b41 	jmpi	134b4 <_ZdlPvj>

00012ea8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   12ea8:	defff504 	addi	sp,sp,-44
   12eac:	dcc00415 	stw	r19,16(sp)
   12eb0:	38800117 	ldw	r2,4(r7)
   12eb4:	24c00117 	ldw	r19,4(r4)
   12eb8:	df000915 	stw	fp,36(sp)
   12ebc:	dd800715 	stw	r22,28(sp)
   12ec0:	dd400615 	stw	r21,24(sp)
   12ec4:	dd000515 	stw	r20,20(sp)
   12ec8:	dc000115 	stw	r16,4(sp)
   12ecc:	dfc00a15 	stw	ra,40(sp)
   12ed0:	ddc00815 	stw	r23,32(sp)
   12ed4:	dc800315 	stw	r18,12(sp)
   12ed8:	dc400215 	stw	r17,8(sp)
   12edc:	dd000b17 	ldw	r20,44(sp)
   12ee0:	df000c17 	ldw	fp,48(sp)
   12ee4:	dd800d17 	ldw	r22,52(sp)
   12ee8:	dd400e17 	ldw	r21,56(sp)
   12eec:	2821883a 	mov	r16,r5
   12ef0:	98800b26 	beq	r19,r2,12f20 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
   12ef4:	9dc00007 	ldb	r23,0(r19)
   12ef8:	2025883a 	mov	r18,r4
   12efc:	3823883a 	mov	r17,r7
   12f00:	b8c00aa0 	cmpeqi	r3,r23,42
   12f04:	18001a1e 	bne	r3,zero,12f70 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xc8>
   12f08:	100b883a 	mov	r5,r2
   12f0c:	9809883a 	mov	r4,r19
   12f10:	d9800015 	stw	r6,0(sp)
   12f14:	0014bbc0 	call	14bbc <strcmp>
   12f18:	d9800017 	ldw	r6,0(sp)
   12f1c:	1000141e 	bne	r2,zero,12f70 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xc8>
   12f20:	ad000015 	stw	r20,0(r21)
   12f24:	a9800115 	stw	r6,4(r21)
   12f28:	80003416 	blt	r16,zero,12ffc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x154>
   12f2c:	a421883a 	add	r16,r20,r16
   12f30:	b4003026 	beq	r22,r16,12ff4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x14c>
   12f34:	00800044 	movi	r2,1
   12f38:	a8800315 	stw	r2,12(r21)
   12f3c:	0005883a 	mov	r2,zero
   12f40:	dfc00a17 	ldw	ra,40(sp)
   12f44:	df000917 	ldw	fp,36(sp)
   12f48:	ddc00817 	ldw	r23,32(sp)
   12f4c:	dd800717 	ldw	r22,28(sp)
   12f50:	dd400617 	ldw	r21,24(sp)
   12f54:	dd000517 	ldw	r20,20(sp)
   12f58:	dcc00417 	ldw	r19,16(sp)
   12f5c:	dc800317 	ldw	r18,12(sp)
   12f60:	dc400217 	ldw	r17,8(sp)
   12f64:	dc000117 	ldw	r16,4(sp)
   12f68:	dec00b04 	addi	sp,sp,44
   12f6c:	f800283a 	ret
   12f70:	a5801526 	beq	r20,r22,12fc8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x120>
   12f74:	91000217 	ldw	r4,8(r18)
   12f78:	880f883a 	mov	r7,r17
   12f7c:	800b883a 	mov	r5,r16
   12f80:	20800017 	ldw	r2,0(r4)
   12f84:	dd400e15 	stw	r21,56(sp)
   12f88:	dd800d15 	stw	r22,52(sp)
   12f8c:	df000c15 	stw	fp,48(sp)
   12f90:	dd000b15 	stw	r20,44(sp)
   12f94:	10800717 	ldw	r2,28(r2)
   12f98:	dfc00a17 	ldw	ra,40(sp)
   12f9c:	df000917 	ldw	fp,36(sp)
   12fa0:	ddc00817 	ldw	r23,32(sp)
   12fa4:	dd800717 	ldw	r22,28(sp)
   12fa8:	dd400617 	ldw	r21,24(sp)
   12fac:	dd000517 	ldw	r20,20(sp)
   12fb0:	dcc00417 	ldw	r19,16(sp)
   12fb4:	dc800317 	ldw	r18,12(sp)
   12fb8:	dc400217 	ldw	r17,8(sp)
   12fbc:	dc000117 	ldw	r16,4(sp)
   12fc0:	dec00b04 	addi	sp,sp,44
   12fc4:	1000683a 	jmp	r2
   12fc8:	e1400117 	ldw	r5,4(fp)
   12fcc:	99400726 	beq	r19,r5,12fec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x144>
   12fd0:	bdc00aa0 	cmpeqi	r23,r23,42
   12fd4:	b83fe71e 	bne	r23,zero,12f74 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
   12fd8:	9809883a 	mov	r4,r19
   12fdc:	d9800015 	stw	r6,0(sp)
   12fe0:	0014bbc0 	call	14bbc <strcmp>
   12fe4:	d9800017 	ldw	r6,0(sp)
   12fe8:	103fe21e 	bne	r2,zero,12f74 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
   12fec:	a9800215 	stw	r6,8(r21)
   12ff0:	003fd206 	br	12f3c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x94>
   12ff4:	00800184 	movi	r2,6
   12ff8:	003fcf06 	br	12f38 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x90>
   12ffc:	843fff98 	cmpnei	r16,r16,-2
   13000:	803fce1e 	bne	r16,zero,12f3c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x94>
   13004:	003fcb06 	br	12f34 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>

00013008 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   13008:	defffa04 	addi	sp,sp,-24
   1300c:	dc800415 	stw	r18,16(sp)
   13010:	dc800617 	ldw	r18,24(sp)
   13014:	dc400315 	stw	r17,12(sp)
   13018:	dc000215 	stw	r16,8(sp)
   1301c:	dfc00515 	stw	ra,20(sp)
   13020:	2021883a 	mov	r16,r4
   13024:	2823883a 	mov	r17,r5
   13028:	91800b26 	beq	r18,r6,13058 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
   1302c:	81000217 	ldw	r4,8(r16)
   13030:	880b883a 	mov	r5,r17
   13034:	20800017 	ldw	r2,0(r4)
   13038:	dc800615 	stw	r18,24(sp)
   1303c:	10800817 	ldw	r2,32(r2)
   13040:	dfc00517 	ldw	ra,20(sp)
   13044:	dc800417 	ldw	r18,16(sp)
   13048:	dc400317 	ldw	r17,12(sp)
   1304c:	dc000217 	ldw	r16,8(sp)
   13050:	dec00604 	addi	sp,sp,24
   13054:	1000683a 	jmp	r2
   13058:	21000117 	ldw	r4,4(r4)
   1305c:	39400117 	ldw	r5,4(r7)
   13060:	21400926 	beq	r4,r5,13088 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
   13064:	20800007 	ldb	r2,0(r4)
   13068:	10800aa0 	cmpeqi	r2,r2,42
   1306c:	103fef1e 	bne	r2,zero,1302c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   13070:	d9c00115 	stw	r7,4(sp)
   13074:	d9800015 	stw	r6,0(sp)
   13078:	0014bbc0 	call	14bbc <strcmp>
   1307c:	d9800017 	ldw	r6,0(sp)
   13080:	d9c00117 	ldw	r7,4(sp)
   13084:	103fe91e 	bne	r2,zero,1302c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   13088:	00800184 	movi	r2,6
   1308c:	dfc00517 	ldw	ra,20(sp)
   13090:	dc800417 	ldw	r18,16(sp)
   13094:	dc400317 	ldw	r17,12(sp)
   13098:	dc000217 	ldw	r16,8(sp)
   1309c:	dec00604 	addi	sp,sp,24
   130a0:	f800283a 	ret

000130a4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   130a4:	defffb04 	addi	sp,sp,-20
   130a8:	dcc00315 	stw	r19,12(sp)
   130ac:	dc800215 	stw	r18,8(sp)
   130b0:	dc400115 	stw	r17,4(sp)
   130b4:	dc000015 	stw	r16,0(sp)
   130b8:	dfc00415 	stw	ra,16(sp)
   130bc:	2025883a 	mov	r18,r4
   130c0:	2827883a 	mov	r19,r5
   130c4:	3021883a 	mov	r16,r6
   130c8:	3823883a 	mov	r17,r7
   130cc:	00132e40 	call	132e4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   130d0:	10c03fcc 	andi	r3,r2,255
   130d4:	18000d1e 	bne	r3,zero,1310c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x68>
   130d8:	91000217 	ldw	r4,8(r18)
   130dc:	880f883a 	mov	r7,r17
   130e0:	800d883a 	mov	r6,r16
   130e4:	20800017 	ldw	r2,0(r4)
   130e8:	980b883a 	mov	r5,r19
   130ec:	10800617 	ldw	r2,24(r2)
   130f0:	dfc00417 	ldw	ra,16(sp)
   130f4:	dcc00317 	ldw	r19,12(sp)
   130f8:	dc800217 	ldw	r18,8(sp)
   130fc:	dc400117 	ldw	r17,4(sp)
   13100:	dc000017 	ldw	r16,0(sp)
   13104:	dec00504 	addi	sp,sp,20
   13108:	1000683a 	jmp	r2
   1310c:	dfc00417 	ldw	ra,16(sp)
   13110:	dcc00317 	ldw	r19,12(sp)
   13114:	dc800217 	ldw	r18,8(sp)
   13118:	dc400117 	ldw	r17,4(sp)
   1311c:	dc000017 	ldw	r16,0(sp)
   13120:	dec00504 	addi	sp,sp,20
   13124:	f800283a 	ret

00013128 <_ZNSt9type_infoD1Ev>:
   13128:	f800283a 	ret

0001312c <_ZNKSt9type_info14__is_pointer_pEv>:
   1312c:	0005883a 	mov	r2,zero
   13130:	f800283a 	ret

00013134 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
   13134:	0005883a 	mov	r2,zero
   13138:	f800283a 	ret

0001313c <_ZNSt9type_infoD0Ev>:
   1313c:	01400204 	movi	r5,8
   13140:	00134b41 	jmpi	134b4 <_ZdlPvj>

00013144 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
   13144:	21000117 	ldw	r4,4(r4)
   13148:	29400117 	ldw	r5,4(r5)
   1314c:	21400c26 	beq	r4,r5,13180 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
   13150:	20800007 	ldb	r2,0(r4)
   13154:	10800aa0 	cmpeqi	r2,r2,42
   13158:	1000071e 	bne	r2,zero,13178 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
   1315c:	deffff04 	addi	sp,sp,-4
   13160:	dfc00015 	stw	ra,0(sp)
   13164:	0014bbc0 	call	14bbc <strcmp>
   13168:	1005003a 	cmpeq	r2,r2,zero
   1316c:	dfc00017 	ldw	ra,0(sp)
   13170:	dec00104 	addi	sp,sp,4
   13174:	f800283a 	ret
   13178:	0005883a 	mov	r2,zero
   1317c:	f800283a 	ret
   13180:	00800044 	movi	r2,1
   13184:	f800283a 	ret

00013188 <_ZNKSt17bad_function_call4whatEv>:
   13188:	00800074 	movhi	r2,1
   1318c:	109b3204 	addi	r2,r2,27848
   13190:	f800283a 	ret

00013194 <_ZNSt17bad_function_callD1Ev>:
   13194:	00800074 	movhi	r2,1
   13198:	109b4204 	addi	r2,r2,27912
   1319c:	20800015 	stw	r2,0(r4)
   131a0:	00139a01 	jmpi	139a0 <_ZNSt9exceptionD1Ev>

000131a4 <_ZNSt17bad_function_callD0Ev>:
   131a4:	defffe04 	addi	sp,sp,-8
   131a8:	00800074 	movhi	r2,1
   131ac:	dc000015 	stw	r16,0(sp)
   131b0:	dfc00115 	stw	ra,4(sp)
   131b4:	109b4204 	addi	r2,r2,27912
   131b8:	20800015 	stw	r2,0(r4)
   131bc:	2021883a 	mov	r16,r4
   131c0:	00139a00 	call	139a0 <_ZNSt9exceptionD1Ev>
   131c4:	8009883a 	mov	r4,r16
   131c8:	dfc00117 	ldw	ra,4(sp)
   131cc:	dc000017 	ldw	r16,0(sp)
   131d0:	dec00204 	addi	sp,sp,8
   131d4:	00134b01 	jmpi	134b0 <_ZdlPv>

000131d8 <_ZSt25__throw_bad_function_callv>:
   131d8:	deffff04 	addi	sp,sp,-4
   131dc:	01000104 	movi	r4,4
   131e0:	dfc00015 	stw	ra,0(sp)
   131e4:	00136440 	call	13644 <__cxa_allocate_exception>
   131e8:	1009883a 	mov	r4,r2
   131ec:	00800074 	movhi	r2,1
   131f0:	01800074 	movhi	r6,1
   131f4:	01400074 	movhi	r5,1
   131f8:	109b4204 	addi	r2,r2,27912
   131fc:	318c6504 	addi	r6,r6,12692
   13200:	295b3d04 	addi	r5,r5,27892
   13204:	20800015 	stw	r2,0(r4)
   13208:	0012c380 	call	12c38 <__cxa_throw>

0001320c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   1320c:	20800017 	ldw	r2,0(r4)
   13210:	defffa04 	addi	sp,sp,-24
   13214:	dc000415 	stw	r16,16(sp)
   13218:	10800617 	ldw	r2,24(r2)
   1321c:	3021883a 	mov	r16,r6
   13220:	31800017 	ldw	r6,0(r6)
   13224:	00c00404 	movi	r3,16
   13228:	dfc00515 	stw	ra,20(sp)
   1322c:	d8000015 	stw	zero,0(sp)
   13230:	d8000115 	stw	zero,4(sp)
   13234:	d8c00215 	stw	r3,8(sp)
   13238:	d8000315 	stw	zero,12(sp)
   1323c:	d80f883a 	mov	r7,sp
   13240:	103ee83a 	callr	r2
   13244:	d8800117 	ldw	r2,4(sp)
   13248:	1080018c 	andi	r2,r2,6
   1324c:	10800198 	cmpnei	r2,r2,6
   13250:	1000071e 	bne	r2,zero,13270 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x64>
   13254:	d8c00017 	ldw	r3,0(sp)
   13258:	00800044 	movi	r2,1
   1325c:	80c00015 	stw	r3,0(r16)
   13260:	dfc00517 	ldw	ra,20(sp)
   13264:	dc000417 	ldw	r16,16(sp)
   13268:	dec00604 	addi	sp,sp,24
   1326c:	f800283a 	ret
   13270:	0005883a 	mov	r2,zero
   13274:	dfc00517 	ldw	ra,20(sp)
   13278:	dc000417 	ldw	r16,16(sp)
   1327c:	dec00604 	addi	sp,sp,24
   13280:	f800283a 	ret

00013284 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   13284:	d8c00017 	ldw	r3,0(sp)
   13288:	00800044 	movi	r2,1
   1328c:	19800126 	beq	r3,r6,13294 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
   13290:	f800283a 	ret
   13294:	00800184 	movi	r2,6
   13298:	f800283a 	ret

0001329c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   1329c:	00800074 	movhi	r2,1
   132a0:	109b5304 	addi	r2,r2,27980
   132a4:	20800015 	stw	r2,0(r4)
   132a8:	00131281 	jmpi	13128 <_ZNSt9type_infoD1Ev>

000132ac <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   132ac:	defffe04 	addi	sp,sp,-8
   132b0:	00800074 	movhi	r2,1
   132b4:	dc000015 	stw	r16,0(sp)
   132b8:	dfc00115 	stw	ra,4(sp)
   132bc:	109b5304 	addi	r2,r2,27980
   132c0:	20800015 	stw	r2,0(r4)
   132c4:	2021883a 	mov	r16,r4
   132c8:	00131280 	call	13128 <_ZNSt9type_infoD1Ev>
   132cc:	01400204 	movi	r5,8
   132d0:	8009883a 	mov	r4,r16
   132d4:	dfc00117 	ldw	ra,4(sp)
   132d8:	dc000017 	ldw	r16,0(sp)
   132dc:	dec00204 	addi	sp,sp,8
   132e0:	00134b41 	jmpi	134b4 <_ZdlPvj>

000132e4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   132e4:	21000117 	ldw	r4,4(r4)
   132e8:	29400117 	ldw	r5,4(r5)
   132ec:	defffd04 	addi	sp,sp,-12
   132f0:	dc400115 	stw	r17,4(sp)
   132f4:	dc000015 	stw	r16,0(sp)
   132f8:	dfc00215 	stw	ra,8(sp)
   132fc:	3023883a 	mov	r17,r6
   13300:	3821883a 	mov	r16,r7
   13304:	21400526 	beq	r4,r5,1331c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
   13308:	20800007 	ldb	r2,0(r4)
   1330c:	10800aa0 	cmpeqi	r2,r2,42
   13310:	10000d1e 	bne	r2,zero,13348 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
   13314:	0014bbc0 	call	14bbc <strcmp>
   13318:	10000b1e 	bne	r2,zero,13348 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
   1331c:	00800204 	movi	r2,8
   13320:	80800315 	stw	r2,12(r16)
   13324:	00800184 	movi	r2,6
   13328:	80800115 	stw	r2,4(r16)
   1332c:	84400015 	stw	r17,0(r16)
   13330:	00800044 	movi	r2,1
   13334:	dfc00217 	ldw	ra,8(sp)
   13338:	dc400117 	ldw	r17,4(sp)
   1333c:	dc000017 	ldw	r16,0(sp)
   13340:	dec00304 	addi	sp,sp,12
   13344:	f800283a 	ret
   13348:	0005883a 	mov	r2,zero
   1334c:	003ff906 	br	13334 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x50>

00013350 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   13350:	defffb04 	addi	sp,sp,-20
   13354:	dc800315 	stw	r18,12(sp)
   13358:	dc400215 	stw	r17,8(sp)
   1335c:	2025883a 	mov	r18,r4
   13360:	2823883a 	mov	r17,r5
   13364:	21000117 	ldw	r4,4(r4)
   13368:	29400117 	ldw	r5,4(r5)
   1336c:	dfc00415 	stw	ra,16(sp)
   13370:	dc000115 	stw	r16,4(sp)
   13374:	21400826 	beq	r4,r5,13398 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x48>
   13378:	20800007 	ldb	r2,0(r4)
   1337c:	3821883a 	mov	r16,r7
   13380:	10800aa0 	cmpeqi	r2,r2,42
   13384:	10000b1e 	bne	r2,zero,133b4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
   13388:	d9800015 	stw	r6,0(sp)
   1338c:	0014bbc0 	call	14bbc <strcmp>
   13390:	d9800017 	ldw	r6,0(sp)
   13394:	1000071e 	bne	r2,zero,133b4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
   13398:	00800044 	movi	r2,1
   1339c:	dfc00417 	ldw	ra,16(sp)
   133a0:	dc800317 	ldw	r18,12(sp)
   133a4:	dc400217 	ldw	r17,8(sp)
   133a8:	dc000117 	ldw	r16,4(sp)
   133ac:	dec00504 	addi	sp,sp,20
   133b0:	f800283a 	ret
   133b4:	81c00128 	cmpgeui	r7,r16,4
   133b8:	38000a1e 	bne	r7,zero,133e4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x94>
   133bc:	88800017 	ldw	r2,0(r17)
   133c0:	900b883a 	mov	r5,r18
   133c4:	8809883a 	mov	r4,r17
   133c8:	10800517 	ldw	r2,20(r2)
   133cc:	dfc00417 	ldw	ra,16(sp)
   133d0:	dc800317 	ldw	r18,12(sp)
   133d4:	dc400217 	ldw	r17,8(sp)
   133d8:	dc000117 	ldw	r16,4(sp)
   133dc:	dec00504 	addi	sp,sp,20
   133e0:	1000683a 	jmp	r2
   133e4:	0005883a 	mov	r2,zero
   133e8:	003fec06 	br	1339c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x4c>

000133ec <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   133ec:	defffa04 	addi	sp,sp,-24
   133f0:	dc400315 	stw	r17,12(sp)
   133f4:	d8800817 	ldw	r2,32(sp)
   133f8:	dc400617 	ldw	r17,24(sp)
   133fc:	dc800415 	stw	r18,16(sp)
   13400:	dc000215 	stw	r16,8(sp)
   13404:	dfc00515 	stw	ra,20(sp)
   13408:	dc800917 	ldw	r18,36(sp)
   1340c:	21000117 	ldw	r4,4(r4)
   13410:	3021883a 	mov	r16,r6
   13414:	88801226 	beq	r17,r2,13460 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x74>
   13418:	39400117 	ldw	r5,4(r7)
   1341c:	21400526 	beq	r4,r5,13434 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x48>
   13420:	20800007 	ldb	r2,0(r4)
   13424:	10800aa0 	cmpeqi	r2,r2,42
   13428:	1000061e 	bne	r2,zero,13444 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x58>
   1342c:	0014bbc0 	call	14bbc <strcmp>
   13430:	1000041e 	bne	r2,zero,13444 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x58>
   13434:	00800044 	movi	r2,1
   13438:	94400015 	stw	r17,0(r18)
   1343c:	94000115 	stw	r16,4(r18)
   13440:	90800315 	stw	r2,12(r18)
   13444:	0005883a 	mov	r2,zero
   13448:	dfc00517 	ldw	ra,20(sp)
   1344c:	dc800417 	ldw	r18,16(sp)
   13450:	dc400317 	ldw	r17,12(sp)
   13454:	dc000217 	ldw	r16,8(sp)
   13458:	dec00604 	addi	sp,sp,24
   1345c:	f800283a 	ret
   13460:	d8800717 	ldw	r2,28(sp)
   13464:	11400117 	ldw	r5,4(r2)
   13468:	21400f26 	beq	r4,r5,134a8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xbc>
   1346c:	20800007 	ldb	r2,0(r4)
   13470:	10800aa0 	cmpeqi	r2,r2,42
   13474:	1000091e 	bne	r2,zero,1349c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
   13478:	d9c00115 	stw	r7,4(sp)
   1347c:	d9000015 	stw	r4,0(sp)
   13480:	0014bbc0 	call	14bbc <strcmp>
   13484:	d9000017 	ldw	r4,0(sp)
   13488:	d9c00117 	ldw	r7,4(sp)
   1348c:	10000626 	beq	r2,zero,134a8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xbc>
   13490:	39400117 	ldw	r5,4(r7)
   13494:	217fe51e 	bne	r4,r5,1342c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x40>
   13498:	003fe606 	br	13434 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x48>
   1349c:	38800117 	ldw	r2,4(r7)
   134a0:	20bfe81e 	bne	r4,r2,13444 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x58>
   134a4:	003fe306 	br	13434 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x48>
   134a8:	94000215 	stw	r16,8(r18)
   134ac:	003fe506 	br	13444 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x58>

000134b0 <_ZdlPv>:
   134b0:	001453c1 	jmpi	1453c <free>

000134b4 <_ZdlPvj>:
   134b4:	00134b01 	jmpi	134b0 <_ZdlPv>

000134b8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>:
   134b8:	01400074 	movhi	r5,1
   134bc:	295fb404 	addi	r5,r5,32464
   134c0:	28c00117 	ldw	r3,4(r5)
   134c4:	223fff04 	addi	r8,r4,-4
   134c8:	18001a26 	beq	r3,zero,13534 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x7c>
   134cc:	227fff17 	ldw	r9,-4(r4)
   134d0:	424d883a 	add	r6,r8,r9
   134d4:	30c01736 	bltu	r6,r3,13534 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x7c>
   134d8:	18800117 	ldw	r2,4(r3)
   134dc:	19802326 	beq	r3,r6,1356c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xb4>
   134e0:	01c00074 	movhi	r7,1
   134e4:	39dfb504 	addi	r7,r7,32468
   134e8:	10000726 	beq	r2,zero,13508 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x50>
   134ec:	3080062e 	bgeu	r6,r2,13508 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x50>
   134f0:	11400117 	ldw	r5,4(r2)
   134f4:	19c00104 	addi	r7,r3,4
   134f8:	1007883a 	mov	r3,r2
   134fc:	28001826 	beq	r5,zero,13560 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xa8>
   13500:	2805883a 	mov	r2,r5
   13504:	30bffa36 	bltu	r6,r2,134f0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x38>
   13508:	30801026 	beq	r6,r2,1354c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x94>
   1350c:	38800017 	ldw	r2,0(r7)
   13510:	10c00017 	ldw	r3,0(r2)
   13514:	10cb883a 	add	r5,r2,r3
   13518:	41400926 	beq	r8,r5,13540 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x88>
   1351c:	10800117 	ldw	r2,4(r2)
   13520:	227fff15 	stw	r9,-4(r4)
   13524:	20800015 	stw	r2,0(r4)
   13528:	38800017 	ldw	r2,0(r7)
   1352c:	12000115 	stw	r8,4(r2)
   13530:	f800283a 	ret
   13534:	20c00015 	stw	r3,0(r4)
   13538:	2a000115 	stw	r8,4(r5)
   1353c:	f800283a 	ret
   13540:	1a47883a 	add	r3,r3,r9
   13544:	10c00015 	stw	r3,0(r2)
   13548:	f800283a 	ret
   1354c:	31400017 	ldw	r5,0(r6)
   13550:	30800117 	ldw	r2,4(r6)
   13554:	4953883a 	add	r9,r9,r5
   13558:	18800115 	stw	r2,4(r3)
   1355c:	003feb06 	br	1350c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x54>
   13560:	0005883a 	mov	r2,zero
   13564:	30bfe91e 	bne	r6,r2,1350c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x54>
   13568:	003ff806 	br	1354c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x94>
   1356c:	18c00017 	ldw	r3,0(r3)
   13570:	20800015 	stw	r2,0(r4)
   13574:	1a53883a 	add	r9,r3,r9
   13578:	227fff15 	stw	r9,-4(r4)
   1357c:	2a000115 	stw	r8,4(r5)
   13580:	f800283a 	ret

00013584 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>:
   13584:	21000104 	addi	r4,r4,4
   13588:	20800228 	cmpgeui	r2,r4,8
   1358c:	1000011e 	bne	r2,zero,13594 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x10>
   13590:	01000204 	movi	r4,8
   13594:	00800074 	movhi	r2,1
   13598:	109fb517 	ldw	r2,32468(r2)
   1359c:	210000c4 	addi	r4,r4,3
   135a0:	00ffff04 	movi	r3,-4
   135a4:	20c8703a 	and	r4,r4,r3
   135a8:	10001026 	beq	r2,zero,135ec <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x68>
   135ac:	01800074 	movhi	r6,1
   135b0:	319fb504 	addi	r6,r6,32468
   135b4:	00000206 	br	135c0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x3c>
   135b8:	19800104 	addi	r6,r3,4
   135bc:	10001426 	beq	r2,zero,13610 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x8c>
   135c0:	11400017 	ldw	r5,0(r2)
   135c4:	1007883a 	mov	r3,r2
   135c8:	10800117 	ldw	r2,4(r2)
   135cc:	293ffa36 	bltu	r5,r4,135b8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x34>
   135d0:	290fc83a 	sub	r7,r5,r4
   135d4:	3a000228 	cmpgeui	r8,r7,8
   135d8:	4000051e 	bne	r8,zero,135f0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x6c>
   135dc:	19400015 	stw	r5,0(r3)
   135e0:	30800015 	stw	r2,0(r6)
   135e4:	18800104 	addi	r2,r3,4
   135e8:	f800283a 	ret
   135ec:	f800283a 	ret
   135f0:	190b883a 	add	r5,r3,r4
   135f4:	28800115 	stw	r2,4(r5)
   135f8:	30c00017 	ldw	r3,0(r6)
   135fc:	29c00015 	stw	r7,0(r5)
   13600:	19000015 	stw	r4,0(r3)
   13604:	31400015 	stw	r5,0(r6)
   13608:	18800104 	addi	r2,r3,4
   1360c:	f800283a 	ret
   13610:	f800283a 	ret

00013614 <_ZN9__gnu_cxx9__freeresEv>:
   13614:	00800074 	movhi	r2,1
   13618:	111fb617 	ldw	r4,32472(r2)
   1361c:	20000826 	beq	r4,zero,13640 <_ZN9__gnu_cxx9__freeresEv+0x2c>
   13620:	deffff04 	addi	sp,sp,-4
   13624:	dfc00015 	stw	ra,0(sp)
   13628:	001453c0 	call	1453c <free>
   1362c:	00800074 	movhi	r2,1
   13630:	101fb615 	stw	zero,32472(r2)
   13634:	dfc00017 	ldw	ra,0(sp)
   13638:	dec00104 	addi	sp,sp,4
   1363c:	f800283a 	ret
   13640:	f800283a 	ret

00013644 <__cxa_allocate_exception>:
   13644:	defffe04 	addi	sp,sp,-8
   13648:	dc000015 	stw	r16,0(sp)
   1364c:	24001104 	addi	r16,r4,68
   13650:	8009883a 	mov	r4,r16
   13654:	dfc00115 	stw	ra,4(sp)
   13658:	001452c0 	call	1452c <malloc>
   1365c:	1007883a 	mov	r3,r2
   13660:	10000926 	beq	r2,zero,13688 <__cxa_allocate_exception+0x44>
   13664:	01801104 	movi	r6,68
   13668:	000b883a 	mov	r5,zero
   1366c:	1809883a 	mov	r4,r3
   13670:	00145ac0 	call	145ac <memset>
   13674:	10801104 	addi	r2,r2,68
   13678:	dfc00117 	ldw	ra,4(sp)
   1367c:	dc000017 	ldw	r16,0(sp)
   13680:	dec00204 	addi	sp,sp,8
   13684:	f800283a 	ret
   13688:	8009883a 	mov	r4,r16
   1368c:	00135840 	call	13584 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>
   13690:	1007883a 	mov	r3,r2
   13694:	103ff31e 	bne	r2,zero,13664 <__cxa_allocate_exception+0x20>
   13698:	0012ad40 	call	12ad4 <_ZSt9terminatev>

0001369c <__cxa_free_exception>:
   1369c:	00800074 	movhi	r2,1
   136a0:	109fb404 	addi	r2,r2,32464
   136a4:	10c00217 	ldw	r3,8(r2)
   136a8:	213fef04 	addi	r4,r4,-68
   136ac:	1900042e 	bgeu	r3,r4,136c0 <__cxa_free_exception+0x24>
   136b0:	10800317 	ldw	r2,12(r2)
   136b4:	1887883a 	add	r3,r3,r2
   136b8:	20c0012e 	bgeu	r4,r3,136c0 <__cxa_free_exception+0x24>
   136bc:	00134b81 	jmpi	134b8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
   136c0:	001453c1 	jmpi	1453c <free>

000136c4 <__cxa_allocate_dependent_exception>:
   136c4:	deffff04 	addi	sp,sp,-4
   136c8:	01001004 	movi	r4,64
   136cc:	dfc00015 	stw	ra,0(sp)
   136d0:	001452c0 	call	1452c <malloc>
   136d4:	1009883a 	mov	r4,r2
   136d8:	10000626 	beq	r2,zero,136f4 <__cxa_allocate_dependent_exception+0x30>
   136dc:	01801004 	movi	r6,64
   136e0:	000b883a 	mov	r5,zero
   136e4:	00145ac0 	call	145ac <memset>
   136e8:	dfc00017 	ldw	ra,0(sp)
   136ec:	dec00104 	addi	sp,sp,4
   136f0:	f800283a 	ret
   136f4:	01001004 	movi	r4,64
   136f8:	00135840 	call	13584 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>
   136fc:	1009883a 	mov	r4,r2
   13700:	103ff61e 	bne	r2,zero,136dc <__cxa_allocate_dependent_exception+0x18>
   13704:	0012ad40 	call	12ad4 <_ZSt9terminatev>

00013708 <__cxa_free_dependent_exception>:
   13708:	00c00074 	movhi	r3,1
   1370c:	18dfb404 	addi	r3,r3,32464
   13710:	19400217 	ldw	r5,8(r3)
   13714:	2005883a 	mov	r2,r4
   13718:	2900042e 	bgeu	r5,r4,1372c <__cxa_free_dependent_exception+0x24>
   1371c:	18c00317 	ldw	r3,12(r3)
   13720:	28cb883a 	add	r5,r5,r3
   13724:	2140012e 	bgeu	r4,r5,1372c <__cxa_free_dependent_exception+0x24>
   13728:	00134b81 	jmpi	134b8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
   1372c:	1009883a 	mov	r4,r2
   13730:	001453c1 	jmpi	1453c <free>

00013734 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
   13734:	defffd04 	addi	sp,sp,-12
   13738:	dc000015 	stw	r16,0(sp)
   1373c:	04000074 	movhi	r16,1
   13740:	dc400115 	stw	r17,4(sp)
   13744:	841fb404 	addi	r16,r16,32464
   13748:	04424004 	movi	r17,2304
   1374c:	01024004 	movi	r4,2304
   13750:	dfc00215 	stw	ra,8(sp)
   13754:	84400315 	stw	r17,12(r16)
   13758:	001452c0 	call	1452c <malloc>
   1375c:	80800215 	stw	r2,8(r16)
   13760:	10000826 	beq	r2,zero,13784 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x50>
   13764:	80800115 	stw	r2,4(r16)
   13768:	14400015 	stw	r17,0(r2)
   1376c:	10000115 	stw	zero,4(r2)
   13770:	dfc00217 	ldw	ra,8(sp)
   13774:	dc400117 	ldw	r17,4(sp)
   13778:	dc000017 	ldw	r16,0(sp)
   1377c:	dec00304 	addi	sp,sp,12
   13780:	f800283a 	ret
   13784:	00800074 	movhi	r2,1
   13788:	101fb715 	stw	zero,32476(r2)
   1378c:	00800074 	movhi	r2,1
   13790:	101fb515 	stw	zero,32468(r2)
   13794:	003ff606 	br	13770 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x3c>

00013798 <__cxa_call_terminate>:
   13798:	defffe04 	addi	sp,sp,-8
   1379c:	dfc00115 	stw	ra,4(sp)
   137a0:	dc000015 	stw	r16,0(sp)
   137a4:	20000d26 	beq	r4,zero,137dc <__cxa_call_terminate+0x44>
   137a8:	2021883a 	mov	r16,r4
   137ac:	00137f80 	call	137f8 <__cxa_begin_catch>
   137b0:	80800017 	ldw	r2,0(r16)
   137b4:	81000117 	ldw	r4,4(r16)
   137b8:	00ef3574 	movhi	r3,48341
   137bc:	18f54004 	addi	r3,r3,-11008
   137c0:	016e2cb4 	movhi	r5,47282
   137c4:	296aaf04 	addi	r5,r5,-21828
   137c8:	10c7883a 	add	r3,r2,r3
   137cc:	1885803a 	cmpltu	r2,r3,r2
   137d0:	2149883a 	add	r4,r4,r5
   137d4:	1105883a 	add	r2,r2,r4
   137d8:	10000126 	beq	r2,zero,137e0 <__cxa_call_terminate+0x48>
   137dc:	0012ad40 	call	12ad4 <_ZSt9terminatev>
   137e0:	18c000a8 	cmpgeui	r3,r3,2
   137e4:	183ffd1e 	bne	r3,zero,137dc <__cxa_call_terminate+0x44>
   137e8:	813ff817 	ldw	r4,-32(r16)
   137ec:	0012a0c0 	call	12a0c <_ZN10__cxxabiv111__terminateEPFvvE>

000137f0 <__cxa_get_exception_ptr>:
   137f0:	20bfff17 	ldw	r2,-4(r4)
   137f4:	f800283a 	ret

000137f8 <__cxa_begin_catch>:
   137f8:	defffe04 	addi	sp,sp,-8
   137fc:	dc000015 	stw	r16,0(sp)
   13800:	dfc00115 	stw	ra,4(sp)
   13804:	2021883a 	mov	r16,r4
   13808:	00139fc0 	call	139fc <__cxa_get_globals>
   1380c:	80c00017 	ldw	r3,0(r16)
   13810:	81800117 	ldw	r6,4(r16)
   13814:	012f3574 	movhi	r4,48341
   13818:	21354004 	addi	r4,r4,-11008
   1381c:	016e2cb4 	movhi	r5,47282
   13820:	296aaf04 	addi	r5,r5,-21828
   13824:	1909883a 	add	r4,r3,r4
   13828:	314d883a 	add	r6,r6,r5
   1382c:	20c7803a 	cmpltu	r3,r4,r3
   13830:	1987883a 	add	r3,r3,r6
   13834:	100b883a 	mov	r5,r2
   13838:	81bff504 	addi	r6,r16,-44
   1383c:	10800017 	ldw	r2,0(r2)
   13840:	18000626 	beq	r3,zero,1385c <__cxa_begin_catch+0x64>
   13844:	1000191e 	bne	r2,zero,138ac <__cxa_begin_catch+0xb4>
   13848:	29800015 	stw	r6,0(r5)
   1384c:	dfc00117 	ldw	ra,4(sp)
   13850:	dc000017 	ldw	r16,0(sp)
   13854:	dec00204 	addi	sp,sp,8
   13858:	f800283a 	ret
   1385c:	210000a8 	cmpgeui	r4,r4,2
   13860:	203ff81e 	bne	r4,zero,13844 <__cxa_begin_catch+0x4c>
   13864:	80fffa17 	ldw	r3,-24(r16)
   13868:	18000d16 	blt	r3,zero,138a0 <__cxa_begin_catch+0xa8>
   1386c:	18c00044 	addi	r3,r3,1
   13870:	29000117 	ldw	r4,4(r5)
   13874:	80fffa15 	stw	r3,-24(r16)
   13878:	20ffffc4 	addi	r3,r4,-1
   1387c:	28c00115 	stw	r3,4(r5)
   13880:	11800226 	beq	r2,r6,1388c <__cxa_begin_catch+0x94>
   13884:	80bff915 	stw	r2,-28(r16)
   13888:	29800015 	stw	r6,0(r5)
   1388c:	80bfff17 	ldw	r2,-4(r16)
   13890:	dfc00117 	ldw	ra,4(sp)
   13894:	dc000017 	ldw	r16,0(sp)
   13898:	dec00204 	addi	sp,sp,8
   1389c:	f800283a 	ret
   138a0:	01000044 	movi	r4,1
   138a4:	20c7c83a 	sub	r3,r4,r3
   138a8:	003ff106 	br	13870 <__cxa_begin_catch+0x78>
   138ac:	0012ad40 	call	12ad4 <_ZSt9terminatev>

000138b0 <__cxa_end_catch>:
   138b0:	deffff04 	addi	sp,sp,-4
   138b4:	dfc00015 	stw	ra,0(sp)
   138b8:	00139f00 	call	139f0 <__cxa_get_globals_fast>
   138bc:	11000017 	ldw	r4,0(r2)
   138c0:	20001426 	beq	r4,zero,13914 <__cxa_end_catch+0x64>
   138c4:	20c00b17 	ldw	r3,44(r4)
   138c8:	21800c17 	ldw	r6,48(r4)
   138cc:	016f3574 	movhi	r5,48341
   138d0:	29754004 	addi	r5,r5,-11008
   138d4:	01ee2cb4 	movhi	r7,47282
   138d8:	39eaaf04 	addi	r7,r7,-21828
   138dc:	194b883a 	add	r5,r3,r5
   138e0:	28c7803a 	cmpltu	r3,r5,r3
   138e4:	31cd883a 	add	r6,r6,r7
   138e8:	1987883a 	add	r3,r3,r6
   138ec:	1800111e 	bne	r3,zero,13934 <__cxa_end_catch+0x84>
   138f0:	294000a8 	cmpgeui	r5,r5,2
   138f4:	28000f1e 	bne	r5,zero,13934 <__cxa_end_catch+0x84>
   138f8:	20c00517 	ldw	r3,20(r4)
   138fc:	18000816 	blt	r3,zero,13920 <__cxa_end_catch+0x70>
   13900:	18ffffc4 	addi	r3,r3,-1
   13904:	18001026 	beq	r3,zero,13948 <__cxa_end_catch+0x98>
   13908:	18bfffd8 	cmpnei	r2,r3,-1
   1390c:	10001426 	beq	r2,zero,13960 <__cxa_end_catch+0xb0>
   13910:	20c00515 	stw	r3,20(r4)
   13914:	dfc00017 	ldw	ra,0(sp)
   13918:	dec00104 	addi	sp,sp,4
   1391c:	f800283a 	ret
   13920:	18c00044 	addi	r3,r3,1
   13924:	183ffa1e 	bne	r3,zero,13910 <__cxa_end_catch+0x60>
   13928:	21400417 	ldw	r5,16(r4)
   1392c:	11400015 	stw	r5,0(r2)
   13930:	003ff706 	br	13910 <__cxa_end_catch+0x60>
   13934:	21000b04 	addi	r4,r4,44
   13938:	10000015 	stw	zero,0(r2)
   1393c:	dfc00017 	ldw	ra,0(sp)
   13940:	dec00104 	addi	sp,sp,4
   13944:	00144741 	jmpi	14474 <_Unwind_DeleteException>
   13948:	20c00417 	ldw	r3,16(r4)
   1394c:	21000b04 	addi	r4,r4,44
   13950:	10c00015 	stw	r3,0(r2)
   13954:	dfc00017 	ldw	ra,0(sp)
   13958:	dec00104 	addi	sp,sp,4
   1395c:	00144741 	jmpi	14474 <_Unwind_DeleteException>
   13960:	0012ad40 	call	12ad4 <_ZSt9terminatev>

00013964 <_ZSt18uncaught_exceptionv>:
   13964:	deffff04 	addi	sp,sp,-4
   13968:	dfc00015 	stw	ra,0(sp)
   1396c:	00139fc0 	call	139fc <__cxa_get_globals>
   13970:	10800117 	ldw	r2,4(r2)
   13974:	1004c03a 	cmpne	r2,r2,zero
   13978:	dfc00017 	ldw	ra,0(sp)
   1397c:	dec00104 	addi	sp,sp,4
   13980:	f800283a 	ret

00013984 <_ZSt19uncaught_exceptionsv>:
   13984:	deffff04 	addi	sp,sp,-4
   13988:	dfc00015 	stw	ra,0(sp)
   1398c:	00139fc0 	call	139fc <__cxa_get_globals>
   13990:	10800117 	ldw	r2,4(r2)
   13994:	dfc00017 	ldw	ra,0(sp)
   13998:	dec00104 	addi	sp,sp,4
   1399c:	f800283a 	ret

000139a0 <_ZNSt9exceptionD1Ev>:
   139a0:	f800283a 	ret

000139a4 <_ZNSt13bad_exceptionD1Ev>:
   139a4:	f800283a 	ret

000139a8 <_ZGTtNKSt9exception4whatEv>:
   139a8:	00800074 	movhi	r2,1
   139ac:	109b5c04 	addi	r2,r2,28016
   139b0:	f800283a 	ret

000139b4 <_ZGTtNKSt13bad_exception4whatEv>:
   139b4:	00800074 	movhi	r2,1
   139b8:	109b6004 	addi	r2,r2,28032
   139bc:	f800283a 	ret

000139c0 <_ZNSt9exceptionD0Ev>:
   139c0:	01400104 	movi	r5,4
   139c4:	00134b41 	jmpi	134b4 <_ZdlPvj>

000139c8 <_ZNSt13bad_exceptionD0Ev>:
   139c8:	01400104 	movi	r5,4
   139cc:	00134b41 	jmpi	134b4 <_ZdlPvj>

000139d0 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
   139d0:	f800283a 	ret

000139d4 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
   139d4:	01400104 	movi	r5,4
   139d8:	00134b41 	jmpi	134b4 <_ZdlPvj>

000139dc <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
   139dc:	f800283a 	ret

000139e0 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
   139e0:	01400104 	movi	r5,4
   139e4:	00134b41 	jmpi	134b4 <_ZdlPvj>

000139e8 <_ZGTtNKSt9exceptionD1Ev>:
   139e8:	f800283a 	ret

000139ec <_ZGTtNKSt13bad_exceptionD1Ev>:
   139ec:	f800283a 	ret

000139f0 <__cxa_get_globals_fast>:
   139f0:	00800074 	movhi	r2,1
   139f4:	109f9b04 	addi	r2,r2,32364
   139f8:	f800283a 	ret

000139fc <__cxa_get_globals>:
   139fc:	00800074 	movhi	r2,1
   13a00:	109f9b04 	addi	r2,r2,32364
   13a04:	f800283a 	ret

00013a08 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
   13a08:	00800074 	movhi	r2,1
   13a0c:	109ba504 	addi	r2,r2,28308
   13a10:	20800015 	stw	r2,0(r4)
   13a14:	00131281 	jmpi	13128 <_ZNSt9type_infoD1Ev>

00013a18 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
   13a18:	defffe04 	addi	sp,sp,-8
   13a1c:	00800074 	movhi	r2,1
   13a20:	dc000015 	stw	r16,0(sp)
   13a24:	dfc00115 	stw	ra,4(sp)
   13a28:	109ba504 	addi	r2,r2,28308
   13a2c:	20800015 	stw	r2,0(r4)
   13a30:	2021883a 	mov	r16,r4
   13a34:	00131280 	call	13128 <_ZNSt9type_infoD1Ev>
   13a38:	01400204 	movi	r5,8
   13a3c:	8009883a 	mov	r4,r16
   13a40:	dfc00117 	ldw	ra,4(sp)
   13a44:	dc000017 	ldw	r16,0(sp)
   13a48:	dec00204 	addi	sp,sp,8
   13a4c:	00134b41 	jmpi	134b4 <_ZdlPvj>

00013a50 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
   13a50:	21000317 	ldw	r4,12(r4)
   13a54:	29400317 	ldw	r5,12(r5)
   13a58:	39c00084 	addi	r7,r7,2
   13a5c:	20800017 	ldw	r2,0(r4)
   13a60:	10800417 	ldw	r2,16(r2)
   13a64:	1000683a 	jmp	r2

00013a68 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
   13a68:	00800074 	movhi	r2,1
   13a6c:	109c7904 	addi	r2,r2,29156
   13a70:	20800015 	stw	r2,0(r4)
   13a74:	00131281 	jmpi	13128 <_ZNSt9type_infoD1Ev>

00013a78 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
   13a78:	defffe04 	addi	sp,sp,-8
   13a7c:	00800074 	movhi	r2,1
   13a80:	dc000015 	stw	r16,0(sp)
   13a84:	dfc00115 	stw	ra,4(sp)
   13a88:	109c7904 	addi	r2,r2,29156
   13a8c:	20800015 	stw	r2,0(r4)
   13a90:	2021883a 	mov	r16,r4
   13a94:	00131280 	call	13128 <_ZNSt9type_infoD1Ev>
   13a98:	01400404 	movi	r5,16
   13a9c:	8009883a 	mov	r4,r16
   13aa0:	dfc00117 	ldw	ra,4(sp)
   13aa4:	dc000017 	ldw	r16,0(sp)
   13aa8:	dec00204 	addi	sp,sp,8
   13aac:	00134b41 	jmpi	134b4 <_ZdlPvj>

00013ab0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
   13ab0:	defff804 	addi	sp,sp,-32
   13ab4:	dcc00315 	stw	r19,12(sp)
   13ab8:	dc400115 	stw	r17,4(sp)
   13abc:	2027883a 	mov	r19,r4
   13ac0:	2c400117 	ldw	r17,4(r5)
   13ac4:	21000117 	ldw	r4,4(r4)
   13ac8:	dfc00715 	stw	ra,28(sp)
   13acc:	dd800615 	stw	r22,24(sp)
   13ad0:	dd400515 	stw	r21,20(sp)
   13ad4:	dd000415 	stw	r20,16(sp)
   13ad8:	dc800215 	stw	r18,8(sp)
   13adc:	dc000015 	stw	r16,0(sp)
   13ae0:	24400926 	beq	r4,r17,13b08 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
   13ae4:	20800007 	ldb	r2,0(r4)
   13ae8:	2821883a 	mov	r16,r5
   13aec:	3025883a 	mov	r18,r6
   13af0:	10800aa0 	cmpeqi	r2,r2,42
   13af4:	3829883a 	mov	r20,r7
   13af8:	10000e1e 	bne	r2,zero,13b34 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x84>
   13afc:	880b883a 	mov	r5,r17
   13b00:	0014bbc0 	call	14bbc <strcmp>
   13b04:	10000b1e 	bne	r2,zero,13b34 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x84>
   13b08:	00800044 	movi	r2,1
   13b0c:	dfc00717 	ldw	ra,28(sp)
   13b10:	dd800617 	ldw	r22,24(sp)
   13b14:	dd400517 	ldw	r21,20(sp)
   13b18:	dd000417 	ldw	r20,16(sp)
   13b1c:	dcc00317 	ldw	r19,12(sp)
   13b20:	dc800217 	ldw	r18,8(sp)
   13b24:	dc400117 	ldw	r17,4(sp)
   13b28:	dc000017 	ldw	r16,0(sp)
   13b2c:	dec00804 	addi	sp,sp,32
   13b30:	f800283a 	ret
   13b34:	00800074 	movhi	r2,1
   13b38:	9d400017 	ldw	r21,0(r19)
   13b3c:	115e0917 	ldw	r5,30756(r2)
   13b40:	adbfff17 	ldw	r22,-4(r21)
   13b44:	89403726 	beq	r17,r5,13c24 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x174>
   13b48:	88800007 	ldb	r2,0(r17)
   13b4c:	10800aa0 	cmpeqi	r2,r2,42
   13b50:	1000031e 	bne	r2,zero,13b60 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
   13b54:	8809883a 	mov	r4,r17
   13b58:	0014bbc0 	call	14bbc <strcmp>
   13b5c:	10003126 	beq	r2,zero,13c24 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x174>
   13b60:	80006926 	beq	r16,zero,13d08 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x258>
   13b64:	80800017 	ldw	r2,0(r16)
   13b68:	b1000117 	ldw	r4,4(r22)
   13b6c:	10bfff17 	ldw	r2,-4(r2)
   13b70:	11400117 	ldw	r5,4(r2)
   13b74:	21400526 	beq	r4,r5,13b8c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xdc>
   13b78:	20800007 	ldb	r2,0(r4)
   13b7c:	10800aa0 	cmpeqi	r2,r2,42
   13b80:	1000421e 	bne	r2,zero,13c8c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1dc>
   13b84:	0014bbc0 	call	14bbc <strcmp>
   13b88:	1000401e 	bne	r2,zero,13c8c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1dc>
   13b8c:	a080004c 	andi	r2,r20,1
   13b90:	10003e26 	beq	r2,zero,13c8c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1dc>
   13b94:	99000217 	ldw	r4,8(r19)
   13b98:	81800217 	ldw	r6,8(r16)
   13b9c:	21c0180c 	andi	r7,r4,96
   13ba0:	3080180c 	andi	r2,r6,96
   13ba4:	01ca303a 	nor	r5,zero,r7
   13ba8:	288a703a 	and	r5,r5,r2
   13bac:	28000126 	beq	r5,zero,13bb4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x104>
   13bb0:	31cc703a 	and	r6,r6,r7
   13bb4:	0084303a 	nor	r2,zero,r2
   13bb8:	0106303a 	nor	r3,zero,r4
   13bbc:	11c4703a 	and	r2,r2,r7
   13bc0:	1986703a 	and	r3,r3,r6
   13bc4:	10c4b03a 	or	r2,r2,r3
   13bc8:	1000301e 	bne	r2,zero,13c8c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1dc>
   13bcc:	2100004c 	andi	r4,r4,1
   13bd0:	20003c26 	beq	r4,zero,13cc4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x214>
   13bd4:	a8c00617 	ldw	r3,24(r21)
   13bd8:	00800074 	movhi	r2,1
   13bdc:	108e9404 	addi	r2,r2,14928
   13be0:	18803b1e 	bne	r3,r2,13cd0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x220>
   13be4:	99000317 	ldw	r4,12(r19)
   13be8:	81400317 	ldw	r5,12(r16)
   13bec:	a1c00084 	addi	r7,r20,2
   13bf0:	20800017 	ldw	r2,0(r4)
   13bf4:	900d883a 	mov	r6,r18
   13bf8:	10800417 	ldw	r2,16(r2)
   13bfc:	dfc00717 	ldw	ra,28(sp)
   13c00:	dd800617 	ldw	r22,24(sp)
   13c04:	dd400517 	ldw	r21,20(sp)
   13c08:	dd000417 	ldw	r20,16(sp)
   13c0c:	dcc00317 	ldw	r19,12(sp)
   13c10:	dc800217 	ldw	r18,8(sp)
   13c14:	dc400117 	ldw	r17,4(sp)
   13c18:	dc000017 	ldw	r16,0(sp)
   13c1c:	dec00804 	addi	sp,sp,32
   13c20:	1000683a 	jmp	r2
   13c24:	00800074 	movhi	r2,1
   13c28:	b4400117 	ldw	r17,4(r22)
   13c2c:	115b0317 	ldw	r5,27660(r2)
   13c30:	89401c26 	beq	r17,r5,13ca4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1f4>
   13c34:	88800007 	ldb	r2,0(r17)
   13c38:	10800aa0 	cmpeqi	r2,r2,42
   13c3c:	1000151e 	bne	r2,zero,13c94 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1e4>
   13c40:	8809883a 	mov	r4,r17
   13c44:	0014bbc0 	call	14bbc <strcmp>
   13c48:	10001626 	beq	r2,zero,13ca4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1f4>
   13c4c:	00800074 	movhi	r2,1
   13c50:	115c8d17 	ldw	r5,29236(r2)
   13c54:	89400326 	beq	r17,r5,13c64 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1b4>
   13c58:	8809883a 	mov	r4,r17
   13c5c:	0014bbc0 	call	14bbc <strcmp>
   13c60:	103fbf1e 	bne	r2,zero,13b60 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
   13c64:	99000317 	ldw	r4,12(r19)
   13c68:	20800017 	ldw	r2,0(r4)
   13c6c:	10800317 	ldw	r2,12(r2)
   13c70:	103ee83a 	callr	r2
   13c74:	10c03fcc 	andi	r3,r2,255
   13c78:	18000d26 	beq	r3,zero,13cb0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x200>
   13c7c:	00c00074 	movhi	r3,1
   13c80:	18de3304 	addi	r3,r3,30924
   13c84:	90c00015 	stw	r3,0(r18)
   13c88:	003fa006 	br	13b0c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x5c>
   13c8c:	0005883a 	mov	r2,zero
   13c90:	003f9e06 	br	13b0c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x5c>
   13c94:	00800074 	movhi	r2,1
   13c98:	109c8d17 	ldw	r2,29236(r2)
   13c9c:	88bfb01e 	bne	r17,r2,13b60 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
   13ca0:	003ff006 	br	13c64 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1b4>
   13ca4:	90000015 	stw	zero,0(r18)
   13ca8:	00800044 	movi	r2,1
   13cac:	003f9706 	br	13b0c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x5c>
   13cb0:	00800074 	movhi	r2,1
   13cb4:	109e3204 	addi	r2,r2,30920
   13cb8:	90800015 	stw	r2,0(r18)
   13cbc:	00800044 	movi	r2,1
   13cc0:	003f9206 	br	13b0c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x5c>
   13cc4:	00bfff84 	movi	r2,-2
   13cc8:	a0a8703a 	and	r20,r20,r2
   13ccc:	003fc106 	br	13bd4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x124>
   13cd0:	a00f883a 	mov	r7,r20
   13cd4:	900d883a 	mov	r6,r18
   13cd8:	800b883a 	mov	r5,r16
   13cdc:	9809883a 	mov	r4,r19
   13ce0:	dfc00717 	ldw	ra,28(sp)
   13ce4:	dd800617 	ldw	r22,24(sp)
   13ce8:	dd400517 	ldw	r21,20(sp)
   13cec:	dd000417 	ldw	r20,16(sp)
   13cf0:	dcc00317 	ldw	r19,12(sp)
   13cf4:	dc800217 	ldw	r18,8(sp)
   13cf8:	dc400117 	ldw	r17,4(sp)
   13cfc:	dc000017 	ldw	r16,0(sp)
   13d00:	dec00804 	addi	sp,sp,32
   13d04:	1800683a 	jmp	r3
   13d08:	0013e380 	call	13e38 <__cxa_bad_typeid>

00013d0c <_ZN10__cxxabiv129__pointer_to_member_type_infoD1Ev>:
   13d0c:	00800074 	movhi	r2,1
   13d10:	109c9104 	addi	r2,r2,29252
   13d14:	20800015 	stw	r2,0(r4)
   13d18:	0013a681 	jmpi	13a68 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>

00013d1c <_ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev>:
   13d1c:	defffe04 	addi	sp,sp,-8
   13d20:	00800074 	movhi	r2,1
   13d24:	dc000015 	stw	r16,0(sp)
   13d28:	dfc00115 	stw	ra,4(sp)
   13d2c:	109c9104 	addi	r2,r2,29252
   13d30:	20800015 	stw	r2,0(r4)
   13d34:	2021883a 	mov	r16,r4
   13d38:	0013a680 	call	13a68 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
   13d3c:	01400504 	movi	r5,20
   13d40:	8009883a 	mov	r4,r16
   13d44:	dfc00117 	ldw	ra,4(sp)
   13d48:	dc000017 	ldw	r16,0(sp)
   13d4c:	dec00204 	addi	sp,sp,8
   13d50:	00134b41 	jmpi	134b4 <_ZdlPvj>

00013d54 <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
   13d54:	20c00417 	ldw	r3,16(r4)
   13d58:	28800417 	ldw	r2,16(r5)
   13d5c:	defffb04 	addi	sp,sp,-20
   13d60:	dc400215 	stw	r17,8(sp)
   13d64:	dc000115 	stw	r16,4(sp)
   13d68:	2023883a 	mov	r17,r4
   13d6c:	2821883a 	mov	r16,r5
   13d70:	19000117 	ldw	r4,4(r3)
   13d74:	11400117 	ldw	r5,4(r2)
   13d78:	dc800315 	stw	r18,12(sp)
   13d7c:	dfc00415 	stw	ra,16(sp)
   13d80:	3825883a 	mov	r18,r7
   13d84:	21400e26 	beq	r4,r5,13dc0 <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x6c>
   13d88:	20800007 	ldb	r2,0(r4)
   13d8c:	d9800015 	stw	r6,0(sp)
   13d90:	10800aa0 	cmpeqi	r2,r2,42
   13d94:	1000031e 	bne	r2,zero,13da4 <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x50>
   13d98:	0014bbc0 	call	14bbc <strcmp>
   13d9c:	d9800017 	ldw	r6,0(sp)
   13da0:	10000726 	beq	r2,zero,13dc0 <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x6c>
   13da4:	0005883a 	mov	r2,zero
   13da8:	dfc00417 	ldw	ra,16(sp)
   13dac:	dc800317 	ldw	r18,12(sp)
   13db0:	dc400217 	ldw	r17,8(sp)
   13db4:	dc000117 	ldw	r16,4(sp)
   13db8:	dec00504 	addi	sp,sp,20
   13dbc:	f800283a 	ret
   13dc0:	89000317 	ldw	r4,12(r17)
   13dc4:	81400317 	ldw	r5,12(r16)
   13dc8:	91c00084 	addi	r7,r18,2
   13dcc:	20800017 	ldw	r2,0(r4)
   13dd0:	10800417 	ldw	r2,16(r2)
   13dd4:	dfc00417 	ldw	ra,16(sp)
   13dd8:	dc800317 	ldw	r18,12(sp)
   13ddc:	dc400217 	ldw	r17,8(sp)
   13de0:	dc000117 	ldw	r16,4(sp)
   13de4:	dec00504 	addi	sp,sp,20
   13de8:	1000683a 	jmp	r2

00013dec <__cxa_pure_virtual>:
   13dec:	deffff04 	addi	sp,sp,-4
   13df0:	dfc00015 	stw	ra,0(sp)
   13df4:	0012ad40 	call	12ad4 <_ZSt9terminatev>

00013df8 <__cxa_deleted_virtual>:
   13df8:	deffff04 	addi	sp,sp,-4
   13dfc:	dfc00015 	stw	ra,0(sp)
   13e00:	0012ad40 	call	12ad4 <_ZSt9terminatev>

00013e04 <__cxa_bad_cast>:
   13e04:	deffff04 	addi	sp,sp,-4
   13e08:	01000104 	movi	r4,4
   13e0c:	dfc00015 	stw	ra,0(sp)
   13e10:	00136440 	call	13644 <__cxa_allocate_exception>
   13e14:	1009883a 	mov	r4,r2
   13e18:	00800074 	movhi	r2,1
   13e1c:	01800074 	movhi	r6,1
   13e20:	01400074 	movhi	r5,1
   13e24:	109cba04 	addi	r2,r2,29416
   13e28:	318fc004 	addi	r6,r6,16128
   13e2c:	295cb504 	addi	r5,r5,29396
   13e30:	20800015 	stw	r2,0(r4)
   13e34:	0012c380 	call	12c38 <__cxa_throw>

00013e38 <__cxa_bad_typeid>:
   13e38:	deffff04 	addi	sp,sp,-4
   13e3c:	01000104 	movi	r4,4
   13e40:	dfc00015 	stw	ra,0(sp)
   13e44:	00136440 	call	13644 <__cxa_allocate_exception>
   13e48:	1009883a 	mov	r4,r2
   13e4c:	00800074 	movhi	r2,1
   13e50:	01800074 	movhi	r6,1
   13e54:	01400074 	movhi	r5,1
   13e58:	109cca04 	addi	r2,r2,29480
   13e5c:	318fd504 	addi	r6,r6,16212
   13e60:	295cc504 	addi	r5,r5,29460
   13e64:	20800015 	stw	r2,0(r4)
   13e68:	0012c380 	call	12c38 <__cxa_throw>

00013e6c <__cxa_throw_bad_array_new_length>:
   13e6c:	deffff04 	addi	sp,sp,-4
   13e70:	01000104 	movi	r4,4
   13e74:	dfc00015 	stw	ra,0(sp)
   13e78:	00136440 	call	13644 <__cxa_allocate_exception>
   13e7c:	1009883a 	mov	r4,r2
   13e80:	00800074 	movhi	r2,1
   13e84:	01800074 	movhi	r6,1
   13e88:	01400074 	movhi	r5,1
   13e8c:	109cab04 	addi	r2,r2,29356
   13e90:	318fab04 	addi	r6,r6,16044
   13e94:	295ca604 	addi	r5,r5,29336
   13e98:	20800015 	stw	r2,0(r4)
   13e9c:	0012c380 	call	12c38 <__cxa_throw>

00013ea0 <_ZNKSt20bad_array_new_length4whatEv>:
   13ea0:	00800074 	movhi	r2,1
   13ea4:	109c9804 	addi	r2,r2,29280
   13ea8:	f800283a 	ret

00013eac <_ZNSt20bad_array_new_lengthD1Ev>:
   13eac:	00800074 	movhi	r2,1
   13eb0:	109cab04 	addi	r2,r2,29356
   13eb4:	20800015 	stw	r2,0(r4)
   13eb8:	0013fa81 	jmpi	13fa8 <_ZNSt9bad_allocD1Ev>

00013ebc <_ZNSt20bad_array_new_lengthD0Ev>:
   13ebc:	defffe04 	addi	sp,sp,-8
   13ec0:	00800074 	movhi	r2,1
   13ec4:	dc000015 	stw	r16,0(sp)
   13ec8:	dfc00115 	stw	ra,4(sp)
   13ecc:	109cab04 	addi	r2,r2,29356
   13ed0:	20800015 	stw	r2,0(r4)
   13ed4:	2021883a 	mov	r16,r4
   13ed8:	0013fa80 	call	13fa8 <_ZNSt9bad_allocD1Ev>
   13edc:	01400104 	movi	r5,4
   13ee0:	8009883a 	mov	r4,r16
   13ee4:	dfc00117 	ldw	ra,4(sp)
   13ee8:	dc000017 	ldw	r16,0(sp)
   13eec:	dec00204 	addi	sp,sp,8
   13ef0:	00134b41 	jmpi	134b4 <_ZdlPvj>

00013ef4 <_ZNKSt8bad_cast4whatEv>:
   13ef4:	00800074 	movhi	r2,1
   13ef8:	109cae04 	addi	r2,r2,29368
   13efc:	f800283a 	ret

00013f00 <_ZNSt8bad_castD1Ev>:
   13f00:	00800074 	movhi	r2,1
   13f04:	109cba04 	addi	r2,r2,29416
   13f08:	20800015 	stw	r2,0(r4)
   13f0c:	00139a01 	jmpi	139a0 <_ZNSt9exceptionD1Ev>

00013f10 <_ZNSt8bad_castD0Ev>:
   13f10:	defffe04 	addi	sp,sp,-8
   13f14:	00800074 	movhi	r2,1
   13f18:	dc000015 	stw	r16,0(sp)
   13f1c:	dfc00115 	stw	ra,4(sp)
   13f20:	109cba04 	addi	r2,r2,29416
   13f24:	20800015 	stw	r2,0(r4)
   13f28:	2021883a 	mov	r16,r4
   13f2c:	00139a00 	call	139a0 <_ZNSt9exceptionD1Ev>
   13f30:	01400104 	movi	r5,4
   13f34:	8009883a 	mov	r4,r16
   13f38:	dfc00117 	ldw	ra,4(sp)
   13f3c:	dc000017 	ldw	r16,0(sp)
   13f40:	dec00204 	addi	sp,sp,8
   13f44:	00134b41 	jmpi	134b4 <_ZdlPvj>

00013f48 <_ZNKSt10bad_typeid4whatEv>:
   13f48:	00800074 	movhi	r2,1
   13f4c:	109cbd04 	addi	r2,r2,29428
   13f50:	f800283a 	ret

00013f54 <_ZNSt10bad_typeidD1Ev>:
   13f54:	00800074 	movhi	r2,1
   13f58:	109cca04 	addi	r2,r2,29480
   13f5c:	20800015 	stw	r2,0(r4)
   13f60:	00139a01 	jmpi	139a0 <_ZNSt9exceptionD1Ev>

00013f64 <_ZNSt10bad_typeidD0Ev>:
   13f64:	defffe04 	addi	sp,sp,-8
   13f68:	00800074 	movhi	r2,1
   13f6c:	dc000015 	stw	r16,0(sp)
   13f70:	dfc00115 	stw	ra,4(sp)
   13f74:	109cca04 	addi	r2,r2,29480
   13f78:	20800015 	stw	r2,0(r4)
   13f7c:	2021883a 	mov	r16,r4
   13f80:	00139a00 	call	139a0 <_ZNSt9exceptionD1Ev>
   13f84:	01400104 	movi	r5,4
   13f88:	8009883a 	mov	r4,r16
   13f8c:	dfc00117 	ldw	ra,4(sp)
   13f90:	dc000017 	ldw	r16,0(sp)
   13f94:	dec00204 	addi	sp,sp,8
   13f98:	00134b41 	jmpi	134b4 <_ZdlPvj>

00013f9c <_ZNKSt9bad_alloc4whatEv>:
   13f9c:	00800074 	movhi	r2,1
   13fa0:	109ccd04 	addi	r2,r2,29492
   13fa4:	f800283a 	ret

00013fa8 <_ZNSt9bad_allocD1Ev>:
   13fa8:	00800074 	movhi	r2,1
   13fac:	109cda04 	addi	r2,r2,29544
   13fb0:	20800015 	stw	r2,0(r4)
   13fb4:	00139a01 	jmpi	139a0 <_ZNSt9exceptionD1Ev>

00013fb8 <_ZNSt9bad_allocD0Ev>:
   13fb8:	defffe04 	addi	sp,sp,-8
   13fbc:	00800074 	movhi	r2,1
   13fc0:	dc000015 	stw	r16,0(sp)
   13fc4:	dfc00115 	stw	ra,4(sp)
   13fc8:	109cda04 	addi	r2,r2,29544
   13fcc:	20800015 	stw	r2,0(r4)
   13fd0:	2021883a 	mov	r16,r4
   13fd4:	00139a00 	call	139a0 <_ZNSt9exceptionD1Ev>
   13fd8:	01400104 	movi	r5,4
   13fdc:	8009883a 	mov	r4,r16
   13fe0:	dfc00117 	ldw	ra,4(sp)
   13fe4:	dc000017 	ldw	r16,0(sp)
   13fe8:	dec00204 	addi	sp,sp,8
   13fec:	00134b41 	jmpi	134b4 <_ZdlPvj>

00013ff0 <_Unwind_ForcedUnwind_Phase2>:
   13ff0:	28800017 	ldw	r2,0(r5)
   13ff4:	defff504 	addi	sp,sp,-44
   13ff8:	dd400815 	stw	r21,32(sp)
   13ffc:	dd000715 	stw	r20,28(sp)
   14000:	dcc00615 	stw	r19,24(sp)
   14004:	dc800515 	stw	r18,20(sp)
   14008:	dc400415 	stw	r17,16(sp)
   1400c:	dc000315 	stw	r16,12(sp)
   14010:	dfc00a15 	stw	ra,40(sp)
   14014:	dd800915 	stw	r22,36(sp)
   14018:	302b883a 	mov	r21,r6
   1401c:	24c00317 	ldw	r19,12(r4)
   14020:	25000417 	ldw	r20,16(r4)
   14024:	21800017 	ldw	r6,0(r4)
   14028:	21c00117 	ldw	r7,4(r4)
   1402c:	2823883a 	mov	r17,r5
   14030:	2021883a 	mov	r16,r4
   14034:	04800044 	movi	r18,1
   14038:	10001d26 	beq	r2,zero,140b0 <_Unwind_ForcedUnwind_Phase2+0xc0>
   1403c:	15800617 	ldw	r22,24(r2)
   14040:	01400284 	movi	r5,10
   14044:	01000044 	movi	r4,1
   14048:	dd000215 	stw	r20,8(sp)
   1404c:	dc400115 	stw	r17,4(sp)
   14050:	dc000015 	stw	r16,0(sp)
   14054:	983ee83a 	callr	r19
   14058:	01400284 	movi	r5,10
   1405c:	01000044 	movi	r4,1
   14060:	10001a1e 	bne	r2,zero,140cc <_Unwind_ForcedUnwind_Phase2+0xdc>
   14064:	81800017 	ldw	r6,0(r16)
   14068:	81c00117 	ldw	r7,4(r16)
   1406c:	b0000926 	beq	r22,zero,14094 <_Unwind_ForcedUnwind_Phase2+0xa4>
   14070:	dc400115 	stw	r17,4(sp)
   14074:	dc000015 	stw	r16,0(sp)
   14078:	b03ee83a 	callr	r22
   1407c:	10c001e0 	cmpeqi	r3,r2,7
   14080:	11000218 	cmpnei	r4,r2,8
   14084:	18001d1e 	bne	r3,zero,140fc <_Unwind_ForcedUnwind_Phase2+0x10c>
   14088:	2000101e 	bne	r4,zero,140cc <_Unwind_ForcedUnwind_Phase2+0xdc>
   1408c:	81800017 	ldw	r6,0(r16)
   14090:	81c00117 	ldw	r7,4(r16)
   14094:	88800017 	ldw	r2,0(r17)
   14098:	00c00074 	movhi	r3,1
   1409c:	94800044 	addi	r18,r18,1
   140a0:	10800017 	ldw	r2,0(r2)
   140a4:	189f9d15 	stw	r2,32372(r3)
   140a8:	88800015 	stw	r2,0(r17)
   140ac:	103fe31e 	bne	r2,zero,1403c <_Unwind_ForcedUnwind_Phase2+0x4c>
   140b0:	dd000215 	stw	r20,8(sp)
   140b4:	dc400115 	stw	r17,4(sp)
   140b8:	dc000015 	stw	r16,0(sp)
   140bc:	01400684 	movi	r5,26
   140c0:	01000044 	movi	r4,1
   140c4:	983ee83a 	callr	r19
   140c8:	10000b26 	beq	r2,zero,140f8 <_Unwind_ForcedUnwind_Phase2+0x108>
   140cc:	00800084 	movi	r2,2
   140d0:	dfc00a17 	ldw	ra,40(sp)
   140d4:	dd800917 	ldw	r22,36(sp)
   140d8:	dd400817 	ldw	r21,32(sp)
   140dc:	dd000717 	ldw	r20,28(sp)
   140e0:	dcc00617 	ldw	r19,24(sp)
   140e4:	dc800517 	ldw	r18,20(sp)
   140e8:	dc400417 	ldw	r17,16(sp)
   140ec:	dc000317 	ldw	r16,12(sp)
   140f0:	dec00b04 	addi	sp,sp,44
   140f4:	f800283a 	ret
   140f8:	00800144 	movi	r2,5
   140fc:	ac800015 	stw	r18,0(r21)
   14100:	003ff306 	br	140d0 <_Unwind_ForcedUnwind_Phase2+0xe0>

00014104 <_Unwind_RaiseException_Phase2>:
   14104:	28800017 	ldw	r2,0(r5)
   14108:	10002f26 	beq	r2,zero,141c8 <_Unwind_RaiseException_Phase2+0xc4>
   1410c:	defff804 	addi	sp,sp,-32
   14110:	dcc00515 	stw	r19,20(sp)
   14114:	dc800415 	stw	r18,16(sp)
   14118:	dc400315 	stw	r17,12(sp)
   1411c:	dc000215 	stw	r16,8(sp)
   14120:	dfc00715 	stw	ra,28(sp)
   14124:	dd000615 	stw	r20,24(sp)
   14128:	2823883a 	mov	r17,r5
   1412c:	2021883a 	mov	r16,r4
   14130:	3027883a 	mov	r19,r6
   14134:	04800044 	movi	r18,1
   14138:	00001306 	br	14188 <_Unwind_RaiseException_Phase2+0x84>
   1413c:	18000e26 	beq	r3,zero,14178 <_Unwind_RaiseException_Phase2+0x74>
   14140:	01400084 	movi	r5,2
   14144:	0029883a 	mov	r20,zero
   14148:	81800017 	ldw	r6,0(r16)
   1414c:	81c00117 	ldw	r7,4(r16)
   14150:	01000044 	movi	r4,1
   14154:	dc400115 	stw	r17,4(sp)
   14158:	dc000015 	stw	r16,0(sp)
   1415c:	183ee83a 	callr	r3
   14160:	10c001e0 	cmpeqi	r3,r2,7
   14164:	18001a1e 	bne	r3,zero,141d0 <_Unwind_RaiseException_Phase2+0xcc>
   14168:	10800218 	cmpnei	r2,r2,8
   1416c:	10000d1e 	bne	r2,zero,141a4 <_Unwind_RaiseException_Phase2+0xa0>
   14170:	a000191e 	bne	r20,zero,141d8 <_Unwind_RaiseException_Phase2+0xd4>
   14174:	88800017 	ldw	r2,0(r17)
   14178:	10800017 	ldw	r2,0(r2)
   1417c:	94800044 	addi	r18,r18,1
   14180:	88800015 	stw	r2,0(r17)
   14184:	10000726 	beq	r2,zero,141a4 <_Unwind_RaiseException_Phase2+0xa0>
   14188:	81000417 	ldw	r4,16(r16)
   1418c:	10c00617 	ldw	r3,24(r2)
   14190:	113fea1e 	bne	r2,r4,1413c <_Unwind_RaiseException_Phase2+0x38>
   14194:	18001026 	beq	r3,zero,141d8 <_Unwind_RaiseException_Phase2+0xd4>
   14198:	01400184 	movi	r5,6
   1419c:	05000104 	movi	r20,4
   141a0:	003fe906 	br	14148 <_Unwind_RaiseException_Phase2+0x44>
   141a4:	00800084 	movi	r2,2
   141a8:	dfc00717 	ldw	ra,28(sp)
   141ac:	dd000617 	ldw	r20,24(sp)
   141b0:	dcc00517 	ldw	r19,20(sp)
   141b4:	dc800417 	ldw	r18,16(sp)
   141b8:	dc400317 	ldw	r17,12(sp)
   141bc:	dc000217 	ldw	r16,8(sp)
   141c0:	dec00804 	addi	sp,sp,32
   141c4:	f800283a 	ret
   141c8:	00800084 	movi	r2,2
   141cc:	f800283a 	ret
   141d0:	9c800015 	stw	r18,0(r19)
   141d4:	003ff406 	br	141a8 <_Unwind_RaiseException_Phase2+0xa4>
   141d8:	00145140 	call	14514 <abort>

000141dc <uw_install_context.constprop.0.isra.0>:
   141dc:	deffff04 	addi	sp,sp,-4
   141e0:	df000015 	stw	fp,0(sp)
   141e4:	20800804 	addi	r2,r4,32
   141e8:	00c00074 	movhi	r3,1
   141ec:	191f9d15 	stw	r4,32372(r3)
   141f0:	d839883a 	mov	fp,sp
   141f4:	20c00917 	ldw	r3,36(r4)
   141f8:	21000817 	ldw	r4,32(r4)
   141fc:	16c00217 	ldw	sp,8(r2)
   14200:	2039883a 	mov	fp,r4
   14204:	1800683a 	jmp	r3

00014208 <_Unwind_SjLj_Register>:
   14208:	00800074 	movhi	r2,1
   1420c:	109f9d17 	ldw	r2,32372(r2)
   14210:	20800015 	stw	r2,0(r4)
   14214:	00800074 	movhi	r2,1
   14218:	111f9d15 	stw	r4,32372(r2)
   1421c:	f800283a 	ret

00014220 <_Unwind_SjLj_Unregister>:
   14220:	20c00017 	ldw	r3,0(r4)
   14224:	00800074 	movhi	r2,1
   14228:	10df9d15 	stw	r3,32372(r2)
   1422c:	f800283a 	ret

00014230 <_Unwind_GetGR>:
   14230:	29400084 	addi	r5,r5,2
   14234:	20800017 	ldw	r2,0(r4)
   14238:	280a90ba 	slli	r5,r5,2
   1423c:	114b883a 	add	r5,r2,r5
   14240:	28800017 	ldw	r2,0(r5)
   14244:	f800283a 	ret

00014248 <_Unwind_GetCFA>:
   14248:	20800017 	ldw	r2,0(r4)
   1424c:	10000226 	beq	r2,zero,14258 <_Unwind_GetCFA+0x10>
   14250:	10800a17 	ldw	r2,40(r2)
   14254:	f800283a 	ret
   14258:	0005883a 	mov	r2,zero
   1425c:	f800283a 	ret

00014260 <_Unwind_SetGR>:
   14260:	29400084 	addi	r5,r5,2
   14264:	20800017 	ldw	r2,0(r4)
   14268:	280a90ba 	slli	r5,r5,2
   1426c:	114b883a 	add	r5,r2,r5
   14270:	29800015 	stw	r6,0(r5)
   14274:	f800283a 	ret

00014278 <_Unwind_GetIP>:
   14278:	20800017 	ldw	r2,0(r4)
   1427c:	10800117 	ldw	r2,4(r2)
   14280:	10800044 	addi	r2,r2,1
   14284:	f800283a 	ret

00014288 <_Unwind_GetIPInfo>:
   14288:	20800017 	ldw	r2,0(r4)
   1428c:	28000015 	stw	zero,0(r5)
   14290:	10000326 	beq	r2,zero,142a0 <_Unwind_GetIPInfo+0x18>
   14294:	10800117 	ldw	r2,4(r2)
   14298:	10800044 	addi	r2,r2,1
   1429c:	f800283a 	ret
   142a0:	0005883a 	mov	r2,zero
   142a4:	f800283a 	ret

000142a8 <_Unwind_SetIP>:
   142a8:	20800017 	ldw	r2,0(r4)
   142ac:	297fffc4 	addi	r5,r5,-1
   142b0:	11400115 	stw	r5,4(r2)
   142b4:	f800283a 	ret

000142b8 <_Unwind_GetLanguageSpecificData>:
   142b8:	20800017 	ldw	r2,0(r4)
   142bc:	10800717 	ldw	r2,28(r2)
   142c0:	f800283a 	ret

000142c4 <_Unwind_GetRegionStart>:
   142c4:	0005883a 	mov	r2,zero
   142c8:	f800283a 	ret

000142cc <_Unwind_FindEnclosingFunction>:
   142cc:	0005883a 	mov	r2,zero
   142d0:	f800283a 	ret

000142d4 <_Unwind_GetDataRelBase>:
   142d4:	0005883a 	mov	r2,zero
   142d8:	f800283a 	ret

000142dc <_Unwind_GetTextRelBase>:
   142dc:	0005883a 	mov	r2,zero
   142e0:	f800283a 	ret

000142e4 <_Unwind_SjLj_RaiseException>:
   142e4:	defff804 	addi	sp,sp,-32
   142e8:	00800074 	movhi	r2,1
   142ec:	dc400515 	stw	r17,20(sp)
   142f0:	145f9d17 	ldw	r17,32372(r2)
   142f4:	dfc00715 	stw	ra,28(sp)
   142f8:	dc800615 	stw	r18,24(sp)
   142fc:	dc000415 	stw	r16,16(sp)
   14300:	dc400215 	stw	r17,8(sp)
   14304:	88001426 	beq	r17,zero,14358 <_Unwind_SjLj_RaiseException+0x74>
   14308:	2021883a 	mov	r16,r4
   1430c:	8805883a 	mov	r2,r17
   14310:	dc800204 	addi	r18,sp,8
   14314:	10800617 	ldw	r2,24(r2)
   14318:	10000b26 	beq	r2,zero,14348 <_Unwind_SjLj_RaiseException+0x64>
   1431c:	81800017 	ldw	r6,0(r16)
   14320:	81c00117 	ldw	r7,4(r16)
   14324:	01400044 	movi	r5,1
   14328:	dc800115 	stw	r18,4(sp)
   1432c:	dc000015 	stw	r16,0(sp)
   14330:	01000044 	movi	r4,1
   14334:	103ee83a 	callr	r2
   14338:	10c001a0 	cmpeqi	r3,r2,6
   1433c:	18000d1e 	bne	r3,zero,14374 <_Unwind_SjLj_RaiseException+0x90>
   14340:	10800218 	cmpnei	r2,r2,8
   14344:	1000171e 	bne	r2,zero,143a4 <_Unwind_SjLj_RaiseException+0xc0>
   14348:	d8800217 	ldw	r2,8(sp)
   1434c:	10800017 	ldw	r2,0(r2)
   14350:	d8800215 	stw	r2,8(sp)
   14354:	103fef1e 	bne	r2,zero,14314 <_Unwind_SjLj_RaiseException+0x30>
   14358:	00800144 	movi	r2,5
   1435c:	dfc00717 	ldw	ra,28(sp)
   14360:	dc800617 	ldw	r18,24(sp)
   14364:	dc400517 	ldw	r17,20(sp)
   14368:	dc000417 	ldw	r16,16(sp)
   1436c:	dec00804 	addi	sp,sp,32
   14370:	f800283a 	ret
   14374:	d8800217 	ldw	r2,8(sp)
   14378:	80000315 	stw	zero,12(r16)
   1437c:	d9800304 	addi	r6,sp,12
   14380:	80800415 	stw	r2,16(r16)
   14384:	900b883a 	mov	r5,r18
   14388:	8009883a 	mov	r4,r16
   1438c:	dc400215 	stw	r17,8(sp)
   14390:	00141040 	call	14104 <_Unwind_RaiseException_Phase2>
   14394:	10c001d8 	cmpnei	r3,r2,7
   14398:	183ff01e 	bne	r3,zero,1435c <_Unwind_SjLj_RaiseException+0x78>
   1439c:	d9000217 	ldw	r4,8(sp)
   143a0:	00141dc0 	call	141dc <uw_install_context.constprop.0.isra.0>
   143a4:	008000c4 	movi	r2,3
   143a8:	003fec06 	br	1435c <_Unwind_SjLj_RaiseException+0x78>

000143ac <_Unwind_SjLj_ForcedUnwind>:
   143ac:	00800074 	movhi	r2,1
   143b0:	defffd04 	addi	sp,sp,-12
   143b4:	10df9d17 	ldw	r3,32372(r2)
   143b8:	dfc00215 	stw	ra,8(sp)
   143bc:	21400315 	stw	r5,12(r4)
   143c0:	21800415 	stw	r6,16(r4)
   143c4:	d80b883a 	mov	r5,sp
   143c8:	d9800104 	addi	r6,sp,4
   143cc:	d8c00015 	stw	r3,0(sp)
   143d0:	0013ff00 	call	13ff0 <_Unwind_ForcedUnwind_Phase2>
   143d4:	10c001e0 	cmpeqi	r3,r2,7
   143d8:	1800031e 	bne	r3,zero,143e8 <_Unwind_SjLj_ForcedUnwind+0x3c>
   143dc:	dfc00217 	ldw	ra,8(sp)
   143e0:	dec00304 	addi	sp,sp,12
   143e4:	f800283a 	ret
   143e8:	d9000017 	ldw	r4,0(sp)
   143ec:	00141dc0 	call	141dc <uw_install_context.constprop.0.isra.0>

000143f0 <_Unwind_SjLj_Resume>:
   143f0:	00800074 	movhi	r2,1
   143f4:	10df9d17 	ldw	r3,32372(r2)
   143f8:	20800317 	ldw	r2,12(r4)
   143fc:	defffd04 	addi	sp,sp,-12
   14400:	dfc00215 	stw	ra,8(sp)
   14404:	d8c00015 	stw	r3,0(sp)
   14408:	d9800104 	addi	r6,sp,4
   1440c:	d80b883a 	mov	r5,sp
   14410:	1000051e 	bne	r2,zero,14428 <_Unwind_SjLj_Resume+0x38>
   14414:	00141040 	call	14104 <_Unwind_RaiseException_Phase2>
   14418:	108001e0 	cmpeqi	r2,r2,7
   1441c:	10000426 	beq	r2,zero,14430 <_Unwind_SjLj_Resume+0x40>
   14420:	d9000017 	ldw	r4,0(sp)
   14424:	00141dc0 	call	141dc <uw_install_context.constprop.0.isra.0>
   14428:	0013ff00 	call	13ff0 <_Unwind_ForcedUnwind_Phase2>
   1442c:	003ffa06 	br	14418 <_Unwind_SjLj_Resume+0x28>
   14430:	00145140 	call	14514 <abort>

00014434 <_Unwind_SjLj_Resume_or_Rethrow>:
   14434:	20800317 	ldw	r2,12(r4)
   14438:	1000011e 	bne	r2,zero,14440 <_Unwind_SjLj_Resume_or_Rethrow+0xc>
   1443c:	00142e41 	jmpi	142e4 <_Unwind_SjLj_RaiseException>
   14440:	00800074 	movhi	r2,1
   14444:	109f9d17 	ldw	r2,32372(r2)
   14448:	defffd04 	addi	sp,sp,-12
   1444c:	d9800104 	addi	r6,sp,4
   14450:	d80b883a 	mov	r5,sp
   14454:	dfc00215 	stw	ra,8(sp)
   14458:	d8800015 	stw	r2,0(sp)
   1445c:	0013ff00 	call	13ff0 <_Unwind_ForcedUnwind_Phase2>
   14460:	108001e0 	cmpeqi	r2,r2,7
   14464:	10000226 	beq	r2,zero,14470 <_Unwind_SjLj_Resume_or_Rethrow+0x3c>
   14468:	d9000017 	ldw	r4,0(sp)
   1446c:	00141dc0 	call	141dc <uw_install_context.constprop.0.isra.0>
   14470:	00145140 	call	14514 <abort>

00014474 <_Unwind_DeleteException>:
   14474:	20800217 	ldw	r2,8(r4)
   14478:	200b883a 	mov	r5,r4
   1447c:	10000226 	beq	r2,zero,14488 <_Unwind_DeleteException+0x14>
   14480:	01000044 	movi	r4,1
   14484:	1000683a 	jmp	r2
   14488:	f800283a 	ret

0001448c <_Unwind_Backtrace>:
   1448c:	00800074 	movhi	r2,1
   14490:	109f9d17 	ldw	r2,32372(r2)
   14494:	defffb04 	addi	sp,sp,-20
   14498:	dc800315 	stw	r18,12(sp)
   1449c:	dc400215 	stw	r17,8(sp)
   144a0:	dc000115 	stw	r16,4(sp)
   144a4:	dfc00415 	stw	ra,16(sp)
   144a8:	d8800015 	stw	r2,0(sp)
   144ac:	2021883a 	mov	r16,r4
   144b0:	2823883a 	mov	r17,r5
   144b4:	d825883a 	mov	r18,sp
   144b8:	10000826 	beq	r2,zero,144dc <_Unwind_Backtrace+0x50>
   144bc:	880b883a 	mov	r5,r17
   144c0:	9009883a 	mov	r4,r18
   144c4:	803ee83a 	callr	r16
   144c8:	1000101e 	bne	r2,zero,1450c <_Unwind_Backtrace+0x80>
   144cc:	d8800017 	ldw	r2,0(sp)
   144d0:	10800017 	ldw	r2,0(r2)
   144d4:	d8800015 	stw	r2,0(sp)
   144d8:	103ff81e 	bne	r2,zero,144bc <_Unwind_Backtrace+0x30>
   144dc:	880b883a 	mov	r5,r17
   144e0:	9009883a 	mov	r4,r18
   144e4:	803ee83a 	callr	r16
   144e8:	00c00144 	movi	r3,5
   144ec:	1000071e 	bne	r2,zero,1450c <_Unwind_Backtrace+0x80>
   144f0:	1805883a 	mov	r2,r3
   144f4:	dfc00417 	ldw	ra,16(sp)
   144f8:	dc800317 	ldw	r18,12(sp)
   144fc:	dc400217 	ldw	r17,8(sp)
   14500:	dc000117 	ldw	r16,4(sp)
   14504:	dec00504 	addi	sp,sp,20
   14508:	f800283a 	ret
   1450c:	00c000c4 	movi	r3,3
   14510:	003ff706 	br	144f0 <_Unwind_Backtrace+0x64>

00014514 <abort>:
   14514:	deffff04 	addi	sp,sp,-4
   14518:	01000184 	movi	r4,6
   1451c:	dfc00015 	stw	ra,0(sp)
   14520:	0014b2c0 	call	14b2c <raise>
   14524:	01000044 	movi	r4,1
   14528:	0014d140 	call	14d14 <_exit>

0001452c <malloc>:
   1452c:	00800074 	movhi	r2,1
   14530:	200b883a 	mov	r5,r4
   14534:	111e3617 	ldw	r4,30936(r2)
   14538:	00146cc1 	jmpi	146cc <_malloc_r>

0001453c <free>:
   1453c:	00800074 	movhi	r2,1
   14540:	200b883a 	mov	r5,r4
   14544:	111e3617 	ldw	r4,30936(r2)
   14548:	00145cc1 	jmpi	145cc <_free_r>

0001454c <memmove>:
   1454c:	2005883a 	mov	r2,r4
   14550:	2900142e 	bgeu	r5,r4,145a4 <memmove+0x58>
   14554:	298f883a 	add	r7,r5,r6
   14558:	21c0122e 	bgeu	r4,r7,145a4 <memmove+0x58>
   1455c:	018a303a 	nor	r5,zero,r6
   14560:	0007883a 	mov	r3,zero
   14564:	18ffffc4 	addi	r3,r3,-1
   14568:	28c0011e 	bne	r5,r3,14570 <memmove+0x24>
   1456c:	f800283a 	ret
   14570:	38c9883a 	add	r4,r7,r3
   14574:	22000003 	ldbu	r8,0(r4)
   14578:	30c9883a 	add	r4,r6,r3
   1457c:	1109883a 	add	r4,r2,r4
   14580:	22000005 	stb	r8,0(r4)
   14584:	003ff706 	br	14564 <memmove+0x18>
   14588:	28c9883a 	add	r4,r5,r3
   1458c:	21c00003 	ldbu	r7,0(r4)
   14590:	10c9883a 	add	r4,r2,r3
   14594:	18c00044 	addi	r3,r3,1
   14598:	21c00005 	stb	r7,0(r4)
   1459c:	30fffa1e 	bne	r6,r3,14588 <memmove+0x3c>
   145a0:	f800283a 	ret
   145a4:	0007883a 	mov	r3,zero
   145a8:	003ffc06 	br	1459c <memmove+0x50>

000145ac <memset>:
   145ac:	2005883a 	mov	r2,r4
   145b0:	218d883a 	add	r6,r4,r6
   145b4:	2007883a 	mov	r3,r4
   145b8:	1980011e 	bne	r3,r6,145c0 <memset+0x14>
   145bc:	f800283a 	ret
   145c0:	18c00044 	addi	r3,r3,1
   145c4:	197fffc5 	stb	r5,-1(r3)
   145c8:	003ffb06 	br	145b8 <memset+0xc>

000145cc <_free_r>:
   145cc:	28003e26 	beq	r5,zero,146c8 <_free_r+0xfc>
   145d0:	28bfff17 	ldw	r2,-4(r5)
   145d4:	defffd04 	addi	sp,sp,-12
   145d8:	dc000115 	stw	r16,4(sp)
   145dc:	dfc00215 	stw	ra,8(sp)
   145e0:	2c3fff04 	addi	r16,r5,-4
   145e4:	1000010e 	bge	r2,zero,145ec <_free_r+0x20>
   145e8:	80a1883a 	add	r16,r16,r2
   145ec:	d9000015 	stw	r4,0(sp)
   145f0:	00152d40 	call	152d4 <__malloc_lock>
   145f4:	00800074 	movhi	r2,1
   145f8:	109f9f17 	ldw	r2,32380(r2)
   145fc:	d9000017 	ldw	r4,0(sp)
   14600:	1000071e 	bne	r2,zero,14620 <_free_r+0x54>
   14604:	80000115 	stw	zero,4(r16)
   14608:	00800074 	movhi	r2,1
   1460c:	141f9f15 	stw	r16,32380(r2)
   14610:	dfc00217 	ldw	ra,8(sp)
   14614:	dc000117 	ldw	r16,4(sp)
   14618:	dec00304 	addi	sp,sp,12
   1461c:	00152f81 	jmpi	152f8 <__malloc_unlock>
   14620:	8080092e 	bgeu	r16,r2,14648 <_free_r+0x7c>
   14624:	81400017 	ldw	r5,0(r16)
   14628:	8147883a 	add	r3,r16,r5
   1462c:	10c0041e 	bne	r2,r3,14640 <_free_r+0x74>
   14630:	10c00017 	ldw	r3,0(r2)
   14634:	10800117 	ldw	r2,4(r2)
   14638:	1947883a 	add	r3,r3,r5
   1463c:	80c00015 	stw	r3,0(r16)
   14640:	80800115 	stw	r2,4(r16)
   14644:	003ff006 	br	14608 <_free_r+0x3c>
   14648:	1007883a 	mov	r3,r2
   1464c:	10800117 	ldw	r2,4(r2)
   14650:	10000126 	beq	r2,zero,14658 <_free_r+0x8c>
   14654:	80bffc2e 	bgeu	r16,r2,14648 <_free_r+0x7c>
   14658:	19400017 	ldw	r5,0(r3)
   1465c:	194d883a 	add	r6,r3,r5
   14660:	34000b1e 	bne	r6,r16,14690 <_free_r+0xc4>
   14664:	81800017 	ldw	r6,0(r16)
   14668:	298b883a 	add	r5,r5,r6
   1466c:	19400015 	stw	r5,0(r3)
   14670:	194d883a 	add	r6,r3,r5
   14674:	11bfe61e 	bne	r2,r6,14610 <_free_r+0x44>
   14678:	11800017 	ldw	r6,0(r2)
   1467c:	10800117 	ldw	r2,4(r2)
   14680:	314b883a 	add	r5,r6,r5
   14684:	19400015 	stw	r5,0(r3)
   14688:	18800115 	stw	r2,4(r3)
   1468c:	003fe006 	br	14610 <_free_r+0x44>
   14690:	8180032e 	bgeu	r16,r6,146a0 <_free_r+0xd4>
   14694:	00800304 	movi	r2,12
   14698:	20800015 	stw	r2,0(r4)
   1469c:	003fdc06 	br	14610 <_free_r+0x44>
   146a0:	81800017 	ldw	r6,0(r16)
   146a4:	818b883a 	add	r5,r16,r6
   146a8:	1140041e 	bne	r2,r5,146bc <_free_r+0xf0>
   146ac:	11400017 	ldw	r5,0(r2)
   146b0:	10800117 	ldw	r2,4(r2)
   146b4:	298b883a 	add	r5,r5,r6
   146b8:	81400015 	stw	r5,0(r16)
   146bc:	80800115 	stw	r2,4(r16)
   146c0:	1c000115 	stw	r16,4(r3)
   146c4:	003fd206 	br	14610 <_free_r+0x44>
   146c8:	f800283a 	ret

000146cc <_malloc_r>:
   146cc:	defffc04 	addi	sp,sp,-16
   146d0:	00bfff04 	movi	r2,-4
   146d4:	dc400115 	stw	r17,4(sp)
   146d8:	2c4000c4 	addi	r17,r5,3
   146dc:	88a2703a 	and	r17,r17,r2
   146e0:	8c400204 	addi	r17,r17,8
   146e4:	dc800215 	stw	r18,8(sp)
   146e8:	dfc00315 	stw	ra,12(sp)
   146ec:	dc000015 	stw	r16,0(sp)
   146f0:	88800328 	cmpgeui	r2,r17,12
   146f4:	2025883a 	mov	r18,r4
   146f8:	10001a1e 	bne	r2,zero,14764 <_malloc_r+0x98>
   146fc:	04400304 	movi	r17,12
   14700:	89401936 	bltu	r17,r5,14768 <_malloc_r+0x9c>
   14704:	9009883a 	mov	r4,r18
   14708:	00152d40 	call	152d4 <__malloc_lock>
   1470c:	00800074 	movhi	r2,1
   14710:	10df9f17 	ldw	r3,32380(r2)
   14714:	1821883a 	mov	r16,r3
   14718:	80001c1e 	bne	r16,zero,1478c <_malloc_r+0xc0>
   1471c:	00800074 	movhi	r2,1
   14720:	109f9e17 	ldw	r2,32376(r2)
   14724:	1000051e 	bne	r2,zero,1473c <_malloc_r+0x70>
   14728:	000b883a 	mov	r5,zero
   1472c:	9009883a 	mov	r4,r18
   14730:	00148bc0 	call	148bc <_sbrk_r>
   14734:	00c00074 	movhi	r3,1
   14738:	189f9e15 	stw	r2,32376(r3)
   1473c:	880b883a 	mov	r5,r17
   14740:	9009883a 	mov	r4,r18
   14744:	00148bc0 	call	148bc <_sbrk_r>
   14748:	10ffffd8 	cmpnei	r3,r2,-1
   1474c:	18002d1e 	bne	r3,zero,14804 <_malloc_r+0x138>
   14750:	00800304 	movi	r2,12
   14754:	90800015 	stw	r2,0(r18)
   14758:	9009883a 	mov	r4,r18
   1475c:	00152f80 	call	152f8 <__malloc_unlock>
   14760:	00000306 	br	14770 <_malloc_r+0xa4>
   14764:	883fe60e 	bge	r17,zero,14700 <_malloc_r+0x34>
   14768:	00800304 	movi	r2,12
   1476c:	90800015 	stw	r2,0(r18)
   14770:	0005883a 	mov	r2,zero
   14774:	dfc00317 	ldw	ra,12(sp)
   14778:	dc800217 	ldw	r18,8(sp)
   1477c:	dc400117 	ldw	r17,4(sp)
   14780:	dc000017 	ldw	r16,0(sp)
   14784:	dec00404 	addi	sp,sp,16
   14788:	f800283a 	ret
   1478c:	80800017 	ldw	r2,0(r16)
   14790:	1445c83a 	sub	r2,r2,r17
   14794:	10001816 	blt	r2,zero,147f8 <_malloc_r+0x12c>
   14798:	11000330 	cmpltui	r4,r2,12
   1479c:	2000041e 	bne	r4,zero,147b0 <_malloc_r+0xe4>
   147a0:	80800015 	stw	r2,0(r16)
   147a4:	80a1883a 	add	r16,r16,r2
   147a8:	84400015 	stw	r17,0(r16)
   147ac:	00000406 	br	147c0 <_malloc_r+0xf4>
   147b0:	80800117 	ldw	r2,4(r16)
   147b4:	1c000e1e 	bne	r3,r16,147f0 <_malloc_r+0x124>
   147b8:	00c00074 	movhi	r3,1
   147bc:	189f9f15 	stw	r2,32380(r3)
   147c0:	9009883a 	mov	r4,r18
   147c4:	00152f80 	call	152f8 <__malloc_unlock>
   147c8:	013ffe04 	movi	r4,-8
   147cc:	808002c4 	addi	r2,r16,11
   147d0:	80c00104 	addi	r3,r16,4
   147d4:	1104703a 	and	r2,r2,r4
   147d8:	10c9c83a 	sub	r4,r2,r3
   147dc:	10ffe526 	beq	r2,r3,14774 <_malloc_r+0xa8>
   147e0:	8121883a 	add	r16,r16,r4
   147e4:	1887c83a 	sub	r3,r3,r2
   147e8:	80c00015 	stw	r3,0(r16)
   147ec:	003fe106 	br	14774 <_malloc_r+0xa8>
   147f0:	18800115 	stw	r2,4(r3)
   147f4:	003ff206 	br	147c0 <_malloc_r+0xf4>
   147f8:	8007883a 	mov	r3,r16
   147fc:	84000117 	ldw	r16,4(r16)
   14800:	003fc506 	br	14718 <_malloc_r+0x4c>
   14804:	140000c4 	addi	r16,r2,3
   14808:	00ffff04 	movi	r3,-4
   1480c:	80e0703a 	and	r16,r16,r3
   14810:	143fe526 	beq	r2,r16,147a8 <_malloc_r+0xdc>
   14814:	808bc83a 	sub	r5,r16,r2
   14818:	9009883a 	mov	r4,r18
   1481c:	00148bc0 	call	148bc <_sbrk_r>
   14820:	10bfffe0 	cmpeqi	r2,r2,-1
   14824:	103fe026 	beq	r2,zero,147a8 <_malloc_r+0xdc>
   14828:	003fc906 	br	14750 <_malloc_r+0x84>

0001482c <_puts_r>:
   1482c:	defffd04 	addi	sp,sp,-12
   14830:	dc000015 	stw	r16,0(sp)
   14834:	2021883a 	mov	r16,r4
   14838:	2809883a 	mov	r4,r5
   1483c:	dfc00215 	stw	ra,8(sp)
   14840:	dc400115 	stw	r17,4(sp)
   14844:	2823883a 	mov	r17,r5
   14848:	0014c000 	call	14c00 <strlen>
   1484c:	81400217 	ldw	r5,8(r16)
   14850:	00c00074 	movhi	r3,1
   14854:	18d30704 	addi	r3,r3,19484
   14858:	28c00115 	stw	r3,4(r5)
   1485c:	100f883a 	mov	r7,r2
   14860:	880d883a 	mov	r6,r17
   14864:	8009883a 	mov	r4,r16
   14868:	0014c1c0 	call	14c1c <__sfvwrite_small_dev>
   1486c:	10ffffe0 	cmpeqi	r3,r2,-1
   14870:	1800091e 	bne	r3,zero,14898 <_puts_r+0x6c>
   14874:	81400217 	ldw	r5,8(r16)
   14878:	01800074 	movhi	r6,1
   1487c:	01c00044 	movi	r7,1
   14880:	28800117 	ldw	r2,4(r5)
   14884:	319cdd04 	addi	r6,r6,29556
   14888:	8009883a 	mov	r4,r16
   1488c:	103ee83a 	callr	r2
   14890:	10bfffe0 	cmpeqi	r2,r2,-1
   14894:	0085c83a 	sub	r2,zero,r2
   14898:	dfc00217 	ldw	ra,8(sp)
   1489c:	dc400117 	ldw	r17,4(sp)
   148a0:	dc000017 	ldw	r16,0(sp)
   148a4:	dec00304 	addi	sp,sp,12
   148a8:	f800283a 	ret

000148ac <puts>:
   148ac:	00800074 	movhi	r2,1
   148b0:	200b883a 	mov	r5,r4
   148b4:	111e3617 	ldw	r4,30936(r2)
   148b8:	001482c1 	jmpi	1482c <_puts_r>

000148bc <_sbrk_r>:
   148bc:	defffe04 	addi	sp,sp,-8
   148c0:	dc000015 	stw	r16,0(sp)
   148c4:	00800074 	movhi	r2,1
   148c8:	2021883a 	mov	r16,r4
   148cc:	2809883a 	mov	r4,r5
   148d0:	dfc00115 	stw	ra,4(sp)
   148d4:	101fa015 	stw	zero,32384(r2)
   148d8:	001531c0 	call	1531c <sbrk>
   148dc:	10ffffd8 	cmpnei	r3,r2,-1
   148e0:	1800041e 	bne	r3,zero,148f4 <_sbrk_r+0x38>
   148e4:	00c00074 	movhi	r3,1
   148e8:	18dfa017 	ldw	r3,32384(r3)
   148ec:	18000126 	beq	r3,zero,148f4 <_sbrk_r+0x38>
   148f0:	80c00015 	stw	r3,0(r16)
   148f4:	dfc00117 	ldw	ra,4(sp)
   148f8:	dc000017 	ldw	r16,0(sp)
   148fc:	dec00204 	addi	sp,sp,8
   14900:	f800283a 	ret

00014904 <_init_signal_r>:
   14904:	20800c17 	ldw	r2,48(r4)
   14908:	1000131e 	bne	r2,zero,14958 <_init_signal_r+0x54>
   1490c:	defffe04 	addi	sp,sp,-8
   14910:	01402004 	movi	r5,128
   14914:	dc000015 	stw	r16,0(sp)
   14918:	dfc00115 	stw	ra,4(sp)
   1491c:	2021883a 	mov	r16,r4
   14920:	00146cc0 	call	146cc <_malloc_r>
   14924:	80800c15 	stw	r2,48(r16)
   14928:	1009883a 	mov	r4,r2
   1492c:	10000826 	beq	r2,zero,14950 <_init_signal_r+0x4c>
   14930:	01802004 	movi	r6,128
   14934:	000b883a 	mov	r5,zero
   14938:	00145ac0 	call	145ac <memset>
   1493c:	0005883a 	mov	r2,zero
   14940:	dfc00117 	ldw	ra,4(sp)
   14944:	dc000017 	ldw	r16,0(sp)
   14948:	dec00204 	addi	sp,sp,8
   1494c:	f800283a 	ret
   14950:	00bfffc4 	movi	r2,-1
   14954:	003ffa06 	br	14940 <_init_signal_r+0x3c>
   14958:	0005883a 	mov	r2,zero
   1495c:	f800283a 	ret

00014960 <_signal_r>:
   14960:	defffc04 	addi	sp,sp,-16
   14964:	dc400115 	stw	r17,4(sp)
   14968:	dfc00315 	stw	ra,12(sp)
   1496c:	dc800215 	stw	r18,8(sp)
   14970:	dc000015 	stw	r16,0(sp)
   14974:	28800830 	cmpltui	r2,r5,32
   14978:	2023883a 	mov	r17,r4
   1497c:	1000041e 	bne	r2,zero,14990 <_signal_r+0x30>
   14980:	00800584 	movi	r2,22
   14984:	20800015 	stw	r2,0(r4)
   14988:	00bfffc4 	movi	r2,-1
   1498c:	00000906 	br	149b4 <_signal_r+0x54>
   14990:	20800c17 	ldw	r2,48(r4)
   14994:	2821883a 	mov	r16,r5
   14998:	3025883a 	mov	r18,r6
   1499c:	10000b26 	beq	r2,zero,149cc <_signal_r+0x6c>
   149a0:	89400c17 	ldw	r5,48(r17)
   149a4:	802090ba 	slli	r16,r16,2
   149a8:	2c21883a 	add	r16,r5,r16
   149ac:	80800017 	ldw	r2,0(r16)
   149b0:	84800015 	stw	r18,0(r16)
   149b4:	dfc00317 	ldw	ra,12(sp)
   149b8:	dc800217 	ldw	r18,8(sp)
   149bc:	dc400117 	ldw	r17,4(sp)
   149c0:	dc000017 	ldw	r16,0(sp)
   149c4:	dec00404 	addi	sp,sp,16
   149c8:	f800283a 	ret
   149cc:	00149040 	call	14904 <_init_signal_r>
   149d0:	103ff326 	beq	r2,zero,149a0 <_signal_r+0x40>
   149d4:	003fec06 	br	14988 <_signal_r+0x28>

000149d8 <_raise_r>:
   149d8:	defffd04 	addi	sp,sp,-12
   149dc:	dc000015 	stw	r16,0(sp)
   149e0:	dfc00215 	stw	ra,8(sp)
   149e4:	dc400115 	stw	r17,4(sp)
   149e8:	28800830 	cmpltui	r2,r5,32
   149ec:	2021883a 	mov	r16,r4
   149f0:	1000081e 	bne	r2,zero,14a14 <_raise_r+0x3c>
   149f4:	00800584 	movi	r2,22
   149f8:	20800015 	stw	r2,0(r4)
   149fc:	00bfffc4 	movi	r2,-1
   14a00:	dfc00217 	ldw	ra,8(sp)
   14a04:	dc400117 	ldw	r17,4(sp)
   14a08:	dc000017 	ldw	r16,0(sp)
   14a0c:	dec00304 	addi	sp,sp,12
   14a10:	f800283a 	ret
   14a14:	20800c17 	ldw	r2,48(r4)
   14a18:	2823883a 	mov	r17,r5
   14a1c:	10000426 	beq	r2,zero,14a30 <_raise_r+0x58>
   14a20:	280690ba 	slli	r3,r5,2
   14a24:	10c5883a 	add	r2,r2,r3
   14a28:	10c00017 	ldw	r3,0(r2)
   14a2c:	18000a1e 	bne	r3,zero,14a58 <_raise_r+0x80>
   14a30:	8009883a 	mov	r4,r16
   14a34:	0014bb80 	call	14bb8 <_getpid_r>
   14a38:	880d883a 	mov	r6,r17
   14a3c:	100b883a 	mov	r5,r2
   14a40:	8009883a 	mov	r4,r16
   14a44:	dfc00217 	ldw	ra,8(sp)
   14a48:	dc400117 	ldw	r17,4(sp)
   14a4c:	dc000017 	ldw	r16,0(sp)
   14a50:	dec00304 	addi	sp,sp,12
   14a54:	0014b6c1 	jmpi	14b6c <_kill_r>
   14a58:	19000060 	cmpeqi	r4,r3,1
   14a5c:	2000091e 	bne	r4,zero,14a84 <_raise_r+0xac>
   14a60:	193fffd8 	cmpnei	r4,r3,-1
   14a64:	2000041e 	bne	r4,zero,14a78 <_raise_r+0xa0>
   14a68:	00800584 	movi	r2,22
   14a6c:	80800015 	stw	r2,0(r16)
   14a70:	00800044 	movi	r2,1
   14a74:	003fe206 	br	14a00 <_raise_r+0x28>
   14a78:	10000015 	stw	zero,0(r2)
   14a7c:	2809883a 	mov	r4,r5
   14a80:	183ee83a 	callr	r3
   14a84:	0005883a 	mov	r2,zero
   14a88:	003fdd06 	br	14a00 <_raise_r+0x28>

00014a8c <__sigtramp_r>:
   14a8c:	28800830 	cmpltui	r2,r5,32
   14a90:	1000021e 	bne	r2,zero,14a9c <__sigtramp_r+0x10>
   14a94:	00bfffc4 	movi	r2,-1
   14a98:	f800283a 	ret
   14a9c:	20800c17 	ldw	r2,48(r4)
   14aa0:	defffd04 	addi	sp,sp,-12
   14aa4:	dc400115 	stw	r17,4(sp)
   14aa8:	dc000015 	stw	r16,0(sp)
   14aac:	dfc00215 	stw	ra,8(sp)
   14ab0:	2023883a 	mov	r17,r4
   14ab4:	2821883a 	mov	r16,r5
   14ab8:	10000726 	beq	r2,zero,14ad8 <__sigtramp_r+0x4c>
   14abc:	88800c17 	ldw	r2,48(r17)
   14ac0:	800690ba 	slli	r3,r16,2
   14ac4:	10c7883a 	add	r3,r2,r3
   14ac8:	18800017 	ldw	r2,0(r3)
   14acc:	10000a1e 	bne	r2,zero,14af8 <__sigtramp_r+0x6c>
   14ad0:	00800044 	movi	r2,1
   14ad4:	00000306 	br	14ae4 <__sigtramp_r+0x58>
   14ad8:	00149040 	call	14904 <_init_signal_r>
   14adc:	103ff726 	beq	r2,zero,14abc <__sigtramp_r+0x30>
   14ae0:	00bfffc4 	movi	r2,-1
   14ae4:	dfc00217 	ldw	ra,8(sp)
   14ae8:	dc400117 	ldw	r17,4(sp)
   14aec:	dc000017 	ldw	r16,0(sp)
   14af0:	dec00304 	addi	sp,sp,12
   14af4:	f800283a 	ret
   14af8:	113fffe0 	cmpeqi	r4,r2,-1
   14afc:	2000071e 	bne	r4,zero,14b1c <__sigtramp_r+0x90>
   14b00:	11000060 	cmpeqi	r4,r2,1
   14b04:	2000071e 	bne	r4,zero,14b24 <__sigtramp_r+0x98>
   14b08:	18000015 	stw	zero,0(r3)
   14b0c:	8009883a 	mov	r4,r16
   14b10:	103ee83a 	callr	r2
   14b14:	0005883a 	mov	r2,zero
   14b18:	003ff206 	br	14ae4 <__sigtramp_r+0x58>
   14b1c:	00800084 	movi	r2,2
   14b20:	003ff006 	br	14ae4 <__sigtramp_r+0x58>
   14b24:	008000c4 	movi	r2,3
   14b28:	003fee06 	br	14ae4 <__sigtramp_r+0x58>

00014b2c <raise>:
   14b2c:	00800074 	movhi	r2,1
   14b30:	200b883a 	mov	r5,r4
   14b34:	111e3617 	ldw	r4,30936(r2)
   14b38:	00149d81 	jmpi	149d8 <_raise_r>

00014b3c <signal>:
   14b3c:	00800074 	movhi	r2,1
   14b40:	280d883a 	mov	r6,r5
   14b44:	200b883a 	mov	r5,r4
   14b48:	111e3617 	ldw	r4,30936(r2)
   14b4c:	00149601 	jmpi	14960 <_signal_r>

00014b50 <_init_signal>:
   14b50:	00800074 	movhi	r2,1
   14b54:	111e3617 	ldw	r4,30936(r2)
   14b58:	00149041 	jmpi	14904 <_init_signal_r>

00014b5c <__sigtramp>:
   14b5c:	00800074 	movhi	r2,1
   14b60:	200b883a 	mov	r5,r4
   14b64:	111e3617 	ldw	r4,30936(r2)
   14b68:	0014a8c1 	jmpi	14a8c <__sigtramp_r>

00014b6c <_kill_r>:
   14b6c:	defffe04 	addi	sp,sp,-8
   14b70:	dc000015 	stw	r16,0(sp)
   14b74:	00800074 	movhi	r2,1
   14b78:	2021883a 	mov	r16,r4
   14b7c:	2809883a 	mov	r4,r5
   14b80:	300b883a 	mov	r5,r6
   14b84:	dfc00115 	stw	ra,4(sp)
   14b88:	101fa015 	stw	zero,32384(r2)
   14b8c:	00150400 	call	15040 <kill>
   14b90:	10ffffd8 	cmpnei	r3,r2,-1
   14b94:	1800041e 	bne	r3,zero,14ba8 <_kill_r+0x3c>
   14b98:	00c00074 	movhi	r3,1
   14b9c:	18dfa017 	ldw	r3,32384(r3)
   14ba0:	18000126 	beq	r3,zero,14ba8 <_kill_r+0x3c>
   14ba4:	80c00015 	stw	r3,0(r16)
   14ba8:	dfc00117 	ldw	ra,4(sp)
   14bac:	dc000017 	ldw	r16,0(sp)
   14bb0:	dec00204 	addi	sp,sp,8
   14bb4:	f800283a 	ret

00014bb8 <_getpid_r>:
   14bb8:	0014d4c1 	jmpi	14d4c <getpid>

00014bbc <strcmp>:
   14bbc:	20800003 	ldbu	r2,0(r4)
   14bc0:	28c00003 	ldbu	r3,0(r5)
   14bc4:	11803fcc 	andi	r6,r2,255
   14bc8:	3180201c 	xori	r6,r6,128
   14bcc:	31bfe004 	addi	r6,r6,-128
   14bd0:	30000426 	beq	r6,zero,14be4 <strcmp+0x28>
   14bd4:	19c03fcc 	andi	r7,r3,255
   14bd8:	39c0201c 	xori	r7,r7,128
   14bdc:	39ffe004 	addi	r7,r7,-128
   14be0:	31c00426 	beq	r6,r7,14bf4 <strcmp+0x38>
   14be4:	18c03fcc 	andi	r3,r3,255
   14be8:	10803fcc 	andi	r2,r2,255
   14bec:	10c5c83a 	sub	r2,r2,r3
   14bf0:	f800283a 	ret
   14bf4:	21000044 	addi	r4,r4,1
   14bf8:	29400044 	addi	r5,r5,1
   14bfc:	003fef06 	br	14bbc <strcmp>

00014c00 <strlen>:
   14c00:	2005883a 	mov	r2,r4
   14c04:	10c00007 	ldb	r3,0(r2)
   14c08:	1800021e 	bne	r3,zero,14c14 <strlen+0x14>
   14c0c:	1105c83a 	sub	r2,r2,r4
   14c10:	f800283a 	ret
   14c14:	10800044 	addi	r2,r2,1
   14c18:	003ffa06 	br	14c04 <strlen+0x4>

00014c1c <__sfvwrite_small_dev>:
   14c1c:	2880000b 	ldhu	r2,0(r5)
   14c20:	1080020c 	andi	r2,r2,8
   14c24:	10002526 	beq	r2,zero,14cbc <__sfvwrite_small_dev+0xa0>
   14c28:	2880008f 	ldh	r2,2(r5)
   14c2c:	defffb04 	addi	sp,sp,-20
   14c30:	dcc00315 	stw	r19,12(sp)
   14c34:	dc800215 	stw	r18,8(sp)
   14c38:	dc400115 	stw	r17,4(sp)
   14c3c:	dc000015 	stw	r16,0(sp)
   14c40:	dfc00415 	stw	ra,16(sp)
   14c44:	2027883a 	mov	r19,r4
   14c48:	2821883a 	mov	r16,r5
   14c4c:	3025883a 	mov	r18,r6
   14c50:	3823883a 	mov	r17,r7
   14c54:	1000100e 	bge	r2,zero,14c98 <__sfvwrite_small_dev+0x7c>
   14c58:	8080000b 	ldhu	r2,0(r16)
   14c5c:	10801014 	ori	r2,r2,64
   14c60:	8080000d 	sth	r2,0(r16)
   14c64:	00bfffc4 	movi	r2,-1
   14c68:	00000d06 	br	14ca0 <__sfvwrite_small_dev+0x84>
   14c6c:	88810050 	cmplti	r2,r17,1025
   14c70:	880f883a 	mov	r7,r17
   14c74:	1000011e 	bne	r2,zero,14c7c <__sfvwrite_small_dev+0x60>
   14c78:	01c10004 	movi	r7,1024
   14c7c:	8140008f 	ldh	r5,2(r16)
   14c80:	900d883a 	mov	r6,r18
   14c84:	9809883a 	mov	r4,r19
   14c88:	0014cc40 	call	14cc4 <_write_r>
   14c8c:	00bff20e 	bge	zero,r2,14c58 <__sfvwrite_small_dev+0x3c>
   14c90:	88a3c83a 	sub	r17,r17,r2
   14c94:	90a5883a 	add	r18,r18,r2
   14c98:	047ff416 	blt	zero,r17,14c6c <__sfvwrite_small_dev+0x50>
   14c9c:	0005883a 	mov	r2,zero
   14ca0:	dfc00417 	ldw	ra,16(sp)
   14ca4:	dcc00317 	ldw	r19,12(sp)
   14ca8:	dc800217 	ldw	r18,8(sp)
   14cac:	dc400117 	ldw	r17,4(sp)
   14cb0:	dc000017 	ldw	r16,0(sp)
   14cb4:	dec00504 	addi	sp,sp,20
   14cb8:	f800283a 	ret
   14cbc:	00bfffc4 	movi	r2,-1
   14cc0:	f800283a 	ret

00014cc4 <_write_r>:
   14cc4:	defffe04 	addi	sp,sp,-8
   14cc8:	dc000015 	stw	r16,0(sp)
   14ccc:	00800074 	movhi	r2,1
   14cd0:	2021883a 	mov	r16,r4
   14cd4:	2809883a 	mov	r4,r5
   14cd8:	300b883a 	mov	r5,r6
   14cdc:	380d883a 	mov	r6,r7
   14ce0:	dfc00115 	stw	ra,4(sp)
   14ce4:	101fa015 	stw	zero,32384(r2)
   14ce8:	00154100 	call	15410 <write>
   14cec:	10ffffd8 	cmpnei	r3,r2,-1
   14cf0:	1800041e 	bne	r3,zero,14d04 <_write_r+0x40>
   14cf4:	00c00074 	movhi	r3,1
   14cf8:	18dfa017 	ldw	r3,32384(r3)
   14cfc:	18000126 	beq	r3,zero,14d04 <_write_r+0x40>
   14d00:	80c00015 	stw	r3,0(r16)
   14d04:	dfc00117 	ldw	ra,4(sp)
   14d08:	dc000017 	ldw	r16,0(sp)
   14d0c:	dec00204 	addi	sp,sp,8
   14d10:	f800283a 	ret

00014d14 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   14d14:	defffd04 	addi	sp,sp,-12
   14d18:	df000215 	stw	fp,8(sp)
   14d1c:	df000204 	addi	fp,sp,8
   14d20:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   14d24:	0001883a 	nop
   14d28:	e0bffe17 	ldw	r2,-8(fp)
   14d2c:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   14d30:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   14d34:	10000226 	beq	r2,zero,14d40 <_exit+0x2c>
    ALT_SIM_FAIL();
   14d38:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   14d3c:	00000106 	br	14d44 <_exit+0x30>
    ALT_SIM_PASS();
   14d40:	002af0b0 	cmpltui	zero,zero,43970
}
   14d44:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   14d48:	003fff06 	br	14d48 <_exit+0x34>

00014d4c <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   14d4c:	deffff04 	addi	sp,sp,-4
   14d50:	df000015 	stw	fp,0(sp)
   14d54:	d839883a 	mov	fp,sp
  return 0;
   14d58:	0005883a 	mov	r2,zero
}
   14d5c:	e037883a 	mov	sp,fp
   14d60:	df000017 	ldw	fp,0(sp)
   14d64:	dec00104 	addi	sp,sp,4
   14d68:	f800283a 	ret

00014d6c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14d6c:	defff904 	addi	sp,sp,-28
   14d70:	dfc00615 	stw	ra,24(sp)
   14d74:	df000515 	stw	fp,20(sp)
   14d78:	df000504 	addi	fp,sp,20
   14d7c:	e13fff15 	stw	r4,-4(fp)
   14d80:	e17ffe15 	stw	r5,-8(fp)
   14d84:	e1bffd15 	stw	r6,-12(fp)
   14d88:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   14d8c:	e0800217 	ldw	r2,8(fp)
   14d90:	d8800015 	stw	r2,0(sp)
   14d94:	e1fffc17 	ldw	r7,-16(fp)
   14d98:	e1bffd17 	ldw	r6,-12(fp)
   14d9c:	e17ffe17 	ldw	r5,-8(fp)
   14da0:	e13fff17 	ldw	r4,-4(fp)
   14da4:	0014f1c0 	call	14f1c <alt_iic_isr_register>
}  
   14da8:	e037883a 	mov	sp,fp
   14dac:	dfc00117 	ldw	ra,4(sp)
   14db0:	df000017 	ldw	fp,0(sp)
   14db4:	dec00204 	addi	sp,sp,8
   14db8:	f800283a 	ret

00014dbc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   14dbc:	defff904 	addi	sp,sp,-28
   14dc0:	df000615 	stw	fp,24(sp)
   14dc4:	df000604 	addi	fp,sp,24
   14dc8:	e13ffb15 	stw	r4,-20(fp)
   14dcc:	e17ffa15 	stw	r5,-24(fp)
   14dd0:	e0bffa17 	ldw	r2,-24(fp)
   14dd4:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   14dd8:	0005303a 	rdctl	r2,status
   14ddc:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14de0:	e0fffe17 	ldw	r3,-8(fp)
   14de4:	00bfff84 	movi	r2,-2
   14de8:	1884703a 	and	r2,r3,r2
   14dec:	1001703a 	wrctl	status,r2
  return context;
   14df0:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   14df4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   14df8:	00c00044 	movi	r3,1
   14dfc:	e0bfff17 	ldw	r2,-4(fp)
   14e00:	1884983a 	sll	r2,r3,r2
   14e04:	1007883a 	mov	r3,r2
   14e08:	d0a1fc17 	ldw	r2,-30736(gp)
   14e0c:	1884b03a 	or	r2,r3,r2
   14e10:	d0a1fc15 	stw	r2,-30736(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14e14:	d0a1fc17 	ldw	r2,-30736(gp)
   14e18:	100170fa 	wrctl	ienable,r2
   14e1c:	e0bffd17 	ldw	r2,-12(fp)
   14e20:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   14e24:	e0bffc17 	ldw	r2,-16(fp)
   14e28:	1001703a 	wrctl	status,r2
}
   14e2c:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
   14e30:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   14e34:	e037883a 	mov	sp,fp
   14e38:	df000017 	ldw	fp,0(sp)
   14e3c:	dec00104 	addi	sp,sp,4
   14e40:	f800283a 	ret

00014e44 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   14e44:	defff904 	addi	sp,sp,-28
   14e48:	df000615 	stw	fp,24(sp)
   14e4c:	df000604 	addi	fp,sp,24
   14e50:	e13ffb15 	stw	r4,-20(fp)
   14e54:	e17ffa15 	stw	r5,-24(fp)
   14e58:	e0bffa17 	ldw	r2,-24(fp)
   14e5c:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   14e60:	0005303a 	rdctl	r2,status
   14e64:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14e68:	e0fffe17 	ldw	r3,-8(fp)
   14e6c:	00bfff84 	movi	r2,-2
   14e70:	1884703a 	and	r2,r3,r2
   14e74:	1001703a 	wrctl	status,r2
  return context;
   14e78:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
   14e7c:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
   14e80:	00c00044 	movi	r3,1
   14e84:	e0bfff17 	ldw	r2,-4(fp)
   14e88:	1884983a 	sll	r2,r3,r2
   14e8c:	0084303a 	nor	r2,zero,r2
   14e90:	1007883a 	mov	r3,r2
   14e94:	d0a1fc17 	ldw	r2,-30736(gp)
   14e98:	1884703a 	and	r2,r3,r2
   14e9c:	d0a1fc15 	stw	r2,-30736(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14ea0:	d0a1fc17 	ldw	r2,-30736(gp)
   14ea4:	100170fa 	wrctl	ienable,r2
   14ea8:	e0bffd17 	ldw	r2,-12(fp)
   14eac:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   14eb0:	e0bffc17 	ldw	r2,-16(fp)
   14eb4:	1001703a 	wrctl	status,r2
}
   14eb8:	0001883a 	nop
  return 0;
   14ebc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   14ec0:	e037883a 	mov	sp,fp
   14ec4:	df000017 	ldw	fp,0(sp)
   14ec8:	dec00104 	addi	sp,sp,4
   14ecc:	f800283a 	ret

00014ed0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   14ed0:	defffc04 	addi	sp,sp,-16
   14ed4:	df000315 	stw	fp,12(sp)
   14ed8:	df000304 	addi	fp,sp,12
   14edc:	e13ffe15 	stw	r4,-8(fp)
   14ee0:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   14ee4:	000530fa 	rdctl	r2,ienable
   14ee8:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   14eec:	00c00044 	movi	r3,1
   14ef0:	e0bffd17 	ldw	r2,-12(fp)
   14ef4:	1884983a 	sll	r2,r3,r2
   14ef8:	1007883a 	mov	r3,r2
   14efc:	e0bfff17 	ldw	r2,-4(fp)
   14f00:	1884703a 	and	r2,r3,r2
   14f04:	1004c03a 	cmpne	r2,r2,zero
   14f08:	10803fcc 	andi	r2,r2,255
}
   14f0c:	e037883a 	mov	sp,fp
   14f10:	df000017 	ldw	fp,0(sp)
   14f14:	dec00104 	addi	sp,sp,4
   14f18:	f800283a 	ret

00014f1c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14f1c:	defff504 	addi	sp,sp,-44
   14f20:	dfc00a15 	stw	ra,40(sp)
   14f24:	df000915 	stw	fp,36(sp)
   14f28:	df000904 	addi	fp,sp,36
   14f2c:	e13ffa15 	stw	r4,-24(fp)
   14f30:	e17ff915 	stw	r5,-28(fp)
   14f34:	e1bff815 	stw	r6,-32(fp)
   14f38:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
   14f3c:	00bffa84 	movi	r2,-22
   14f40:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   14f44:	e0bff917 	ldw	r2,-28(fp)
   14f48:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   14f4c:	e0bffe17 	ldw	r2,-8(fp)
   14f50:	10800808 	cmpgei	r2,r2,32
   14f54:	1000251e 	bne	r2,zero,14fec <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
   14f58:	0005303a 	rdctl	r2,status
   14f5c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14f60:	e0fffc17 	ldw	r3,-16(fp)
   14f64:	00bfff84 	movi	r2,-2
   14f68:	1884703a 	and	r2,r3,r2
   14f6c:	1001703a 	wrctl	status,r2
  return context;
   14f70:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   14f74:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
   14f78:	e0bffe17 	ldw	r2,-8(fp)
   14f7c:	100890fa 	slli	r4,r2,3
   14f80:	e0fff817 	ldw	r3,-32(fp)
   14f84:	00800074 	movhi	r2,1
   14f88:	2085883a 	add	r2,r4,r2
   14f8c:	10dfb815 	stw	r3,32480(r2)
    alt_irq[id].context = isr_context;
   14f90:	e0bffe17 	ldw	r2,-8(fp)
   14f94:	100890fa 	slli	r4,r2,3
   14f98:	e0fff717 	ldw	r3,-36(fp)
   14f9c:	00800074 	movhi	r2,1
   14fa0:	2085883a 	add	r2,r4,r2
   14fa4:	10dfb915 	stw	r3,32484(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   14fa8:	e0bff817 	ldw	r2,-32(fp)
   14fac:	10000526 	beq	r2,zero,14fc4 <alt_iic_isr_register+0xa8>
   14fb0:	e0bffe17 	ldw	r2,-8(fp)
   14fb4:	100b883a 	mov	r5,r2
   14fb8:	e13ffa17 	ldw	r4,-24(fp)
   14fbc:	0014dbc0 	call	14dbc <alt_ic_irq_enable>
   14fc0:	00000406 	br	14fd4 <alt_iic_isr_register+0xb8>
   14fc4:	e0bffe17 	ldw	r2,-8(fp)
   14fc8:	100b883a 	mov	r5,r2
   14fcc:	e13ffa17 	ldw	r4,-24(fp)
   14fd0:	0014e440 	call	14e44 <alt_ic_irq_disable>
   14fd4:	e0bfff15 	stw	r2,-4(fp)
   14fd8:	e0bffd17 	ldw	r2,-12(fp)
   14fdc:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   14fe0:	e0bffb17 	ldw	r2,-20(fp)
   14fe4:	1001703a 	wrctl	status,r2
}
   14fe8:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
   14fec:	e0bfff17 	ldw	r2,-4(fp)
}
   14ff0:	e037883a 	mov	sp,fp
   14ff4:	dfc00117 	ldw	ra,4(sp)
   14ff8:	df000017 	ldw	fp,0(sp)
   14ffc:	dec00204 	addi	sp,sp,8
   15000:	f800283a 	ret

00015004 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15004:	defffe04 	addi	sp,sp,-8
   15008:	dfc00115 	stw	ra,4(sp)
   1500c:	df000015 	stw	fp,0(sp)
   15010:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15014:	d0a09917 	ldw	r2,-32156(gp)
   15018:	10000326 	beq	r2,zero,15028 <alt_get_errno+0x24>
   1501c:	d0a09917 	ldw	r2,-32156(gp)
   15020:	103ee83a 	callr	r2
   15024:	00000106 	br	1502c <alt_get_errno+0x28>
   15028:	d0a1fb04 	addi	r2,gp,-30740
}
   1502c:	e037883a 	mov	sp,fp
   15030:	dfc00117 	ldw	ra,4(sp)
   15034:	df000017 	ldw	fp,0(sp)
   15038:	dec00204 	addi	sp,sp,8
   1503c:	f800283a 	ret

00015040 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   15040:	defffb04 	addi	sp,sp,-20
   15044:	dfc00415 	stw	ra,16(sp)
   15048:	df000315 	stw	fp,12(sp)
   1504c:	df000304 	addi	fp,sp,12
   15050:	e13ffe15 	stw	r4,-8(fp)
   15054:	e17ffd15 	stw	r5,-12(fp)
  int status = 0;
   15058:	e03fff15 	stw	zero,-4(fp)

  if (pid <= 0)
   1505c:	e0bffe17 	ldw	r2,-8(fp)
   15060:	00802e16 	blt	zero,r2,1511c <kill+0xdc>
   15064:	e0bffd17 	ldw	r2,-12(fp)
   15068:	10800828 	cmpgeui	r2,r2,32
   1506c:	1000281e 	bne	r2,zero,15110 <kill+0xd0>
   15070:	e0bffd17 	ldw	r2,-12(fp)
   15074:	100690ba 	slli	r3,r2,2
   15078:	00800074 	movhi	r2,1
   1507c:	1885883a 	add	r2,r3,r2
   15080:	10942217 	ldw	r2,20616(r2)
   15084:	1000683a 	jmp	r2
   15088:	00015130 	cmpltui	zero,zero,1348
   1508c:	00015110 	cmplti	zero,zero,1348
   15090:	00015110 	cmplti	zero,zero,1348
   15094:	00015108 	cmpgei	zero,zero,1348
   15098:	00015108 	cmpgei	zero,zero,1348
   1509c:	00015108 	cmpgei	zero,zero,1348
   150a0:	00015108 	cmpgei	zero,zero,1348
   150a4:	00015110 	cmplti	zero,zero,1348
   150a8:	00015108 	cmpgei	zero,zero,1348
   150ac:	00015108 	cmpgei	zero,zero,1348
   150b0:	00015108 	cmpgei	zero,zero,1348
   150b4:	00015108 	cmpgei	zero,zero,1348
   150b8:	00015108 	cmpgei	zero,zero,1348
   150bc:	00015108 	cmpgei	zero,zero,1348
   150c0:	00015108 	cmpgei	zero,zero,1348
   150c4:	00015108 	cmpgei	zero,zero,1348
   150c8:	00015130 	cmpltui	zero,zero,1348
   150cc:	00015110 	cmplti	zero,zero,1348
   150d0:	00015110 	cmplti	zero,zero,1348
   150d4:	00015110 	cmplti	zero,zero,1348
   150d8:	00015130 	cmpltui	zero,zero,1348
   150dc:	00015110 	cmplti	zero,zero,1348
   150e0:	00015110 	cmplti	zero,zero,1348
   150e4:	00015108 	cmpgei	zero,zero,1348
   150e8:	00015108 	cmpgei	zero,zero,1348
   150ec:	00015108 	cmpgei	zero,zero,1348
   150f0:	00015108 	cmpgei	zero,zero,1348
   150f4:	00015108 	cmpgei	zero,zero,1348
   150f8:	00015110 	cmplti	zero,zero,1348
   150fc:	00015110 	cmplti	zero,zero,1348
   15100:	00015108 	cmpgei	zero,zero,1348
   15104:	00015108 	cmpgei	zero,zero,1348
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   15108:	0009883a 	mov	r4,zero
   1510c:	0014d140 	call	14d14 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   15110:	00800584 	movi	r2,22
   15114:	e0bfff15 	stw	r2,-4(fp)
   15118:	00000606 	br	15134 <kill+0xf4>
    }
  }

  else if (pid > 0)
   1511c:	e0bffe17 	ldw	r2,-8(fp)
   15120:	0080040e 	bge	zero,r2,15134 <kill+0xf4>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   15124:	008000c4 	movi	r2,3
   15128:	e0bfff15 	stw	r2,-4(fp)
   1512c:	00000106 	br	15134 <kill+0xf4>
      break;
   15130:	0001883a 	nop
  }

  if (status)
   15134:	e0bfff17 	ldw	r2,-4(fp)
   15138:	10000626 	beq	r2,zero,15154 <kill+0x114>
  {
    ALT_ERRNO = status;
   1513c:	00150040 	call	15004 <alt_get_errno>
   15140:	1007883a 	mov	r3,r2
   15144:	e0bfff17 	ldw	r2,-4(fp)
   15148:	18800015 	stw	r2,0(r3)
    return -1;
   1514c:	00bfffc4 	movi	r2,-1
   15150:	00000106 	br	15158 <kill+0x118>
  }

  return 0;
   15154:	0005883a 	mov	r2,zero
}
   15158:	e037883a 	mov	sp,fp
   1515c:	dfc00117 	ldw	ra,4(sp)
   15160:	df000017 	ldw	fp,0(sp)
   15164:	dec00204 	addi	sp,sp,8
   15168:	f800283a 	ret

0001516c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1516c:	defffc04 	addi	sp,sp,-16
   15170:	df000315 	stw	fp,12(sp)
   15174:	df000304 	addi	fp,sp,12
   15178:	e13fff15 	stw	r4,-4(fp)
   1517c:	e17ffe15 	stw	r5,-8(fp)
   15180:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
   15184:	e0fffe17 	ldw	r3,-8(fp)
   15188:	e0bfff17 	ldw	r2,-4(fp)
   1518c:	18800c26 	beq	r3,r2,151c0 <alt_load_section+0x54>
  {
    while( to != end )
   15190:	00000806 	br	151b4 <alt_load_section+0x48>
    {
      *to++ = *from++;
   15194:	e0ffff17 	ldw	r3,-4(fp)
   15198:	18800104 	addi	r2,r3,4
   1519c:	e0bfff15 	stw	r2,-4(fp)
   151a0:	e0bffe17 	ldw	r2,-8(fp)
   151a4:	11000104 	addi	r4,r2,4
   151a8:	e13ffe15 	stw	r4,-8(fp)
   151ac:	18c00017 	ldw	r3,0(r3)
   151b0:	10c00015 	stw	r3,0(r2)
    while( to != end )
   151b4:	e0fffe17 	ldw	r3,-8(fp)
   151b8:	e0bffd17 	ldw	r2,-12(fp)
   151bc:	18bff51e 	bne	r3,r2,15194 <alt_load_section+0x28>
    }
  }
}
   151c0:	0001883a 	nop
   151c4:	e037883a 	mov	sp,fp
   151c8:	df000017 	ldw	fp,0(sp)
   151cc:	dec00104 	addi	sp,sp,4
   151d0:	f800283a 	ret

000151d4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   151d4:	defffe04 	addi	sp,sp,-8
   151d8:	dfc00115 	stw	ra,4(sp)
   151dc:	df000015 	stw	fp,0(sp)
   151e0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   151e4:	01800074 	movhi	r6,1
   151e8:	319e4104 	addi	r6,r6,30980
   151ec:	01400074 	movhi	r5,1
   151f0:	295cec04 	addi	r5,r5,29616
   151f4:	01000074 	movhi	r4,1
   151f8:	211e4104 	addi	r4,r4,30980
   151fc:	001516c0 	call	1516c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   15200:	01800074 	movhi	r6,1
   15204:	31808904 	addi	r6,r6,548
   15208:	01400074 	movhi	r5,1
   1520c:	29400804 	addi	r5,r5,32
   15210:	01000074 	movhi	r4,1
   15214:	21000804 	addi	r4,r4,32
   15218:	001516c0 	call	1516c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1521c:	01800074 	movhi	r6,1
   15220:	319cec04 	addi	r6,r6,29616
   15224:	01400074 	movhi	r5,1
   15228:	295aca04 	addi	r5,r5,27432
   1522c:	01000074 	movhi	r4,1
   15230:	211aca04 	addi	r4,r4,27432
   15234:	001516c0 	call	1516c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   15238:	0015d140 	call	15d14 <alt_dcache_flush_all>
  alt_icache_flush_all();
   1523c:	0015f0c0 	call	15f0c <alt_icache_flush_all>
}
   15240:	0001883a 	nop
   15244:	e037883a 	mov	sp,fp
   15248:	dfc00117 	ldw	ra,4(sp)
   1524c:	df000017 	ldw	fp,0(sp)
   15250:	dec00204 	addi	sp,sp,8
   15254:	f800283a 	ret

00015258 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   15258:	defffd04 	addi	sp,sp,-12
   1525c:	dfc00215 	stw	ra,8(sp)
   15260:	df000115 	stw	fp,4(sp)
   15264:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   15268:	0009883a 	mov	r4,zero
   1526c:	00155480 	call	15548 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   15270:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   15274:	00155840 	call	15584 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   15278:	01800074 	movhi	r6,1
   1527c:	319cde04 	addi	r6,r6,29560
   15280:	01400074 	movhi	r5,1
   15284:	295cde04 	addi	r5,r5,29560
   15288:	01000074 	movhi	r4,1
   1528c:	211cde04 	addi	r4,r4,29560
   15290:	00160980 	call	16098 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   15294:	0015e440 	call	15e44 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   15298:	01000074 	movhi	r4,1
   1529c:	2117aa04 	addi	r4,r4,24232
   152a0:	001681c0 	call	1681c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   152a4:	d0a1fd17 	ldw	r2,-30732(gp)
   152a8:	d0e1fe17 	ldw	r3,-30728(gp)
   152ac:	d121ff17 	ldw	r4,-30724(gp)
   152b0:	200d883a 	mov	r6,r4
   152b4:	180b883a 	mov	r5,r3
   152b8:	1009883a 	mov	r4,r2
   152bc:	001030c0 	call	1030c <main>
   152c0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   152c4:	01000044 	movi	r4,1
   152c8:	0015c380 	call	15c38 <close>
  exit (result);
   152cc:	e13fff17 	ldw	r4,-4(fp)
   152d0:	00168300 	call	16830 <exit>

000152d4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   152d4:	defffe04 	addi	sp,sp,-8
   152d8:	df000115 	stw	fp,4(sp)
   152dc:	df000104 	addi	fp,sp,4
   152e0:	e13fff15 	stw	r4,-4(fp)
}
   152e4:	0001883a 	nop
   152e8:	e037883a 	mov	sp,fp
   152ec:	df000017 	ldw	fp,0(sp)
   152f0:	dec00104 	addi	sp,sp,4
   152f4:	f800283a 	ret

000152f8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   152f8:	defffe04 	addi	sp,sp,-8
   152fc:	df000115 	stw	fp,4(sp)
   15300:	df000104 	addi	fp,sp,4
   15304:	e13fff15 	stw	r4,-4(fp)
}
   15308:	0001883a 	nop
   1530c:	e037883a 	mov	sp,fp
   15310:	df000017 	ldw	fp,0(sp)
   15314:	dec00104 	addi	sp,sp,4
   15318:	f800283a 	ret

0001531c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1531c:	defff904 	addi	sp,sp,-28
   15320:	df000615 	stw	fp,24(sp)
   15324:	df000604 	addi	fp,sp,24
   15328:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
   1532c:	0005303a 	rdctl	r2,status
   15330:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15334:	e0fffd17 	ldw	r3,-12(fp)
   15338:	00bfff84 	movi	r2,-2
   1533c:	1884703a 	and	r2,r3,r2
   15340:	1001703a 	wrctl	status,r2
  return context;
   15344:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   15348:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1534c:	d0a09317 	ldw	r2,-32180(gp)
   15350:	10c000c4 	addi	r3,r2,3
   15354:	00bfff04 	movi	r2,-4
   15358:	1884703a 	and	r2,r3,r2
   1535c:	d0a09315 	stw	r2,-32180(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   15360:	d0e09317 	ldw	r3,-32180(gp)
   15364:	e0bffa17 	ldw	r2,-24(fp)
   15368:	1887883a 	add	r3,r3,r2
   1536c:	008000b4 	movhi	r2,2
   15370:	10a80004 	addi	r2,r2,-24576
   15374:	10c0072e 	bgeu	r2,r3,15394 <sbrk+0x78>
   15378:	e0bfff17 	ldw	r2,-4(fp)
   1537c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   15380:	e0bffc17 	ldw	r2,-16(fp)
   15384:	1001703a 	wrctl	status,r2
}
   15388:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1538c:	00bfffc4 	movi	r2,-1
   15390:	00000c06 	br	153c4 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   15394:	d0a09317 	ldw	r2,-32180(gp)
   15398:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
   1539c:	d0e09317 	ldw	r3,-32180(gp)
   153a0:	e0bffa17 	ldw	r2,-24(fp)
   153a4:	1885883a 	add	r2,r3,r2
   153a8:	d0a09315 	stw	r2,-32180(gp)
   153ac:	e0bfff17 	ldw	r2,-4(fp)
   153b0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   153b4:	e0bffb17 	ldw	r2,-20(fp)
   153b8:	1001703a 	wrctl	status,r2
}
   153bc:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   153c0:	e0bffe17 	ldw	r2,-8(fp)
} 
   153c4:	e037883a 	mov	sp,fp
   153c8:	df000017 	ldw	fp,0(sp)
   153cc:	dec00104 	addi	sp,sp,4
   153d0:	f800283a 	ret

000153d4 <alt_get_errno>:
{
   153d4:	defffe04 	addi	sp,sp,-8
   153d8:	dfc00115 	stw	ra,4(sp)
   153dc:	df000015 	stw	fp,0(sp)
   153e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   153e4:	d0a09917 	ldw	r2,-32156(gp)
   153e8:	10000326 	beq	r2,zero,153f8 <alt_get_errno+0x24>
   153ec:	d0a09917 	ldw	r2,-32156(gp)
   153f0:	103ee83a 	callr	r2
   153f4:	00000106 	br	153fc <alt_get_errno+0x28>
   153f8:	d0a1fb04 	addi	r2,gp,-30740
}
   153fc:	e037883a 	mov	sp,fp
   15400:	dfc00117 	ldw	ra,4(sp)
   15404:	df000017 	ldw	fp,0(sp)
   15408:	dec00204 	addi	sp,sp,8
   1540c:	f800283a 	ret

00015410 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   15410:	defff904 	addi	sp,sp,-28
   15414:	dfc00615 	stw	ra,24(sp)
   15418:	df000515 	stw	fp,20(sp)
   1541c:	df000504 	addi	fp,sp,20
   15420:	e13ffd15 	stw	r4,-12(fp)
   15424:	e17ffc15 	stw	r5,-16(fp)
   15428:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1542c:	e0bffd17 	ldw	r2,-12(fp)
   15430:	10000916 	blt	r2,zero,15458 <write+0x48>
   15434:	e0fffd17 	ldw	r3,-12(fp)
   15438:	1805883a 	mov	r2,r3
   1543c:	1085883a 	add	r2,r2,r2
   15440:	10c5883a 	add	r2,r2,r3
   15444:	100490ba 	slli	r2,r2,2
   15448:	00c00074 	movhi	r3,1
   1544c:	18dd4504 	addi	r3,r3,29972
   15450:	10c5883a 	add	r2,r2,r3
   15454:	00000106 	br	1545c <write+0x4c>
   15458:	0005883a 	mov	r2,zero
   1545c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   15460:	e0bfff17 	ldw	r2,-4(fp)
   15464:	10002126 	beq	r2,zero,154ec <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   15468:	e0bfff17 	ldw	r2,-4(fp)
   1546c:	10800217 	ldw	r2,8(r2)
   15470:	108000cc 	andi	r2,r2,3
   15474:	10001826 	beq	r2,zero,154d8 <write+0xc8>
   15478:	e0bfff17 	ldw	r2,-4(fp)
   1547c:	10800017 	ldw	r2,0(r2)
   15480:	10800617 	ldw	r2,24(r2)
   15484:	10001426 	beq	r2,zero,154d8 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   15488:	e0bfff17 	ldw	r2,-4(fp)
   1548c:	10800017 	ldw	r2,0(r2)
   15490:	10800617 	ldw	r2,24(r2)
   15494:	e0fffb17 	ldw	r3,-20(fp)
   15498:	180d883a 	mov	r6,r3
   1549c:	e17ffc17 	ldw	r5,-16(fp)
   154a0:	e13fff17 	ldw	r4,-4(fp)
   154a4:	103ee83a 	callr	r2
   154a8:	e0bffe15 	stw	r2,-8(fp)
   154ac:	e0bffe17 	ldw	r2,-8(fp)
   154b0:	1000070e 	bge	r2,zero,154d0 <write+0xc0>
      {
        ALT_ERRNO = -rval;
   154b4:	00153d40 	call	153d4 <alt_get_errno>
   154b8:	1007883a 	mov	r3,r2
   154bc:	e0bffe17 	ldw	r2,-8(fp)
   154c0:	0085c83a 	sub	r2,zero,r2
   154c4:	18800015 	stw	r2,0(r3)
        return -1;
   154c8:	00bfffc4 	movi	r2,-1
   154cc:	00000c06 	br	15500 <write+0xf0>
      }
      return rval;
   154d0:	e0bffe17 	ldw	r2,-8(fp)
   154d4:	00000a06 	br	15500 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
   154d8:	00153d40 	call	153d4 <alt_get_errno>
   154dc:	1007883a 	mov	r3,r2
   154e0:	00800344 	movi	r2,13
   154e4:	18800015 	stw	r2,0(r3)
   154e8:	00000406 	br	154fc <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   154ec:	00153d40 	call	153d4 <alt_get_errno>
   154f0:	1007883a 	mov	r3,r2
   154f4:	00801444 	movi	r2,81
   154f8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   154fc:	00bfffc4 	movi	r2,-1
}
   15500:	e037883a 	mov	sp,fp
   15504:	dfc00117 	ldw	ra,4(sp)
   15508:	df000017 	ldw	fp,0(sp)
   1550c:	dec00204 	addi	sp,sp,8
   15510:	f800283a 	ret

00015514 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   15514:	defffd04 	addi	sp,sp,-12
   15518:	dfc00215 	stw	ra,8(sp)
   1551c:	df000115 	stw	fp,4(sp)
   15520:	df000104 	addi	fp,sp,4
   15524:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   15528:	d1609604 	addi	r5,gp,-32168
   1552c:	e13fff17 	ldw	r4,-4(fp)
   15530:	0015d9c0 	call	15d9c <alt_dev_llist_insert>
}
   15534:	e037883a 	mov	sp,fp
   15538:	dfc00117 	ldw	ra,4(sp)
   1553c:	df000017 	ldw	fp,0(sp)
   15540:	dec00204 	addi	sp,sp,8
   15544:	f800283a 	ret

00015548 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   15548:	defffd04 	addi	sp,sp,-12
   1554c:	dfc00215 	stw	ra,8(sp)
   15550:	df000115 	stw	fp,4(sp)
   15554:	df000104 	addi	fp,sp,4
   15558:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   1555c:	00165a80 	call	165a8 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   15560:	00800044 	movi	r2,1
   15564:	1001703a 	wrctl	status,r2
}
   15568:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
   1556c:	0001883a 	nop
   15570:	e037883a 	mov	sp,fp
   15574:	dfc00117 	ldw	ra,4(sp)
   15578:	df000017 	ldw	fp,0(sp)
   1557c:	dec00204 	addi	sp,sp,8
   15580:	f800283a 	ret

00015584 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   15584:	defffe04 	addi	sp,sp,-8
   15588:	dfc00115 	stw	ra,4(sp)
   1558c:	df000015 	stw	fp,0(sp)
   15590:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
   15594:	01c0fa04 	movi	r7,1000
   15598:	01800044 	movi	r6,1
   1559c:	000b883a 	mov	r5,zero
   155a0:	010000b4 	movhi	r4,2
   155a4:	210a0804 	addi	r4,r4,10272
   155a8:	001589c0 	call	1589c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   155ac:	01000074 	movhi	r4,1
   155b0:	211d2504 	addi	r4,r4,29844
   155b4:	00155140 	call	15514 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   155b8:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
   155bc:	01000074 	movhi	r4,1
   155c0:	211d3004 	addi	r4,r4,29888
   155c4:	00155140 	call	15514 <alt_dev_reg>
}
   155c8:	0001883a 	nop
   155cc:	e037883a 	mov	sp,fp
   155d0:	dfc00117 	ldw	ra,4(sp)
   155d4:	df000017 	ldw	fp,0(sp)
   155d8:	dec00204 	addi	sp,sp,8
   155dc:	f800283a 	ret

000155e0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   155e0:	defffa04 	addi	sp,sp,-24
   155e4:	dfc00515 	stw	ra,20(sp)
   155e8:	df000415 	stw	fp,16(sp)
   155ec:	df000404 	addi	fp,sp,16
   155f0:	e13ffe15 	stw	r4,-8(fp)
   155f4:	e17ffd15 	stw	r5,-12(fp)
   155f8:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   155fc:	e0bffe17 	ldw	r2,-8(fp)
   15600:	10800017 	ldw	r2,0(r2)
   15604:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   15608:	e0bfff17 	ldw	r2,-4(fp)
   1560c:	10c00a04 	addi	r3,r2,40
   15610:	e0bffe17 	ldw	r2,-8(fp)
   15614:	10800217 	ldw	r2,8(r2)
   15618:	100f883a 	mov	r7,r2
   1561c:	e1bffc17 	ldw	r6,-16(fp)
   15620:	e17ffd17 	ldw	r5,-12(fp)
   15624:	1809883a 	mov	r4,r3
   15628:	00156a00 	call	156a0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1562c:	e037883a 	mov	sp,fp
   15630:	dfc00117 	ldw	ra,4(sp)
   15634:	df000017 	ldw	fp,0(sp)
   15638:	dec00204 	addi	sp,sp,8
   1563c:	f800283a 	ret

00015640 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   15640:	defffa04 	addi	sp,sp,-24
   15644:	dfc00515 	stw	ra,20(sp)
   15648:	df000415 	stw	fp,16(sp)
   1564c:	df000404 	addi	fp,sp,16
   15650:	e13ffe15 	stw	r4,-8(fp)
   15654:	e17ffd15 	stw	r5,-12(fp)
   15658:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1565c:	e0bffe17 	ldw	r2,-8(fp)
   15660:	10800017 	ldw	r2,0(r2)
   15664:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   15668:	e0bfff17 	ldw	r2,-4(fp)
   1566c:	10c00a04 	addi	r3,r2,40
   15670:	e0bffe17 	ldw	r2,-8(fp)
   15674:	10800217 	ldw	r2,8(r2)
   15678:	100f883a 	mov	r7,r2
   1567c:	e1bffc17 	ldw	r6,-16(fp)
   15680:	e17ffd17 	ldw	r5,-12(fp)
   15684:	1809883a 	mov	r4,r3
   15688:	001578c0 	call	1578c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1568c:	e037883a 	mov	sp,fp
   15690:	dfc00117 	ldw	ra,4(sp)
   15694:	df000017 	ldw	fp,0(sp)
   15698:	dec00204 	addi	sp,sp,8
   1569c:	f800283a 	ret

000156a0 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   156a0:	defff704 	addi	sp,sp,-36
   156a4:	df000815 	stw	fp,32(sp)
   156a8:	df000804 	addi	fp,sp,32
   156ac:	e13ffb15 	stw	r4,-20(fp)
   156b0:	e17ffa15 	stw	r5,-24(fp)
   156b4:	e1bff915 	stw	r6,-28(fp)
   156b8:	e1fff815 	stw	r7,-32(fp)
  unsigned int base = sp->base;
   156bc:	e0bffb17 	ldw	r2,-20(fp)
   156c0:	10800017 	ldw	r2,0(r2)
   156c4:	e0bffe15 	stw	r2,-8(fp)

  char * ptr = buffer;
   156c8:	e0bffa17 	ldw	r2,-24(fp)
   156cc:	e0bfff15 	stw	r2,-4(fp)
  char * end = buffer + space;
   156d0:	e0bff917 	ldw	r2,-28(fp)
   156d4:	e0fffa17 	ldw	r3,-24(fp)
   156d8:	1885883a 	add	r2,r3,r2
   156dc:	e0bffd15 	stw	r2,-12(fp)

  while (ptr < end)
   156e0:	00001206 	br	1572c <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   156e4:	e0bffe17 	ldw	r2,-8(fp)
   156e8:	10800037 	ldwio	r2,0(r2)
   156ec:	e0bffc15 	stw	r2,-16(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   156f0:	e0bffc17 	ldw	r2,-16(fp)
   156f4:	10a0000c 	andi	r2,r2,32768
   156f8:	10000626 	beq	r2,zero,15714 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   156fc:	e0bfff17 	ldw	r2,-4(fp)
   15700:	10c00044 	addi	r3,r2,1
   15704:	e0ffff15 	stw	r3,-4(fp)
   15708:	e0fffc17 	ldw	r3,-16(fp)
   1570c:	10c00005 	stb	r3,0(r2)
   15710:	00000606 	br	1572c <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   15714:	e0ffff17 	ldw	r3,-4(fp)
   15718:	e0bffa17 	ldw	r2,-24(fp)
   1571c:	1880071e 	bne	r3,r2,1573c <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   15720:	e0bff817 	ldw	r2,-32(fp)
   15724:	1090000c 	andi	r2,r2,16384
   15728:	1000061e 	bne	r2,zero,15744 <altera_avalon_jtag_uart_read+0xa4>
  while (ptr < end)
   1572c:	e0ffff17 	ldw	r3,-4(fp)
   15730:	e0bffd17 	ldw	r2,-12(fp)
   15734:	18bfeb36 	bltu	r3,r2,156e4 <altera_avalon_jtag_uart_read+0x44>
   15738:	00000306 	br	15748 <altera_avalon_jtag_uart_read+0xa8>
      break;
   1573c:	0001883a 	nop
   15740:	00000106 	br	15748 <altera_avalon_jtag_uart_read+0xa8>
      break;   
   15744:	0001883a 	nop
    
  }

  if (ptr != buffer)
   15748:	e0ffff17 	ldw	r3,-4(fp)
   1574c:	e0bffa17 	ldw	r2,-24(fp)
   15750:	18800426 	beq	r3,r2,15764 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   15754:	e0ffff17 	ldw	r3,-4(fp)
   15758:	e0bffa17 	ldw	r2,-24(fp)
   1575c:	1885c83a 	sub	r2,r3,r2
   15760:	00000606 	br	1577c <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   15764:	e0bff817 	ldw	r2,-32(fp)
   15768:	1090000c 	andi	r2,r2,16384
   1576c:	10000226 	beq	r2,zero,15778 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   15770:	00bffd44 	movi	r2,-11
   15774:	00000106 	br	1577c <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   15778:	00bffec4 	movi	r2,-5
}
   1577c:	e037883a 	mov	sp,fp
   15780:	df000017 	ldw	fp,0(sp)
   15784:	dec00104 	addi	sp,sp,4
   15788:	f800283a 	ret

0001578c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1578c:	defff904 	addi	sp,sp,-28
   15790:	df000615 	stw	fp,24(sp)
   15794:	df000604 	addi	fp,sp,24
   15798:	e13ffd15 	stw	r4,-12(fp)
   1579c:	e17ffc15 	stw	r5,-16(fp)
   157a0:	e1bffb15 	stw	r6,-20(fp)
   157a4:	e1fffa15 	stw	r7,-24(fp)
  unsigned int base = sp->base;
   157a8:	e0bffd17 	ldw	r2,-12(fp)
   157ac:	10800017 	ldw	r2,0(r2)
   157b0:	e0bfff15 	stw	r2,-4(fp)

  const char * end = ptr + count;
   157b4:	e0bffb17 	ldw	r2,-20(fp)
   157b8:	e0fffc17 	ldw	r3,-16(fp)
   157bc:	1885883a 	add	r2,r3,r2
   157c0:	e0bffe15 	stw	r2,-8(fp)

  while (ptr < end)
   157c4:	00000e06 	br	15800 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   157c8:	e0bfff17 	ldw	r2,-4(fp)
   157cc:	10800104 	addi	r2,r2,4
   157d0:	10800037 	ldwio	r2,0(r2)
   157d4:	10bfffec 	andhi	r2,r2,65535
   157d8:	10000926 	beq	r2,zero,15800 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   157dc:	e0ffff17 	ldw	r3,-4(fp)
   157e0:	e0bffc17 	ldw	r2,-16(fp)
   157e4:	11000044 	addi	r4,r2,1
   157e8:	e13ffc15 	stw	r4,-16(fp)
   157ec:	10800003 	ldbu	r2,0(r2)
   157f0:	10803fcc 	andi	r2,r2,255
   157f4:	1080201c 	xori	r2,r2,128
   157f8:	10bfe004 	addi	r2,r2,-128
   157fc:	18800035 	stwio	r2,0(r3)
  while (ptr < end)
   15800:	e0fffc17 	ldw	r3,-16(fp)
   15804:	e0bffe17 	ldw	r2,-8(fp)
   15808:	18bfef36 	bltu	r3,r2,157c8 <altera_avalon_jtag_uart_write+0x3c>

  return count;
   1580c:	e0bffb17 	ldw	r2,-20(fp)
}
   15810:	e037883a 	mov	sp,fp
   15814:	df000017 	ldw	fp,0(sp)
   15818:	dec00104 	addi	sp,sp,4
   1581c:	f800283a 	ret

00015820 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   15820:	defffa04 	addi	sp,sp,-24
   15824:	dfc00515 	stw	ra,20(sp)
   15828:	df000415 	stw	fp,16(sp)
   1582c:	df000404 	addi	fp,sp,16
   15830:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   15834:	0007883a 	mov	r3,zero
   15838:	e0bffc17 	ldw	r2,-16(fp)
   1583c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   15840:	e0bffc17 	ldw	r2,-16(fp)
   15844:	10800104 	addi	r2,r2,4
   15848:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
   1584c:	0005303a 	rdctl	r2,status
   15850:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15854:	e0fffd17 	ldw	r3,-12(fp)
   15858:	00bfff84 	movi	r2,-2
   1585c:	1884703a 	and	r2,r3,r2
   15860:	1001703a 	wrctl	status,r2
  return context;
   15864:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   15868:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
   1586c:	00164a00 	call	164a0 <alt_tick>
   15870:	e0bfff17 	ldw	r2,-4(fp)
   15874:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   15878:	e0bffe17 	ldw	r2,-8(fp)
   1587c:	1001703a 	wrctl	status,r2
}
   15880:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
   15884:	0001883a 	nop
   15888:	e037883a 	mov	sp,fp
   1588c:	dfc00117 	ldw	ra,4(sp)
   15890:	df000017 	ldw	fp,0(sp)
   15894:	dec00204 	addi	sp,sp,8
   15898:	f800283a 	ret

0001589c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1589c:	defff804 	addi	sp,sp,-32
   158a0:	dfc00715 	stw	ra,28(sp)
   158a4:	df000615 	stw	fp,24(sp)
   158a8:	df000604 	addi	fp,sp,24
   158ac:	e13ffe15 	stw	r4,-8(fp)
   158b0:	e17ffd15 	stw	r5,-12(fp)
   158b4:	e1bffc15 	stw	r6,-16(fp)
   158b8:	e1fffb15 	stw	r7,-20(fp)
   158bc:	e0bffb17 	ldw	r2,-20(fp)
   158c0:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   158c4:	d0a20117 	ldw	r2,-30716(gp)
   158c8:	1000031e 	bne	r2,zero,158d8 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
   158cc:	e0bfff17 	ldw	r2,-4(fp)
   158d0:	d0a20115 	stw	r2,-30716(gp)
    return 0;
   158d4:	00000106 	br	158dc <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
   158d8:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   158dc:	e0bffe17 	ldw	r2,-8(fp)
   158e0:	10800104 	addi	r2,r2,4
   158e4:	00c001c4 	movi	r3,7
   158e8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   158ec:	d8000015 	stw	zero,0(sp)
   158f0:	e1fffe17 	ldw	r7,-8(fp)
   158f4:	01800074 	movhi	r6,1
   158f8:	31960804 	addi	r6,r6,22560
   158fc:	e17ffc17 	ldw	r5,-16(fp)
   15900:	e13ffd17 	ldw	r4,-12(fp)
   15904:	0014d6c0 	call	14d6c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   15908:	0001883a 	nop
   1590c:	e037883a 	mov	sp,fp
   15910:	dfc00117 	ldw	ra,4(sp)
   15914:	df000017 	ldw	fp,0(sp)
   15918:	dec00204 	addi	sp,sp,8
   1591c:	f800283a 	ret

00015920 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   15920:	defffa04 	addi	sp,sp,-24
   15924:	dfc00515 	stw	ra,20(sp)
   15928:	df000415 	stw	fp,16(sp)
   1592c:	df000404 	addi	fp,sp,16
   15930:	e13ffe15 	stw	r4,-8(fp)
   15934:	e17ffd15 	stw	r5,-12(fp)
   15938:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   1593c:	e0bffe17 	ldw	r2,-8(fp)
   15940:	10800017 	ldw	r2,0(r2)
   15944:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   15948:	e0bfff17 	ldw	r2,-4(fp)
   1594c:	10c00a04 	addi	r3,r2,40
   15950:	e0bffe17 	ldw	r2,-8(fp)
   15954:	10800217 	ldw	r2,8(r2)
   15958:	100f883a 	mov	r7,r2
   1595c:	e1bffc17 	ldw	r6,-16(fp)
   15960:	e17ffd17 	ldw	r5,-12(fp)
   15964:	1809883a 	mov	r4,r3
   15968:	0015a1c0 	call	15a1c <altera_avalon_uart_read>
      fd->fd_flags);
}
   1596c:	e037883a 	mov	sp,fp
   15970:	dfc00117 	ldw	ra,4(sp)
   15974:	df000017 	ldw	fp,0(sp)
   15978:	dec00204 	addi	sp,sp,8
   1597c:	f800283a 	ret

00015980 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   15980:	defffa04 	addi	sp,sp,-24
   15984:	dfc00515 	stw	ra,20(sp)
   15988:	df000415 	stw	fp,16(sp)
   1598c:	df000404 	addi	fp,sp,16
   15990:	e13ffe15 	stw	r4,-8(fp)
   15994:	e17ffd15 	stw	r5,-12(fp)
   15998:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   1599c:	e0bffe17 	ldw	r2,-8(fp)
   159a0:	10800017 	ldw	r2,0(r2)
   159a4:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   159a8:	e0bfff17 	ldw	r2,-4(fp)
   159ac:	10c00a04 	addi	r3,r2,40
   159b0:	e0bffe17 	ldw	r2,-8(fp)
   159b4:	10800217 	ldw	r2,8(r2)
   159b8:	100f883a 	mov	r7,r2
   159bc:	e1bffc17 	ldw	r6,-16(fp)
   159c0:	e17ffd17 	ldw	r5,-12(fp)
   159c4:	1809883a 	mov	r4,r3
   159c8:	0015b1c0 	call	15b1c <altera_avalon_uart_write>
      fd->fd_flags);
}
   159cc:	e037883a 	mov	sp,fp
   159d0:	dfc00117 	ldw	ra,4(sp)
   159d4:	df000017 	ldw	fp,0(sp)
   159d8:	dec00204 	addi	sp,sp,8
   159dc:	f800283a 	ret

000159e0 <alt_get_errno>:
{
   159e0:	defffe04 	addi	sp,sp,-8
   159e4:	dfc00115 	stw	ra,4(sp)
   159e8:	df000015 	stw	fp,0(sp)
   159ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   159f0:	d0a09917 	ldw	r2,-32156(gp)
   159f4:	10000326 	beq	r2,zero,15a04 <alt_get_errno+0x24>
   159f8:	d0a09917 	ldw	r2,-32156(gp)
   159fc:	103ee83a 	callr	r2
   15a00:	00000106 	br	15a08 <alt_get_errno+0x28>
   15a04:	d0a1fb04 	addi	r2,gp,-30740
}
   15a08:	e037883a 	mov	sp,fp
   15a0c:	dfc00117 	ldw	ra,4(sp)
   15a10:	df000017 	ldw	fp,0(sp)
   15a14:	dec00204 	addi	sp,sp,8
   15a18:	f800283a 	ret

00015a1c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   15a1c:	defff804 	addi	sp,sp,-32
   15a20:	dfc00715 	stw	ra,28(sp)
   15a24:	df000615 	stw	fp,24(sp)
   15a28:	df000604 	addi	fp,sp,24
   15a2c:	e13ffd15 	stw	r4,-12(fp)
   15a30:	e17ffc15 	stw	r5,-16(fp)
   15a34:	e1bffb15 	stw	r6,-20(fp)
   15a38:	e1fffa15 	stw	r7,-24(fp)
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
   15a3c:	e0bffa17 	ldw	r2,-24(fp)
   15a40:	1090000c 	andi	r2,r2,16384
   15a44:	1005003a 	cmpeq	r2,r2,zero
   15a48:	10803fcc 	andi	r2,r2,255
   15a4c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   15a50:	e0bffd17 	ldw	r2,-12(fp)
   15a54:	10800017 	ldw	r2,0(r2)
   15a58:	10800204 	addi	r2,r2,8
   15a5c:	10800037 	ldwio	r2,0(r2)
   15a60:	e0bffe15 	stw	r2,-8(fp)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
   15a64:	e0bffd17 	ldw	r2,-12(fp)
   15a68:	10800017 	ldw	r2,0(r2)
   15a6c:	10800204 	addi	r2,r2,8
   15a70:	0007883a 	mov	r3,zero
   15a74:	10c00035 	stwio	r3,0(r2)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
   15a78:	e0bffe17 	ldw	r2,-8(fp)
   15a7c:	1080200c 	andi	r2,r2,128
   15a80:	10000b26 	beq	r2,zero,15ab0 <altera_avalon_uart_read+0x94>
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   15a84:	e0bffd17 	ldw	r2,-12(fp)
   15a88:	10800017 	ldw	r2,0(r2)
   15a8c:	10800037 	ldwio	r2,0(r2)
   15a90:	1007883a 	mov	r3,r2
   15a94:	e0bffc17 	ldw	r2,-16(fp)
   15a98:	10c00005 	stb	r3,0(r2)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   15a9c:	e0bffe17 	ldw	r2,-8(fp)
   15aa0:	108000cc 	andi	r2,r2,3
   15aa4:	1000021e 	bne	r2,zero,15ab0 <altera_avalon_uart_read+0x94>
      ALTERA_AVALON_UART_STATUS_FE_MSK)))
      {
        return 1;
   15aa8:	00800044 	movi	r2,1
   15aac:	00000706 	br	15acc <altera_avalon_uart_read+0xb0>
      }
    }
  }
  while (block);
   15ab0:	e0bfff17 	ldw	r2,-4(fp)
   15ab4:	103fe61e 	bne	r2,zero,15a50 <altera_avalon_uart_read+0x34>

  ALT_ERRNO = EWOULDBLOCK;
   15ab8:	00159e00 	call	159e0 <alt_get_errno>
   15abc:	1007883a 	mov	r3,r2
   15ac0:	008002c4 	movi	r2,11
   15ac4:	18800015 	stw	r2,0(r3)
 
  return 0;
   15ac8:	0005883a 	mov	r2,zero
}
   15acc:	e037883a 	mov	sp,fp
   15ad0:	dfc00117 	ldw	ra,4(sp)
   15ad4:	df000017 	ldw	fp,0(sp)
   15ad8:	dec00204 	addi	sp,sp,8
   15adc:	f800283a 	ret

00015ae0 <alt_get_errno>:
{
   15ae0:	defffe04 	addi	sp,sp,-8
   15ae4:	dfc00115 	stw	ra,4(sp)
   15ae8:	df000015 	stw	fp,0(sp)
   15aec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15af0:	d0a09917 	ldw	r2,-32156(gp)
   15af4:	10000326 	beq	r2,zero,15b04 <alt_get_errno+0x24>
   15af8:	d0a09917 	ldw	r2,-32156(gp)
   15afc:	103ee83a 	callr	r2
   15b00:	00000106 	br	15b08 <alt_get_errno+0x28>
   15b04:	d0a1fb04 	addi	r2,gp,-30740
}
   15b08:	e037883a 	mov	sp,fp
   15b0c:	dfc00117 	ldw	ra,4(sp)
   15b10:	df000017 	ldw	fp,0(sp)
   15b14:	dec00204 	addi	sp,sp,8
   15b18:	f800283a 	ret

00015b1c <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   15b1c:	defff704 	addi	sp,sp,-36
   15b20:	dfc00815 	stw	ra,32(sp)
   15b24:	df000715 	stw	fp,28(sp)
   15b28:	df000704 	addi	fp,sp,28
   15b2c:	e13ffc15 	stw	r4,-16(fp)
   15b30:	e17ffb15 	stw	r5,-20(fp)
   15b34:	e1bffa15 	stw	r6,-24(fp)
   15b38:	e1fff915 	stw	r7,-28(fp)
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
   15b3c:	e0bff917 	ldw	r2,-28(fp)
   15b40:	1090000c 	andi	r2,r2,16384
   15b44:	1005003a 	cmpeq	r2,r2,zero
   15b48:	10803fcc 	andi	r2,r2,255
   15b4c:	e0bffe15 	stw	r2,-8(fp)
  count = len;
   15b50:	e0bffa17 	ldw	r2,-24(fp)
   15b54:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   15b58:	e0bffc17 	ldw	r2,-16(fp)
   15b5c:	10800017 	ldw	r2,0(r2)
   15b60:	10800204 	addi	r2,r2,8
   15b64:	10800037 	ldwio	r2,0(r2)
   15b68:	e0bffd15 	stw	r2,-12(fp)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
   15b6c:	e0bffd17 	ldw	r2,-12(fp)
   15b70:	1080100c 	andi	r2,r2,64
   15b74:	10000f26 	beq	r2,zero,15bb4 <altera_avalon_uart_write+0x98>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
   15b78:	e0bffc17 	ldw	r2,-16(fp)
   15b7c:	10800017 	ldw	r2,0(r2)
   15b80:	10800104 	addi	r2,r2,4
   15b84:	1009883a 	mov	r4,r2
   15b88:	e0bffb17 	ldw	r2,-20(fp)
   15b8c:	10c00044 	addi	r3,r2,1
   15b90:	e0fffb15 	stw	r3,-20(fp)
   15b94:	10800003 	ldbu	r2,0(r2)
   15b98:	10803fcc 	andi	r2,r2,255
   15b9c:	1080201c 	xori	r2,r2,128
   15ba0:	10bfe004 	addi	r2,r2,-128
   15ba4:	20800035 	stwio	r2,0(r4)
      count--;
   15ba8:	e0bfff17 	ldw	r2,-4(fp)
   15bac:	10bfffc4 	addi	r2,r2,-1
   15bb0:	e0bfff15 	stw	r2,-4(fp)
    }
  }
  while (block && count);
   15bb4:	e0bffe17 	ldw	r2,-8(fp)
   15bb8:	10000226 	beq	r2,zero,15bc4 <altera_avalon_uart_write+0xa8>
   15bbc:	e0bfff17 	ldw	r2,-4(fp)
   15bc0:	103fe51e 	bne	r2,zero,15b58 <altera_avalon_uart_write+0x3c>

  if (count)
   15bc4:	e0bfff17 	ldw	r2,-4(fp)
   15bc8:	10000426 	beq	r2,zero,15bdc <altera_avalon_uart_write+0xc0>
  {
    ALT_ERRNO = EWOULDBLOCK;
   15bcc:	0015ae00 	call	15ae0 <alt_get_errno>
   15bd0:	1007883a 	mov	r3,r2
   15bd4:	008002c4 	movi	r2,11
   15bd8:	18800015 	stw	r2,0(r3)
  }

  return (len - count);
   15bdc:	e0fffa17 	ldw	r3,-24(fp)
   15be0:	e0bfff17 	ldw	r2,-4(fp)
   15be4:	1885c83a 	sub	r2,r3,r2
}
   15be8:	e037883a 	mov	sp,fp
   15bec:	dfc00117 	ldw	ra,4(sp)
   15bf0:	df000017 	ldw	fp,0(sp)
   15bf4:	dec00204 	addi	sp,sp,8
   15bf8:	f800283a 	ret

00015bfc <alt_get_errno>:
{
   15bfc:	defffe04 	addi	sp,sp,-8
   15c00:	dfc00115 	stw	ra,4(sp)
   15c04:	df000015 	stw	fp,0(sp)
   15c08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15c0c:	d0a09917 	ldw	r2,-32156(gp)
   15c10:	10000326 	beq	r2,zero,15c20 <alt_get_errno+0x24>
   15c14:	d0a09917 	ldw	r2,-32156(gp)
   15c18:	103ee83a 	callr	r2
   15c1c:	00000106 	br	15c24 <alt_get_errno+0x28>
   15c20:	d0a1fb04 	addi	r2,gp,-30740
}
   15c24:	e037883a 	mov	sp,fp
   15c28:	dfc00117 	ldw	ra,4(sp)
   15c2c:	df000017 	ldw	fp,0(sp)
   15c30:	dec00204 	addi	sp,sp,8
   15c34:	f800283a 	ret

00015c38 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   15c38:	defffb04 	addi	sp,sp,-20
   15c3c:	dfc00415 	stw	ra,16(sp)
   15c40:	df000315 	stw	fp,12(sp)
   15c44:	df000304 	addi	fp,sp,12
   15c48:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   15c4c:	e0bffd17 	ldw	r2,-12(fp)
   15c50:	10000916 	blt	r2,zero,15c78 <close+0x40>
   15c54:	e0fffd17 	ldw	r3,-12(fp)
   15c58:	1805883a 	mov	r2,r3
   15c5c:	1085883a 	add	r2,r2,r2
   15c60:	10c5883a 	add	r2,r2,r3
   15c64:	100490ba 	slli	r2,r2,2
   15c68:	00c00074 	movhi	r3,1
   15c6c:	18dd4504 	addi	r3,r3,29972
   15c70:	10c5883a 	add	r2,r2,r3
   15c74:	00000106 	br	15c7c <close+0x44>
   15c78:	0005883a 	mov	r2,zero
   15c7c:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
   15c80:	e0bfff17 	ldw	r2,-4(fp)
   15c84:	10001926 	beq	r2,zero,15cec <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   15c88:	e0bfff17 	ldw	r2,-4(fp)
   15c8c:	10800017 	ldw	r2,0(r2)
   15c90:	10800417 	ldw	r2,16(r2)
   15c94:	10000626 	beq	r2,zero,15cb0 <close+0x78>
   15c98:	e0bfff17 	ldw	r2,-4(fp)
   15c9c:	10800017 	ldw	r2,0(r2)
   15ca0:	10800417 	ldw	r2,16(r2)
   15ca4:	e13fff17 	ldw	r4,-4(fp)
   15ca8:	103ee83a 	callr	r2
   15cac:	00000106 	br	15cb4 <close+0x7c>
   15cb0:	0005883a 	mov	r2,zero
   15cb4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   15cb8:	e13ffd17 	ldw	r4,-12(fp)
   15cbc:	001638c0 	call	1638c <alt_release_fd>
    if (rval < 0)
   15cc0:	e0bffe17 	ldw	r2,-8(fp)
   15cc4:	1000070e 	bge	r2,zero,15ce4 <close+0xac>
    {
      ALT_ERRNO = -rval;
   15cc8:	0015bfc0 	call	15bfc <alt_get_errno>
   15ccc:	1007883a 	mov	r3,r2
   15cd0:	e0bffe17 	ldw	r2,-8(fp)
   15cd4:	0085c83a 	sub	r2,zero,r2
   15cd8:	18800015 	stw	r2,0(r3)
      return -1;
   15cdc:	00bfffc4 	movi	r2,-1
   15ce0:	00000706 	br	15d00 <close+0xc8>
    }
    return 0;
   15ce4:	0005883a 	mov	r2,zero
   15ce8:	00000506 	br	15d00 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   15cec:	0015bfc0 	call	15bfc <alt_get_errno>
   15cf0:	1007883a 	mov	r3,r2
   15cf4:	00801444 	movi	r2,81
   15cf8:	18800015 	stw	r2,0(r3)
    return -1;
   15cfc:	00bfffc4 	movi	r2,-1
  }
}
   15d00:	e037883a 	mov	sp,fp
   15d04:	dfc00117 	ldw	ra,4(sp)
   15d08:	df000017 	ldw	fp,0(sp)
   15d0c:	dec00204 	addi	sp,sp,8
   15d10:	f800283a 	ret

00015d14 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   15d14:	deffff04 	addi	sp,sp,-4
   15d18:	df000015 	stw	fp,0(sp)
   15d1c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   15d20:	0001883a 	nop
   15d24:	e037883a 	mov	sp,fp
   15d28:	df000017 	ldw	fp,0(sp)
   15d2c:	dec00104 	addi	sp,sp,4
   15d30:	f800283a 	ret

00015d34 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   15d34:	defffc04 	addi	sp,sp,-16
   15d38:	df000315 	stw	fp,12(sp)
   15d3c:	df000304 	addi	fp,sp,12
   15d40:	e13fff15 	stw	r4,-4(fp)
   15d44:	e17ffe15 	stw	r5,-8(fp)
   15d48:	e1bffd15 	stw	r6,-12(fp)
  return len;
   15d4c:	e0bffd17 	ldw	r2,-12(fp)
}
   15d50:	e037883a 	mov	sp,fp
   15d54:	df000017 	ldw	fp,0(sp)
   15d58:	dec00104 	addi	sp,sp,4
   15d5c:	f800283a 	ret

00015d60 <alt_get_errno>:
{
   15d60:	defffe04 	addi	sp,sp,-8
   15d64:	dfc00115 	stw	ra,4(sp)
   15d68:	df000015 	stw	fp,0(sp)
   15d6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15d70:	d0a09917 	ldw	r2,-32156(gp)
   15d74:	10000326 	beq	r2,zero,15d84 <alt_get_errno+0x24>
   15d78:	d0a09917 	ldw	r2,-32156(gp)
   15d7c:	103ee83a 	callr	r2
   15d80:	00000106 	br	15d88 <alt_get_errno+0x28>
   15d84:	d0a1fb04 	addi	r2,gp,-30740
}
   15d88:	e037883a 	mov	sp,fp
   15d8c:	dfc00117 	ldw	ra,4(sp)
   15d90:	df000017 	ldw	fp,0(sp)
   15d94:	dec00204 	addi	sp,sp,8
   15d98:	f800283a 	ret

00015d9c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   15d9c:	defffa04 	addi	sp,sp,-24
   15da0:	dfc00515 	stw	ra,20(sp)
   15da4:	df000415 	stw	fp,16(sp)
   15da8:	df000404 	addi	fp,sp,16
   15dac:	e13ffd15 	stw	r4,-12(fp)
   15db0:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   15db4:	e0bffd17 	ldw	r2,-12(fp)
   15db8:	10000326 	beq	r2,zero,15dc8 <alt_dev_llist_insert+0x2c>
   15dbc:	e0bffd17 	ldw	r2,-12(fp)
   15dc0:	10800217 	ldw	r2,8(r2)
   15dc4:	1000061e 	bne	r2,zero,15de0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   15dc8:	0015d600 	call	15d60 <alt_get_errno>
   15dcc:	1007883a 	mov	r3,r2
   15dd0:	00800584 	movi	r2,22
   15dd4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   15dd8:	00bffa84 	movi	r2,-22
   15ddc:	00001406 	br	15e30 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   15de0:	e0bffd17 	ldw	r2,-12(fp)
   15de4:	e0fffc17 	ldw	r3,-16(fp)
   15de8:	e0ffff15 	stw	r3,-4(fp)
   15dec:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   15df0:	e0bffe17 	ldw	r2,-8(fp)
   15df4:	e0ffff17 	ldw	r3,-4(fp)
   15df8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   15dfc:	e0bfff17 	ldw	r2,-4(fp)
   15e00:	10c00017 	ldw	r3,0(r2)
   15e04:	e0bffe17 	ldw	r2,-8(fp)
   15e08:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   15e0c:	e0bfff17 	ldw	r2,-4(fp)
   15e10:	10800017 	ldw	r2,0(r2)
   15e14:	e0fffe17 	ldw	r3,-8(fp)
   15e18:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   15e1c:	e0bfff17 	ldw	r2,-4(fp)
   15e20:	e0fffe17 	ldw	r3,-8(fp)
   15e24:	10c00015 	stw	r3,0(r2)
}
   15e28:	0001883a 	nop

  return 0;  
   15e2c:	0005883a 	mov	r2,zero
}
   15e30:	e037883a 	mov	sp,fp
   15e34:	dfc00117 	ldw	ra,4(sp)
   15e38:	df000017 	ldw	fp,0(sp)
   15e3c:	dec00204 	addi	sp,sp,8
   15e40:	f800283a 	ret

00015e44 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   15e44:	defffd04 	addi	sp,sp,-12
   15e48:	dfc00215 	stw	ra,8(sp)
   15e4c:	df000115 	stw	fp,4(sp)
   15e50:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   15e54:	00800074 	movhi	r2,1
   15e58:	109ac804 	addi	r2,r2,27424
   15e5c:	e0bfff15 	stw	r2,-4(fp)
   15e60:	00000606 	br	15e7c <_do_ctors+0x38>
        (*ctor) (); 
   15e64:	e0bfff17 	ldw	r2,-4(fp)
   15e68:	10800017 	ldw	r2,0(r2)
   15e6c:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   15e70:	e0bfff17 	ldw	r2,-4(fp)
   15e74:	10bfff04 	addi	r2,r2,-4
   15e78:	e0bfff15 	stw	r2,-4(fp)
   15e7c:	e0ffff17 	ldw	r3,-4(fp)
   15e80:	00800074 	movhi	r2,1
   15e84:	109ac544 	addi	r2,r2,27413
   15e88:	18bff62e 	bgeu	r3,r2,15e64 <_do_ctors+0x20>
}
   15e8c:	0001883a 	nop
   15e90:	0001883a 	nop
   15e94:	e037883a 	mov	sp,fp
   15e98:	dfc00117 	ldw	ra,4(sp)
   15e9c:	df000017 	ldw	fp,0(sp)
   15ea0:	dec00204 	addi	sp,sp,8
   15ea4:	f800283a 	ret

00015ea8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   15ea8:	defffd04 	addi	sp,sp,-12
   15eac:	dfc00215 	stw	ra,8(sp)
   15eb0:	df000115 	stw	fp,4(sp)
   15eb4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   15eb8:	00800074 	movhi	r2,1
   15ebc:	109ac904 	addi	r2,r2,27428
   15ec0:	e0bfff15 	stw	r2,-4(fp)
   15ec4:	00000606 	br	15ee0 <_do_dtors+0x38>
        (*dtor) (); 
   15ec8:	e0bfff17 	ldw	r2,-4(fp)
   15ecc:	10800017 	ldw	r2,0(r2)
   15ed0:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   15ed4:	e0bfff17 	ldw	r2,-4(fp)
   15ed8:	10bfff04 	addi	r2,r2,-4
   15edc:	e0bfff15 	stw	r2,-4(fp)
   15ee0:	e0ffff17 	ldw	r3,-4(fp)
   15ee4:	00800074 	movhi	r2,1
   15ee8:	109ac904 	addi	r2,r2,27428
   15eec:	18bff62e 	bgeu	r3,r2,15ec8 <_do_dtors+0x20>
}
   15ef0:	0001883a 	nop
   15ef4:	0001883a 	nop
   15ef8:	e037883a 	mov	sp,fp
   15efc:	dfc00117 	ldw	ra,4(sp)
   15f00:	df000017 	ldw	fp,0(sp)
   15f04:	dec00204 	addi	sp,sp,8
   15f08:	f800283a 	ret

00015f0c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   15f0c:	deffff04 	addi	sp,sp,-4
   15f10:	df000015 	stw	fp,0(sp)
   15f14:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   15f18:	0001883a 	nop
   15f1c:	e037883a 	mov	sp,fp
   15f20:	df000017 	ldw	fp,0(sp)
   15f24:	dec00104 	addi	sp,sp,4
   15f28:	f800283a 	ret

00015f2c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   15f2c:	defffe04 	addi	sp,sp,-8
   15f30:	df000115 	stw	fp,4(sp)
   15f34:	df000104 	addi	fp,sp,4
   15f38:	e13fff15 	stw	r4,-4(fp)
   15f3c:	e0bfff17 	ldw	r2,-4(fp)
   15f40:	10bffe84 	addi	r2,r2,-6
   15f44:	10c00428 	cmpgeui	r3,r2,16
   15f48:	1800191e 	bne	r3,zero,15fb0 <alt_exception_cause_generated_bad_addr+0x84>
   15f4c:	100690ba 	slli	r3,r2,2
   15f50:	00800074 	movhi	r2,1
   15f54:	1885883a 	add	r2,r3,r2
   15f58:	1097d817 	ldw	r2,24416(r2)
   15f5c:	1000683a 	jmp	r2
   15f60:	00015fa0 	cmpeqi	zero,zero,1406
   15f64:	00015fa0 	cmpeqi	zero,zero,1406
   15f68:	00015fb0 	cmpltui	zero,zero,1406
   15f6c:	00015fb0 	cmpltui	zero,zero,1406
   15f70:	00015fb0 	cmpltui	zero,zero,1406
   15f74:	00015fa0 	cmpeqi	zero,zero,1406
   15f78:	00015fa8 	cmpgeui	zero,zero,1406
   15f7c:	00015fb0 	cmpltui	zero,zero,1406
   15f80:	00015fa0 	cmpeqi	zero,zero,1406
   15f84:	00015fa0 	cmpeqi	zero,zero,1406
   15f88:	00015fb0 	cmpltui	zero,zero,1406
   15f8c:	00015fa0 	cmpeqi	zero,zero,1406
   15f90:	00015fa8 	cmpgeui	zero,zero,1406
   15f94:	00015fb0 	cmpltui	zero,zero,1406
   15f98:	00015fb0 	cmpltui	zero,zero,1406
   15f9c:	00015fa0 	cmpeqi	zero,zero,1406
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   15fa0:	00800044 	movi	r2,1
   15fa4:	00000306 	br	15fb4 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   15fa8:	0005883a 	mov	r2,zero
   15fac:	00000106 	br	15fb4 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
   15fb0:	0005883a 	mov	r2,zero
  }
}
   15fb4:	e037883a 	mov	sp,fp
   15fb8:	df000017 	ldw	fp,0(sp)
   15fbc:	dec00104 	addi	sp,sp,4
   15fc0:	f800283a 	ret

00015fc4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   15fc4:	defff904 	addi	sp,sp,-28
   15fc8:	dfc00615 	stw	ra,24(sp)
   15fcc:	df000515 	stw	fp,20(sp)
   15fd0:	df000504 	addi	fp,sp,20
   15fd4:	e13ffe15 	stw	r4,-8(fp)
   15fd8:	e17ffd15 	stw	r5,-12(fp)
   15fdc:	e1bffc15 	stw	r6,-16(fp)
   15fe0:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   15fe4:	e1bffb17 	ldw	r6,-20(fp)
   15fe8:	e17ffc17 	ldw	r5,-16(fp)
   15fec:	e13ffd17 	ldw	r4,-12(fp)
   15ff0:	001622c0 	call	1622c <open>
   15ff4:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   15ff8:	e0bfff17 	ldw	r2,-4(fp)
   15ffc:	10002016 	blt	r2,zero,16080 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
   16000:	e0ffff17 	ldw	r3,-4(fp)
   16004:	1805883a 	mov	r2,r3
   16008:	1085883a 	add	r2,r2,r2
   1600c:	10c5883a 	add	r2,r2,r3
   16010:	100490ba 	slli	r2,r2,2
   16014:	00c00074 	movhi	r3,1
   16018:	10c7883a 	add	r3,r2,r3
   1601c:	18dd4517 	ldw	r3,29972(r3)
   16020:	e0bffe17 	ldw	r2,-8(fp)
   16024:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   16028:	e0ffff17 	ldw	r3,-4(fp)
   1602c:	1805883a 	mov	r2,r3
   16030:	1085883a 	add	r2,r2,r2
   16034:	10c5883a 	add	r2,r2,r3
   16038:	100490ba 	slli	r2,r2,2
   1603c:	00c00074 	movhi	r3,1
   16040:	10c7883a 	add	r3,r2,r3
   16044:	18dd4617 	ldw	r3,29976(r3)
   16048:	e0bffe17 	ldw	r2,-8(fp)
   1604c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   16050:	e0ffff17 	ldw	r3,-4(fp)
   16054:	1805883a 	mov	r2,r3
   16058:	1085883a 	add	r2,r2,r2
   1605c:	10c5883a 	add	r2,r2,r3
   16060:	100490ba 	slli	r2,r2,2
   16064:	00c00074 	movhi	r3,1
   16068:	10c7883a 	add	r3,r2,r3
   1606c:	18dd4717 	ldw	r3,29980(r3)
   16070:	e0bffe17 	ldw	r2,-8(fp)
   16074:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   16078:	e13fff17 	ldw	r4,-4(fp)
   1607c:	001638c0 	call	1638c <alt_release_fd>
  }
} 
   16080:	0001883a 	nop
   16084:	e037883a 	mov	sp,fp
   16088:	dfc00117 	ldw	ra,4(sp)
   1608c:	df000017 	ldw	fp,0(sp)
   16090:	dec00204 	addi	sp,sp,8
   16094:	f800283a 	ret

00016098 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   16098:	defffb04 	addi	sp,sp,-20
   1609c:	dfc00415 	stw	ra,16(sp)
   160a0:	df000315 	stw	fp,12(sp)
   160a4:	df000304 	addi	fp,sp,12
   160a8:	e13fff15 	stw	r4,-4(fp)
   160ac:	e17ffe15 	stw	r5,-8(fp)
   160b0:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   160b4:	01c07fc4 	movi	r7,511
   160b8:	01800044 	movi	r6,1
   160bc:	e17fff17 	ldw	r5,-4(fp)
   160c0:	01000074 	movhi	r4,1
   160c4:	211d4804 	addi	r4,r4,29984
   160c8:	0015fc40 	call	15fc4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   160cc:	01c07fc4 	movi	r7,511
   160d0:	000d883a 	mov	r6,zero
   160d4:	e17ffe17 	ldw	r5,-8(fp)
   160d8:	01000074 	movhi	r4,1
   160dc:	211d4504 	addi	r4,r4,29972
   160e0:	0015fc40 	call	15fc4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   160e4:	01c07fc4 	movi	r7,511
   160e8:	01800044 	movi	r6,1
   160ec:	e17ffd17 	ldw	r5,-12(fp)
   160f0:	01000074 	movhi	r4,1
   160f4:	211d4b04 	addi	r4,r4,29996
   160f8:	0015fc40 	call	15fc4 <alt_open_fd>
}  
   160fc:	0001883a 	nop
   16100:	e037883a 	mov	sp,fp
   16104:	dfc00117 	ldw	ra,4(sp)
   16108:	df000017 	ldw	fp,0(sp)
   1610c:	dec00204 	addi	sp,sp,8
   16110:	f800283a 	ret

00016114 <alt_get_errno>:
{
   16114:	defffe04 	addi	sp,sp,-8
   16118:	dfc00115 	stw	ra,4(sp)
   1611c:	df000015 	stw	fp,0(sp)
   16120:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   16124:	d0a09917 	ldw	r2,-32156(gp)
   16128:	10000326 	beq	r2,zero,16138 <alt_get_errno+0x24>
   1612c:	d0a09917 	ldw	r2,-32156(gp)
   16130:	103ee83a 	callr	r2
   16134:	00000106 	br	1613c <alt_get_errno+0x28>
   16138:	d0a1fb04 	addi	r2,gp,-30740
}
   1613c:	e037883a 	mov	sp,fp
   16140:	dfc00117 	ldw	ra,4(sp)
   16144:	df000017 	ldw	fp,0(sp)
   16148:	dec00204 	addi	sp,sp,8
   1614c:	f800283a 	ret

00016150 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   16150:	defffd04 	addi	sp,sp,-12
   16154:	df000215 	stw	fp,8(sp)
   16158:	df000204 	addi	fp,sp,8
   1615c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   16160:	e0bffe17 	ldw	r2,-8(fp)
   16164:	10800217 	ldw	r2,8(r2)
   16168:	10d00034 	orhi	r3,r2,16384
   1616c:	e0bffe17 	ldw	r2,-8(fp)
   16170:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   16174:	e03fff15 	stw	zero,-4(fp)
   16178:	00002306 	br	16208 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1617c:	e0ffff17 	ldw	r3,-4(fp)
   16180:	1805883a 	mov	r2,r3
   16184:	1085883a 	add	r2,r2,r2
   16188:	10c5883a 	add	r2,r2,r3
   1618c:	100490ba 	slli	r2,r2,2
   16190:	00c00074 	movhi	r3,1
   16194:	10c7883a 	add	r3,r2,r3
   16198:	18dd4517 	ldw	r3,29972(r3)
   1619c:	e0bffe17 	ldw	r2,-8(fp)
   161a0:	10800017 	ldw	r2,0(r2)
   161a4:	1880151e 	bne	r3,r2,161fc <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   161a8:	e0ffff17 	ldw	r3,-4(fp)
   161ac:	1805883a 	mov	r2,r3
   161b0:	1085883a 	add	r2,r2,r2
   161b4:	10c5883a 	add	r2,r2,r3
   161b8:	100490ba 	slli	r2,r2,2
   161bc:	00c00074 	movhi	r3,1
   161c0:	10c7883a 	add	r3,r2,r3
   161c4:	189d4717 	ldw	r2,29980(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
   161c8:	10000c0e 	bge	r2,zero,161fc <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
   161cc:	e0ffff17 	ldw	r3,-4(fp)
   161d0:	1805883a 	mov	r2,r3
   161d4:	1085883a 	add	r2,r2,r2
   161d8:	10c5883a 	add	r2,r2,r3
   161dc:	100490ba 	slli	r2,r2,2
   161e0:	00c00074 	movhi	r3,1
   161e4:	18dd4504 	addi	r3,r3,29972
   161e8:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   161ec:	e0fffe17 	ldw	r3,-8(fp)
   161f0:	18800226 	beq	r3,r2,161fc <alt_file_locked+0xac>
    {
      return -EACCES;
   161f4:	00bffcc4 	movi	r2,-13
   161f8:	00000806 	br	1621c <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
   161fc:	e0bfff17 	ldw	r2,-4(fp)
   16200:	10800044 	addi	r2,r2,1
   16204:	e0bfff15 	stw	r2,-4(fp)
   16208:	d0a09817 	ldw	r2,-32160(gp)
   1620c:	1007883a 	mov	r3,r2
   16210:	e0bfff17 	ldw	r2,-4(fp)
   16214:	18bfd92e 	bgeu	r3,r2,1617c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   16218:	0005883a 	mov	r2,zero
}
   1621c:	e037883a 	mov	sp,fp
   16220:	df000017 	ldw	fp,0(sp)
   16224:	dec00104 	addi	sp,sp,4
   16228:	f800283a 	ret

0001622c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1622c:	defff604 	addi	sp,sp,-40
   16230:	dfc00915 	stw	ra,36(sp)
   16234:	df000815 	stw	fp,32(sp)
   16238:	df000804 	addi	fp,sp,32
   1623c:	e13ffa15 	stw	r4,-24(fp)
   16240:	e17ff915 	stw	r5,-28(fp)
   16244:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   16248:	00bfffc4 	movi	r2,-1
   1624c:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   16250:	00bffb44 	movi	r2,-19
   16254:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   16258:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1625c:	d1609604 	addi	r5,gp,-32168
   16260:	e13ffa17 	ldw	r4,-24(fp)
   16264:	00165cc0 	call	165cc <alt_find_dev>
   16268:	e0bfff15 	stw	r2,-4(fp)
   1626c:	e0bfff17 	ldw	r2,-4(fp)
   16270:	1000051e 	bne	r2,zero,16288 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   16274:	e13ffa17 	ldw	r4,-24(fp)
   16278:	001665c0 	call	1665c <alt_find_file>
   1627c:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   16280:	00800044 	movi	r2,1
   16284:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   16288:	e0bfff17 	ldw	r2,-4(fp)
   1628c:	10002c26 	beq	r2,zero,16340 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   16290:	e13fff17 	ldw	r4,-4(fp)
   16294:	00167640 	call	16764 <alt_get_fd>
   16298:	e0bffe15 	stw	r2,-8(fp)
   1629c:	e0bffe17 	ldw	r2,-8(fp)
   162a0:	1000030e 	bge	r2,zero,162b0 <open+0x84>
    {
      status = index;
   162a4:	e0bffe17 	ldw	r2,-8(fp)
   162a8:	e0bffd15 	stw	r2,-12(fp)
   162ac:	00002606 	br	16348 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   162b0:	e0fffe17 	ldw	r3,-8(fp)
   162b4:	1805883a 	mov	r2,r3
   162b8:	1085883a 	add	r2,r2,r2
   162bc:	10c5883a 	add	r2,r2,r3
   162c0:	100490ba 	slli	r2,r2,2
   162c4:	00c00074 	movhi	r3,1
   162c8:	18dd4504 	addi	r3,r3,29972
   162cc:	10c5883a 	add	r2,r2,r3
   162d0:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   162d4:	e0fff917 	ldw	r3,-28(fp)
   162d8:	00900034 	movhi	r2,16384
   162dc:	10bfffc4 	addi	r2,r2,-1
   162e0:	1886703a 	and	r3,r3,r2
   162e4:	e0bffb17 	ldw	r2,-20(fp)
   162e8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   162ec:	e0bffc17 	ldw	r2,-16(fp)
   162f0:	1000051e 	bne	r2,zero,16308 <open+0xdc>
   162f4:	e13ffb17 	ldw	r4,-20(fp)
   162f8:	00161500 	call	16150 <alt_file_locked>
   162fc:	e0bffd15 	stw	r2,-12(fp)
   16300:	e0bffd17 	ldw	r2,-12(fp)
   16304:	10001016 	blt	r2,zero,16348 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   16308:	e0bfff17 	ldw	r2,-4(fp)
   1630c:	10800317 	ldw	r2,12(r2)
   16310:	10000826 	beq	r2,zero,16334 <open+0x108>
   16314:	e0bfff17 	ldw	r2,-4(fp)
   16318:	10800317 	ldw	r2,12(r2)
   1631c:	e1fff817 	ldw	r7,-32(fp)
   16320:	e1bff917 	ldw	r6,-28(fp)
   16324:	e17ffa17 	ldw	r5,-24(fp)
   16328:	e13ffb17 	ldw	r4,-20(fp)
   1632c:	103ee83a 	callr	r2
   16330:	00000106 	br	16338 <open+0x10c>
   16334:	0005883a 	mov	r2,zero
   16338:	e0bffd15 	stw	r2,-12(fp)
   1633c:	00000206 	br	16348 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   16340:	00bffb44 	movi	r2,-19
   16344:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   16348:	e0bffd17 	ldw	r2,-12(fp)
   1634c:	1000090e 	bge	r2,zero,16374 <open+0x148>
  {
    alt_release_fd (index);  
   16350:	e13ffe17 	ldw	r4,-8(fp)
   16354:	001638c0 	call	1638c <alt_release_fd>
    ALT_ERRNO = -status;
   16358:	00161140 	call	16114 <alt_get_errno>
   1635c:	1007883a 	mov	r3,r2
   16360:	e0bffd17 	ldw	r2,-12(fp)
   16364:	0085c83a 	sub	r2,zero,r2
   16368:	18800015 	stw	r2,0(r3)
    return -1;
   1636c:	00bfffc4 	movi	r2,-1
   16370:	00000106 	br	16378 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   16374:	e0bffe17 	ldw	r2,-8(fp)
}
   16378:	e037883a 	mov	sp,fp
   1637c:	dfc00117 	ldw	ra,4(sp)
   16380:	df000017 	ldw	fp,0(sp)
   16384:	dec00204 	addi	sp,sp,8
   16388:	f800283a 	ret

0001638c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1638c:	defffe04 	addi	sp,sp,-8
   16390:	df000115 	stw	fp,4(sp)
   16394:	df000104 	addi	fp,sp,4
   16398:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   1639c:	e0bfff17 	ldw	r2,-4(fp)
   163a0:	108000d0 	cmplti	r2,r2,3
   163a4:	1000101e 	bne	r2,zero,163e8 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
   163a8:	e0ffff17 	ldw	r3,-4(fp)
   163ac:	1805883a 	mov	r2,r3
   163b0:	1085883a 	add	r2,r2,r2
   163b4:	10c5883a 	add	r2,r2,r3
   163b8:	100490ba 	slli	r2,r2,2
   163bc:	00c00074 	movhi	r3,1
   163c0:	10c7883a 	add	r3,r2,r3
   163c4:	181d4715 	stw	zero,29980(r3)
    alt_fd_list[fd].dev      = 0;
   163c8:	e0ffff17 	ldw	r3,-4(fp)
   163cc:	1805883a 	mov	r2,r3
   163d0:	1085883a 	add	r2,r2,r2
   163d4:	10c5883a 	add	r2,r2,r3
   163d8:	100490ba 	slli	r2,r2,2
   163dc:	00c00074 	movhi	r3,1
   163e0:	10c7883a 	add	r3,r2,r3
   163e4:	181d4515 	stw	zero,29972(r3)
  }
}
   163e8:	0001883a 	nop
   163ec:	e037883a 	mov	sp,fp
   163f0:	df000017 	ldw	fp,0(sp)
   163f4:	dec00104 	addi	sp,sp,4
   163f8:	f800283a 	ret

000163fc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   163fc:	defffa04 	addi	sp,sp,-24
   16400:	df000515 	stw	fp,20(sp)
   16404:	df000504 	addi	fp,sp,20
   16408:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
   1640c:	0005303a 	rdctl	r2,status
   16410:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16414:	e0fffc17 	ldw	r3,-16(fp)
   16418:	00bfff84 	movi	r2,-2
   1641c:	1884703a 	and	r2,r3,r2
   16420:	1001703a 	wrctl	status,r2
  return context;
   16424:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   16428:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
   1642c:	e0bffb17 	ldw	r2,-20(fp)
   16430:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   16434:	e0bffd17 	ldw	r2,-12(fp)
   16438:	10800017 	ldw	r2,0(r2)
   1643c:	e0fffd17 	ldw	r3,-12(fp)
   16440:	18c00117 	ldw	r3,4(r3)
   16444:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   16448:	e0bffd17 	ldw	r2,-12(fp)
   1644c:	10800117 	ldw	r2,4(r2)
   16450:	e0fffd17 	ldw	r3,-12(fp)
   16454:	18c00017 	ldw	r3,0(r3)
   16458:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1645c:	e0bffd17 	ldw	r2,-12(fp)
   16460:	e0fffd17 	ldw	r3,-12(fp)
   16464:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   16468:	e0bffd17 	ldw	r2,-12(fp)
   1646c:	e0fffd17 	ldw	r3,-12(fp)
   16470:	10c00015 	stw	r3,0(r2)
} 
   16474:	0001883a 	nop
   16478:	e0bfff17 	ldw	r2,-4(fp)
   1647c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   16480:	e0bffe17 	ldw	r2,-8(fp)
   16484:	1001703a 	wrctl	status,r2
}
   16488:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
   1648c:	0001883a 	nop
   16490:	e037883a 	mov	sp,fp
   16494:	df000017 	ldw	fp,0(sp)
   16498:	dec00104 	addi	sp,sp,4
   1649c:	f800283a 	ret

000164a0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   164a0:	defffb04 	addi	sp,sp,-20
   164a4:	dfc00415 	stw	ra,16(sp)
   164a8:	df000315 	stw	fp,12(sp)
   164ac:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   164b0:	d0a09a17 	ldw	r2,-32152(gp)
   164b4:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   164b8:	d0a20217 	ldw	r2,-30712(gp)
   164bc:	10800044 	addi	r2,r2,1
   164c0:	d0a20215 	stw	r2,-30712(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   164c4:	00002e06 	br	16580 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   164c8:	e0bfff17 	ldw	r2,-4(fp)
   164cc:	10800017 	ldw	r2,0(r2)
   164d0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   164d4:	e0bfff17 	ldw	r2,-4(fp)
   164d8:	10800403 	ldbu	r2,16(r2)
   164dc:	10803fcc 	andi	r2,r2,255
   164e0:	10000426 	beq	r2,zero,164f4 <alt_tick+0x54>
   164e4:	d0a20217 	ldw	r2,-30712(gp)
   164e8:	1000021e 	bne	r2,zero,164f4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   164ec:	e0bfff17 	ldw	r2,-4(fp)
   164f0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   164f4:	e0bfff17 	ldw	r2,-4(fp)
   164f8:	10800217 	ldw	r2,8(r2)
   164fc:	d0e20217 	ldw	r3,-30712(gp)
   16500:	18801d36 	bltu	r3,r2,16578 <alt_tick+0xd8>
   16504:	e0bfff17 	ldw	r2,-4(fp)
   16508:	10800403 	ldbu	r2,16(r2)
   1650c:	10803fcc 	andi	r2,r2,255
   16510:	1000191e 	bne	r2,zero,16578 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   16514:	e0bfff17 	ldw	r2,-4(fp)
   16518:	10800317 	ldw	r2,12(r2)
   1651c:	e0ffff17 	ldw	r3,-4(fp)
   16520:	18c00517 	ldw	r3,20(r3)
   16524:	1809883a 	mov	r4,r3
   16528:	103ee83a 	callr	r2
   1652c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   16530:	e0bffd17 	ldw	r2,-12(fp)
   16534:	1000031e 	bne	r2,zero,16544 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   16538:	e13fff17 	ldw	r4,-4(fp)
   1653c:	00163fc0 	call	163fc <alt_alarm_stop>
   16540:	00000d06 	br	16578 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   16544:	e0bfff17 	ldw	r2,-4(fp)
   16548:	10c00217 	ldw	r3,8(r2)
   1654c:	e0bffd17 	ldw	r2,-12(fp)
   16550:	1887883a 	add	r3,r3,r2
   16554:	e0bfff17 	ldw	r2,-4(fp)
   16558:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1655c:	e0bfff17 	ldw	r2,-4(fp)
   16560:	10c00217 	ldw	r3,8(r2)
   16564:	d0a20217 	ldw	r2,-30712(gp)
   16568:	1880032e 	bgeu	r3,r2,16578 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1656c:	e0bfff17 	ldw	r2,-4(fp)
   16570:	00c00044 	movi	r3,1
   16574:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   16578:	e0bffe17 	ldw	r2,-8(fp)
   1657c:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
   16580:	e0ffff17 	ldw	r3,-4(fp)
   16584:	d0a09a04 	addi	r2,gp,-32152
   16588:	18bfcf1e 	bne	r3,r2,164c8 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1658c:	0001883a 	nop
}
   16590:	0001883a 	nop
   16594:	e037883a 	mov	sp,fp
   16598:	dfc00117 	ldw	ra,4(sp)
   1659c:	df000017 	ldw	fp,0(sp)
   165a0:	dec00204 	addi	sp,sp,8
   165a4:	f800283a 	ret

000165a8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   165a8:	deffff04 	addi	sp,sp,-4
   165ac:	df000015 	stw	fp,0(sp)
   165b0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   165b4:	000170fa 	wrctl	ienable,zero
}
   165b8:	0001883a 	nop
   165bc:	e037883a 	mov	sp,fp
   165c0:	df000017 	ldw	fp,0(sp)
   165c4:	dec00104 	addi	sp,sp,4
   165c8:	f800283a 	ret

000165cc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   165cc:	defffa04 	addi	sp,sp,-24
   165d0:	dfc00515 	stw	ra,20(sp)
   165d4:	df000415 	stw	fp,16(sp)
   165d8:	df000404 	addi	fp,sp,16
   165dc:	e13ffd15 	stw	r4,-12(fp)
   165e0:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
   165e4:	e0bffc17 	ldw	r2,-16(fp)
   165e8:	10800017 	ldw	r2,0(r2)
   165ec:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   165f0:	e13ffd17 	ldw	r4,-12(fp)
   165f4:	0014c000 	call	14c00 <strlen>
   165f8:	10800044 	addi	r2,r2,1
   165fc:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   16600:	00000d06 	br	16638 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   16604:	e0bfff17 	ldw	r2,-4(fp)
   16608:	10800217 	ldw	r2,8(r2)
   1660c:	e0fffe17 	ldw	r3,-8(fp)
   16610:	180d883a 	mov	r6,r3
   16614:	e17ffd17 	ldw	r5,-12(fp)
   16618:	1009883a 	mov	r4,r2
   1661c:	00168500 	call	16850 <memcmp>
   16620:	1000021e 	bne	r2,zero,1662c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   16624:	e0bfff17 	ldw	r2,-4(fp)
   16628:	00000706 	br	16648 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1662c:	e0bfff17 	ldw	r2,-4(fp)
   16630:	10800017 	ldw	r2,0(r2)
   16634:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
   16638:	e0ffff17 	ldw	r3,-4(fp)
   1663c:	e0bffc17 	ldw	r2,-16(fp)
   16640:	18bff01e 	bne	r3,r2,16604 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
   16644:	0005883a 	mov	r2,zero
}
   16648:	e037883a 	mov	sp,fp
   1664c:	dfc00117 	ldw	ra,4(sp)
   16650:	df000017 	ldw	fp,0(sp)
   16654:	dec00204 	addi	sp,sp,8
   16658:	f800283a 	ret

0001665c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1665c:	defffb04 	addi	sp,sp,-20
   16660:	dfc00415 	stw	ra,16(sp)
   16664:	df000315 	stw	fp,12(sp)
   16668:	df000304 	addi	fp,sp,12
   1666c:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   16670:	d0a09417 	ldw	r2,-32176(gp)
   16674:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   16678:	00003106 	br	16740 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   1667c:	e0bfff17 	ldw	r2,-4(fp)
   16680:	10800217 	ldw	r2,8(r2)
   16684:	1009883a 	mov	r4,r2
   16688:	0014c000 	call	14c00 <strlen>
   1668c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   16690:	e0bfff17 	ldw	r2,-4(fp)
   16694:	10c00217 	ldw	r3,8(r2)
   16698:	e0bffe17 	ldw	r2,-8(fp)
   1669c:	10bfffc4 	addi	r2,r2,-1
   166a0:	1885883a 	add	r2,r3,r2
   166a4:	10800003 	ldbu	r2,0(r2)
   166a8:	10803fcc 	andi	r2,r2,255
   166ac:	1080201c 	xori	r2,r2,128
   166b0:	10bfe004 	addi	r2,r2,-128
   166b4:	10800bd8 	cmpnei	r2,r2,47
   166b8:	1000031e 	bne	r2,zero,166c8 <alt_find_file+0x6c>
    {
      len -= 1;
   166bc:	e0bffe17 	ldw	r2,-8(fp)
   166c0:	10bfffc4 	addi	r2,r2,-1
   166c4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   166c8:	e0bffe17 	ldw	r2,-8(fp)
   166cc:	e0fffd17 	ldw	r3,-12(fp)
   166d0:	1885883a 	add	r2,r3,r2
   166d4:	10800003 	ldbu	r2,0(r2)
   166d8:	10803fcc 	andi	r2,r2,255
   166dc:	1080201c 	xori	r2,r2,128
   166e0:	10bfe004 	addi	r2,r2,-128
   166e4:	10800be0 	cmpeqi	r2,r2,47
   166e8:	1000081e 	bne	r2,zero,1670c <alt_find_file+0xb0>
   166ec:	e0bffe17 	ldw	r2,-8(fp)
   166f0:	e0fffd17 	ldw	r3,-12(fp)
   166f4:	1885883a 	add	r2,r3,r2
   166f8:	10800003 	ldbu	r2,0(r2)
   166fc:	10803fcc 	andi	r2,r2,255
   16700:	1080201c 	xori	r2,r2,128
   16704:	10bfe004 	addi	r2,r2,-128
   16708:	10000a1e 	bne	r2,zero,16734 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   1670c:	e0bfff17 	ldw	r2,-4(fp)
   16710:	10800217 	ldw	r2,8(r2)
   16714:	e0fffe17 	ldw	r3,-8(fp)
   16718:	180d883a 	mov	r6,r3
   1671c:	e17ffd17 	ldw	r5,-12(fp)
   16720:	1009883a 	mov	r4,r2
   16724:	00168500 	call	16850 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
   16728:	1000021e 	bne	r2,zero,16734 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
   1672c:	e0bfff17 	ldw	r2,-4(fp)
   16730:	00000706 	br	16750 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   16734:	e0bfff17 	ldw	r2,-4(fp)
   16738:	10800017 	ldw	r2,0(r2)
   1673c:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
   16740:	e0ffff17 	ldw	r3,-4(fp)
   16744:	d0a09404 	addi	r2,gp,-32176
   16748:	18bfcc1e 	bne	r3,r2,1667c <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
   1674c:	0005883a 	mov	r2,zero
}
   16750:	e037883a 	mov	sp,fp
   16754:	dfc00117 	ldw	ra,4(sp)
   16758:	df000017 	ldw	fp,0(sp)
   1675c:	dec00204 	addi	sp,sp,8
   16760:	f800283a 	ret

00016764 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   16764:	defffc04 	addi	sp,sp,-16
   16768:	df000315 	stw	fp,12(sp)
   1676c:	df000304 	addi	fp,sp,12
   16770:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   16774:	00bffa04 	movi	r2,-24
   16778:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1677c:	e03fff15 	stw	zero,-4(fp)
   16780:	00001d06 	br	167f8 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   16784:	e0ffff17 	ldw	r3,-4(fp)
   16788:	1805883a 	mov	r2,r3
   1678c:	1085883a 	add	r2,r2,r2
   16790:	10c5883a 	add	r2,r2,r3
   16794:	100490ba 	slli	r2,r2,2
   16798:	00c00074 	movhi	r3,1
   1679c:	10c7883a 	add	r3,r2,r3
   167a0:	189d4517 	ldw	r2,29972(r3)
   167a4:	1000111e 	bne	r2,zero,167ec <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   167a8:	e0ffff17 	ldw	r3,-4(fp)
   167ac:	1805883a 	mov	r2,r3
   167b0:	1085883a 	add	r2,r2,r2
   167b4:	10c5883a 	add	r2,r2,r3
   167b8:	100490ba 	slli	r2,r2,2
   167bc:	e13ffd17 	ldw	r4,-12(fp)
   167c0:	00c00074 	movhi	r3,1
   167c4:	10c7883a 	add	r3,r2,r3
   167c8:	191d4515 	stw	r4,29972(r3)
      if (i > alt_max_fd)
   167cc:	d0e09817 	ldw	r3,-32160(gp)
   167d0:	e0bfff17 	ldw	r2,-4(fp)
   167d4:	1880020e 	bge	r3,r2,167e0 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   167d8:	e0bfff17 	ldw	r2,-4(fp)
   167dc:	d0a09815 	stw	r2,-32160(gp)
      }
      rc = i;
   167e0:	e0bfff17 	ldw	r2,-4(fp)
   167e4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   167e8:	00000706 	br	16808 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
   167ec:	e0bfff17 	ldw	r2,-4(fp)
   167f0:	10800044 	addi	r2,r2,1
   167f4:	e0bfff15 	stw	r2,-4(fp)
   167f8:	e0bfff17 	ldw	r2,-4(fp)
   167fc:	10800810 	cmplti	r2,r2,32
   16800:	103fe01e 	bne	r2,zero,16784 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
   16804:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   16808:	e0bffe17 	ldw	r2,-8(fp)
}
   1680c:	e037883a 	mov	sp,fp
   16810:	df000017 	ldw	fp,0(sp)
   16814:	dec00104 	addi	sp,sp,4
   16818:	f800283a 	ret

0001681c <atexit>:
   1681c:	200b883a 	mov	r5,r4
   16820:	000f883a 	mov	r7,zero
   16824:	000d883a 	mov	r6,zero
   16828:	0009883a 	mov	r4,zero
   1682c:	00168801 	jmpi	16880 <__register_exitproc>

00016830 <exit>:
   16830:	defffe04 	addi	sp,sp,-8
   16834:	000b883a 	mov	r5,zero
   16838:	dc000015 	stw	r16,0(sp)
   1683c:	dfc00115 	stw	ra,4(sp)
   16840:	2021883a 	mov	r16,r4
   16844:	001699c0 	call	1699c <__call_exitprocs>
   16848:	8009883a 	mov	r4,r16
   1684c:	0014d140 	call	14d14 <_exit>

00016850 <memcmp>:
   16850:	0007883a 	mov	r3,zero
   16854:	30c0021e 	bne	r6,r3,16860 <memcmp+0x10>
   16858:	0005883a 	mov	r2,zero
   1685c:	f800283a 	ret
   16860:	20c5883a 	add	r2,r4,r3
   16864:	18c00044 	addi	r3,r3,1
   16868:	28cf883a 	add	r7,r5,r3
   1686c:	10800003 	ldbu	r2,0(r2)
   16870:	39ffffc3 	ldbu	r7,-1(r7)
   16874:	11fff726 	beq	r2,r7,16854 <memcmp+0x4>
   16878:	11c5c83a 	sub	r2,r2,r7
   1687c:	f800283a 	ret

00016880 <__register_exitproc>:
   16880:	00800074 	movhi	r2,1
   16884:	109e3517 	ldw	r2,30932(r2)
   16888:	defff904 	addi	sp,sp,-28
   1688c:	dc000015 	stw	r16,0(sp)
   16890:	14000d17 	ldw	r16,52(r2)
   16894:	dd400515 	stw	r21,20(sp)
   16898:	dd000415 	stw	r20,16(sp)
   1689c:	dcc00315 	stw	r19,12(sp)
   168a0:	dc800215 	stw	r18,8(sp)
   168a4:	dfc00615 	stw	ra,24(sp)
   168a8:	dc400115 	stw	r17,4(sp)
   168ac:	2025883a 	mov	r18,r4
   168b0:	2827883a 	mov	r19,r5
   168b4:	302b883a 	mov	r21,r6
   168b8:	3829883a 	mov	r20,r7
   168bc:	8000081e 	bne	r16,zero,168e0 <__register_exitproc+0x60>
   168c0:	14000e04 	addi	r16,r2,56
   168c4:	00c00034 	movhi	r3,0
   168c8:	14000d15 	stw	r16,52(r2)
   168cc:	18c00004 	addi	r3,r3,0
   168d0:	18000326 	beq	r3,zero,168e0 <__register_exitproc+0x60>
   168d4:	00c00034 	movhi	r3,0
   168d8:	18c00017 	ldw	r3,0(r3)
   168dc:	10c03015 	stw	r3,192(r2)
   168e0:	84400117 	ldw	r17,4(r16)
   168e4:	88800810 	cmplti	r2,r17,32
   168e8:	10000a1e 	bne	r2,zero,16914 <__register_exitproc+0x94>
   168ec:	00bfffc4 	movi	r2,-1
   168f0:	dfc00617 	ldw	ra,24(sp)
   168f4:	dd400517 	ldw	r21,20(sp)
   168f8:	dd000417 	ldw	r20,16(sp)
   168fc:	dcc00317 	ldw	r19,12(sp)
   16900:	dc800217 	ldw	r18,8(sp)
   16904:	dc400117 	ldw	r17,4(sp)
   16908:	dc000017 	ldw	r16,0(sp)
   1690c:	dec00704 	addi	sp,sp,28
   16910:	f800283a 	ret
   16914:	90001926 	beq	r18,zero,1697c <__register_exitproc+0xfc>
   16918:	80802217 	ldw	r2,136(r16)
   1691c:	1000091e 	bne	r2,zero,16944 <__register_exitproc+0xc4>
   16920:	00800074 	movhi	r2,1
   16924:	10914b04 	addi	r2,r2,17708
   16928:	103ff026 	beq	r2,zero,168ec <__register_exitproc+0x6c>
   1692c:	01004204 	movi	r4,264
   16930:	001452c0 	call	1452c <malloc>
   16934:	103fed26 	beq	r2,zero,168ec <__register_exitproc+0x6c>
   16938:	10004015 	stw	zero,256(r2)
   1693c:	10004115 	stw	zero,260(r2)
   16940:	80802215 	stw	r2,136(r16)
   16944:	880890ba 	slli	r4,r17,2
   16948:	00c00044 	movi	r3,1
   1694c:	1c46983a 	sll	r3,r3,r17
   16950:	1109883a 	add	r4,r2,r4
   16954:	25400015 	stw	r21,0(r4)
   16958:	11404017 	ldw	r5,256(r2)
   1695c:	94800098 	cmpnei	r18,r18,2
   16960:	28cab03a 	or	r5,r5,r3
   16964:	11404015 	stw	r5,256(r2)
   16968:	25002015 	stw	r20,128(r4)
   1696c:	9000031e 	bne	r18,zero,1697c <__register_exitproc+0xfc>
   16970:	11004117 	ldw	r4,260(r2)
   16974:	20c6b03a 	or	r3,r4,r3
   16978:	10c04115 	stw	r3,260(r2)
   1697c:	88800044 	addi	r2,r17,1
   16980:	8c400084 	addi	r17,r17,2
   16984:	882290ba 	slli	r17,r17,2
   16988:	80800115 	stw	r2,4(r16)
   1698c:	0005883a 	mov	r2,zero
   16990:	8461883a 	add	r16,r16,r17
   16994:	84c00015 	stw	r19,0(r16)
   16998:	003fd506 	br	168f0 <__register_exitproc+0x70>

0001699c <__call_exitprocs>:
   1699c:	defff604 	addi	sp,sp,-40
   169a0:	00800074 	movhi	r2,1
   169a4:	dd800615 	stw	r22,24(sp)
   169a8:	159e3517 	ldw	r22,30932(r2)
   169ac:	dd400515 	stw	r21,20(sp)
   169b0:	dd000415 	stw	r20,16(sp)
   169b4:	dfc00915 	stw	ra,36(sp)
   169b8:	df000815 	stw	fp,32(sp)
   169bc:	ddc00715 	stw	r23,28(sp)
   169c0:	dcc00315 	stw	r19,12(sp)
   169c4:	dc800215 	stw	r18,8(sp)
   169c8:	dc400115 	stw	r17,4(sp)
   169cc:	dc000015 	stw	r16,0(sp)
   169d0:	202b883a 	mov	r21,r4
   169d4:	2829883a 	mov	r20,r5
   169d8:	b4400d17 	ldw	r17,52(r22)
   169dc:	88000726 	beq	r17,zero,169fc <__call_exitprocs+0x60>
   169e0:	8c000117 	ldw	r16,4(r17)
   169e4:	8cc02217 	ldw	r19,136(r17)
   169e8:	84bfffc4 	addi	r18,r16,-1
   169ec:	802090ba 	slli	r16,r16,2
   169f0:	9c2f883a 	add	r23,r19,r16
   169f4:	8c21883a 	add	r16,r17,r16
   169f8:	90000c0e 	bge	r18,zero,16a2c <__call_exitprocs+0x90>
   169fc:	dfc00917 	ldw	ra,36(sp)
   16a00:	df000817 	ldw	fp,32(sp)
   16a04:	ddc00717 	ldw	r23,28(sp)
   16a08:	dd800617 	ldw	r22,24(sp)
   16a0c:	dd400517 	ldw	r21,20(sp)
   16a10:	dd000417 	ldw	r20,16(sp)
   16a14:	dcc00317 	ldw	r19,12(sp)
   16a18:	dc800217 	ldw	r18,8(sp)
   16a1c:	dc400117 	ldw	r17,4(sp)
   16a20:	dc000017 	ldw	r16,0(sp)
   16a24:	dec00a04 	addi	sp,sp,40
   16a28:	f800283a 	ret
   16a2c:	a0000726 	beq	r20,zero,16a4c <__call_exitprocs+0xb0>
   16a30:	9800041e 	bne	r19,zero,16a44 <__call_exitprocs+0xa8>
   16a34:	94bfffc4 	addi	r18,r18,-1
   16a38:	bdffff04 	addi	r23,r23,-4
   16a3c:	843fff04 	addi	r16,r16,-4
   16a40:	003fed06 	br	169f8 <__call_exitprocs+0x5c>
   16a44:	b8c01f17 	ldw	r3,124(r23)
   16a48:	1d3ffa1e 	bne	r3,r20,16a34 <__call_exitprocs+0x98>
   16a4c:	89000117 	ldw	r4,4(r17)
   16a50:	80c00117 	ldw	r3,4(r16)
   16a54:	213fffc4 	addi	r4,r4,-1
   16a58:	24800f1e 	bne	r4,r18,16a98 <__call_exitprocs+0xfc>
   16a5c:	8c800115 	stw	r18,4(r17)
   16a60:	183ff426 	beq	r3,zero,16a34 <__call_exitprocs+0x98>
   16a64:	8f000117 	ldw	fp,4(r17)
   16a68:	98000526 	beq	r19,zero,16a80 <__call_exitprocs+0xe4>
   16a6c:	00800044 	movi	r2,1
   16a70:	148c983a 	sll	r6,r2,r18
   16a74:	99004017 	ldw	r4,256(r19)
   16a78:	3108703a 	and	r4,r6,r4
   16a7c:	2000081e 	bne	r4,zero,16aa0 <__call_exitprocs+0x104>
   16a80:	183ee83a 	callr	r3
   16a84:	89000117 	ldw	r4,4(r17)
   16a88:	b0c00d17 	ldw	r3,52(r22)
   16a8c:	273fd21e 	bne	r4,fp,169d8 <__call_exitprocs+0x3c>
   16a90:	88ffe826 	beq	r17,r3,16a34 <__call_exitprocs+0x98>
   16a94:	003fd006 	br	169d8 <__call_exitprocs+0x3c>
   16a98:	80000115 	stw	zero,4(r16)
   16a9c:	003ff006 	br	16a60 <__call_exitprocs+0xc4>
   16aa0:	99404117 	ldw	r5,260(r19)
   16aa4:	b93fff17 	ldw	r4,-4(r23)
   16aa8:	314c703a 	and	r6,r6,r5
   16aac:	3000041e 	bne	r6,zero,16ac0 <__call_exitprocs+0x124>
   16ab0:	200b883a 	mov	r5,r4
   16ab4:	a809883a 	mov	r4,r21
   16ab8:	183ee83a 	callr	r3
   16abc:	003ff106 	br	16a84 <__call_exitprocs+0xe8>
   16ac0:	183ee83a 	callr	r3
   16ac4:	003fef06 	br	16a84 <__call_exitprocs+0xe8>
   16ac8:	0001ffff 	0x1ffff
   16acc:	0201ffff 	0x201ffff
   16ad0:	ffff0000 	call	ffff000 <_gp+0xffdf96c>
   16ad4:	00000201 	jmpi	20 <__alt_mem_onchip_mem-0xffe0>
   16ad8:	0201ffff 	0x201ffff
   16adc:	883a0000 	call	883a000 <_gp+0x881a96c>
   16ae0:	010d00ff 	0x10d00ff
   16ae4:	01010002 	0x1010002
	...
   16af0:	010d00ff 	0x10d00ff
   16af4:	01010004 	movi	r4,1024
   16af8:	00000100 	call	10 <__alt_mem_onchip_mem-0xfff0>
   16afc:	00000000 	call	0 <__alt_mem_onchip_mem-0x10000>
   16b00:	011100ff 	0x11100ff
   16b04:	01010004 	movi	r4,1024
   16b08:	7f000105 	stb	fp,4(r15)
   16b0c:	007d0000 	call	7d000 <_gp+0x5d96c>
   16b10:	00000000 	call	0 <__alt_mem_onchip_mem-0x10000>
   16b14:	01883a00 	call	1883a0 <_gp+0x168d0c>
   16b18:	0001056c 	andhi	zero,zero,1045
   16b1c:	00011414 	movui	zero,1104
   16b20:	00013734 	movhi	zero,1244
   16b24:	00011444 	movi	zero,1105
