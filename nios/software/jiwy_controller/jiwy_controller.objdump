
jiwy_controller.elf:     file format elf32-littlenios2
jiwy_controller.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010224

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00006ce4 memsz 0x00006ce4 flags r-x
    LOAD off    0x00007d04 vaddr 0x00016d04 paddr 0x00017258 align 2**12
         filesz 0x00000554 memsz 0x00000554 flags rw-
    LOAD off    0x000087ac vaddr 0x000177ac paddr 0x000177ac align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006254  00010224  00010224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000088c  00016478  00016478  00007478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000554  00016d04  00017258  00007d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  000177ac  000177ac  000087ac  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00017908  00017908  00008258  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00008258  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000f90  00000000  00000000  00008288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   0001f7bc  00000000  00000000  00009218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000b92c  00000000  00000000  000289d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   0000e6ee  00000000  00000000  00034300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00002730  00000000  00000000  000429f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00008f47  00000000  00000000  00045120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000070a7  00000000  00000000  0004e067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000010  00000000  00000000  00055110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001580  00000000  00000000  00055120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  0005d34f  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0005d352  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0005d355  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0005d356  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0005d357  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0005d35b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0005d35f  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0005d363  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0005d36c  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0005d375  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000013  00000000  00000000  0005d37e  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002a  00000000  00000000  0005d391  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010224 l    d  .text	00000000 .text
00016478 l    d  .rodata	00000000 .rodata
00016d04 l    d  .rwdata	00000000 .rwdata
000177ac l    d  .bss	00000000 .bss
00017908 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/Users/gteho/Repositories/EMSYS-LAB/nios/software/jiwy_controller_bsp//obj/HAL/src/crt0.o
0001025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.cpp
00016fe8 l     O .rwdata	00000001 _ZStL19piecewise_construct
00016fe9 l     O .rwdata	00000001 _ZStL13allocator_arg
00016fea l     O .rwdata	00000001 _ZStL6ignore
00016feb l     O .rwdata	00000001 _ZN6SerialL12MESSAGE_SIZEE
00000000 l    df *ABS*	00000000 uart.cpp
00016ff4 l     O .rwdata	00000001 _ZStL19piecewise_construct
00016ff5 l     O .rwdata	00000001 _ZStL13allocator_arg
00016ff6 l     O .rwdata	00000001 _ZStL6ignore
00016ff7 l     O .rwdata	00000001 _ZN6SerialL12MESSAGE_SIZEE
00010ffc l     F .text	00000074 _Z41__static_initialization_and_destruction_0ii
00011070 l     F .text	00000030 _GLOBAL__sub_I__ZN6Serial4UART10uart_readyE
000110a0 l     F .text	00000030 _GLOBAL__sub_D__ZN6Serial4UART10uart_readyE
00000000 l    df *ABS*	00000000 eh_personality.cc
00011688 l     F .text	00000090 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv
00011718 l     F .text	000001e8 _ZL28read_encoded_value_with_basehjPKhPj
00011900 l     F .text	00000070 _ZL21base_of_encoded_valuehP15_Unwind_Context
00011970 l     F .text	0000012c _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
00011a9c l     F .text	00000110 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
00012520 l     F .text	00000068 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 function_type_info.cc
00000000 l    df *ABS*	00000000 pointer_type_info.cc
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 functional.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 del_ops.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
00012e6c l     F .text	000000cc _ZN12_GLOBAL__N_14pool4freeEPv.constprop.0
000177f8 l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
00012f38 l     F .text	00000090 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.0
000130e8 l     F .text	00000064 _GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
000177b4 l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 fundamental_type_info.cc
00000000 l    df *ABS*	00000000 pbase_type_info.cc
00017220 l     O .rwdata	00000008 _ZZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvjE3pmf
0001721c l     O .rwdata	00000004 _ZZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvjE2pm
00000000 l    df *ABS*	00000000 pmem_type_info.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 eh_aux_runtime.cc
00000000 l    df *ABS*	00000000 bad_array_new.cc
00000000 l    df *ABS*	00000000 bad_cast.cc
00000000 l    df *ABS*	00000000 bad_typeid.cc
00000000 l    df *ABS*	00000000 bad_alloc.cc
00000000 l    df *ABS*	00000000 unwind-sjlj.c
000139a4 l     F .text	00000114 _Unwind_ForcedUnwind_Phase2
000177bc l     O .bss	00000004 fc_static
00013ab8 l     F .text	000000d8 _Unwind_RaiseException_Phase2
00013b90 l     F .text	0000002c uw_install_context.constprop.0.isra.0
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00016d04 l     O .rwdata	000000e4 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_kill.c
00014958 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00014ac0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00017234 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00014d28 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00014e68 l     F .text	00000034 alt_dev_reg
00016de8 l     O .rwdata	0000002c jtag_uart
00016e14 l     O .rwdata	0000002c uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00015174 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00015334 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00015434 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_close.c
00015550 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00015688 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000156b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00015918 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00015a68 l     F .text	0000003c alt_get_errno
00015aa4 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000177dc g     O .bss	00000004 alt_instruction_exception_handler
00013050 g     F .text	00000028 __cxa_free_exception
00012ae0 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
00016a60  w    O .rodata	00000010 _ZTIPKDs
000124ac g     F .text	00000014 _ZSt10unexpectedv
00010de4 g     F .text	000000dc _ZN6Serial4UART10uart_0_isrEPv
00017204  w    O .rwdata	00000008 _ZTIw
000171e4  w    O .rwdata	00000008 _ZTIc
00014bac g     F .text	0000007c alt_main
00014180 g     F .text	00000080 _puts_r
00017808 g     O .bss	00000100 alt_irq
00013384 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
000171dc  w    O .rwdata	00000008 _ZTIa
0001126c  w    F .text	00000140 _ZNSt8functionIFvRN6Serial10rx_messageEEEC1ERKS4_
00013c3c g     F .text	00000020 .hidden _Unwind_GetIPInfo
00017258 g       *ABS*	00000000 __flash_rwdata_start
000168f0  w    O .rodata	00000010 _ZTIPy
00017080  w    O .rwdata	00000002 _ZTSa
00010a98  w    F .text	00000024 _ZSt7forwardIRN6Serial10rx_messageEEOT_RNSt16remove_referenceIS3_E4typeE
00016654  w    O .rodata	00000014 _ZTVSt17bad_function_call
0001264c g     F .text	00000084 __cxa_rethrow
00013bd4 g     F .text	00000010 .hidden _Unwind_SjLj_Unregister
000124f0 g     F .text	00000024 _ZSt14set_unexpectedPFvvE
00016980  w    O .rodata	00000010 _ZTIPKi
00013c2c g     F .text	00000010 .hidden _Unwind_GetIP
00017908 g       *ABS*	00000000 __alt_heap_start
000170c0  w    O .rwdata	00000003 _ZTSPj
0001145c  w    F .text	00000038 _ZNKSt8functionIFvRN6Serial10rx_messageEEEcvbEv
000144c0 g     F .text	0000004c _kill_r
00010cc4  w    F .text	00000058 _ZSt13__invoke_implIvRPFvRN6Serial10rx_messageEEJS2_EET_St14__invoke_otherOT0_DpOT1_
0001395c g     F .text	00000010 _ZNSt9bad_allocD2Ev
000142b4 g     F .text	00000078 _signal_r
000170e4  w    O .rwdata	00000003 _ZTSPx
000171ec  w    O .rwdata	00000008 _ZTIDi
00017144  w    O .rwdata	00000005 _ZTSPKDd
000170d8  w    O .rwdata	00000003 _ZTSPm
0001060c  w    F .text	0000006c _ZN6Serial10rx_message13getSecondWordEv
000130bc g     F .text	0000002c __cxa_free_dependent_exception
00012814 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
0001658c  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
00014c4c g     F .text	00000024 __malloc_unlock
0001704c  w    O .rwdata	00000005 _ZTSPKDu
00016b90  w    O .rodata	00000024 _ZTVN10__cxxabiv129__pointer_to_member_type_infoE
00013384 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
00013318 g     F .text	00000020 _ZSt18uncaught_exceptionv
00010348 g     F .text	0000008c _Z17handleUartMessageRN6Serial10rx_messageE
000137ac g     F .text	0000000c __cxa_deleted_virtual
00016870  w    O .rodata	00000010 _ZTIPDn
00011238  w    F .text	00000034 _ZNSt5arrayIhLj4EE3endEv
000170bc  w    O .rwdata	00000002 _ZTSj
00013354 g     F .text	00000004 _ZNSt9exceptionD2Ev
000177ac g     O .bss	00000002 frequency
00016538  w    O .rodata	00000024 _ZTSN10__cxxabiv119__pointer_type_infoE
00012728 g     F .text	00000010 _ZN10__cxxabiv119__pointer_type_infoD1Ev
00016c28  w    O .rodata	0000000c _ZTISt8bad_cast
00016770  w    O .rodata	00000014 _ZTVSt13bad_exception
00015efc g     F .text	00000024 altera_nios2_gen2_irq_init
000106ec  w    F .text	00000150 _ZNSt8functionIFvRN6Serial10rx_messageEEEC2IPS3_vvEET_
00017068  w    O .rwdata	00000004 _ZTSPDi
00013860 g     F .text	00000010 _ZNSt20bad_array_new_lengthD1Ev
0001702c  w    O .rwdata	00000002 _ZTSb
000106b0  w    F .text	0000003c _ZNSt5arrayIhLj4EEixEj
00010000 g     F .entry	0000000c __reset
0001707c  w    O .rwdata	00000004 _ZTSPKc
00013c78 g     F .text	00000008 .hidden _Unwind_GetRegionStart
000170f4  w    O .rwdata	00000004 _ZTSPKy
00017034  w    O .rwdata	00000004 _ZTSPKb
00011494  w    F .text	00000024 _ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_
00010020 g       *ABS*	00000000 __flash_exceptions_start
000169a0  w    O .rodata	00000010 _ZTIPKt
00017084  w    O .rwdata	00000003 _ZTSPa
000177c8 g     O .bss	00000004 errno
000177af g     O .bss	00000004 _ZN6Serial4UART7rx_dataE
00017028  w    O .rwdata	00000004 _ZTSPKv
00013e40 g     F .text	00000088 .hidden _Unwind_Backtrace
00016ac0  w    O .rodata	00000010 _ZTIPKb
000177d4 g     O .bss	00000004 alt_argv
0001efe8 g       *ABS*	00000000 _gp
00013918 g     F .text	00000038 _ZNSt10bad_typeidD0Ev
000133bc g     F .text	00000010 _ZN10__cxxabiv123__fundamental_type_infoD1Ev
000138c4 g     F .text	00000038 _ZNSt8bad_castD0Ev
000146a0 g     F .text	00000020 getpid
00012244 g     F .text	0000017c __cxa_call_unexpected
00010d1c  w    F .text	00000060 _ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE
000131a4 g     F .text	00000008 __cxa_get_exception_ptr
000170d0  w    O .rwdata	00000004 _ZTSPKl
00016e68 g     O .rwdata	00000180 alt_fd_list
0001342c g     F .text	00000038 _ZN10__cxxabiv117__pbase_type_infoD0Ev
00016950  w    O .rodata	00000010 _ZTIPl
00013d60 g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
00013bfc g     F .text	00000018 .hidden _Unwind_GetCFA
000171c4  w    O .rwdata	00000008 _ZTIt
000124c0 g     F .text	00000024 _ZSt13set_terminatePFvvE
00015f20 g     F .text	00000090 alt_find_dev
00017024  w    O .rwdata	00000003 _ZTSPv
00013078 g     F .text	00000044 __cxa_allocate_dependent_exception
000177e8 g     O .bss	00000010 _ZN6Serial4UART8callbackE
00010c7c  w    F .text	00000024 _ZSt11__addressofIKPFvRN6Serial10rx_messageEEEPT_RS6_
00012c38 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
000159ec g     F .text	0000007c alt_io_redirect
00016478 g       *ABS*	00000000 __DTOR_END__
00010908  w    F .text	00000058 _ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E9_M_invokeERKSt9_Any_dataS2_
00016b54  w    O .rodata	0000002e _ZTSN10__cxxabiv129__pointer_to_member_type_infoE
00016af0  w    O .rodata	00000010 _ZTIPv
00012c50 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
00014200 g     F .text	00000010 puts
0001720c  w    O .rwdata	00000008 _ZTIb
00016b24  w    O .rodata	0000000c _ZTIN10__cxxabiv117__pbase_type_infoE
00015880 g     F .text	00000098 alt_exception_cause_generated_bad_addr
0001706c  w    O .rwdata	00000005 _ZTSPKDi
00016940  w    O .rodata	00000010 _ZTIPKl
00012738 g     F .text	00000038 _ZN10__cxxabiv119__pointer_type_infoD0Ev
00013860 g     F .text	00000010 _ZNSt20bad_array_new_lengthD2Ev
00014ff4 g     F .text	000000ec altera_avalon_jtag_uart_read
00013ee0 g     F .text	00000010 malloc
00016bd0  w    O .rodata	00000019 _ZTSSt20bad_array_new_length
000110d0  w    F .text	0000002c _ZNKSt14_Function_base8_M_emptyEv
0001432c g     F .text	000000b4 _raise_r
00016860  w    O .rodata	00000010 _ZTIPKDn
000170a8  w    O .rwdata	00000003 _ZTSPt
00010ec0 g     F .text	00000090 _ZN6Serial4UARTC1ESt8functionIFvRNS_10rx_messageEEE
000133cc g     F .text	00000038 _ZN10__cxxabiv123__fundamental_type_infoD0Ev
0001450c g     F .text	00000004 _getpid_r
00013338 g     F .text	0000001c _ZSt19uncaught_exceptionsv
00012fc8 g     F .text	00000030 _ZN9__gnu_cxx9__freeresEv
00017164  w    O .rwdata	00000008 _ZTIDd
00012d04 g     F .text	0000009c _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
0001710c  w    O .rwdata	00000004 _ZTSPKd
000143e0 g     F .text	000000a0 __sigtramp_r
00014210 g     F .text	00000048 _sbrk_r
0001335c g     F .text	0000000c _ZGTtNKSt9exception4whatEv
000165fc  w    O .rodata	00000020 _ZTVSt9type_info
0001341c g     F .text	00000010 _ZN10__cxxabiv117__pbase_type_infoD1Ev
0001335c g     F .text	0000000c _ZNKSt9exception4whatEv
000170dc  w    O .rwdata	00000004 _ZTSPKm
00017248 g     O .rwdata	00000004 alt_max_fd
00016a50  w    O .rodata	00000010 _ZTIPDi
00016ca8  w    O .rodata	0000000c _ZTISt9bad_alloc
000168d0  w    O .rodata	00000010 _ZTIPf
00016568  w    O .rodata	00000024 _ZTVN10__cxxabiv119__pointer_type_infoE
00016830  w    O .rodata	00000010 _ZTIPDd
00016648  w    O .rodata	0000000c _ZTISt17bad_function_call
000165c0  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
000138b4 g     F .text	00000010 _ZNSt8bad_castD1Ev
00012c98 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
00012e64 g     F .text	00000004 _ZdlPv
00017228 g     O .rwdata	00000004 _global_impure_ptr
00017908 g       *ABS*	00000000 __bss_end
000170f0  w    O .rwdata	00000003 _ZTSPy
00017044  w    O .rwdata	00000003 _ZTSDu
00014870 g     F .text	000000e8 alt_iic_isr_register
000170b8  w    O .rwdata	00000004 _ZTSPKi
00016ad0  w    O .rodata	00000010 _ZTIPb
00015df4 g     F .text	00000108 alt_tick
00013bbc g     F .text	00000018 .hidden _Unwind_SjLj_Register
00011428  w    F .text	00000034 _ZNSt5arrayIhLj4EE4dataEv
00011544  w    F .text	00000024 _ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_
00013ec8 g     F .text	00000018 abort
00017194  w    O .rwdata	00000008 _ZTIy
00016800  w    O .rodata	00000010 _ZTIPKDe
00013264 g     F .text	000000b4 __cxa_end_catch
00014824 g     F .text	0000004c alt_ic_irq_enabled
00013358 g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
000168c0  w    O .rodata	00000010 _ZTIPKf
00015d50 g     F .text	000000a4 alt_alarm_stop
00010530  w    F .text	00000024 _ZNKSt9_Any_data9_M_accessEv
000168b0  w    O .rodata	00000010 _ZTIPd
000177cc g     O .bss	00000004 alt_irq_active
00012488 g     F .text	00000014 _ZSt9terminatev
00017098  w    O .rwdata	00000002 _ZTSs
00017120  w    O .rwdata	00000004 _ZTSPDn
00010000 g       *ABS*	00000000 __alt_mem_onchip_mem
00016b30  w    O .rodata	00000024 _ZTVN10__cxxabiv117__pbase_type_infoE
000100fc g     F .exceptions	000000c8 alt_irq_handler
00010580  w    F .text	0000008c _ZNSt14_Function_baseD2Ev
00016e40 g     O .rwdata	00000028 alt_dev_null
000170b4  w    O .rwdata	00000003 _ZTSPi
00013390 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
000170fc  w    O .rwdata	00000003 _ZTSPf
00016aa0  w    O .rodata	00000010 _ZTIPKw
00017108  w    O .rwdata	00000003 _ZTSPd
00017130  w    O .rwdata	00000004 _ZTSPDf
00016668  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
00015668 g     F .text	00000020 alt_dcache_flush_all
0001719c  w    O .rwdata	00000008 _ZTIx
0001703c  w    O .rwdata	00000003 _ZTSPw
00017004  w    O .rwdata	00000008 _ZTISt9exception
0001713c  w    O .rwdata	00000003 _ZTSDd
00017134  w    O .rwdata	00000005 _ZTSPKDf
000170d4  w    O .rwdata	00000002 _ZTSm
00017258 g       *ABS*	00000000 __ram_rwdata_end
00016990  w    O .rodata	00000010 _ZTIPi
00012adc g     F .text	00000004 _ZNSt9type_infoD1Ev
00017240 g     O .rwdata	00000008 alt_dev_list
00013390 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
00014d64 g     F .text	00000104 write
000126e8 g     F .text	00000038 _ZN10__cxxabiv120__function_type_infoD0Ev
00017058  w    O .rwdata	00000004 _ZTSPDs
00012af0 g     F .text	00000008 _ZNSt9type_infoD0Ev
00016d04 g       *ABS*	00000000 __ram_rodata_end
00012e68 g     F .text	00000004 _ZdlPvj
0001718c  w    O .rwdata	00000008 _ZTIf
00014994 g     F .text	0000012c kill
000170cc  w    O .rwdata	00000003 _ZTSPl
000109f8  w    F .text	00000060 _ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE
000126d0 g     F .text	00000008 _ZNK10__cxxabiv120__function_type_info15__is_function_pEv
0001705c  w    O .rwdata	00000005 _ZTSPKDs
000169d0  w    O .rodata	00000010 _ZTIPs
000104e4  w    F .text	00000028 _ZnwjPv
00012ae8 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
00017054  w    O .rwdata	00000003 _ZTSDs
000170e8  w    O .rwdata	00000004 _ZTSPKx
00012588 g     F .text	00000064 __cxa_init_primary_exception
000124e4 g     F .text	0000000c _ZSt13get_terminatev
00017908 g       *ABS*	00000000 end
0001712c  w    O .rwdata	00000003 _ZTSDf
00012b48 g     F .text	00000010 _ZNSt17bad_function_callD2Ev
00017074  w    O .rwdata	00000002 _ZTSc
00010abc  w    F .text	00000064 _ZSt10__invoke_rIvRPFvRN6Serial10rx_messageEEJS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_
00015470 g     F .text	000000e0 altera_avalon_uart_write
00013e28 g     F .text	00000018 .hidden _Unwind_DeleteException
000170c4  w    O .rwdata	00000004 _ZTSPKj
000101c4 g     F .exceptions	00000060 alt_instruction_exception_entry
00012da0 g     F .text	000000c4 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
00016469 g       *ABS*	00000000 __CTOR_LIST__
0001a000 g       *ABS*	00000000 __alt_stack_pointer
00016930  w    O .rodata	00000010 _ZTIPm
000151f0 g     F .text	00000084 alt_avalon_timer_sc_init
000152d4 g     F .text	00000060 altera_avalon_uart_write_fd
00012bc0 g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
000150e0 g     F .text	00000094 altera_avalon_jtag_uart_write
00010678  w    F .text	00000038 _ZNSt8functionIFvRN6Serial10rx_messageEEED1Ev
000166f8  w    O .rodata	00000012 _ZTSSt13bad_exception
000106ec  w    F .text	00000150 _ZNSt8functionIFvRN6Serial10rx_messageEEEC1IPS3_vvEET_
0001708c  w    O .rwdata	00000002 _ZTSh
00013854 g     F .text	0000000c _ZNKSt20bad_array_new_length4whatEv
00013f20 g     F .text	00000100 _free_r
000138a8 g     F .text	0000000c _ZNKSt8bad_cast4whatEv
00010894  w    F .text	00000024 _ZSt4moveIRPFvRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOS7_
000162f0 g     F .text	0000012c __call_exitprocs
00010d7c  w    F .text	00000038 _ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE
00010224 g     F .text	0000003c _start
000177e0 g     O .bss	00000004 _alt_tick_rate
000165ec  w    O .rodata	0000000d _ZTSSt9type_info
0001341c g     F .text	00000010 _ZN10__cxxabiv117__pbase_type_infoD2Ev
00013950 g     F .text	0000000c _ZNKSt9bad_alloc4whatEv
000137a0 g     F .text	0000000c __cxa_pure_virtual
00016cb4  w    O .rodata	00000014 _ZTVSt9bad_alloc
000177e4 g     O .bss	00000004 _alt_nticks
00014490 g     F .text	00000014 signal
00014ed8 g     F .text	0000005c alt_sys_init
00017030  w    O .rwdata	00000003 _ZTSPb
000171f4  w    O .rwdata	00000008 _ZTIDs
000169f0  w    O .rodata	00000010 _ZTIPh
00016ab0  w    O .rodata	00000010 _ZTIPw
00016c68  w    O .rodata	0000000c _ZTISt10bad_typeid
000161d4 g     F .text	0000011c __register_exitproc
00016c98  w    O .rodata	0000000d _ZTSSt9bad_alloc
00016bf8  w    O .rodata	00000014 _ZTVSt20bad_array_new_length
00013368 g     F .text	0000000c _ZGTtNKSt13bad_exception4whatEv
0001285c g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
00010b80  w    F .text	000000cc _ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation
000171d4  w    O .rwdata	00000008 _ZTIh
00016900  w    O .rodata	00000010 _ZTIPKx
000111ac  w    F .text	0000005c _ZNSt8functionIFvRN6Serial10rx_messageEEEaSERKS4_
00016d04 g       *ABS*	00000000 __ram_rwdata_start
00013c98 g     F .text	000000c8 .hidden _Unwind_SjLj_RaiseException
00016478 g       *ABS*	00000000 __ram_rodata_start
00013da4 g     F .text	00000044 .hidden _Unwind_SjLj_Resume
00010554  w    F .text	0000002c _ZNSt14_Function_baseC1Ev
00016798  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
000171b4  w    O .rwdata	00000008 _ZTIj
00013870 g     F .text	00000038 _ZNSt20bad_array_new_lengthD0Ev
00017184  w    O .rwdata	00000008 _ZTId
00013820 g     F .text	00000034 __cxa_throw_bad_array_new_length
00012adc g     F .text	00000004 _ZNSt9type_infoD2Ev
000113ac  w    F .text	0000007c _ZNSt8functionIFvRN6Serial10rx_messageEEE4swapERS4_
0001711c  w    O .rwdata	00000003 _ZTSDn
00013394 g     F .text	00000008 _ZN10__cxxabiv119__foreign_exceptionD0Ev
000136c0 g     F .text	00000010 _ZN10__cxxabiv129__pointer_to_member_type_infoD2Ev
00012a58 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
00016960  w    O .rodata	00000010 _ZTIPKj
00012720 g     F .text	00000008 _ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv
000167d4  w    O .rodata	0000000c _ZTIN10__cxxabiv123__fundamental_type_infoE
00014f34 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000160b8 g     F .text	000000b8 alt_get_fd
00010b50  w    F .text	00000030 _ZNSt9_Any_data9_M_accessIPPFvRN6Serial10rx_messageEEEERT_v
00010a58  w    F .text	00000040 _ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE14_M_get_pointerERKSt9_Any_data
00017124  w    O .rwdata	00000005 _ZTSPKDn
00017014  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
0001650c  w    O .rodata	0000000c _ZTIN10__cxxabiv120__function_type_infoE
00017100  w    O .rwdata	00000004 _ZTSPKf
00017088  w    O .rwdata	00000004 _ZTSPKa
000161a4 g     F .text	00000030 memcmp
00017908 g       *ABS*	00000000 __alt_stack_base
0001396c g     F .text	00000038 _ZNSt9bad_allocD0Ev
00012814 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
000133bc g     F .text	00000010 _ZN10__cxxabiv123__fundamental_type_infoD2Ev
00017048  w    O .rwdata	00000004 _ZTSPDu
00013de8 g     F .text	00000040 .hidden _Unwind_SjLj_Resume_or_Rethrow
00016c1c  w    O .rodata	0000000c _ZTSSt8bad_cast
00012ae0 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
00012728 g     F .text	00000010 _ZN10__cxxabiv119__pointer_type_infoD2Ev
00016fec  w    O .rwdata	00000008 _ZTIFvRN6Serial10rx_messageEE
000114b8  w    F .text	0000008c _ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_
00010c4c  w    F .text	00000030 _ZNKSt9_Any_data9_M_accessIPFvRN6Serial10rx_messageEEEERKT_v
0001675c  w    O .rodata	00000014 _ZTVSt9exception
00013388 g     F .text	00000008 _ZN10__cxxabiv115__forced_unwindD0Ev
00015fb0 g     F .text	00000108 alt_find_file
000156f0 g     F .text	000000a8 alt_dev_llist_insert
00014c28 g     F .text	00000024 __malloc_lock
00010678  w    F .text	00000038 _ZNSt8functionIFvRN6Serial10rx_messageEEED2Ev
00014c70 g     F .text	000000b8 sbrk
000136d0 g     F .text	00000038 _ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev
00016698  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
000125ec g     F .text	00000060 __cxa_throw
00013c5c g     F .text	00000010 .hidden _Unwind_SetIP
000164ac  w    O .rodata	0000001b _ZTSPFvRN6Serial10rx_messageEE
00016850  w    O .rodata	00000010 _ZTIPDf
000171bc  w    O .rwdata	00000008 _ZTIi
000168e0  w    O .rodata	00000010 _ZTIPKy
00014570 g     F .text	000000a8 __sfvwrite_small_dev
00016a90  w    O .rodata	00000010 _ZTIPDu
000115f8  w    F .text	0000006c _ZSt4swapIPFvRKSt9_Any_dataRN6Serial10rx_messageEEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_
000177ac g       *ABS*	00000000 __bss_start
00013f00 g     F .text	00000020 memset
000103d4 g     F .text	00000110 main
00017110  w    O .rwdata	00000002 _ZTSe
000177ae g     O .bss	00000001 _ZN6Serial4UART10uart_readyE
000177d8 g     O .bss	00000004 alt_envp
00016c74  w    O .rodata	00000014 _ZTVSt10bad_typeid
00014f94 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0001717c  w    O .rwdata	00000008 _ZTIe
0001339c g     F .text	00000004 _ZGTtNKSt9exceptionD1Ev
000133a4 g     F .text	0000000c __cxa_get_globals_fast
000164c8  w    O .rodata	0000001a _ZTSFvRN6Serial10rx_messageEE
00012b8c g     F .text	00000034 _ZSt25__throw_bad_function_callv
00016c34  w    O .rodata	00000014 _ZTVSt8bad_cast
0001a000 g       *ABS*	00000000 __alt_heap_limit
000170f8  w    O .rwdata	00000002 _ZTSf
000138fc g     F .text	0000000c _ZNKSt10bad_typeid4whatEv
00016a20  w    O .rodata	00000010 _ZTIPKc
00014020 g     F .text	00000160 _malloc_r
00012b3c g     F .text	0000000c _ZNKSt17bad_function_call4whatEv
00016920  w    O .rodata	00000010 _ZTIPKm
00013368 g     F .text	0000000c _ZNKSt13bad_exception4whatEv
0001724c g     O .rwdata	00000004 alt_errno
000144a4 g     F .text	0000000c _init_signal
0001668c  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
00016a40  w    O .rodata	00000010 _ZTIPKDi
00013358 g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
00016bec  w    O .rodata	0000000c _ZTISt20bad_array_new_length
000136c0 g     F .text	00000010 _ZN10__cxxabiv129__pointer_to_member_type_infoD1Ev
00016880  w    O .rodata	00000010 _ZTIPKe
00016474 g       *ABS*	00000000 __CTOR_END__
00010580  w    F .text	0000008c _ZNSt14_Function_baseD1Ev
00017064  w    O .rwdata	00000003 _ZTSDi
000177b3 g     O .bss	00000001 _ZN6Serial4UART6rx_lenE
00014510 g     F .text	00000044 strcmp
000169c0  w    O .rodata	00000010 _ZTIPKs
00016a30  w    O .rodata	00000010 _ZTIPc
00017174  w    O .rwdata	00000008 _ZTIDn
00016478 g       *ABS*	00000000 __flash_rodata_start
00016784  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
00016474 g       *ABS*	00000000 __DTOR_LIST__
0001716c  w    O .rwdata	00000008 _ZTIDf
000138b4 g     F .text	00000010 _ZNSt8bad_castD2Ev
00017114  w    O .rwdata	00000003 _ZTSPe
00017038  w    O .rwdata	00000002 _ZTSw
00014e9c g     F .text	0000003c alt_irq_init
00017078  w    O .rwdata	00000003 _ZTSPc
00015ce0 g     F .text	00000070 alt_release_fd
00012824 g     F .text	00000038 _ZN10__cxxabiv120__si_class_type_infoD0Ev
00013464 g     F .text	0000025c _ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj
000110fc  w    F .text	00000038 _ZNSt8functionIFvRN6Serial10rx_messageEEEC1Ev
00016840  w    O .rodata	00000010 _ZTIPKDf
00017154  w    O .rwdata	00000005 _ZTSPKDe
0001126c  w    F .text	00000140 _ZNSt8functionIFvRN6Serial10rx_messageEEEC2ERKS4_
0001086c  w    F .text	00000028 _ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE21_M_not_empty_functionIS4_EEbPT_
00016170 g     F .text	00000014 atexit
00014618 g     F .text	00000050 _write_r
000137b8 g     F .text	00000034 __cxa_bad_cast
00013c90 g     F .text	00000008 .hidden _Unwind_GetTextRelBase
0001314c g     F .text	00000058 __cxa_call_terminate
000171a4  w    O .rwdata	00000008 _ZTIm
000115d4  w    F .text	00000024 _ZSt4moveIRPFvRKSt9_Any_dataRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOSA_
0001722c g     O .rwdata	00000004 _impure_ptr
0001700c  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
00016518  w    O .rodata	00000020 _ZTVN10__cxxabiv120__function_type_infoE
000177d0 g     O .bss	00000004 alt_argc
000167e0  w    O .rodata	00000020 _ZTVN10__cxxabiv123__fundamental_type_infoE
000157fc g     F .text	00000064 _do_dtors
00010960  w    F .text	00000098 _ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation
00016b84  w    O .rodata	0000000c _ZTIN10__cxxabiv129__pointer_to_member_type_infoE
000108b8  w    F .text	00000050 _ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE15_M_init_functorERSt9_Any_dataOS5_
00011208  w    F .text	00000030 _ZNSt5arrayIhLj4EE5beginEv
00016a80  w    O .rodata	00000010 _ZTIPKDu
00011134  w    F .text	00000078 _ZNKSt8functionIFvRN6Serial10rx_messageEEEclES2_
00012514 g     F .text	0000000c _ZSt14get_unexpectedv
00010020 g       .exceptions	00000000 alt_irq_entry
00010f50 g     F .text	000000ac _ZN6Serial4UART8sendDataESt5arrayIhLj4EE
0001714c  w    O .rwdata	00000003 _ZTSDe
00013c80 g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
00016a00  w    O .rodata	00000010 _ZTIPKa
00011568  w    F .text	0000006c _ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_
00017238 g     O .rwdata	00000008 alt_fs_list
00016738  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
000171fc  w    O .rwdata	00000008 _ZTIDu
00016970  w    O .rodata	00000010 _ZTIPj
00013c6c g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
00017150  w    O .rwdata	00000004 _ZTSPDe
000131ac g     F .text	000000b8 __cxa_begin_catch
00017094  w    O .rwdata	00000004 _ZTSPKh
00010ec0 g     F .text	00000090 _ZN6Serial4UARTC2ESt8functionIFvRNS_10rx_messageEEE
00012c50 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
0001249c g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
00016ae0  w    O .rodata	00000010 _ZTIPKv
00017118  w    O .rwdata	00000004 _ZTSPKe
00012b58 g     F .text	00000034 _ZNSt17bad_function_callD0Ev
0001083c  w    F .text	00000030 _ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj
00010020 g       *ABS*	00000000 __ram_exceptions_start
00016630  w    O .rodata	00000016 _ZTSSt17bad_function_call
00017020  w    O .rwdata	00000002 _ZTSv
00012b48 g     F .text	00000010 _ZNSt17bad_function_callD1Ev
00010260 g     F .text	000000e8 _Z20update_encoder_valueN6Serial4UARTEmi
0001337c g     F .text	00000008 _ZNSt13bad_exceptionD0Ev
00010554  w    F .text	0000002c _ZNSt14_Function_baseC2Ev
0001701c g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
000170a4  w    O .rwdata	00000002 _ZTSt
00012770 g     F .text	000000a4 _ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj
000169b0  w    O .rodata	00000010 _ZTIPt
000146c0 g     F .text	00000050 alt_ic_isr_register
00012ff8 g     F .text	00000058 __cxa_allocate_exception
000168a0  w    O .rodata	00000010 _ZTIPKd
000165b4  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
000169e0  w    O .rodata	00000010 _ZTIPKh
00017258 g       *ABS*	00000000 _edata
00015274 g     F .text	00000060 altera_avalon_uart_read_fd
00017908 g       *ABS*	00000000 _end
00011bac g     F .text	00000698 __gxx_personality_sj0
00010224 g       *ABS*	00000000 __ram_exceptions_end
000170b0  w    O .rwdata	00000002 _ZTSi
00010ca0  w    F .text	00000024 _ZSt7forwardIRPFvRN6Serial10rx_messageEEEOT_RNSt16remove_referenceIS6_E4typeE
000170ec  w    O .rwdata	00000002 _ZTSy
00013354 g     F .text	00000004 _ZNSt9exceptionD1Ev
00016b00  w    O .rodata	00000022 _ZTSN10__cxxabiv117__pbase_type_infoE
00014798 g     F .text	0000008c alt_ic_irq_disable
000170c8  w    O .rwdata	00000002 _ZTSl
00017214  w    O .rwdata	00000008 _ZTIv
0001709c  w    O .rwdata	00000003 _ZTSPs
00016184 g     F .text	00000020 exit
00013c14 g     F .text	00000018 .hidden _Unwind_SetGR
000129bc g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
000123c0 g     F .text	000000c8 _ZN10__cxxabiv111__terminateEPFvvE
000164e4  w    O .rodata	00000025 _ZTSN10__cxxabiv120__function_type_infoE
0001395c g     F .text	00000010 _ZNSt9bad_allocD1Ev
00010b20  w    F .text	00000030 _ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v
0001a000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00017104  w    O .rwdata	00000002 _ZTSd
000171ac  w    O .rwdata	00000008 _ZTIl
00017140  w    O .rwdata	00000004 _ZTSPDd
0001670c  w    O .rodata	0000000c _ZTISt13bad_exception
00016810  w    O .rodata	00000010 _ZTIPDe
000110fc  w    F .text	00000038 _ZNSt8functionIFvRN6Serial10rx_messageEEEC2Ev
0001050c  w    F .text	00000024 _ZNSt9_Any_data9_M_accessEv
00013404  w    F .text	00000018 _ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj
000126d8 g     F .text	00000010 _ZN10__cxxabiv120__function_type_infoD2Ev
00016910  w    O .rodata	00000010 _ZTIPx
00014668 g     F .text	00000038 _exit
00013be4 g     F .text	00000018 .hidden _Unwind_GetGR
000133b0 g     F .text	0000000c __cxa_get_globals
00016ff8 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
00014554 g     F .text	0000001c strlen
00014258 g     F .text	0000005c _init_signal_r
00016ffc  w    O .rwdata	00000008 _ZTISt9type_info
00015b80 g     F .text	00000160 open
00016890  w    O .rodata	00000010 _ZTIPe
000133a0 g     F .text	00000004 _ZGTtNKSt13bad_exceptionD1Ev
000166e8  w    O .rodata	0000000d _ZTSSt9exception
000177c0 g     O .bss	00000004 __malloc_sbrk_start
00016c58  w    O .rodata	0000000f _ZTSSt10bad_typeid
0001715c  w    O .rwdata	00000008 _ZTIDe
000137ec g     F .text	00000034 __cxa_bad_typeid
00013374 g     F .text	00000008 _ZNSt9exceptionD0Ev
00015860 g     F .text	00000020 alt_icache_flush_all
000170e0  w    O .rwdata	00000002 _ZTSx
00013908 g     F .text	00000010 _ZNSt10bad_typeidD1Ev
00013c88 g     F .text	00000008 .hidden _Unwind_GetDataRelBase
00011664  w    F .text	00000024 _ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh
00017230 g     O .rwdata	00000004 alt_priority_mask
000177c4 g     O .bss	00000004 __malloc_free_list
00014710 g     F .text	00000088 alt_ic_irq_enable
000171cc  w    O .rwdata	00000008 _ZTIs
00015370 g     F .text	000000c4 altera_avalon_uart_read
00016a10  w    O .rodata	00000010 _ZTIPa
00017040  w    O .rwdata	00000004 _ZTSPKw
000126d8 g     F .text	00000010 _ZN10__cxxabiv120__function_type_infoD1Ev
00013908 g     F .text	00000010 _ZNSt10bad_typeidD2Ev
00016a70  w    O .rodata	00000010 _ZTIPDs
00016820  w    O .rodata	00000010 _ZTIPKDd
00017250 g     O .rwdata	00000008 alt_alarm_list
000167ac  w    O .rodata	00000028 _ZTSN10__cxxabiv123__fundamental_type_infoE
00015798 g     F .text	00000064 _do_ctors
000144b0 g     F .text	00000010 __sigtramp
00010db4  w    F .text	00000030 _ZNSt9_Any_data9_M_accessIPFvRN6Serial10rx_messageEEEERT_v
0001655c  w    O .rodata	0000000c _ZTIN10__cxxabiv119__pointer_type_infoE
0001558c g     F .text	000000dc close
00017090  w    O .rwdata	00000003 _ZTSPh
00016718  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
00014b28 g     F .text	00000084 alt_load
00012af8 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
000170a0  w    O .rwdata	00000004 _ZTSPKs
00013708 g     F .text	00000098 _ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj
00014480 g     F .text	00000010 raise
000170ac  w    O .rwdata	00000004 _ZTSPKt
00013ef0 g     F .text	00000010 free
00012c60 g     F .text	00000038 _ZN10__cxxabiv117__class_type_infoD0Ev
0001649c  w    O .rodata	00000010 _ZTIPFvRN6Serial10rx_messageEE



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408914 	ori	at,at,548
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101c40 	call	101c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffc15 	stw	r2,-16(fp)

  return active;
   10118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0ffff17 	ldw	r3,-4(fp)
   10130:	e0bffe17 	ldw	r2,-8(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001126 	beq	r2,zero,10180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	e0bffd17 	ldw	r2,-12(fp)
   10140:	100690fa 	slli	r3,r2,3
   10144:	00800074 	movhi	r2,1
   10148:	1885883a 	add	r2,r3,r2
   1014c:	10de0217 	ldw	r3,30728(r2)
   10150:	e0bffd17 	ldw	r2,-12(fp)
   10154:	100890fa 	slli	r4,r2,3
   10158:	00800074 	movhi	r2,1
   1015c:	2085883a 	add	r2,r4,r2
   10160:	109e0317 	ldw	r2,30732(r2)
   10164:	1009883a 	mov	r4,r2
   10168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   1016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
   10170:	0005313a 	rdctl	r2,ipending
   10174:	e0bffb15 	stw	r2,-20(fp)
  return active;
   10178:	e0bffb17 	ldw	r2,-20(fp)
   1017c:	00000706 	br	1019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
   10180:	e0bffe17 	ldw	r2,-8(fp)
   10184:	1085883a 	add	r2,r2,r2
   10188:	e0bffe15 	stw	r2,-8(fp)
      i++;
   1018c:	e0bffd17 	ldw	r2,-12(fp)
   10190:	10800044 	addi	r2,r2,1
   10194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
   10198:	003fe406 	br	1012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
   1019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   101a0:	e0bfff17 	ldw	r2,-4(fp)
   101a4:	103fde1e 	bne	r2,zero,10120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101a8:	0001883a 	nop
}
   101ac:	0001883a 	nop
   101b0:	e037883a 	mov	sp,fp
   101b4:	dfc00117 	ldw	ra,4(sp)
   101b8:	df000017 	ldw	fp,0(sp)
   101bc:	dec00204 	addi	sp,sp,8
   101c0:	f800283a 	ret

000101c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101c4:	defffb04 	addi	sp,sp,-20
   101c8:	dfc00415 	stw	ra,16(sp)
   101cc:	df000315 	stw	fp,12(sp)
   101d0:	df000304 	addi	fp,sp,12
   101d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101d8:	00bfffc4 	movi	r2,-1
   101dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
   101e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101e4:	d0a1fd17 	ldw	r2,-30732(gp)
   101e8:	10000726 	beq	r2,zero,10208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101ec:	d0a1fd17 	ldw	r2,-30732(gp)
   101f0:	e0ffff17 	ldw	r3,-4(fp)
   101f4:	e1bffe17 	ldw	r6,-8(fp)
   101f8:	e17ffd17 	ldw	r5,-12(fp)
   101fc:	1809883a 	mov	r4,r3
   10200:	103ee83a 	callr	r2
   10204:	00000206 	br	10210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   1020c:	0005883a 	mov	r2,zero
}
   10210:	e037883a 	mov	sp,fp
   10214:	dfc00117 	ldw	ra,4(sp)
   10218:	df000017 	ldw	fp,0(sp)
   1021c:	dec00204 	addi	sp,sp,8
   10220:	f800283a 	ret

Disassembly of section .text:

00010224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10224:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10228:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
   1022c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   10230:	d6bbfa14 	ori	gp,gp,61416
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10234:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10238:	109deb14 	ori	r2,r2,30636

    movhi r3, %hi(__bss_end)
   1023c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10240:	18de4214 	ori	r3,r3,30984

    beq r2, r3, 1f
   10244:	10c00326 	beq	r2,r3,10254 <_start+0x30>

0:
    stw zero, (r2)
   10248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   1024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10250:	10fffd36 	bltu	r2,r3,10248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10254:	0014b280 	call	14b28 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10258:	0014bac0 	call	14bac <alt_main>

0001025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   1025c:	003fff06 	br	1025c <alt_after_alt_main>

00010260 <_Z20update_encoder_valueN6Serial4UARTEmi>:
#include "serial/uart.hpp"

uint16_t frequency = 0;

int update_encoder_value(Serial::UART uart, uint32_t target, int previous_value)
{
   10260:	defff804 	addi	sp,sp,-32
   10264:	dfc00715 	stw	ra,28(sp)
   10268:	df000615 	stw	fp,24(sp)
   1026c:	df000604 	addi	fp,sp,24
   10270:	e13ffcc5 	stb	r4,-13(fp)
   10274:	e17ffb15 	stw	r5,-20(fp)
   10278:	e1bffa15 	stw	r6,-24(fp)
	int encoder_value = IORD_32DIRECT(target, 0x00);
   1027c:	e0bffb17 	ldw	r2,-20(fp)
   10280:	10800037 	ldwio	r2,0(r2)
   10284:	e0bfff15 	stw	r2,-4(fp)
	int encoder_copy = encoder_value;
   10288:	e0bfff17 	ldw	r2,-4(fp)
   1028c:	e0bffe15 	stw	r2,-8(fp)


	if (encoder_value != previous_value)
   10290:	e0ffff17 	ldw	r3,-4(fp)
   10294:	e0bffa17 	ldw	r2,-24(fp)
   10298:	18802526 	beq	r3,r2,10330 <_Z20update_encoder_valueN6Serial4UARTEmi+0xd0>
	{
		//printf("Encoder updated to: %d \n\r", encoder_value);

		// Value has been updated, send it!
		std::array<uint8_t, 4> values;
		values[3] = (uint8_t)encoder_value;
   1029c:	e0bffd04 	addi	r2,fp,-12
   102a0:	014000c4 	movi	r5,3
   102a4:	1009883a 	mov	r4,r2
   102a8:	00106b00 	call	106b0 <_ZNSt5arrayIhLj4EEixEj>
   102ac:	e0ffff17 	ldw	r3,-4(fp)
   102b0:	10c00005 	stb	r3,0(r2)
		values[2] = (uint8_t)(encoder_value>>=8);
   102b4:	e0bfff17 	ldw	r2,-4(fp)
   102b8:	1005d23a 	srai	r2,r2,8
   102bc:	e0bfff15 	stw	r2,-4(fp)
   102c0:	e0bffd04 	addi	r2,fp,-12
   102c4:	01400084 	movi	r5,2
   102c8:	1009883a 	mov	r4,r2
   102cc:	00106b00 	call	106b0 <_ZNSt5arrayIhLj4EEixEj>
   102d0:	e0ffff17 	ldw	r3,-4(fp)
   102d4:	10c00005 	stb	r3,0(r2)
		values[1] = (uint8_t)(encoder_value>>=8);
   102d8:	e0bfff17 	ldw	r2,-4(fp)
   102dc:	1005d23a 	srai	r2,r2,8
   102e0:	e0bfff15 	stw	r2,-4(fp)
   102e4:	e0bffd04 	addi	r2,fp,-12
   102e8:	01400044 	movi	r5,1
   102ec:	1009883a 	mov	r4,r2
   102f0:	00106b00 	call	106b0 <_ZNSt5arrayIhLj4EEixEj>
   102f4:	e0ffff17 	ldw	r3,-4(fp)
   102f8:	10c00005 	stb	r3,0(r2)
		values[0] = (uint8_t)(encoder_value>>=8);
   102fc:	e0bfff17 	ldw	r2,-4(fp)
   10300:	1005d23a 	srai	r2,r2,8
   10304:	e0bfff15 	stw	r2,-4(fp)
   10308:	e0bffd04 	addi	r2,fp,-12
   1030c:	000b883a 	mov	r5,zero
   10310:	1009883a 	mov	r4,r2
   10314:	00106b00 	call	106b0 <_ZNSt5arrayIhLj4EEixEj>
   10318:	e0ffff17 	ldw	r3,-4(fp)
   1031c:	10c00005 	stb	r3,0(r2)

		uart.sendData(values);
   10320:	e0bffcc4 	addi	r2,fp,-13
   10324:	e17ffd17 	ldw	r5,-12(fp)
   10328:	1009883a 	mov	r4,r2
   1032c:	0010f500 	call	10f50 <_ZN6Serial4UART8sendDataESt5arrayIhLj4EE>
	}

	return encoder_copy;
   10330:	e0bffe17 	ldw	r2,-8(fp)
}
   10334:	e037883a 	mov	sp,fp
   10338:	dfc00117 	ldw	ra,4(sp)
   1033c:	df000017 	ldw	fp,0(sp)
   10340:	dec00204 	addi	sp,sp,8
   10344:	f800283a 	ret

00010348 <_Z17handleUartMessageRN6Serial10rx_messageE>:

void handleUartMessage(Serial::rx_message &received_message)
{
   10348:	defffc04 	addi	sp,sp,-16
   1034c:	dfc00315 	stw	ra,12(sp)
   10350:	df000215 	stw	fp,8(sp)
   10354:	df000204 	addi	fp,sp,8
   10358:	e13ffe15 	stw	r4,-8(fp)
	if (frequency != received_message.freq)
   1035c:	e0bffe17 	ldw	r2,-8(fp)
   10360:	10800017 	ldw	r2,0(r2)
   10364:	108fffcc 	andi	r2,r2,16383
   10368:	1007883a 	mov	r3,r2
   1036c:	d0a1f10b 	ldhu	r2,-30780(gp)
   10370:	18ffffcc 	andi	r3,r3,65535
   10374:	10bfffcc 	andi	r2,r2,65535
   10378:	18800a26 	beq	r3,r2,103a4 <_Z17handleUartMessageRN6Serial10rx_messageE+0x5c>
	{
		IOWR_32DIRECT(MOTOR_PWM_0_SLAVE_1_BASE, 0x00, received_message.freq);
   1037c:	e0bffe17 	ldw	r2,-8(fp)
   10380:	10800017 	ldw	r2,0(r2)
   10384:	108fffcc 	andi	r2,r2,16383
   10388:	10ffffcc 	andi	r3,r2,65535
   1038c:	008000b4 	movhi	r2,2
   10390:	10c70035 	stwio	r3,7168(r2)
		frequency = received_message.freq;
   10394:	e0bffe17 	ldw	r2,-8(fp)
   10398:	10800017 	ldw	r2,0(r2)
   1039c:	108fffcc 	andi	r2,r2,16383
   103a0:	d0a1f10d 	sth	r2,-30780(gp)
	}

	uint32_t combined = received_message.getSecondWord();
   103a4:	e13ffe17 	ldw	r4,-8(fp)
   103a8:	001060c0 	call	1060c <_ZN6Serial10rx_message13getSecondWordEv>
   103ac:	e0bfff15 	stw	r2,-4(fp)

	IOWR_32DIRECT(MOTOR_PWM_0_SLAVE_2_BASE, 0x00, combined);
   103b0:	e0ffff17 	ldw	r3,-4(fp)
   103b4:	008000b4 	movhi	r2,2
   103b8:	10c50035 	stwio	r3,5120(r2)

	//printf("rx data: %.4s\n", rx_data);
}
   103bc:	0001883a 	nop
   103c0:	e037883a 	mov	sp,fp
   103c4:	dfc00117 	ldw	ra,4(sp)
   103c8:	df000017 	ldw	fp,0(sp)
   103cc:	dec00204 	addi	sp,sp,8
   103d0:	f800283a 	ret

000103d4 <main>:

int main()
{
   103d4:	deffe104 	addi	sp,sp,-124
   103d8:	dfc01e15 	stw	ra,120(sp)
   103dc:	df001d15 	stw	fp,116(sp)
   103e0:	ddc01c15 	stw	r23,112(sp)
   103e4:	dd801b15 	stw	r22,108(sp)
   103e8:	dd401a15 	stw	r21,104(sp)
   103ec:	dd001915 	stw	r20,100(sp)
   103f0:	dcc01815 	stw	r19,96(sp)
   103f4:	dc801715 	stw	r18,92(sp)
   103f8:	dc401615 	stw	r17,88(sp)
   103fc:	dc001515 	stw	r16,84(sp)
   10400:	df001d04 	addi	fp,sp,116
   10404:	00800074 	movhi	r2,1
   10408:	1086eb04 	addi	r2,r2,7084
   1040c:	e0bfea15 	stw	r2,-88(fp)
   10410:	00800074 	movhi	r2,1
   10414:	10990804 	addi	r2,r2,25632
   10418:	e0bfeb15 	stw	r2,-84(fp)
   1041c:	e0bfec04 	addi	r2,fp,-80
   10420:	17000015 	stw	fp,0(r2)
   10424:	00c00074 	movhi	r3,1
   10428:	18c12f04 	addi	r3,r3,1212
   1042c:	10c00115 	stw	r3,4(r2)
   10430:	16c00215 	stw	sp,8(r2)
   10434:	e0bfe404 	addi	r2,fp,-112
   10438:	1009883a 	mov	r4,r2
   1043c:	0013bbc0 	call	13bbc <_Unwind_SjLj_Register>
	// Print startup message.
	printf("Starting JIWY motor controller..\n");
   10440:	00bfffc4 	movi	r2,-1
   10444:	e0bfe515 	stw	r2,-108(fp)
   10448:	01000074 	movhi	r4,1
   1044c:	21191e04 	addi	r4,r4,25720
   10450:	00142000 	call	14200 <puts>

	// Setup UART.
	Serial::UART uart = Serial::UART(handleUartMessage);
   10454:	e0bff204 	addi	r2,fp,-56
   10458:	01400074 	movhi	r5,1
   1045c:	2940d204 	addi	r5,r5,840
   10460:	1009883a 	mov	r4,r2
   10464:	00106ec0 	call	106ec <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1IPS3_vvEET_>
   10468:	e13ff204 	addi	r4,fp,-56
   1046c:	e0fff1c4 	addi	r3,fp,-57
   10470:	00800044 	movi	r2,1
   10474:	e0bfe515 	stw	r2,-108(fp)
   10478:	200b883a 	mov	r5,r4
   1047c:	1809883a 	mov	r4,r3
   10480:	0010ec00 	call	10ec0 <_ZN6Serial4UARTC1ESt8functionIFvRNS_10rx_messageEEE>
   10484:	e0bff204 	addi	r2,fp,-56
   10488:	1009883a 	mov	r4,r2
   1048c:	00106780 	call	10678 <_ZNSt8functionIFvRN6Serial10rx_messageEEED1Ev>

	int prev_encoder_tilt = 0;
   10490:	e03ff715 	stw	zero,-36(fp)
	int prev_encoder_pan = 0;
   10494:	e03ff615 	stw	zero,-40(fp)

	while(1)
	{
		prev_encoder_tilt = update_encoder_value(uart, QUADRATURE_ENCODER_0_BASE, prev_encoder_tilt);
   10498:	e1bff717 	ldw	r6,-36(fp)
   1049c:	014000b4 	movhi	r5,2
   104a0:	00bfffc4 	movi	r2,-1
   104a4:	e0bfe515 	stw	r2,-108(fp)
   104a8:	29490004 	addi	r5,r5,9216
   104ac:	e13fe303 	ldbu	r4,-116(fp)
   104b0:	00102600 	call	10260 <_Z20update_encoder_valueN6Serial4UARTEmi>
   104b4:	e0bff715 	stw	r2,-36(fp)
   104b8:	003ff706 	br	10498 <main+0xc4>
	Serial::UART uart = Serial::UART(handleUartMessage);
   104bc:	e0bfe617 	ldw	r2,-104(fp)
   104c0:	e0bfe315 	stw	r2,-116(fp)
   104c4:	e0bff204 	addi	r2,fp,-56
   104c8:	1009883a 	mov	r4,r2
   104cc:	00106780 	call	10678 <_ZNSt8functionIFvRN6Serial10rx_messageEEED1Ev>
   104d0:	e0ffe317 	ldw	r3,-116(fp)
   104d4:	00bfffc4 	movi	r2,-1
   104d8:	e0bfe515 	stw	r2,-108(fp)
   104dc:	1809883a 	mov	r4,r3
   104e0:	0013da40 	call	13da4 <_Unwind_SjLj_Resume>

000104e4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
   104e4:	defffd04 	addi	sp,sp,-12
   104e8:	df000215 	stw	fp,8(sp)
   104ec:	df000204 	addi	fp,sp,8
   104f0:	e13fff15 	stw	r4,-4(fp)
   104f4:	e17ffe15 	stw	r5,-8(fp)
   104f8:	e0bffe17 	ldw	r2,-8(fp)
   104fc:	e037883a 	mov	sp,fp
   10500:	df000017 	ldw	fp,0(sp)
   10504:	dec00104 	addi	sp,sp,4
   10508:	f800283a 	ret

0001050c <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
   1050c:	defffe04 	addi	sp,sp,-8
   10510:	df000115 	stw	fp,4(sp)
   10514:	df000104 	addi	fp,sp,4
   10518:	e13fff15 	stw	r4,-4(fp)
   1051c:	e0bfff17 	ldw	r2,-4(fp)
   10520:	e037883a 	mov	sp,fp
   10524:	df000017 	ldw	fp,0(sp)
   10528:	dec00104 	addi	sp,sp,4
   1052c:	f800283a 	ret

00010530 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
   10530:	defffe04 	addi	sp,sp,-8
   10534:	df000115 	stw	fp,4(sp)
   10538:	df000104 	addi	fp,sp,4
   1053c:	e13fff15 	stw	r4,-4(fp)
   10540:	e0bfff17 	ldw	r2,-4(fp)
   10544:	e037883a 	mov	sp,fp
   10548:	df000017 	ldw	fp,0(sp)
   1054c:	dec00104 	addi	sp,sp,4
   10550:	f800283a 	ret

00010554 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   10554:	defffe04 	addi	sp,sp,-8
   10558:	df000115 	stw	fp,4(sp)
   1055c:	df000104 	addi	fp,sp,4
   10560:	e13fff15 	stw	r4,-4(fp)
   10564:	e0bfff17 	ldw	r2,-4(fp)
   10568:	10000215 	stw	zero,8(r2)
   1056c:	0001883a 	nop
   10570:	e037883a 	mov	sp,fp
   10574:	df000017 	ldw	fp,0(sp)
   10578:	dec00104 	addi	sp,sp,4
   1057c:	f800283a 	ret

00010580 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
   10580:	defff004 	addi	sp,sp,-64
   10584:	dfc00f15 	stw	ra,60(sp)
   10588:	df000e15 	stw	fp,56(sp)
   1058c:	df000e04 	addi	fp,sp,56
   10590:	e13fff15 	stw	r4,-4(fp)
   10594:	00800074 	movhi	r2,1
   10598:	1086eb04 	addi	r2,r2,7084
   1059c:	e0bff815 	stw	r2,-32(fp)
   105a0:	00800074 	movhi	r2,1
   105a4:	10990704 	addi	r2,r2,25628
   105a8:	e0bff915 	stw	r2,-28(fp)
   105ac:	e0bff204 	addi	r2,fp,-56
   105b0:	1009883a 	mov	r4,r2
   105b4:	0013bbc0 	call	13bbc <_Unwind_SjLj_Register>
    {
      if (_M_manager)
   105b8:	e0bfff17 	ldw	r2,-4(fp)
   105bc:	10800217 	ldw	r2,8(r2)
   105c0:	10000926 	beq	r2,zero,105e8 <_ZNSt14_Function_baseD1Ev+0x68>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   105c4:	e0bfff17 	ldw	r2,-4(fp)
   105c8:	10800217 	ldw	r2,8(r2)
   105cc:	e0ffff17 	ldw	r3,-4(fp)
   105d0:	e13fff17 	ldw	r4,-4(fp)
   105d4:	e03ff315 	stw	zero,-52(fp)
   105d8:	018000c4 	movi	r6,3
   105dc:	200b883a 	mov	r5,r4
   105e0:	1809883a 	mov	r4,r3
   105e4:	103ee83a 	callr	r2
    }
   105e8:	0001883a 	nop
   105ec:	e0bff204 	addi	r2,fp,-56
   105f0:	1009883a 	mov	r4,r2
   105f4:	0013bd40 	call	13bd4 <_Unwind_SjLj_Unregister>
   105f8:	e037883a 	mov	sp,fp
   105fc:	dfc00117 	ldw	ra,4(sp)
   10600:	df000017 	ldw	fp,0(sp)
   10604:	dec00204 	addi	sp,sp,8
   10608:	f800283a 	ret

0001060c <_ZN6Serial10rx_message13getSecondWordEv>:
		uint32_t getFirstWord()
		{
			return freq;
		}

		uint32_t getSecondWord()
   1060c:	defffe04 	addi	sp,sp,-8
   10610:	df000115 	stw	fp,4(sp)
   10614:	df000104 	addi	fp,sp,4
   10618:	e13fff15 	stw	r4,-4(fp)
		{
			return (duty << 16) | (direction << 14) | enable << 12;
   1061c:	e0bfff17 	ldw	r2,-4(fp)
   10620:	10800017 	ldw	r2,0(r2)
   10624:	1004d3ba 	srli	r2,r2,14
   10628:	108fffcc 	andi	r2,r2,16383
   1062c:	10bfffcc 	andi	r2,r2,65535
   10630:	1006943a 	slli	r3,r2,16
   10634:	e0bfff17 	ldw	r2,-4(fp)
   10638:	10800017 	ldw	r2,0(r2)
   1063c:	1004d73a 	srli	r2,r2,28
   10640:	108000cc 	andi	r2,r2,3
   10644:	10803fcc 	andi	r2,r2,255
   10648:	100493ba 	slli	r2,r2,14
   1064c:	1886b03a 	or	r3,r3,r2
   10650:	e0bfff17 	ldw	r2,-4(fp)
   10654:	10800017 	ldw	r2,0(r2)
   10658:	1004d7ba 	srli	r2,r2,30
   1065c:	10803fcc 	andi	r2,r2,255
   10660:	1004933a 	slli	r2,r2,12
   10664:	1884b03a 	or	r2,r3,r2
		}
   10668:	e037883a 	mov	sp,fp
   1066c:	df000017 	ldw	fp,0(sp)
   10670:	dec00104 	addi	sp,sp,4
   10674:	f800283a 	ret

00010678 <_ZNSt8functionIFvRN6Serial10rx_messageEEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   10678:	defffd04 	addi	sp,sp,-12
   1067c:	dfc00215 	stw	ra,8(sp)
   10680:	df000115 	stw	fp,4(sp)
   10684:	df000104 	addi	fp,sp,4
   10688:	e13fff15 	stw	r4,-4(fp)
   1068c:	e0bfff17 	ldw	r2,-4(fp)
   10690:	1009883a 	mov	r4,r2
   10694:	00105800 	call	10580 <_ZNSt14_Function_baseD1Ev>
   10698:	0001883a 	nop
   1069c:	e037883a 	mov	sp,fp
   106a0:	dfc00117 	ldw	ra,4(sp)
   106a4:	df000017 	ldw	fp,0(sp)
   106a8:	dec00204 	addi	sp,sp,8
   106ac:	f800283a 	ret

000106b0 <_ZNSt5arrayIhLj4EEixEj>:
      _GLIBCXX_NODISCARD constexpr bool
      empty() const noexcept { return size() == 0; }

      // Element access.
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
   106b0:	defffc04 	addi	sp,sp,-16
   106b4:	dfc00315 	stw	ra,12(sp)
   106b8:	df000215 	stw	fp,8(sp)
   106bc:	df000204 	addi	fp,sp,8
   106c0:	e13fff15 	stw	r4,-4(fp)
   106c4:	e17ffe15 	stw	r5,-8(fp)
      { return _AT_Type::_S_ref(_M_elems, __n); }
   106c8:	e0bfff17 	ldw	r2,-4(fp)
   106cc:	e17ffe17 	ldw	r5,-8(fp)
   106d0:	1009883a 	mov	r4,r2
   106d4:	001083c0 	call	1083c <_ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj>
   106d8:	e037883a 	mov	sp,fp
   106dc:	dfc00117 	ldw	ra,4(sp)
   106e0:	df000017 	ldw	fp,0(sp)
   106e4:	dec00204 	addi	sp,sp,8
   106e8:	f800283a 	ret

000106ec <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1IPS3_vvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
   106ec:	deffe604 	addi	sp,sp,-104
   106f0:	dfc01915 	stw	ra,100(sp)
   106f4:	df001815 	stw	fp,96(sp)
   106f8:	ddc01715 	stw	r23,92(sp)
   106fc:	dd801615 	stw	r22,88(sp)
   10700:	dd401515 	stw	r21,84(sp)
   10704:	dd001415 	stw	r20,80(sp)
   10708:	dcc01315 	stw	r19,76(sp)
   1070c:	dc801215 	stw	r18,72(sp)
   10710:	dc401115 	stw	r17,68(sp)
   10714:	dc001015 	stw	r16,64(sp)
   10718:	df001804 	addi	fp,sp,96
   1071c:	e13ff715 	stw	r4,-36(fp)
   10720:	e17ff615 	stw	r5,-40(fp)
   10724:	00800074 	movhi	r2,1
   10728:	1086eb04 	addi	r2,r2,7084
   1072c:	e0bfef15 	stw	r2,-68(fp)
   10730:	00800074 	movhi	r2,1
   10734:	10990984 	addi	r2,r2,25638
   10738:	e0bff015 	stw	r2,-64(fp)
   1073c:	e0bff104 	addi	r2,fp,-60
   10740:	17000015 	stw	fp,0(r2)
   10744:	00c00074 	movhi	r3,1
   10748:	18c1f404 	addi	r3,r3,2000
   1074c:	10c00115 	stw	r3,4(r2)
   10750:	16c00215 	stw	sp,8(r2)
   10754:	e0bfe904 	addi	r2,fp,-92
   10758:	1009883a 	mov	r4,r2
   1075c:	0013bbc0 	call	13bbc <_Unwind_SjLj_Register>
      function(_Functor __f)
      : _Function_base()
   10760:	e0bff717 	ldw	r2,-36(fp)
   10764:	1009883a 	mov	r4,r2
   10768:	00105540 	call	10554 <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
   1076c:	e0bff617 	ldw	r2,-40(fp)
   10770:	1009883a 	mov	r4,r2
   10774:	001086c0 	call	1086c <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE21_M_not_empty_functionIS4_EEbPT_>
   10778:	10803fcc 	andi	r2,r2,255
   1077c:	10001e26 	beq	r2,zero,107f8 <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1IPS3_vvEET_+0x10c>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
   10780:	e0bff717 	ldw	r2,-36(fp)
   10784:	e0bfe815 	stw	r2,-96(fp)
   10788:	e0bff604 	addi	r2,fp,-40
   1078c:	1009883a 	mov	r4,r2
   10790:	00108940 	call	10894 <_ZSt4moveIRPFvRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOS7_>
   10794:	1007883a 	mov	r3,r2
   10798:	00800044 	movi	r2,1
   1079c:	e0bfea15 	stw	r2,-88(fp)
   107a0:	180b883a 	mov	r5,r3
   107a4:	e13fe817 	ldw	r4,-96(fp)
   107a8:	00108b80 	call	108b8 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE15_M_init_functorERSt9_Any_dataOS5_>
	    _M_invoker = &_My_handler::_M_invoke;
   107ac:	e0fff717 	ldw	r3,-36(fp)
   107b0:	00800074 	movhi	r2,1
   107b4:	10824204 	addi	r2,r2,2312
   107b8:	18800315 	stw	r2,12(r3)
	    _M_manager = &_My_handler::_M_manager;
   107bc:	e0fff717 	ldw	r3,-36(fp)
   107c0:	00800074 	movhi	r2,1
   107c4:	10825804 	addi	r2,r2,2400
   107c8:	18800215 	stw	r2,8(r3)
	  }
      }
   107cc:	00000a06 	br	107f8 <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1IPS3_vvEET_+0x10c>
      : _Function_base()
   107d0:	e0bfeb17 	ldw	r2,-84(fp)
   107d4:	e0bfe815 	stw	r2,-96(fp)
   107d8:	e0bff717 	ldw	r2,-36(fp)
   107dc:	1009883a 	mov	r4,r2
   107e0:	00105800 	call	10580 <_ZNSt14_Function_baseD1Ev>
   107e4:	e0ffe817 	ldw	r3,-96(fp)
   107e8:	00bfffc4 	movi	r2,-1
   107ec:	e0bfea15 	stw	r2,-88(fp)
   107f0:	1809883a 	mov	r4,r3
   107f4:	0013da40 	call	13da4 <_Unwind_SjLj_Resume>
      }
   107f8:	0001883a 	nop
   107fc:	e0bfe904 	addi	r2,fp,-92
   10800:	1009883a 	mov	r4,r2
   10804:	0013bd40 	call	13bd4 <_Unwind_SjLj_Unregister>
   10808:	e6fff804 	addi	sp,fp,-32
   1080c:	dfc00917 	ldw	ra,36(sp)
   10810:	df000817 	ldw	fp,32(sp)
   10814:	ddc00717 	ldw	r23,28(sp)
   10818:	dd800617 	ldw	r22,24(sp)
   1081c:	dd400517 	ldw	r21,20(sp)
   10820:	dd000417 	ldw	r20,16(sp)
   10824:	dcc00317 	ldw	r19,12(sp)
   10828:	dc800217 	ldw	r18,8(sp)
   1082c:	dc400117 	ldw	r17,4(sp)
   10830:	dc000017 	ldw	r16,0(sp)
   10834:	dec00a04 	addi	sp,sp,40
   10838:	f800283a 	ret

0001083c <_ZNSt14__array_traitsIhLj4EE6_S_refERA4_Khj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
   1083c:	defffd04 	addi	sp,sp,-12
   10840:	df000215 	stw	fp,8(sp)
   10844:	df000204 	addi	fp,sp,8
   10848:	e13fff15 	stw	r4,-4(fp)
   1084c:	e17ffe15 	stw	r5,-8(fp)
      { return const_cast<_Tp&>(__t[__n]); }
   10850:	e0ffff17 	ldw	r3,-4(fp)
   10854:	e0bffe17 	ldw	r2,-8(fp)
   10858:	1885883a 	add	r2,r3,r2
   1085c:	e037883a 	mov	sp,fp
   10860:	df000017 	ldw	fp,0(sp)
   10864:	dec00104 	addi	sp,sp,4
   10868:	f800283a 	ret

0001086c <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE21_M_not_empty_functionIS4_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
   1086c:	defffe04 	addi	sp,sp,-8
   10870:	df000115 	stw	fp,4(sp)
   10874:	df000104 	addi	fp,sp,4
   10878:	e13fff15 	stw	r4,-4(fp)
	  { return __fp != nullptr; }
   1087c:	e0bfff17 	ldw	r2,-4(fp)
   10880:	1004c03a 	cmpne	r2,r2,zero
   10884:	e037883a 	mov	sp,fp
   10888:	df000017 	ldw	fp,0(sp)
   1088c:	dec00104 	addi	sp,sp,4
   10890:	f800283a 	ret

00010894 <_ZSt4moveIRPFvRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
   10894:	defffe04 	addi	sp,sp,-8
   10898:	df000115 	stw	fp,4(sp)
   1089c:	df000104 	addi	fp,sp,4
   108a0:	e13fff15 	stw	r4,-4(fp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   108a4:	e0bfff17 	ldw	r2,-4(fp)
   108a8:	e037883a 	mov	sp,fp
   108ac:	df000017 	ldw	fp,0(sp)
   108b0:	dec00104 	addi	sp,sp,4
   108b4:	f800283a 	ret

000108b8 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE15_M_init_functorERSt9_Any_dataOS5_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
   108b8:	defffb04 	addi	sp,sp,-20
   108bc:	dfc00415 	stw	ra,16(sp)
   108c0:	df000315 	stw	fp,12(sp)
   108c4:	dc000215 	stw	r16,8(sp)
   108c8:	df000304 	addi	fp,sp,12
   108cc:	e13ffe15 	stw	r4,-8(fp)
   108d0:	e17ffd15 	stw	r5,-12(fp)
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
   108d4:	e13ffd17 	ldw	r4,-12(fp)
   108d8:	00108940 	call	10894 <_ZSt4moveIRPFvRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOS7_>
   108dc:	800d883a 	mov	r6,r16
   108e0:	100b883a 	mov	r5,r2
   108e4:	e13ffe17 	ldw	r4,-8(fp)
   108e8:	00109f80 	call	109f8 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>
   108ec:	0001883a 	nop
   108f0:	e6ffff04 	addi	sp,fp,-4
   108f4:	dfc00217 	ldw	ra,8(sp)
   108f8:	df000117 	ldw	fp,4(sp)
   108fc:	dc000017 	ldw	r16,0(sp)
   10900:	dec00304 	addi	sp,sp,12
   10904:	f800283a 	ret

00010908 <_ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E9_M_invokeERKSt9_Any_dataS2_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   10908:	defffb04 	addi	sp,sp,-20
   1090c:	dfc00415 	stw	ra,16(sp)
   10910:	df000315 	stw	fp,12(sp)
   10914:	dc000215 	stw	r16,8(sp)
   10918:	df000304 	addi	fp,sp,12
   1091c:	e13ffe15 	stw	r4,-8(fp)
   10920:	e17ffd15 	stw	r5,-12(fp)
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
   10924:	e13ffe17 	ldw	r4,-8(fp)
   10928:	0010a580 	call	10a58 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE14_M_get_pointerERKSt9_Any_data>
   1092c:	1021883a 	mov	r16,r2
   10930:	e13ffd17 	ldw	r4,-12(fp)
   10934:	0010a980 	call	10a98 <_ZSt7forwardIRN6Serial10rx_messageEEOT_RNSt16remove_referenceIS3_E4typeE>
   10938:	100b883a 	mov	r5,r2
   1093c:	8009883a 	mov	r4,r16
   10940:	0010abc0 	call	10abc <_ZSt10__invoke_rIvRPFvRN6Serial10rx_messageEEJS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>
				     std::forward<_ArgTypes>(__args)...);
   10944:	0001883a 	nop
      }
   10948:	e6ffff04 	addi	sp,fp,-4
   1094c:	dfc00217 	ldw	ra,8(sp)
   10950:	df000117 	ldw	fp,4(sp)
   10954:	dc000017 	ldw	r16,0(sp)
   10958:	dec00304 	addi	sp,sp,12
   1095c:	f800283a 	ret

00010960 <_ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   10960:	defffa04 	addi	sp,sp,-24
   10964:	dfc00515 	stw	ra,20(sp)
   10968:	df000415 	stw	fp,16(sp)
   1096c:	dc000315 	stw	r16,12(sp)
   10970:	df000404 	addi	fp,sp,16
   10974:	e13ffe15 	stw	r4,-8(fp)
   10978:	e17ffd15 	stw	r5,-12(fp)
   1097c:	e1bffc15 	stw	r6,-16(fp)
	switch (__op)
   10980:	e0bffc17 	ldw	r2,-16(fp)
   10984:	10000326 	beq	r2,zero,10994 <_ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x34>
   10988:	10800060 	cmpeqi	r2,r2,1
   1098c:	1000081e 	bne	r2,zero,109b0 <_ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x50>
   10990:	00000e06 	br	109cc <_ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6c>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
   10994:	e13ffe17 	ldw	r4,-8(fp)
   10998:	0010b200 	call	10b20 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
   1099c:	1007883a 	mov	r3,r2
   109a0:	00800074 	movhi	r2,1
   109a4:	10992704 	addi	r2,r2,25756
   109a8:	18800015 	stw	r2,0(r3)
	    break;
   109ac:	00000b06 	br	109dc <_ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x7c>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   109b0:	e13ffe17 	ldw	r4,-8(fp)
   109b4:	0010b500 	call	10b50 <_ZNSt9_Any_data9_M_accessIPPFvRN6Serial10rx_messageEEEERT_v>
   109b8:	1021883a 	mov	r16,r2
   109bc:	e13ffd17 	ldw	r4,-12(fp)
   109c0:	0010a580 	call	10a58 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE14_M_get_pointerERKSt9_Any_data>
   109c4:	80800015 	stw	r2,0(r16)
	    break;
   109c8:	00000406 	br	109dc <_ZNSt17_Function_handlerIFvRN6Serial10rx_messageEEPS3_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x7c>
	    _Base::_M_manager(__dest, __source, __op);
   109cc:	e1bffc17 	ldw	r6,-16(fp)
   109d0:	e17ffd17 	ldw	r5,-12(fp)
   109d4:	e13ffe17 	ldw	r4,-8(fp)
   109d8:	0010b800 	call	10b80 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
   109dc:	0005883a 	mov	r2,zero
      }
   109e0:	e6ffff04 	addi	sp,fp,-4
   109e4:	dfc00217 	ldw	ra,8(sp)
   109e8:	df000117 	ldw	fp,4(sp)
   109ec:	dc000017 	ldw	r16,0(sp)
   109f0:	dec00304 	addi	sp,sp,12
   109f4:	f800283a 	ret

000109f8 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
   109f8:	defffa04 	addi	sp,sp,-24
   109fc:	dfc00515 	stw	ra,20(sp)
   10a00:	df000415 	stw	fp,16(sp)
   10a04:	dc000315 	stw	r16,12(sp)
   10a08:	df000404 	addi	fp,sp,16
   10a0c:	e13ffe15 	stw	r4,-8(fp)
   10a10:	e17ffd15 	stw	r5,-12(fp)
   10a14:	e1bffcc5 	stb	r6,-13(fp)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   10a18:	e13ffd17 	ldw	r4,-12(fp)
   10a1c:	00108940 	call	10894 <_ZSt4moveIRPFvRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOS7_>
   10a20:	14000017 	ldw	r16,0(r2)
   10a24:	e13ffe17 	ldw	r4,-8(fp)
   10a28:	001050c0 	call	1050c <_ZNSt9_Any_data9_M_accessEv>
   10a2c:	100b883a 	mov	r5,r2
   10a30:	01000104 	movi	r4,4
   10a34:	00104e40 	call	104e4 <_ZnwjPv>
   10a38:	14000015 	stw	r16,0(r2)
   10a3c:	0001883a 	nop
   10a40:	e6ffff04 	addi	sp,fp,-4
   10a44:	dfc00217 	ldw	ra,8(sp)
   10a48:	df000117 	ldw	fp,4(sp)
   10a4c:	dc000017 	ldw	r16,0(sp)
   10a50:	dec00304 	addi	sp,sp,12
   10a54:	f800283a 	ret

00010a58 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
   10a58:	defffc04 	addi	sp,sp,-16
   10a5c:	dfc00315 	stw	ra,12(sp)
   10a60:	df000215 	stw	fp,8(sp)
   10a64:	df000204 	addi	fp,sp,8
   10a68:	e13ffe15 	stw	r4,-8(fp)
	      const _Functor& __f = __source._M_access<_Functor>();
   10a6c:	e13ffe17 	ldw	r4,-8(fp)
   10a70:	0010c4c0 	call	10c4c <_ZNKSt9_Any_data9_M_accessIPFvRN6Serial10rx_messageEEEERKT_v>
   10a74:	e0bfff15 	stw	r2,-4(fp)
	      return const_cast<_Functor*>(std::__addressof(__f));
   10a78:	e13fff17 	ldw	r4,-4(fp)
   10a7c:	0010c7c0 	call	10c7c <_ZSt11__addressofIKPFvRN6Serial10rx_messageEEEPT_RS6_>
   10a80:	0001883a 	nop
	}
   10a84:	e037883a 	mov	sp,fp
   10a88:	dfc00117 	ldw	ra,4(sp)
   10a8c:	df000017 	ldw	fp,0(sp)
   10a90:	dec00204 	addi	sp,sp,8
   10a94:	f800283a 	ret

00010a98 <_ZSt7forwardIRN6Serial10rx_messageEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   10a98:	defffe04 	addi	sp,sp,-8
   10a9c:	df000115 	stw	fp,4(sp)
   10aa0:	df000104 	addi	fp,sp,4
   10aa4:	e13fff15 	stw	r4,-4(fp)
    { return static_cast<_Tp&&>(__t); }
   10aa8:	e0bfff17 	ldw	r2,-4(fp)
   10aac:	e037883a 	mov	sp,fp
   10ab0:	df000017 	ldw	fp,0(sp)
   10ab4:	dec00104 	addi	sp,sp,4
   10ab8:	f800283a 	ret

00010abc <_ZSt10__invoke_rIvRPFvRN6Serial10rx_messageEEJS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
   10abc:	defffa04 	addi	sp,sp,-24
   10ac0:	dfc00515 	stw	ra,20(sp)
   10ac4:	df000415 	stw	fp,16(sp)
   10ac8:	dc400315 	stw	r17,12(sp)
   10acc:	dc000215 	stw	r16,8(sp)
   10ad0:	df000404 	addi	fp,sp,16
   10ad4:	e13ffd15 	stw	r4,-12(fp)
   10ad8:	e17ffc15 	stw	r5,-16(fp)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
   10adc:	e13ffd17 	ldw	r4,-12(fp)
   10ae0:	0010ca00 	call	10ca0 <_ZSt7forwardIRPFvRN6Serial10rx_messageEEEOT_RNSt16remove_referenceIS6_E4typeE>
   10ae4:	1021883a 	mov	r16,r2
   10ae8:	e13ffc17 	ldw	r4,-16(fp)
   10aec:	0010a980 	call	10a98 <_ZSt7forwardIRN6Serial10rx_messageEEOT_RNSt16remove_referenceIS3_E4typeE>
   10af0:	100d883a 	mov	r6,r2
   10af4:	800b883a 	mov	r5,r16
   10af8:	8809883a 	mov	r4,r17
   10afc:	0010cc40 	call	10cc4 <_ZSt13__invoke_implIvRPFvRN6Serial10rx_messageEEJS2_EET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
   10b00:	0001883a 	nop
   10b04:	e6fffe04 	addi	sp,fp,-8
   10b08:	dfc00317 	ldw	ra,12(sp)
   10b0c:	df000217 	ldw	fp,8(sp)
   10b10:	dc400117 	ldw	r17,4(sp)
   10b14:	dc000017 	ldw	r16,0(sp)
   10b18:	dec00404 	addi	sp,sp,16
   10b1c:	f800283a 	ret

00010b20 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access()
   10b20:	defffd04 	addi	sp,sp,-12
   10b24:	dfc00215 	stw	ra,8(sp)
   10b28:	df000115 	stw	fp,4(sp)
   10b2c:	df000104 	addi	fp,sp,4
   10b30:	e13fff15 	stw	r4,-4(fp)
      { return *static_cast<_Tp*>(_M_access()); }
   10b34:	e13fff17 	ldw	r4,-4(fp)
   10b38:	001050c0 	call	1050c <_ZNSt9_Any_data9_M_accessEv>
   10b3c:	e037883a 	mov	sp,fp
   10b40:	dfc00117 	ldw	ra,4(sp)
   10b44:	df000017 	ldw	fp,0(sp)
   10b48:	dec00204 	addi	sp,sp,8
   10b4c:	f800283a 	ret

00010b50 <_ZNSt9_Any_data9_M_accessIPPFvRN6Serial10rx_messageEEEERT_v>:
      _M_access()
   10b50:	defffd04 	addi	sp,sp,-12
   10b54:	dfc00215 	stw	ra,8(sp)
   10b58:	df000115 	stw	fp,4(sp)
   10b5c:	df000104 	addi	fp,sp,4
   10b60:	e13fff15 	stw	r4,-4(fp)
      { return *static_cast<_Tp*>(_M_access()); }
   10b64:	e13fff17 	ldw	r4,-4(fp)
   10b68:	001050c0 	call	1050c <_ZNSt9_Any_data9_M_accessEv>
   10b6c:	e037883a 	mov	sp,fp
   10b70:	dfc00117 	ldw	ra,4(sp)
   10b74:	df000017 	ldw	fp,0(sp)
   10b78:	dec00204 	addi	sp,sp,8
   10b7c:	f800283a 	ret

00010b80 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   10b80:	defffa04 	addi	sp,sp,-24
   10b84:	dfc00515 	stw	ra,20(sp)
   10b88:	df000415 	stw	fp,16(sp)
   10b8c:	dc000315 	stw	r16,12(sp)
   10b90:	df000404 	addi	fp,sp,16
   10b94:	e13ffe15 	stw	r4,-8(fp)
   10b98:	e17ffd15 	stw	r5,-12(fp)
   10b9c:	e1bffc15 	stw	r6,-16(fp)
	  switch (__op)
   10ba0:	e0bffc17 	ldw	r2,-16(fp)
   10ba4:	10c000e0 	cmpeqi	r3,r2,3
   10ba8:	18001d1e 	bne	r3,zero,10c20 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0xa0>
   10bac:	10c00108 	cmpgei	r3,r2,4
   10bb0:	18001f1e 	bne	r3,zero,10c30 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0xb0>
   10bb4:	10c000a0 	cmpeqi	r3,r2,2
   10bb8:	1800141e 	bne	r3,zero,10c0c <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x8c>
   10bbc:	10c000c8 	cmpgei	r3,r2,3
   10bc0:	18001b1e 	bne	r3,zero,10c30 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0xb0>
   10bc4:	10000326 	beq	r2,zero,10bd4 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x54>
   10bc8:	10800060 	cmpeqi	r2,r2,1
   10bcc:	1000081e 	bne	r2,zero,10bf0 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x70>
   10bd0:	00001706 	br	10c30 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0xb0>
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
   10bd4:	e13ffe17 	ldw	r4,-8(fp)
   10bd8:	0010b200 	call	10b20 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
   10bdc:	1007883a 	mov	r3,r2
   10be0:	00800074 	movhi	r2,1
   10be4:	10992704 	addi	r2,r2,25756
   10be8:	18800015 	stw	r2,0(r3)
	      break;
   10bec:	00001006 	br	10c30 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0xb0>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   10bf0:	e13ffe17 	ldw	r4,-8(fp)
   10bf4:	0010b500 	call	10b50 <_ZNSt9_Any_data9_M_accessIPPFvRN6Serial10rx_messageEEEERT_v>
   10bf8:	1021883a 	mov	r16,r2
   10bfc:	e13ffd17 	ldw	r4,-12(fp)
   10c00:	0010a580 	call	10a58 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE14_M_get_pointerERKSt9_Any_data>
   10c04:	80800015 	stw	r2,0(r16)
	      break;
   10c08:	00000906 	br	10c30 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0xb0>
	      _M_clone(__dest, __source, _Local_storage());
   10c0c:	400d883a 	mov	r6,r8
   10c10:	e17ffd17 	ldw	r5,-12(fp)
   10c14:	e13ffe17 	ldw	r4,-8(fp)
   10c18:	0010d1c0 	call	10d1c <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>
	      break;
   10c1c:	00000406 	br	10c30 <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0xb0>
	      _M_destroy(__dest, _Local_storage());
   10c20:	380b883a 	mov	r5,r7
   10c24:	e13ffe17 	ldw	r4,-8(fp)
   10c28:	0010d7c0 	call	10d7c <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
   10c2c:	0001883a 	nop
	  return false;
   10c30:	0005883a 	mov	r2,zero
	}
   10c34:	e6ffff04 	addi	sp,fp,-4
   10c38:	dfc00217 	ldw	ra,8(sp)
   10c3c:	df000117 	ldw	fp,4(sp)
   10c40:	dc000017 	ldw	r16,0(sp)
   10c44:	dec00304 	addi	sp,sp,12
   10c48:	f800283a 	ret

00010c4c <_ZNKSt9_Any_data9_M_accessIPFvRN6Serial10rx_messageEEEERKT_v>:
      _M_access() const
   10c4c:	defffd04 	addi	sp,sp,-12
   10c50:	dfc00215 	stw	ra,8(sp)
   10c54:	df000115 	stw	fp,4(sp)
   10c58:	df000104 	addi	fp,sp,4
   10c5c:	e13fff15 	stw	r4,-4(fp)
      { return *static_cast<const _Tp*>(_M_access()); }
   10c60:	e13fff17 	ldw	r4,-4(fp)
   10c64:	00105300 	call	10530 <_ZNKSt9_Any_data9_M_accessEv>
   10c68:	e037883a 	mov	sp,fp
   10c6c:	dfc00117 	ldw	ra,4(sp)
   10c70:	df000017 	ldw	fp,0(sp)
   10c74:	dec00204 	addi	sp,sp,8
   10c78:	f800283a 	ret

00010c7c <_ZSt11__addressofIKPFvRN6Serial10rx_messageEEEPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   10c7c:	defffe04 	addi	sp,sp,-8
   10c80:	df000115 	stw	fp,4(sp)
   10c84:	df000104 	addi	fp,sp,4
   10c88:	e13fff15 	stw	r4,-4(fp)
    { return __builtin_addressof(__r); }
   10c8c:	e0bfff17 	ldw	r2,-4(fp)
   10c90:	e037883a 	mov	sp,fp
   10c94:	df000017 	ldw	fp,0(sp)
   10c98:	dec00104 	addi	sp,sp,4
   10c9c:	f800283a 	ret

00010ca0 <_ZSt7forwardIRPFvRN6Serial10rx_messageEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   10ca0:	defffe04 	addi	sp,sp,-8
   10ca4:	df000115 	stw	fp,4(sp)
   10ca8:	df000104 	addi	fp,sp,4
   10cac:	e13fff15 	stw	r4,-4(fp)
    { return static_cast<_Tp&&>(__t); }
   10cb0:	e0bfff17 	ldw	r2,-4(fp)
   10cb4:	e037883a 	mov	sp,fp
   10cb8:	df000017 	ldw	fp,0(sp)
   10cbc:	dec00104 	addi	sp,sp,4
   10cc0:	f800283a 	ret

00010cc4 <_ZSt13__invoke_implIvRPFvRN6Serial10rx_messageEEJS2_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
   10cc4:	defffa04 	addi	sp,sp,-24
   10cc8:	dfc00515 	stw	ra,20(sp)
   10ccc:	df000415 	stw	fp,16(sp)
   10cd0:	dc000315 	stw	r16,12(sp)
   10cd4:	df000404 	addi	fp,sp,16
   10cd8:	e13ffec5 	stb	r4,-5(fp)
   10cdc:	e17ffd15 	stw	r5,-12(fp)
   10ce0:	e1bffc15 	stw	r6,-16(fp)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   10ce4:	e13ffd17 	ldw	r4,-12(fp)
   10ce8:	0010ca00 	call	10ca0 <_ZSt7forwardIRPFvRN6Serial10rx_messageEEEOT_RNSt16remove_referenceIS6_E4typeE>
   10cec:	14000017 	ldw	r16,0(r2)
   10cf0:	e13ffc17 	ldw	r4,-16(fp)
   10cf4:	0010a980 	call	10a98 <_ZSt7forwardIRN6Serial10rx_messageEEOT_RNSt16remove_referenceIS3_E4typeE>
   10cf8:	1009883a 	mov	r4,r2
   10cfc:	803ee83a 	callr	r16
   10d00:	0001883a 	nop
   10d04:	e6ffff04 	addi	sp,fp,-4
   10d08:	dfc00217 	ldw	ra,8(sp)
   10d0c:	df000117 	ldw	fp,4(sp)
   10d10:	dc000017 	ldw	r16,0(sp)
   10d14:	dec00304 	addi	sp,sp,12
   10d18:	f800283a 	ret

00010d1c <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
   10d1c:	defffa04 	addi	sp,sp,-24
   10d20:	dfc00515 	stw	ra,20(sp)
   10d24:	df000415 	stw	fp,16(sp)
   10d28:	dc000315 	stw	r16,12(sp)
   10d2c:	df000404 	addi	fp,sp,16
   10d30:	e13ffe15 	stw	r4,-8(fp)
   10d34:	e17ffd15 	stw	r5,-12(fp)
   10d38:	e1bffcc5 	stb	r6,-13(fp)
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   10d3c:	e13ffd17 	ldw	r4,-12(fp)
   10d40:	0010c4c0 	call	10c4c <_ZNKSt9_Any_data9_M_accessIPFvRN6Serial10rx_messageEEEERKT_v>
   10d44:	14000017 	ldw	r16,0(r2)
   10d48:	e13ffe17 	ldw	r4,-8(fp)
   10d4c:	001050c0 	call	1050c <_ZNSt9_Any_data9_M_accessEv>
   10d50:	100b883a 	mov	r5,r2
   10d54:	01000104 	movi	r4,4
   10d58:	00104e40 	call	104e4 <_ZnwjPv>
   10d5c:	14000015 	stw	r16,0(r2)
	}
   10d60:	0001883a 	nop
   10d64:	e6ffff04 	addi	sp,fp,-4
   10d68:	dfc00217 	ldw	ra,8(sp)
   10d6c:	df000117 	ldw	fp,4(sp)
   10d70:	dc000017 	ldw	r16,0(sp)
   10d74:	dec00304 	addi	sp,sp,12
   10d78:	f800283a 	ret

00010d7c <_ZNSt14_Function_base13_Base_managerIPFvRN6Serial10rx_messageEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
   10d7c:	defffc04 	addi	sp,sp,-16
   10d80:	dfc00315 	stw	ra,12(sp)
   10d84:	df000215 	stw	fp,8(sp)
   10d88:	df000204 	addi	fp,sp,8
   10d8c:	e13fff15 	stw	r4,-4(fp)
   10d90:	e17ffec5 	stb	r5,-5(fp)
	  __victim._M_access<_Functor>().~_Functor();
   10d94:	e13fff17 	ldw	r4,-4(fp)
   10d98:	0010db40 	call	10db4 <_ZNSt9_Any_data9_M_accessIPFvRN6Serial10rx_messageEEEERT_v>
	}
   10d9c:	0001883a 	nop
   10da0:	e037883a 	mov	sp,fp
   10da4:	dfc00117 	ldw	ra,4(sp)
   10da8:	df000017 	ldw	fp,0(sp)
   10dac:	dec00204 	addi	sp,sp,8
   10db0:	f800283a 	ret

00010db4 <_ZNSt9_Any_data9_M_accessIPFvRN6Serial10rx_messageEEEERT_v>:
      _M_access()
   10db4:	defffd04 	addi	sp,sp,-12
   10db8:	dfc00215 	stw	ra,8(sp)
   10dbc:	df000115 	stw	fp,4(sp)
   10dc0:	df000104 	addi	fp,sp,4
   10dc4:	e13fff15 	stw	r4,-4(fp)
      { return *static_cast<_Tp*>(_M_access()); }
   10dc8:	e13fff17 	ldw	r4,-4(fp)
   10dcc:	001050c0 	call	1050c <_ZNSt9_Any_data9_M_accessEv>
   10dd0:	e037883a 	mov	sp,fp
   10dd4:	dfc00117 	ldw	ra,4(sp)
   10dd8:	df000017 	ldw	fp,0(sp)
   10ddc:	dec00204 	addi	sp,sp,8
   10de0:	f800283a 	ret

00010de4 <_ZN6Serial4UART10uart_0_isrEPv>:
std::array<uint8_t, Serial::MESSAGE_SIZE> Serial::UART::rx_data;
alt_u8 Serial::UART::rx_len = 0;
std::function<void(Serial::rx_message &received_message)> Serial::UART::callback;

void Serial::UART::uart_0_isr(void *)
{
   10de4:	defffa04 	addi	sp,sp,-24
   10de8:	dfc00515 	stw	ra,20(sp)
   10dec:	df000415 	stw	fp,16(sp)
   10df0:	dc000315 	stw	r16,12(sp)
   10df4:	df000404 	addi	fp,sp,16
   10df8:	e13ffc15 	stw	r4,-16(fp)
	// Check if the UART buffer is empty or if there are more messages waiting.
	alt_u16 status = IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE);
   10dfc:	008000b4 	movhi	r2,2
   10e00:	108a0237 	ldwio	r2,10248(r2)
   10e04:	e0bffe8d 	sth	r2,-6(fp)

	if(status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   10e08:	e0bffe8b 	ldhu	r2,-6(fp)
   10e0c:	1080200c 	andi	r2,r2,128
   10e10:	10001326 	beq	r2,zero,10e60 <_ZN6Serial4UART10uart_0_isrEPv+0x7c>
	{
		rx_data[rx_len] = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);
   10e14:	008000b4 	movhi	r2,2
   10e18:	140a0037 	ldwio	r16,10240(r2)
   10e1c:	d0a1f2c3 	ldbu	r2,-30773(gp)
   10e20:	10803fcc 	andi	r2,r2,255
   10e24:	100b883a 	mov	r5,r2
   10e28:	d121f1c4 	addi	r4,gp,-30777
   10e2c:	00106b00 	call	106b0 <_ZNSt5arrayIhLj4EEixEj>
   10e30:	8007883a 	mov	r3,r16
   10e34:	10c00005 	stb	r3,0(r2)
		rx_len ++ ;
   10e38:	d0a1f2c3 	ldbu	r2,-30773(gp)
   10e3c:	10800044 	addi	r2,r2,1
   10e40:	d0a1f2c5 	stb	r2,-30773(gp)

		if (rx_len >= MESSAGE_SIZE)
   10e44:	d0a1f2c3 	ldbu	r2,-30773(gp)
   10e48:	10803fcc 	andi	r2,r2,255
   10e4c:	10800130 	cmpltui	r2,r2,4
   10e50:	1000031e 	bne	r2,zero,10e60 <_ZN6Serial4UART10uart_0_isrEPv+0x7c>
		{
			uart_ready = true;
   10e54:	00800044 	movi	r2,1
   10e58:	d0a1f185 	stb	r2,-30778(gp)
			rx_len = 0;
   10e5c:	d021f2c5 	stb	zero,-30773(gp)
		}
	}

	if (uart_ready)
   10e60:	d0a1f183 	ldbu	r2,-30778(gp)
   10e64:	10803fcc 	andi	r2,r2,255
   10e68:	10000e26 	beq	r2,zero,10ea4 <_ZN6Serial4UART10uart_0_isrEPv+0xc0>
	{
		uart_ready = 0;
   10e6c:	d021f185 	stb	zero,-30778(gp)

		Serial::rx_message received_message;
		std::memcpy(&received_message, &rx_data, MESSAGE_SIZE);
   10e70:	d0a1f1c3 	ldbu	r2,-30777(gp)
   10e74:	e0bffd05 	stb	r2,-12(fp)
   10e78:	d0a1f203 	ldbu	r2,-30776(gp)
   10e7c:	e0bffd45 	stb	r2,-11(fp)
   10e80:	d0a1f243 	ldbu	r2,-30775(gp)
   10e84:	e0bffd85 	stb	r2,-10(fp)
   10e88:	d0a1f283 	ldbu	r2,-30774(gp)
   10e8c:	e0bffdc5 	stb	r2,-9(fp)

		callback(received_message);
   10e90:	e0bffd04 	addi	r2,fp,-12
   10e94:	100b883a 	mov	r5,r2
   10e98:	01000074 	movhi	r4,1
   10e9c:	211dfa04 	addi	r4,r4,30696
   10ea0:	00111340 	call	11134 <_ZNKSt8functionIFvRN6Serial10rx_messageEEEclES2_>
	}
}
   10ea4:	0001883a 	nop
   10ea8:	e6ffff04 	addi	sp,fp,-4
   10eac:	dfc00217 	ldw	ra,8(sp)
   10eb0:	df000117 	ldw	fp,4(sp)
   10eb4:	dc000017 	ldw	r16,0(sp)
   10eb8:	dec00304 	addi	sp,sp,12
   10ebc:	f800283a 	ret

00010ec0 <_ZN6Serial4UARTC1ESt8functionIFvRNS_10rx_messageEEE>:

Serial::UART::UART(std::function<void(Serial::rx_message &received_message)> func)
   10ec0:	defffa04 	addi	sp,sp,-24
   10ec4:	dfc00515 	stw	ra,20(sp)
   10ec8:	df000415 	stw	fp,16(sp)
   10ecc:	df000404 	addi	fp,sp,16
   10ed0:	e13ffe15 	stw	r4,-8(fp)
   10ed4:	e17ffd15 	stw	r5,-12(fp)
{
	callback = func;
   10ed8:	e17ffd17 	ldw	r5,-12(fp)
   10edc:	01000074 	movhi	r4,1
   10ee0:	211dfa04 	addi	r4,r4,30696
   10ee4:	00111ac0 	call	111ac <_ZNSt8functionIFvRN6Serial10rx_messageEEEaSERKS4_>

	// Clear status flag.
	IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE, 0x00);
   10ee8:	0007883a 	mov	r3,zero
   10eec:	008000b4 	movhi	r2,2
   10ef0:	10ca0235 	stwio	r3,10248(r2)

	// Read the useless value in the empty receive register.
	IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);
   10ef4:	008000b4 	movhi	r2,2
   10ef8:	108a0037 	ldwio	r2,10240(r2)

	// Setup RX IRQ routine.
	alt_u16 control = ALTERA_AVALON_UART_CONTROL_RRDY_MSK | ALTERA_AVALON_UART_CONTROL_E_MSK;
   10efc:	00806004 	movi	r2,384
   10f00:	e0bfff8d 	sth	r2,-2(fp)
	IOWR_ALTERA_AVALON_UART_CONTROL (UART_0_BASE, control);
   10f04:	e0ffff8b 	ldhu	r3,-2(fp)
   10f08:	008000b4 	movhi	r2,2
   10f0c:	10ca0335 	stwio	r3,10252(r2)

	// Install IRQ service routine.
    alt_ic_isr_register(UART_0_IRQ_INTERRUPT_CONTROLLER_ID, UART_0_IRQ, uart_0_isr, NULL, NULL);
   10f10:	d8000015 	stw	zero,0(sp)
   10f14:	000f883a 	mov	r7,zero
   10f18:	01800074 	movhi	r6,1
   10f1c:	31837904 	addi	r6,r6,3556
   10f20:	014000c4 	movi	r5,3
   10f24:	0009883a 	mov	r4,zero
   10f28:	00146c00 	call	146c0 <alt_ic_isr_register>

    // Enable interrupt.
	IOWR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE, ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
   10f2c:	00c02004 	movi	r3,128
   10f30:	008000b4 	movhi	r2,2
   10f34:	10ca0335 	stwio	r3,10252(r2)
}
   10f38:	0001883a 	nop
   10f3c:	e037883a 	mov	sp,fp
   10f40:	dfc00117 	ldw	ra,4(sp)
   10f44:	df000017 	ldw	fp,0(sp)
   10f48:	dec00204 	addi	sp,sp,8
   10f4c:	f800283a 	ret

00010f50 <_ZN6Serial4UART8sendDataESt5arrayIhLj4EE>:


void Serial::UART::sendData(std::array<uint8_t, 4> data)
{
   10f50:	defff704 	addi	sp,sp,-36
   10f54:	dfc00815 	stw	ra,32(sp)
   10f58:	df000715 	stw	fp,28(sp)
   10f5c:	df000704 	addi	fp,sp,28
   10f60:	e13ffa15 	stw	r4,-24(fp)
   10f64:	e17ff915 	stw	r5,-28(fp)
	for (uint8_t data_byte : data)
   10f68:	e0bff904 	addi	r2,fp,-28
   10f6c:	e0bffd15 	stw	r2,-12(fp)
   10f70:	e13ffd17 	ldw	r4,-12(fp)
   10f74:	00112080 	call	11208 <_ZNSt5arrayIhLj4EE5beginEv>
   10f78:	e0bfff15 	stw	r2,-4(fp)
   10f7c:	e13ffd17 	ldw	r4,-12(fp)
   10f80:	00112380 	call	11238 <_ZNSt5arrayIhLj4EE3endEv>
   10f84:	e0bffc15 	stw	r2,-16(fp)
   10f88:	e0ffff17 	ldw	r3,-4(fp)
   10f8c:	e0bffc17 	ldw	r2,-16(fp)
   10f90:	18801426 	beq	r3,r2,10fe4 <_ZN6Serial4UART8sendDataESt5arrayIhLj4EE+0x94>
   10f94:	e0bfff17 	ldw	r2,-4(fp)
   10f98:	10800003 	ldbu	r2,0(r2)
   10f9c:	e0bffbc5 	stb	r2,-17(fp)
	{
		alt_u8 status = IORD_ALTERA_AVALON_UART_STATUS (UART_0_BASE);
   10fa0:	008000b4 	movhi	r2,2
   10fa4:	108a0237 	ldwio	r2,10248(r2)
   10fa8:	e0bffec5 	stb	r2,-5(fp)

		// Wait for sending to finish.
		while (! (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK))
   10fac:	e0bffec3 	ldbu	r2,-5(fp)
   10fb0:	1080100c 	andi	r2,r2,64
   10fb4:	1000041e 	bne	r2,zero,10fc8 <_ZN6Serial4UART8sendDataESt5arrayIhLj4EE+0x78>
		{
			status = IORD_ALTERA_AVALON_UART_STATUS (UART_0_BASE);
   10fb8:	008000b4 	movhi	r2,2
   10fbc:	108a0237 	ldwio	r2,10248(r2)
   10fc0:	e0bffec5 	stb	r2,-5(fp)
		while (! (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK))
   10fc4:	003ff906 	br	10fac <_ZN6Serial4UART8sendDataESt5arrayIhLj4EE+0x5c>
		}

		IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, data_byte);
   10fc8:	e0fffbc3 	ldbu	r3,-17(fp)
   10fcc:	008000b4 	movhi	r2,2
   10fd0:	10ca0135 	stwio	r3,10244(r2)
	for (uint8_t data_byte : data)
   10fd4:	e0bfff17 	ldw	r2,-4(fp)
   10fd8:	10800044 	addi	r2,r2,1
   10fdc:	e0bfff15 	stw	r2,-4(fp)
   10fe0:	003fe906 	br	10f88 <_ZN6Serial4UART8sendDataESt5arrayIhLj4EE+0x38>
	}
}
   10fe4:	0001883a 	nop
   10fe8:	e037883a 	mov	sp,fp
   10fec:	dfc00117 	ldw	ra,4(sp)
   10ff0:	df000017 	ldw	fp,0(sp)
   10ff4:	dec00204 	addi	sp,sp,8
   10ff8:	f800283a 	ret

00010ffc <_Z41__static_initialization_and_destruction_0ii>:
   10ffc:	defffc04 	addi	sp,sp,-16
   11000:	dfc00315 	stw	ra,12(sp)
   11004:	df000215 	stw	fp,8(sp)
   11008:	df000204 	addi	fp,sp,8
   1100c:	e13fff15 	stw	r4,-4(fp)
   11010:	e17ffe15 	stw	r5,-8(fp)
   11014:	e0bfff17 	ldw	r2,-4(fp)
   11018:	10800058 	cmpnei	r2,r2,1
   1101c:	1000061e 	bne	r2,zero,11038 <_Z41__static_initialization_and_destruction_0ii+0x3c>
   11020:	e0fffe17 	ldw	r3,-8(fp)
   11024:	00bfffd4 	movui	r2,65535
   11028:	1880031e 	bne	r3,r2,11038 <_Z41__static_initialization_and_destruction_0ii+0x3c>
std::function<void(Serial::rx_message &received_message)> Serial::UART::callback;
   1102c:	01000074 	movhi	r4,1
   11030:	211dfa04 	addi	r4,r4,30696
   11034:	00110fc0 	call	110fc <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1Ev>
   11038:	e0bfff17 	ldw	r2,-4(fp)
   1103c:	1000061e 	bne	r2,zero,11058 <_Z41__static_initialization_and_destruction_0ii+0x5c>
   11040:	e0fffe17 	ldw	r3,-8(fp)
   11044:	00bfffd4 	movui	r2,65535
   11048:	1880031e 	bne	r3,r2,11058 <_Z41__static_initialization_and_destruction_0ii+0x5c>
   1104c:	01000074 	movhi	r4,1
   11050:	211dfa04 	addi	r4,r4,30696
   11054:	00106780 	call	10678 <_ZNSt8functionIFvRN6Serial10rx_messageEEED1Ev>
}
   11058:	0001883a 	nop
   1105c:	e037883a 	mov	sp,fp
   11060:	dfc00117 	ldw	ra,4(sp)
   11064:	df000017 	ldw	fp,0(sp)
   11068:	dec00204 	addi	sp,sp,8
   1106c:	f800283a 	ret

00011070 <_GLOBAL__sub_I__ZN6Serial4UART10uart_readyE>:
   11070:	defffe04 	addi	sp,sp,-8
   11074:	dfc00115 	stw	ra,4(sp)
   11078:	df000015 	stw	fp,0(sp)
   1107c:	d839883a 	mov	fp,sp
   11080:	017fffd4 	movui	r5,65535
   11084:	01000044 	movi	r4,1
   11088:	0010ffc0 	call	10ffc <_Z41__static_initialization_and_destruction_0ii>
   1108c:	e037883a 	mov	sp,fp
   11090:	dfc00117 	ldw	ra,4(sp)
   11094:	df000017 	ldw	fp,0(sp)
   11098:	dec00204 	addi	sp,sp,8
   1109c:	f800283a 	ret

000110a0 <_GLOBAL__sub_D__ZN6Serial4UART10uart_readyE>:
   110a0:	defffe04 	addi	sp,sp,-8
   110a4:	dfc00115 	stw	ra,4(sp)
   110a8:	df000015 	stw	fp,0(sp)
   110ac:	d839883a 	mov	fp,sp
   110b0:	017fffd4 	movui	r5,65535
   110b4:	0009883a 	mov	r4,zero
   110b8:	0010ffc0 	call	10ffc <_Z41__static_initialization_and_destruction_0ii>
   110bc:	e037883a 	mov	sp,fp
   110c0:	dfc00117 	ldw	ra,4(sp)
   110c4:	df000017 	ldw	fp,0(sp)
   110c8:	dec00204 	addi	sp,sp,8
   110cc:	f800283a 	ret

000110d0 <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
   110d0:	defffe04 	addi	sp,sp,-8
   110d4:	df000115 	stw	fp,4(sp)
   110d8:	df000104 	addi	fp,sp,4
   110dc:	e13fff15 	stw	r4,-4(fp)
   110e0:	e0bfff17 	ldw	r2,-4(fp)
   110e4:	10800217 	ldw	r2,8(r2)
   110e8:	1005003a 	cmpeq	r2,r2,zero
   110ec:	e037883a 	mov	sp,fp
   110f0:	df000017 	ldw	fp,0(sp)
   110f4:	dec00104 	addi	sp,sp,4
   110f8:	f800283a 	ret

000110fc <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1Ev>:
      function() noexcept
   110fc:	defffd04 	addi	sp,sp,-12
   11100:	dfc00215 	stw	ra,8(sp)
   11104:	df000115 	stw	fp,4(sp)
   11108:	df000104 	addi	fp,sp,4
   1110c:	e13fff15 	stw	r4,-4(fp)
      : _Function_base() { }
   11110:	e0bfff17 	ldw	r2,-4(fp)
   11114:	1009883a 	mov	r4,r2
   11118:	00105540 	call	10554 <_ZNSt14_Function_baseC1Ev>
   1111c:	0001883a 	nop
   11120:	e037883a 	mov	sp,fp
   11124:	dfc00117 	ldw	ra,4(sp)
   11128:	df000017 	ldw	fp,0(sp)
   1112c:	dec00204 	addi	sp,sp,8
   11130:	f800283a 	ret

00011134 <_ZNKSt8functionIFvRN6Serial10rx_messageEEEclES2_>:

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   11134:	defffa04 	addi	sp,sp,-24
   11138:	dfc00515 	stw	ra,20(sp)
   1113c:	df000415 	stw	fp,16(sp)
   11140:	dc400315 	stw	r17,12(sp)
   11144:	dc000215 	stw	r16,8(sp)
   11148:	df000404 	addi	fp,sp,16
   1114c:	e13ffd15 	stw	r4,-12(fp)
   11150:	e17ffc15 	stw	r5,-16(fp)
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   11154:	e0bffd17 	ldw	r2,-12(fp)
   11158:	1009883a 	mov	r4,r2
   1115c:	00110d00 	call	110d0 <_ZNKSt14_Function_base8_M_emptyEv>
   11160:	10803fcc 	andi	r2,r2,255
   11164:	10000126 	beq	r2,zero,1116c <_ZNKSt8functionIFvRN6Serial10rx_messageEEEclES2_+0x38>
	__throw_bad_function_call();
   11168:	0012b8c0 	call	12b8c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   1116c:	e0bffd17 	ldw	r2,-12(fp)
   11170:	14000317 	ldw	r16,12(r2)
   11174:	e47ffd17 	ldw	r17,-12(fp)
   11178:	e13ffc17 	ldw	r4,-16(fp)
   1117c:	0010a980 	call	10a98 <_ZSt7forwardIRN6Serial10rx_messageEEOT_RNSt16remove_referenceIS3_E4typeE>
   11180:	100b883a 	mov	r5,r2
   11184:	8809883a 	mov	r4,r17
   11188:	803ee83a 	callr	r16
   1118c:	0001883a 	nop
    }
   11190:	e6fffe04 	addi	sp,fp,-8
   11194:	dfc00317 	ldw	ra,12(sp)
   11198:	df000217 	ldw	fp,8(sp)
   1119c:	dc400117 	ldw	r17,4(sp)
   111a0:	dc000017 	ldw	r16,0(sp)
   111a4:	dec00404 	addi	sp,sp,16
   111a8:	f800283a 	ret

000111ac <_ZNSt8functionIFvRN6Serial10rx_messageEEEaSERKS4_>:
      operator=(const function& __x)
   111ac:	defff804 	addi	sp,sp,-32
   111b0:	dfc00715 	stw	ra,28(sp)
   111b4:	df000615 	stw	fp,24(sp)
   111b8:	df000604 	addi	fp,sp,24
   111bc:	e13ffb15 	stw	r4,-20(fp)
   111c0:	e17ffa15 	stw	r5,-24(fp)
	function(__x).swap(*this);
   111c4:	e0bffc04 	addi	r2,fp,-16
   111c8:	e17ffa17 	ldw	r5,-24(fp)
   111cc:	1009883a 	mov	r4,r2
   111d0:	001126c0 	call	1126c <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1ERKS4_>
   111d4:	e0bffc04 	addi	r2,fp,-16
   111d8:	e17ffb17 	ldw	r5,-20(fp)
   111dc:	1009883a 	mov	r4,r2
   111e0:	00113ac0 	call	113ac <_ZNSt8functionIFvRN6Serial10rx_messageEEE4swapERS4_>
   111e4:	e0bffc04 	addi	r2,fp,-16
   111e8:	1009883a 	mov	r4,r2
   111ec:	00106780 	call	10678 <_ZNSt8functionIFvRN6Serial10rx_messageEEED1Ev>
	return *this;
   111f0:	e0bffb17 	ldw	r2,-20(fp)
      }
   111f4:	e037883a 	mov	sp,fp
   111f8:	dfc00117 	ldw	ra,4(sp)
   111fc:	df000017 	ldw	fp,0(sp)
   11200:	dec00204 	addi	sp,sp,8
   11204:	f800283a 	ret

00011208 <_ZNSt5arrayIhLj4EE5beginEv>:
      begin() noexcept
   11208:	defffd04 	addi	sp,sp,-12
   1120c:	dfc00215 	stw	ra,8(sp)
   11210:	df000115 	stw	fp,4(sp)
   11214:	df000104 	addi	fp,sp,4
   11218:	e13fff15 	stw	r4,-4(fp)
      { return iterator(data()); }
   1121c:	e13fff17 	ldw	r4,-4(fp)
   11220:	00114280 	call	11428 <_ZNSt5arrayIhLj4EE4dataEv>
   11224:	e037883a 	mov	sp,fp
   11228:	dfc00117 	ldw	ra,4(sp)
   1122c:	df000017 	ldw	fp,0(sp)
   11230:	dec00204 	addi	sp,sp,8
   11234:	f800283a 	ret

00011238 <_ZNSt5arrayIhLj4EE3endEv>:
      end() noexcept
   11238:	defffd04 	addi	sp,sp,-12
   1123c:	dfc00215 	stw	ra,8(sp)
   11240:	df000115 	stw	fp,4(sp)
   11244:	df000104 	addi	fp,sp,4
   11248:	e13fff15 	stw	r4,-4(fp)
      { return iterator(data() + _Nm); }
   1124c:	e13fff17 	ldw	r4,-4(fp)
   11250:	00114280 	call	11428 <_ZNSt5arrayIhLj4EE4dataEv>
   11254:	10800104 	addi	r2,r2,4
   11258:	e037883a 	mov	sp,fp
   1125c:	dfc00117 	ldw	ra,4(sp)
   11260:	df000017 	ldw	fp,0(sp)
   11264:	dec00204 	addi	sp,sp,8
   11268:	f800283a 	ret

0001126c <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1ERKS4_>:
    function<_Res(_ArgTypes...)>::
   1126c:	deffe604 	addi	sp,sp,-104
   11270:	dfc01915 	stw	ra,100(sp)
   11274:	df001815 	stw	fp,96(sp)
   11278:	ddc01715 	stw	r23,92(sp)
   1127c:	dd801615 	stw	r22,88(sp)
   11280:	dd401515 	stw	r21,84(sp)
   11284:	dd001415 	stw	r20,80(sp)
   11288:	dcc01315 	stw	r19,76(sp)
   1128c:	dc801215 	stw	r18,72(sp)
   11290:	dc401115 	stw	r17,68(sp)
   11294:	dc001015 	stw	r16,64(sp)
   11298:	df001804 	addi	fp,sp,96
   1129c:	e13ff715 	stw	r4,-36(fp)
   112a0:	e17ff615 	stw	r5,-40(fp)
   112a4:	00800074 	movhi	r2,1
   112a8:	1086eb04 	addi	r2,r2,7084
   112ac:	e0bfef15 	stw	r2,-68(fp)
   112b0:	00800074 	movhi	r2,1
   112b4:	10990b04 	addi	r2,r2,25644
   112b8:	e0bff015 	stw	r2,-64(fp)
   112bc:	e0bff104 	addi	r2,fp,-60
   112c0:	17000015 	stw	fp,0(r2)
   112c4:	00c00074 	movhi	r3,1
   112c8:	18c4d004 	addi	r3,r3,4928
   112cc:	10c00115 	stw	r3,4(r2)
   112d0:	16c00215 	stw	sp,8(r2)
   112d4:	e0bfe904 	addi	r2,fp,-92
   112d8:	1009883a 	mov	r4,r2
   112dc:	0013bbc0 	call	13bbc <_Unwind_SjLj_Register>
    : _Function_base()
   112e0:	e0bff717 	ldw	r2,-36(fp)
   112e4:	1009883a 	mov	r4,r2
   112e8:	00105540 	call	10554 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
   112ec:	e13ff617 	ldw	r4,-40(fp)
   112f0:	001145c0 	call	1145c <_ZNKSt8functionIFvRN6Serial10rx_messageEEEcvbEv>
   112f4:	10803fcc 	andi	r2,r2,255
   112f8:	10001b26 	beq	r2,zero,11368 <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1ERKS4_+0xfc>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   112fc:	e0bff617 	ldw	r2,-40(fp)
   11300:	10800217 	ldw	r2,8(r2)
   11304:	e13ff717 	ldw	r4,-36(fp)
   11308:	e17ff617 	ldw	r5,-40(fp)
   1130c:	00c00044 	movi	r3,1
   11310:	e0ffea15 	stw	r3,-88(fp)
   11314:	01800084 	movi	r6,2
   11318:	103ee83a 	callr	r2
	  _M_invoker = __x._M_invoker;
   1131c:	e0bff617 	ldw	r2,-40(fp)
   11320:	10c00317 	ldw	r3,12(r2)
   11324:	e0bff717 	ldw	r2,-36(fp)
   11328:	10c00315 	stw	r3,12(r2)
	  _M_manager = __x._M_manager;
   1132c:	e0bff617 	ldw	r2,-40(fp)
   11330:	10c00217 	ldw	r3,8(r2)
   11334:	e0bff717 	ldw	r2,-36(fp)
   11338:	10c00215 	stw	r3,8(r2)
    }
   1133c:	00000a06 	br	11368 <_ZNSt8functionIFvRN6Serial10rx_messageEEEC1ERKS4_+0xfc>
    : _Function_base()
   11340:	e0bfeb17 	ldw	r2,-84(fp)
   11344:	e0bfe815 	stw	r2,-96(fp)
   11348:	e0bff717 	ldw	r2,-36(fp)
   1134c:	1009883a 	mov	r4,r2
   11350:	00105800 	call	10580 <_ZNSt14_Function_baseD1Ev>
   11354:	e0ffe817 	ldw	r3,-96(fp)
   11358:	00bfffc4 	movi	r2,-1
   1135c:	e0bfea15 	stw	r2,-88(fp)
   11360:	1809883a 	mov	r4,r3
   11364:	0013da40 	call	13da4 <_Unwind_SjLj_Resume>
    }
   11368:	0001883a 	nop
   1136c:	e0bfe904 	addi	r2,fp,-92
   11370:	1009883a 	mov	r4,r2
   11374:	0013bd40 	call	13bd4 <_Unwind_SjLj_Unregister>
   11378:	e6fff804 	addi	sp,fp,-32
   1137c:	dfc00917 	ldw	ra,36(sp)
   11380:	df000817 	ldw	fp,32(sp)
   11384:	ddc00717 	ldw	r23,28(sp)
   11388:	dd800617 	ldw	r22,24(sp)
   1138c:	dd400517 	ldw	r21,20(sp)
   11390:	dd000417 	ldw	r20,16(sp)
   11394:	dcc00317 	ldw	r19,12(sp)
   11398:	dc800217 	ldw	r18,8(sp)
   1139c:	dc400117 	ldw	r17,4(sp)
   113a0:	dc000017 	ldw	r16,0(sp)
   113a4:	dec00a04 	addi	sp,sp,40
   113a8:	f800283a 	ret

000113ac <_ZNSt8functionIFvRN6Serial10rx_messageEEE4swapERS4_>:
      void swap(function& __x) noexcept
   113ac:	defffc04 	addi	sp,sp,-16
   113b0:	dfc00315 	stw	ra,12(sp)
   113b4:	df000215 	stw	fp,8(sp)
   113b8:	df000204 	addi	fp,sp,8
   113bc:	e13fff15 	stw	r4,-4(fp)
   113c0:	e17ffe15 	stw	r5,-8(fp)
	std::swap(_M_functor, __x._M_functor);
   113c4:	e0bfff17 	ldw	r2,-4(fp)
   113c8:	e0fffe17 	ldw	r3,-8(fp)
   113cc:	180b883a 	mov	r5,r3
   113d0:	1009883a 	mov	r4,r2
   113d4:	00114b80 	call	114b8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
   113d8:	e0bfff17 	ldw	r2,-4(fp)
   113dc:	10c00204 	addi	r3,r2,8
   113e0:	e0bffe17 	ldw	r2,-8(fp)
   113e4:	10800204 	addi	r2,r2,8
   113e8:	100b883a 	mov	r5,r2
   113ec:	1809883a 	mov	r4,r3
   113f0:	00115680 	call	11568 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
   113f4:	e0bfff17 	ldw	r2,-4(fp)
   113f8:	10c00304 	addi	r3,r2,12
   113fc:	e0bffe17 	ldw	r2,-8(fp)
   11400:	10800304 	addi	r2,r2,12
   11404:	100b883a 	mov	r5,r2
   11408:	1809883a 	mov	r4,r3
   1140c:	00115f80 	call	115f8 <_ZSt4swapIPFvRKSt9_Any_dataRN6Serial10rx_messageEEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
   11410:	0001883a 	nop
   11414:	e037883a 	mov	sp,fp
   11418:	dfc00117 	ldw	ra,4(sp)
   1141c:	df000017 	ldw	fp,0(sp)
   11420:	dec00204 	addi	sp,sp,8
   11424:	f800283a 	ret

00011428 <_ZNSt5arrayIhLj4EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
   11428:	defffd04 	addi	sp,sp,-12
   1142c:	dfc00215 	stw	ra,8(sp)
   11430:	df000115 	stw	fp,4(sp)
   11434:	df000104 	addi	fp,sp,4
   11438:	e13fff15 	stw	r4,-4(fp)
      { return _AT_Type::_S_ptr(_M_elems); }
   1143c:	e0bfff17 	ldw	r2,-4(fp)
   11440:	1009883a 	mov	r4,r2
   11444:	00116640 	call	11664 <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>
   11448:	e037883a 	mov	sp,fp
   1144c:	dfc00117 	ldw	ra,4(sp)
   11450:	df000017 	ldw	fp,0(sp)
   11454:	dec00204 	addi	sp,sp,8
   11458:	f800283a 	ret

0001145c <_ZNKSt8functionIFvRN6Serial10rx_messageEEEcvbEv>:
      explicit operator bool() const noexcept
   1145c:	defffd04 	addi	sp,sp,-12
   11460:	dfc00215 	stw	ra,8(sp)
   11464:	df000115 	stw	fp,4(sp)
   11468:	df000104 	addi	fp,sp,4
   1146c:	e13fff15 	stw	r4,-4(fp)
      { return !_M_empty(); }
   11470:	e0bfff17 	ldw	r2,-4(fp)
   11474:	1009883a 	mov	r4,r2
   11478:	00110d00 	call	110d0 <_ZNKSt14_Function_base8_M_emptyEv>
   1147c:	1080005c 	xori	r2,r2,1
   11480:	e037883a 	mov	sp,fp
   11484:	dfc00117 	ldw	ra,4(sp)
   11488:	df000017 	ldw	fp,0(sp)
   1148c:	dec00204 	addi	sp,sp,8
   11490:	f800283a 	ret

00011494 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
   11494:	defffe04 	addi	sp,sp,-8
   11498:	df000115 	stw	fp,4(sp)
   1149c:	df000104 	addi	fp,sp,4
   114a0:	e13fff15 	stw	r4,-4(fp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   114a4:	e0bfff17 	ldw	r2,-4(fp)
   114a8:	e037883a 	mov	sp,fp
   114ac:	df000017 	ldw	fp,0(sp)
   114b0:	dec00104 	addi	sp,sp,4
   114b4:	f800283a 	ret

000114b8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   114b8:	defffa04 	addi	sp,sp,-24
   114bc:	dfc00515 	stw	ra,20(sp)
   114c0:	df000415 	stw	fp,16(sp)
   114c4:	df000404 	addi	fp,sp,16
   114c8:	e13ffd15 	stw	r4,-12(fp)
   114cc:	e17ffc15 	stw	r5,-16(fp)
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   114d0:	e13ffd17 	ldw	r4,-12(fp)
   114d4:	00114940 	call	11494 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
   114d8:	10c00017 	ldw	r3,0(r2)
   114dc:	e0fffe15 	stw	r3,-8(fp)
   114e0:	10800117 	ldw	r2,4(r2)
   114e4:	e0bfff15 	stw	r2,-4(fp)
      __a = _GLIBCXX_MOVE(__b);
   114e8:	e13ffc17 	ldw	r4,-16(fp)
   114ec:	00114940 	call	11494 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
   114f0:	1007883a 	mov	r3,r2
   114f4:	e0bffd17 	ldw	r2,-12(fp)
   114f8:	19000017 	ldw	r4,0(r3)
   114fc:	11000015 	stw	r4,0(r2)
   11500:	18c00117 	ldw	r3,4(r3)
   11504:	10c00115 	stw	r3,4(r2)
      __b = _GLIBCXX_MOVE(__tmp);
   11508:	e0bffe04 	addi	r2,fp,-8
   1150c:	1009883a 	mov	r4,r2
   11510:	00114940 	call	11494 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
   11514:	1007883a 	mov	r3,r2
   11518:	e0bffc17 	ldw	r2,-16(fp)
   1151c:	19000017 	ldw	r4,0(r3)
   11520:	11000015 	stw	r4,0(r2)
   11524:	18c00117 	ldw	r3,4(r3)
   11528:	10c00115 	stw	r3,4(r2)
    }
   1152c:	0001883a 	nop
   11530:	e037883a 	mov	sp,fp
   11534:	dfc00117 	ldw	ra,4(sp)
   11538:	df000017 	ldw	fp,0(sp)
   1153c:	dec00204 	addi	sp,sp,8
   11540:	f800283a 	ret

00011544 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
   11544:	defffe04 	addi	sp,sp,-8
   11548:	df000115 	stw	fp,4(sp)
   1154c:	df000104 	addi	fp,sp,4
   11550:	e13fff15 	stw	r4,-4(fp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   11554:	e0bfff17 	ldw	r2,-4(fp)
   11558:	e037883a 	mov	sp,fp
   1155c:	df000017 	ldw	fp,0(sp)
   11560:	dec00104 	addi	sp,sp,4
   11564:	f800283a 	ret

00011568 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
   11568:	defffb04 	addi	sp,sp,-20
   1156c:	dfc00415 	stw	ra,16(sp)
   11570:	df000315 	stw	fp,12(sp)
   11574:	df000304 	addi	fp,sp,12
   11578:	e13ffe15 	stw	r4,-8(fp)
   1157c:	e17ffd15 	stw	r5,-12(fp)
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   11580:	e13ffe17 	ldw	r4,-8(fp)
   11584:	00115440 	call	11544 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
   11588:	10800017 	ldw	r2,0(r2)
   1158c:	e0bfff15 	stw	r2,-4(fp)
      __a = _GLIBCXX_MOVE(__b);
   11590:	e13ffd17 	ldw	r4,-12(fp)
   11594:	00115440 	call	11544 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
   11598:	10c00017 	ldw	r3,0(r2)
   1159c:	e0bffe17 	ldw	r2,-8(fp)
   115a0:	10c00015 	stw	r3,0(r2)
      __b = _GLIBCXX_MOVE(__tmp);
   115a4:	e0bfff04 	addi	r2,fp,-4
   115a8:	1009883a 	mov	r4,r2
   115ac:	00115440 	call	11544 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
   115b0:	10c00017 	ldw	r3,0(r2)
   115b4:	e0bffd17 	ldw	r2,-12(fp)
   115b8:	10c00015 	stw	r3,0(r2)
    }
   115bc:	0001883a 	nop
   115c0:	e037883a 	mov	sp,fp
   115c4:	dfc00117 	ldw	ra,4(sp)
   115c8:	df000017 	ldw	fp,0(sp)
   115cc:	dec00204 	addi	sp,sp,8
   115d0:	f800283a 	ret

000115d4 <_ZSt4moveIRPFvRKSt9_Any_dataRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
   115d4:	defffe04 	addi	sp,sp,-8
   115d8:	df000115 	stw	fp,4(sp)
   115dc:	df000104 	addi	fp,sp,4
   115e0:	e13fff15 	stw	r4,-4(fp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
   115e4:	e0bfff17 	ldw	r2,-4(fp)
   115e8:	e037883a 	mov	sp,fp
   115ec:	df000017 	ldw	fp,0(sp)
   115f0:	dec00104 	addi	sp,sp,4
   115f4:	f800283a 	ret

000115f8 <_ZSt4swapIPFvRKSt9_Any_dataRN6Serial10rx_messageEEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
   115f8:	defffb04 	addi	sp,sp,-20
   115fc:	dfc00415 	stw	ra,16(sp)
   11600:	df000315 	stw	fp,12(sp)
   11604:	df000304 	addi	fp,sp,12
   11608:	e13ffe15 	stw	r4,-8(fp)
   1160c:	e17ffd15 	stw	r5,-12(fp)
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   11610:	e13ffe17 	ldw	r4,-8(fp)
   11614:	00115d40 	call	115d4 <_ZSt4moveIRPFvRKSt9_Any_dataRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOSA_>
   11618:	10800017 	ldw	r2,0(r2)
   1161c:	e0bfff15 	stw	r2,-4(fp)
      __a = _GLIBCXX_MOVE(__b);
   11620:	e13ffd17 	ldw	r4,-12(fp)
   11624:	00115d40 	call	115d4 <_ZSt4moveIRPFvRKSt9_Any_dataRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOSA_>
   11628:	10c00017 	ldw	r3,0(r2)
   1162c:	e0bffe17 	ldw	r2,-8(fp)
   11630:	10c00015 	stw	r3,0(r2)
      __b = _GLIBCXX_MOVE(__tmp);
   11634:	e0bfff04 	addi	r2,fp,-4
   11638:	1009883a 	mov	r4,r2
   1163c:	00115d40 	call	115d4 <_ZSt4moveIRPFvRKSt9_Any_dataRN6Serial10rx_messageEEEONSt16remove_referenceIT_E4typeEOSA_>
   11640:	10c00017 	ldw	r3,0(r2)
   11644:	e0bffd17 	ldw	r2,-12(fp)
   11648:	10c00015 	stw	r3,0(r2)
    }
   1164c:	0001883a 	nop
   11650:	e037883a 	mov	sp,fp
   11654:	dfc00117 	ldw	ra,4(sp)
   11658:	df000017 	ldw	fp,0(sp)
   1165c:	dec00204 	addi	sp,sp,8
   11660:	f800283a 	ret

00011664 <_ZNSt14__array_traitsIhLj4EE6_S_ptrERA4_Kh>:
      _S_ptr(const _Type& __t) noexcept
   11664:	defffe04 	addi	sp,sp,-8
   11668:	df000115 	stw	fp,4(sp)
   1166c:	df000104 	addi	fp,sp,4
   11670:	e13fff15 	stw	r4,-4(fp)
      { return const_cast<_Tp*>(__t); }
   11674:	e0bfff17 	ldw	r2,-4(fp)
   11678:	e037883a 	mov	sp,fp
   1167c:	df000017 	ldw	fp,0(sp)
   11680:	dec00104 	addi	sp,sp,4
   11684:	f800283a 	ret

00011688 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>:
   11688:	28800017 	ldw	r2,0(r5)
   1168c:	30c00017 	ldw	r3,0(r6)
   11690:	defffb04 	addi	sp,sp,-20
   11694:	10800217 	ldw	r2,8(r2)
   11698:	dc800315 	stw	r18,12(sp)
   1169c:	dc400215 	stw	r17,8(sp)
   116a0:	dc000115 	stw	r16,4(sp)
   116a4:	dfc00415 	stw	ra,16(sp)
   116a8:	2023883a 	mov	r17,r4
   116ac:	d8c00015 	stw	r3,0(sp)
   116b0:	2809883a 	mov	r4,r5
   116b4:	2821883a 	mov	r16,r5
   116b8:	3025883a 	mov	r18,r6
   116bc:	103ee83a 	callr	r2
   116c0:	10803fcc 	andi	r2,r2,255
   116c4:	10000326 	beq	r2,zero,116d4 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x4c>
   116c8:	d8800017 	ldw	r2,0(sp)
   116cc:	10800017 	ldw	r2,0(r2)
   116d0:	d8800015 	stw	r2,0(sp)
   116d4:	88800017 	ldw	r2,0(r17)
   116d8:	01c00044 	movi	r7,1
   116dc:	d80d883a 	mov	r6,sp
   116e0:	10800417 	ldw	r2,16(r2)
   116e4:	800b883a 	mov	r5,r16
   116e8:	8809883a 	mov	r4,r17
   116ec:	103ee83a 	callr	r2
   116f0:	10c03fcc 	andi	r3,r2,255
   116f4:	18000226 	beq	r3,zero,11700 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv+0x78>
   116f8:	d8c00017 	ldw	r3,0(sp)
   116fc:	90c00015 	stw	r3,0(r18)
   11700:	dfc00417 	ldw	ra,16(sp)
   11704:	dc800317 	ldw	r18,12(sp)
   11708:	dc400217 	ldw	r17,8(sp)
   1170c:	dc000117 	ldw	r16,4(sp)
   11710:	dec00504 	addi	sp,sp,20
   11714:	f800283a 	ret

00011718 <_ZL28read_encoded_value_with_basehjPKhPj>:
   11718:	20803fcc 	andi	r2,r4,255
   1171c:	10801418 	cmpnei	r2,r2,80
   11720:	10002c26 	beq	r2,zero,117d4 <_ZL28read_encoded_value_with_basehjPKhPj+0xbc>
   11724:	208003cc 	andi	r2,r4,15
   11728:	10c00368 	cmpgeui	r3,r2,13
   1172c:	1800711e 	bne	r3,zero,118f4 <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
   11730:	100490ba 	slli	r2,r2,2
   11734:	00c00074 	movhi	r3,1
   11738:	10c7883a 	add	r3,r2,r3
   1173c:	1885d117 	ldw	r2,5956(r3)
   11740:	1000683a 	jmp	r2
   11744:	00011778 	rdprs	zero,zero,1117
   11748:	00011868 	cmpgeui	zero,zero,1121
   1174c:	0001182c 	andhi	zero,zero,1120
   11750:	00011778 	rdprs	zero,zero,1117
   11754:	000117fc 	xorhi	zero,zero,1119
   11758:	000118f4 	movhi	zero,1123
   1175c:	000118f4 	movhi	zero,1123
   11760:	000118f4 	movhi	zero,1123
   11764:	000118f4 	movhi	zero,1123
   11768:	000118a0 	cmpeqi	zero,zero,1122
   1176c:	00011844 	movi	zero,1121
   11770:	00011778 	rdprs	zero,zero,1117
   11774:	000117fc 	xorhi	zero,zero,1119
   11778:	32000043 	ldbu	r8,1(r6)
   1177c:	30800083 	ldbu	r2,2(r6)
   11780:	30c000c3 	ldbu	r3,3(r6)
   11784:	32400003 	ldbu	r9,0(r6)
   11788:	4010923a 	slli	r8,r8,8
   1178c:	1004943a 	slli	r2,r2,16
   11790:	1806963a 	slli	r3,r3,24
   11794:	4250b03a 	or	r8,r8,r9
   11798:	1204b03a 	or	r2,r2,r8
   1179c:	1886b03a 	or	r3,r3,r2
   117a0:	30800104 	addi	r2,r6,4
   117a4:	18000926 	beq	r3,zero,117cc <_ZL28read_encoded_value_with_basehjPKhPj+0xb4>
   117a8:	22001c0c 	andi	r8,r4,112
   117ac:	42000418 	cmpnei	r8,r8,16
   117b0:	4000011e 	bne	r8,zero,117b8 <_ZL28read_encoded_value_with_basehjPKhPj+0xa0>
   117b4:	300b883a 	mov	r5,r6
   117b8:	21003fcc 	andi	r4,r4,255
   117bc:	2100201c 	xori	r4,r4,128
   117c0:	213fe004 	addi	r4,r4,-128
   117c4:	1947883a 	add	r3,r3,r5
   117c8:	20000916 	blt	r4,zero,117f0 <_ZL28read_encoded_value_with_basehjPKhPj+0xd8>
   117cc:	38c00015 	stw	r3,0(r7)
   117d0:	f800283a 	ret
   117d4:	308000c4 	addi	r2,r6,3
   117d8:	01bfff04 	movi	r6,-4
   117dc:	1184703a 	and	r2,r2,r6
   117e0:	10c00017 	ldw	r3,0(r2)
   117e4:	10800104 	addi	r2,r2,4
   117e8:	38c00015 	stw	r3,0(r7)
   117ec:	f800283a 	ret
   117f0:	18c00017 	ldw	r3,0(r3)
   117f4:	38c00015 	stw	r3,0(r7)
   117f8:	f800283a 	ret
   117fc:	32000043 	ldbu	r8,1(r6)
   11800:	30800083 	ldbu	r2,2(r6)
   11804:	30c000c3 	ldbu	r3,3(r6)
   11808:	32400003 	ldbu	r9,0(r6)
   1180c:	4010923a 	slli	r8,r8,8
   11810:	1004943a 	slli	r2,r2,16
   11814:	1806963a 	slli	r3,r3,24
   11818:	4250b03a 	or	r8,r8,r9
   1181c:	1204b03a 	or	r2,r2,r8
   11820:	1886b03a 	or	r3,r3,r2
   11824:	30800204 	addi	r2,r6,8
   11828:	003fde06 	br	117a4 <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
   1182c:	30c00043 	ldbu	r3,1(r6)
   11830:	32000003 	ldbu	r8,0(r6)
   11834:	30800084 	addi	r2,r6,2
   11838:	1806923a 	slli	r3,r3,8
   1183c:	1a06b03a 	or	r3,r3,r8
   11840:	003fd806 	br	117a4 <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
   11844:	30c00043 	ldbu	r3,1(r6)
   11848:	32000003 	ldbu	r8,0(r6)
   1184c:	30800084 	addi	r2,r6,2
   11850:	1806923a 	slli	r3,r3,8
   11854:	1a06b03a 	or	r3,r3,r8
   11858:	18ffffcc 	andi	r3,r3,65535
   1185c:	18e0001c 	xori	r3,r3,32768
   11860:	18e00004 	addi	r3,r3,-32768
   11864:	003fcf06 	br	117a4 <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
   11868:	3005883a 	mov	r2,r6
   1186c:	0007883a 	mov	r3,zero
   11870:	0015883a 	mov	r10,zero
   11874:	12000003 	ldbu	r8,0(r2)
   11878:	10800044 	addi	r2,r2,1
   1187c:	42401fcc 	andi	r9,r8,127
   11880:	4a92983a 	sll	r9,r9,r10
   11884:	42003fcc 	andi	r8,r8,255
   11888:	4200201c 	xori	r8,r8,128
   1188c:	423fe004 	addi	r8,r8,-128
   11890:	1a46b03a 	or	r3,r3,r9
   11894:	528001c4 	addi	r10,r10,7
   11898:	403ff616 	blt	r8,zero,11874 <_ZL28read_encoded_value_with_basehjPKhPj+0x15c>
   1189c:	003fc106 	br	117a4 <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
   118a0:	3005883a 	mov	r2,r6
   118a4:	0007883a 	mov	r3,zero
   118a8:	0013883a 	mov	r9,zero
   118ac:	12800003 	ldbu	r10,0(r2)
   118b0:	10800044 	addi	r2,r2,1
   118b4:	52001fcc 	andi	r8,r10,127
   118b8:	4250983a 	sll	r8,r8,r9
   118bc:	52c03fcc 	andi	r11,r10,255
   118c0:	5ac0201c 	xori	r11,r11,128
   118c4:	5affe004 	addi	r11,r11,-128
   118c8:	1a06b03a 	or	r3,r3,r8
   118cc:	4a4001c4 	addi	r9,r9,7
   118d0:	583ff616 	blt	r11,zero,118ac <_ZL28read_encoded_value_with_basehjPKhPj+0x194>
   118d4:	4a000828 	cmpgeui	r8,r9,32
   118d8:	403fb21e 	bne	r8,zero,117a4 <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
   118dc:	5280100c 	andi	r10,r10,64
   118e0:	503fb026 	beq	r10,zero,117a4 <_ZL28read_encoded_value_with_basehjPKhPj+0x8c>
   118e4:	023fffc4 	movi	r8,-1
   118e8:	4252983a 	sll	r9,r8,r9
   118ec:	1a46b03a 	or	r3,r3,r9
   118f0:	003fad06 	br	117a8 <_ZL28read_encoded_value_with_basehjPKhPj+0x90>
   118f4:	deffff04 	addi	sp,sp,-4
   118f8:	dfc00015 	stw	ra,0(sp)
   118fc:	0013ec80 	call	13ec8 <abort>

00011900 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   11900:	20803fcc 	andi	r2,r4,255
   11904:	10803fe0 	cmpeqi	r2,r2,255
   11908:	1000161e 	bne	r2,zero,11964 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x64>
   1190c:	2007883a 	mov	r3,r4
   11910:	18801c0c 	andi	r2,r3,112
   11914:	2809883a 	mov	r4,r5
   11918:	11400c20 	cmpeqi	r5,r2,48
   1191c:	2800131e 	bne	r5,zero,1196c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
   11920:	11400c68 	cmpgeui	r5,r2,49
   11924:	2800031e 	bne	r5,zero,11934 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x34>
   11928:	11400820 	cmpeqi	r5,r2,32
   1192c:	28000426 	beq	r5,zero,11940 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
   11930:	0013c901 	jmpi	13c90 <_Unwind_GetTextRelBase>
   11934:	10c01020 	cmpeqi	r3,r2,64
   11938:	18000826 	beq	r3,zero,1195c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
   1193c:	0013c781 	jmpi	13c78 <_Unwind_GetRegionStart>
   11940:	10800868 	cmpgeui	r2,r2,33
   11944:	1000021e 	bne	r2,zero,11950 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x50>
   11948:	18c0180c 	andi	r3,r3,96
   1194c:	18000526 	beq	r3,zero,11964 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x64>
   11950:	deffff04 	addi	sp,sp,-4
   11954:	dfc00015 	stw	ra,0(sp)
   11958:	0013ec80 	call	13ec8 <abort>
   1195c:	10801420 	cmpeqi	r2,r2,80
   11960:	103ffb26 	beq	r2,zero,11950 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x50>
   11964:	0005883a 	mov	r2,zero
   11968:	f800283a 	ret
   1196c:	0013c881 	jmpi	13c88 <_Unwind_GetDataRelBase>

00011970 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   11970:	defffb04 	addi	sp,sp,-20
   11974:	dc800215 	stw	r18,8(sp)
   11978:	dc400115 	stw	r17,4(sp)
   1197c:	dc000015 	stw	r16,0(sp)
   11980:	dfc00415 	stw	ra,16(sp)
   11984:	dcc00315 	stw	r19,12(sp)
   11988:	2025883a 	mov	r18,r4
   1198c:	2821883a 	mov	r16,r5
   11990:	3023883a 	mov	r17,r6
   11994:	20003d26 	beq	r4,zero,11a8c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
   11998:	0013c780 	call	13c78 <_Unwind_GetRegionStart>
   1199c:	88800015 	stw	r2,0(r17)
   119a0:	84c00003 	ldbu	r19,0(r16)
   119a4:	84000044 	addi	r16,r16,1
   119a8:	98c03fe0 	cmpeqi	r3,r19,255
   119ac:	18002d26 	beq	r3,zero,11a64 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xf4>
   119b0:	88800115 	stw	r2,4(r17)
   119b4:	81000003 	ldbu	r4,0(r16)
   119b8:	80800044 	addi	r2,r16,1
   119bc:	20c03fcc 	andi	r3,r4,255
   119c0:	89000505 	stb	r4,20(r17)
   119c4:	18c03fe0 	cmpeqi	r3,r3,255
   119c8:	1800321e 	bne	r3,zero,11a94 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
   119cc:	000d883a 	mov	r6,zero
   119d0:	000b883a 	mov	r5,zero
   119d4:	10c00003 	ldbu	r3,0(r2)
   119d8:	10800044 	addi	r2,r2,1
   119dc:	19001fcc 	andi	r4,r3,127
   119e0:	2148983a 	sll	r4,r4,r5
   119e4:	18c03fcc 	andi	r3,r3,255
   119e8:	18c0201c 	xori	r3,r3,128
   119ec:	18ffe004 	addi	r3,r3,-128
   119f0:	310cb03a 	or	r6,r6,r4
   119f4:	294001c4 	addi	r5,r5,7
   119f8:	183ff616 	blt	r3,zero,119d4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x64>
   119fc:	118d883a 	add	r6,r2,r6
   11a00:	89800315 	stw	r6,12(r17)
   11a04:	10c00003 	ldbu	r3,0(r2)
   11a08:	000f883a 	mov	r7,zero
   11a0c:	10800044 	addi	r2,r2,1
   11a10:	88c00545 	stb	r3,21(r17)
   11a14:	000b883a 	mov	r5,zero
   11a18:	10c00003 	ldbu	r3,0(r2)
   11a1c:	10800044 	addi	r2,r2,1
   11a20:	19001fcc 	andi	r4,r3,127
   11a24:	2148983a 	sll	r4,r4,r5
   11a28:	18c03fcc 	andi	r3,r3,255
   11a2c:	18c0201c 	xori	r3,r3,128
   11a30:	18ffe004 	addi	r3,r3,-128
   11a34:	390eb03a 	or	r7,r7,r4
   11a38:	294001c4 	addi	r5,r5,7
   11a3c:	183ff616 	blt	r3,zero,11a18 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xa8>
   11a40:	11cf883a 	add	r7,r2,r7
   11a44:	89c00415 	stw	r7,16(r17)
   11a48:	dfc00417 	ldw	ra,16(sp)
   11a4c:	dcc00317 	ldw	r19,12(sp)
   11a50:	dc800217 	ldw	r18,8(sp)
   11a54:	dc400117 	ldw	r17,4(sp)
   11a58:	dc000017 	ldw	r16,0(sp)
   11a5c:	dec00504 	addi	sp,sp,20
   11a60:	f800283a 	ret
   11a64:	900b883a 	mov	r5,r18
   11a68:	9809883a 	mov	r4,r19
   11a6c:	00119000 	call	11900 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   11a70:	800d883a 	mov	r6,r16
   11a74:	89c00104 	addi	r7,r17,4
   11a78:	100b883a 	mov	r5,r2
   11a7c:	9809883a 	mov	r4,r19
   11a80:	00117180 	call	11718 <_ZL28read_encoded_value_with_basehjPKhPj>
   11a84:	1021883a 	mov	r16,r2
   11a88:	003fca06 	br	119b4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x44>
   11a8c:	0005883a 	mov	r2,zero
   11a90:	003fc206 	br	1199c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x2c>
   11a94:	88000315 	stw	zero,12(r17)
   11a98:	003fda06 	br	11a04 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x94>

00011a9c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
   11a9c:	defffa04 	addi	sp,sp,-24
   11aa0:	dc000215 	stw	r16,8(sp)
   11aa4:	24000317 	ldw	r16,12(r4)
   11aa8:	01ce303a 	nor	r7,zero,r7
   11aac:	dc800415 	stw	r18,16(sp)
   11ab0:	dc400315 	stw	r17,12(sp)
   11ab4:	dfc00515 	stw	ra,20(sp)
   11ab8:	2025883a 	mov	r18,r4
   11abc:	2823883a 	mov	r17,r5
   11ac0:	d9800015 	stw	r6,0(sp)
   11ac4:	81e1883a 	add	r16,r16,r7
   11ac8:	000f883a 	mov	r7,zero
   11acc:	000d883a 	mov	r6,zero
   11ad0:	80800003 	ldbu	r2,0(r16)
   11ad4:	84000044 	addi	r16,r16,1
   11ad8:	10c01fcc 	andi	r3,r2,127
   11adc:	1986983a 	sll	r3,r3,r6
   11ae0:	10803fcc 	andi	r2,r2,255
   11ae4:	1080201c 	xori	r2,r2,128
   11ae8:	10bfe004 	addi	r2,r2,-128
   11aec:	38ceb03a 	or	r7,r7,r3
   11af0:	318001c4 	addi	r6,r6,7
   11af4:	103ff616 	blt	r2,zero,11ad0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x34>
   11af8:	38002926 	beq	r7,zero,11ba0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x104>
   11afc:	90800503 	ldbu	r2,20(r18)
   11b00:	11003fcc 	andi	r4,r2,255
   11b04:	20c03fe0 	cmpeqi	r3,r4,255
   11b08:	1800231e 	bne	r3,zero,11b98 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xfc>
   11b0c:	108001cc 	andi	r2,r2,7
   11b10:	10c000a0 	cmpeqi	r3,r2,2
   11b14:	18001d1e 	bne	r3,zero,11b8c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xf0>
   11b18:	10c000e8 	cmpgeui	r3,r2,3
   11b1c:	18001726 	beq	r3,zero,11b7c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xe0>
   11b20:	10c000e0 	cmpeqi	r3,r2,3
   11b24:	1800161e 	bne	r3,zero,11b80 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xe4>
   11b28:	10800120 	cmpeqi	r2,r2,4
   11b2c:	10001e26 	beq	r2,zero,11ba8 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x10c>
   11b30:	380e90fa 	slli	r7,r7,3
   11b34:	01c5c83a 	sub	r2,zero,r7
   11b38:	91800317 	ldw	r6,12(r18)
   11b3c:	91400217 	ldw	r5,8(r18)
   11b40:	d9c00104 	addi	r7,sp,4
   11b44:	308d883a 	add	r6,r6,r2
   11b48:	00117180 	call	11718 <_ZL28read_encoded_value_with_basehjPKhPj>
   11b4c:	d9000117 	ldw	r4,4(sp)
   11b50:	d80d883a 	mov	r6,sp
   11b54:	880b883a 	mov	r5,r17
   11b58:	00116880 	call	11688 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
   11b5c:	10c03fcc 	andi	r3,r2,255
   11b60:	183fd926 	beq	r3,zero,11ac8 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x2c>
   11b64:	dfc00517 	ldw	ra,20(sp)
   11b68:	dc800417 	ldw	r18,16(sp)
   11b6c:	dc400317 	ldw	r17,12(sp)
   11b70:	dc000217 	ldw	r16,8(sp)
   11b74:	dec00604 	addi	sp,sp,24
   11b78:	f800283a 	ret
   11b7c:	10000a1e 	bne	r2,zero,11ba8 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x10c>
   11b80:	380e90ba 	slli	r7,r7,2
   11b84:	01c5c83a 	sub	r2,zero,r7
   11b88:	003feb06 	br	11b38 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x9c>
   11b8c:	39cf883a 	add	r7,r7,r7
   11b90:	01c5c83a 	sub	r2,zero,r7
   11b94:	003fe806 	br	11b38 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x9c>
   11b98:	0005883a 	mov	r2,zero
   11b9c:	003fe606 	br	11b38 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0x9c>
   11ba0:	0005883a 	mov	r2,zero
   11ba4:	003fef06 	br	11b64 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xc8>
   11ba8:	0013ec80 	call	13ec8 <abort>

00011bac <__gxx_personality_sj0>:
   11bac:	deffdb04 	addi	sp,sp,-148
   11bb0:	02000074 	movhi	r8,1
   11bb4:	00c00074 	movhi	r3,1
   11bb8:	00800074 	movhi	r2,1
   11bbc:	10888804 	addi	r2,r2,8736
   11bc0:	d9000015 	stw	r4,0(sp)
   11bc4:	4206eb04 	addi	r8,r8,7084
   11bc8:	18d90d04 	addi	r3,r3,25652
   11bcc:	d9000d04 	addi	r4,sp,52
   11bd0:	d8801615 	stw	r2,88(sp)
   11bd4:	dfc02415 	stw	ra,144(sp)
   11bd8:	df002315 	stw	fp,140(sp)
   11bdc:	d9400315 	stw	r5,12(sp)
   11be0:	d9800115 	stw	r6,4(sp)
   11be4:	d9c00215 	stw	r7,8(sp)
   11be8:	da001315 	stw	r8,76(sp)
   11bec:	d8c01415 	stw	r3,80(sp)
   11bf0:	df001515 	stw	fp,84(sp)
   11bf4:	dec01715 	stw	sp,92(sp)
   11bf8:	0013bbc0 	call	13bbc <_Unwind_SjLj_Register>
   11bfc:	d8800017 	ldw	r2,0(sp)
   11c00:	d8001a15 	stw	zero,104(sp)
   11c04:	d8001b15 	stw	zero,108(sp)
   11c08:	10800058 	cmpnei	r2,r2,1
   11c0c:	1000471e 	bne	r2,zero,11d2c <__gxx_personality_sj0+0x180>
   11c10:	d9800117 	ldw	r6,4(sp)
   11c14:	00af3574 	movhi	r2,48341
   11c18:	10b54004 	addi	r2,r2,-11008
   11c1c:	3085883a 	add	r2,r6,r2
   11c20:	d8800715 	stw	r2,28(sp)
   11c24:	1185803a 	cmpltu	r2,r2,r6
   11c28:	d9800217 	ldw	r6,8(sp)
   11c2c:	00ee2cb4 	movhi	r3,47282
   11c30:	d9000317 	ldw	r4,12(sp)
   11c34:	18eaaf04 	addi	r3,r3,-21828
   11c38:	30c7883a 	add	r3,r6,r3
   11c3c:	10c7883a 	add	r3,r2,r3
   11c40:	21000198 	cmpnei	r4,r4,6
   11c44:	d8c00615 	stw	r3,24(sp)
   11c48:	2000011e 	bne	r4,zero,11c50 <__gxx_personality_sj0+0xa4>
   11c4c:	1800d026 	beq	r3,zero,11f90 <__gxx_personality_sj0+0x3e4>
   11c50:	d9002617 	ldw	r4,152(sp)
   11c54:	00bfffc4 	movi	r2,-1
   11c58:	d8800e15 	stw	r2,56(sp)
   11c5c:	0013c6c0 	call	13c6c <_Unwind_GetLanguageSpecificData>
   11c60:	d8800515 	stw	r2,20(sp)
   11c64:	10005d26 	beq	r2,zero,11ddc <__gxx_personality_sj0+0x230>
   11c68:	d9400517 	ldw	r5,20(sp)
   11c6c:	d9002617 	ldw	r4,152(sp)
   11c70:	d9801d04 	addi	r6,sp,116
   11c74:	00bfffc4 	movi	r2,-1
   11c78:	d8800e15 	stw	r2,56(sp)
   11c7c:	00119700 	call	11970 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   11c80:	d9002203 	ldbu	r4,136(sp)
   11c84:	d9402617 	ldw	r5,152(sp)
   11c88:	d8800015 	stw	r2,0(sp)
   11c8c:	00119000 	call	11900 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   11c90:	d9002617 	ldw	r4,152(sp)
   11c94:	d9401b04 	addi	r5,sp,108
   11c98:	d8801f15 	stw	r2,124(sp)
   11c9c:	0013c3c0 	call	13c3c <_Unwind_GetIPInfo>
   11ca0:	d8c01b17 	ldw	r3,108(sp)
   11ca4:	d8800115 	stw	r2,4(sp)
   11ca8:	18004f26 	beq	r3,zero,11de8 <__gxx_personality_sj0+0x23c>
   11cac:	d8800117 	ldw	r2,4(sp)
   11cb0:	10004a16 	blt	r2,zero,11ddc <__gxx_personality_sj0+0x230>
   11cb4:	1000381e 	bne	r2,zero,11d98 <__gxx_personality_sj0+0x1ec>
   11cb8:	d8000415 	stw	zero,16(sp)
   11cbc:	d8000215 	stw	zero,8(sp)
   11cc0:	00800044 	movi	r2,1
   11cc4:	d8c00317 	ldw	r3,12(sp)
   11cc8:	18c0004c 	andi	r3,r3,1
   11ccc:	1801061e 	bne	r3,zero,120e8 <__gxx_personality_sj0+0x53c>
   11cd0:	d8c00317 	ldw	r3,12(sp)
   11cd4:	18c0020c 	andi	r3,r3,8
   11cd8:	18010a26 	beq	r3,zero,12104 <__gxx_personality_sj0+0x558>
   11cdc:	10800058 	cmpnei	r2,r2,1
   11ce0:	10015126 	beq	r2,zero,12228 <__gxx_personality_sj0+0x67c>
   11ce4:	d8800417 	ldw	r2,16(sp)
   11ce8:	10014a16 	blt	r2,zero,12214 <__gxx_personality_sj0+0x668>
   11cec:	d9002617 	ldw	r4,152(sp)
   11cf0:	d9802517 	ldw	r6,148(sp)
   11cf4:	00bfffc4 	movi	r2,-1
   11cf8:	000b883a 	mov	r5,zero
   11cfc:	d8800e15 	stw	r2,56(sp)
   11d00:	0013c140 	call	13c14 <_Unwind_SetGR>
   11d04:	d9800417 	ldw	r6,16(sp)
   11d08:	d9002617 	ldw	r4,152(sp)
   11d0c:	01400044 	movi	r5,1
   11d10:	0013c140 	call	13c14 <_Unwind_SetGR>
   11d14:	d9400117 	ldw	r5,4(sp)
   11d18:	d9002617 	ldw	r4,152(sp)
   11d1c:	0013c5c0 	call	13c5c <_Unwind_SetIP>
   11d20:	008001c4 	movi	r2,7
   11d24:	d8800015 	stw	r2,0(sp)
   11d28:	00000206 	br	11d34 <__gxx_personality_sj0+0x188>
   11d2c:	008000c4 	movi	r2,3
   11d30:	d8800015 	stw	r2,0(sp)
   11d34:	d9000d04 	addi	r4,sp,52
   11d38:	0013bd40 	call	13bd4 <_Unwind_SjLj_Unregister>
   11d3c:	d8800017 	ldw	r2,0(sp)
   11d40:	dfc02417 	ldw	ra,144(sp)
   11d44:	df002317 	ldw	fp,140(sp)
   11d48:	dec02504 	addi	sp,sp,148
   11d4c:	f800283a 	ret
   11d50:	000b883a 	mov	r5,zero
   11d54:	0009883a 	mov	r4,zero
   11d58:	d8c00017 	ldw	r3,0(sp)
   11d5c:	18800003 	ldbu	r2,0(r3)
   11d60:	18c00044 	addi	r3,r3,1
   11d64:	d8c00015 	stw	r3,0(sp)
   11d68:	10c01fcc 	andi	r3,r2,127
   11d6c:	1906983a 	sll	r3,r3,r4
   11d70:	10803fcc 	andi	r2,r2,255
   11d74:	1080201c 	xori	r2,r2,128
   11d78:	10bfe004 	addi	r2,r2,-128
   11d7c:	28cab03a 	or	r5,r5,r3
   11d80:	210001c4 	addi	r4,r4,7
   11d84:	103ff416 	blt	r2,zero,11d58 <__gxx_personality_sj0+0x1ac>
   11d88:	d8800117 	ldw	r2,4(sp)
   11d8c:	10bfffc4 	addi	r2,r2,-1
   11d90:	d8800115 	stw	r2,4(sp)
   11d94:	10001726 	beq	r2,zero,11df4 <__gxx_personality_sj0+0x248>
   11d98:	000d883a 	mov	r6,zero
   11d9c:	0009883a 	mov	r4,zero
   11da0:	d8c00017 	ldw	r3,0(sp)
   11da4:	18800003 	ldbu	r2,0(r3)
   11da8:	18c00044 	addi	r3,r3,1
   11dac:	d8c00015 	stw	r3,0(sp)
   11db0:	10c01fcc 	andi	r3,r2,127
   11db4:	1906983a 	sll	r3,r3,r4
   11db8:	10803fcc 	andi	r2,r2,255
   11dbc:	1080201c 	xori	r2,r2,128
   11dc0:	10bfe004 	addi	r2,r2,-128
   11dc4:	30ccb03a 	or	r6,r6,r3
   11dc8:	210001c4 	addi	r4,r4,7
   11dcc:	103ff416 	blt	r2,zero,11da0 <__gxx_personality_sj0+0x1f4>
   11dd0:	003fdf06 	br	11d50 <__gxx_personality_sj0+0x1a4>
   11dd4:	d88008c3 	ldbu	r2,35(sp)
   11dd8:	10008c1e 	bne	r2,zero,1200c <__gxx_personality_sj0+0x460>
   11ddc:	00800204 	movi	r2,8
   11de0:	d8800015 	stw	r2,0(sp)
   11de4:	003fd306 	br	11d34 <__gxx_personality_sj0+0x188>
   11de8:	10bfffc4 	addi	r2,r2,-1
   11dec:	d8800115 	stw	r2,4(sp)
   11df0:	003fae06 	br	11cac <__gxx_personality_sj0+0x100>
   11df4:	30800044 	addi	r2,r6,1
   11df8:	d8800a15 	stw	r2,40(sp)
   11dfc:	283ff626 	beq	r5,zero,11dd8 <__gxx_personality_sj0+0x22c>
   11e00:	d8800a17 	ldw	r2,40(sp)
   11e04:	103ff526 	beq	r2,zero,11ddc <__gxx_personality_sj0+0x230>
   11e08:	d8802117 	ldw	r2,132(sp)
   11e0c:	297fffc4 	addi	r5,r5,-1
   11e10:	1145883a 	add	r2,r2,r5
   11e14:	d8800215 	stw	r2,8(sp)
   11e18:	10007c26 	beq	r2,zero,1200c <__gxx_personality_sj0+0x460>
   11e1c:	d8800317 	ldw	r2,12(sp)
   11e20:	1080020c 	andi	r2,r2,8
   11e24:	d8800b15 	stw	r2,44(sp)
   11e28:	1000bf1e 	bne	r2,zero,12128 <__gxx_personality_sj0+0x57c>
   11e2c:	d8800617 	ldw	r2,24(sp)
   11e30:	1000e526 	beq	r2,zero,121c8 <__gxx_personality_sj0+0x61c>
   11e34:	00800074 	movhi	r2,1
   11e38:	109c0504 	addi	r2,r2,28692
   11e3c:	d8800915 	stw	r2,36(sp)
   11e40:	d8800717 	ldw	r2,28(sp)
   11e44:	d80008c5 	stb	zero,35(sp)
   11e48:	108000a8 	cmpgeui	r2,r2,2
   11e4c:	d8800c15 	stw	r2,48(sp)
   11e50:	d8800217 	ldw	r2,8(sp)
   11e54:	000f883a 	mov	r7,zero
   11e58:	0007883a 	mov	r3,zero
   11e5c:	d8800015 	stw	r2,0(sp)
   11e60:	d8800017 	ldw	r2,0(sp)
   11e64:	11000003 	ldbu	r4,0(r2)
   11e68:	10800044 	addi	r2,r2,1
   11e6c:	d8800015 	stw	r2,0(sp)
   11e70:	20801fcc 	andi	r2,r4,127
   11e74:	10c4983a 	sll	r2,r2,r3
   11e78:	21403fcc 	andi	r5,r4,255
   11e7c:	2940201c 	xori	r5,r5,128
   11e80:	297fe004 	addi	r5,r5,-128
   11e84:	388eb03a 	or	r7,r7,r2
   11e88:	18c001c4 	addi	r3,r3,7
   11e8c:	283ff416 	blt	r5,zero,11e60 <__gxx_personality_sj0+0x2b4>
   11e90:	18800828 	cmpgeui	r2,r3,32
   11e94:	1000061e 	bne	r2,zero,11eb0 <__gxx_personality_sj0+0x304>
   11e98:	2100100c 	andi	r4,r4,64
   11e9c:	20000426 	beq	r4,zero,11eb0 <__gxx_personality_sj0+0x304>
   11ea0:	00800044 	movi	r2,1
   11ea4:	10c6983a 	sll	r3,r2,r3
   11ea8:	00c7c83a 	sub	r3,zero,r3
   11eac:	38ceb03a 	or	r7,r7,r3
   11eb0:	d9400017 	ldw	r5,0(sp)
   11eb4:	d9c00415 	stw	r7,16(sp)
   11eb8:	d8000115 	stw	zero,4(sp)
   11ebc:	0007883a 	mov	r3,zero
   11ec0:	29000003 	ldbu	r4,0(r5)
   11ec4:	da000117 	ldw	r8,4(sp)
   11ec8:	29400044 	addi	r5,r5,1
   11ecc:	20801fcc 	andi	r2,r4,127
   11ed0:	10c4983a 	sll	r2,r2,r3
   11ed4:	21803fcc 	andi	r6,r4,255
   11ed8:	3180201c 	xori	r6,r6,128
   11edc:	4084b03a 	or	r2,r8,r2
   11ee0:	31bfe004 	addi	r6,r6,-128
   11ee4:	d8800115 	stw	r2,4(sp)
   11ee8:	18c001c4 	addi	r3,r3,7
   11eec:	303ff416 	blt	r6,zero,11ec0 <__gxx_personality_sj0+0x314>
   11ef0:	18800828 	cmpgeui	r2,r3,32
   11ef4:	1000081e 	bne	r2,zero,11f18 <__gxx_personality_sj0+0x36c>
   11ef8:	2100100c 	andi	r4,r4,64
   11efc:	20000626 	beq	r4,zero,11f18 <__gxx_personality_sj0+0x36c>
   11f00:	00800044 	movi	r2,1
   11f04:	10c6983a 	sll	r3,r2,r3
   11f08:	d8800117 	ldw	r2,4(sp)
   11f0c:	00c7c83a 	sub	r3,zero,r3
   11f10:	10c4b03a 	or	r2,r2,r3
   11f14:	d8800115 	stw	r2,4(sp)
   11f18:	38004726 	beq	r7,zero,12038 <__gxx_personality_sj0+0x48c>
   11f1c:	01c04916 	blt	zero,r7,12044 <__gxx_personality_sj0+0x498>
   11f20:	d8800917 	ldw	r2,36(sp)
   11f24:	10000426 	beq	r2,zero,11f38 <__gxx_personality_sj0+0x38c>
   11f28:	d8800b17 	ldw	r2,44(sp)
   11f2c:	1000021e 	bne	r2,zero,11f38 <__gxx_personality_sj0+0x38c>
   11f30:	d8800617 	ldw	r2,24(sp)
   11f34:	10008026 	beq	r2,zero,12138 <__gxx_personality_sj0+0x58c>
   11f38:	d8802017 	ldw	r2,128(sp)
   11f3c:	01ce303a 	nor	r7,zero,r7
   11f40:	000b883a 	mov	r5,zero
   11f44:	11cf883a 	add	r7,r2,r7
   11f48:	0009883a 	mov	r4,zero
   11f4c:	38800003 	ldbu	r2,0(r7)
   11f50:	39c00044 	addi	r7,r7,1
   11f54:	10c01fcc 	andi	r3,r2,127
   11f58:	1906983a 	sll	r3,r3,r4
   11f5c:	10803fcc 	andi	r2,r2,255
   11f60:	1080201c 	xori	r2,r2,128
   11f64:	10bfe004 	addi	r2,r2,-128
   11f68:	28cab03a 	or	r5,r5,r3
   11f6c:	210001c4 	addi	r4,r4,7
   11f70:	103ff616 	blt	r2,zero,11f4c <__gxx_personality_sj0+0x3a0>
   11f74:	28005126 	beq	r5,zero,120bc <__gxx_personality_sj0+0x510>
   11f78:	d8800117 	ldw	r2,4(sp)
   11f7c:	103f9526 	beq	r2,zero,11dd4 <__gxx_personality_sj0+0x228>
   11f80:	d8c00017 	ldw	r3,0(sp)
   11f84:	1885883a 	add	r2,r3,r2
   11f88:	d8800215 	stw	r2,8(sp)
   11f8c:	003fb006 	br	11e50 <__gxx_personality_sj0+0x2a4>
   11f90:	d8800717 	ldw	r2,28(sp)
   11f94:	108000a8 	cmpgeui	r2,r2,2
   11f98:	103f2d1e 	bne	r2,zero,11c50 <__gxx_personality_sj0+0xa4>
   11f9c:	d8802517 	ldw	r2,148(sp)
   11fa0:	10bffe17 	ldw	r2,-8(r2)
   11fa4:	d8800115 	stw	r2,4(sp)
   11fa8:	10005d26 	beq	r2,zero,12120 <__gxx_personality_sj0+0x574>
   11fac:	d8802517 	ldw	r2,148(sp)
   11fb0:	10bffb17 	ldw	r2,-20(r2)
   11fb4:	d8800415 	stw	r2,16(sp)
   11fb8:	d8802517 	ldw	r2,148(sp)
   11fbc:	10bffd17 	ldw	r2,-12(r2)
   11fc0:	d8800515 	stw	r2,20(sp)
   11fc4:	d8800417 	ldw	r2,16(sp)
   11fc8:	103f480e 	bge	r2,zero,11cec <__gxx_personality_sj0+0x140>
   11fcc:	d9002617 	ldw	r4,152(sp)
   11fd0:	d9400517 	ldw	r5,20(sp)
   11fd4:	d9801d04 	addi	r6,sp,116
   11fd8:	00bfffc4 	movi	r2,-1
   11fdc:	d8800e15 	stw	r2,56(sp)
   11fe0:	00119700 	call	11970 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   11fe4:	d9402617 	ldw	r5,152(sp)
   11fe8:	d9002203 	ldbu	r4,136(sp)
   11fec:	00119000 	call	11900 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   11ff0:	d9002203 	ldbu	r4,136(sp)
   11ff4:	d9402617 	ldw	r5,152(sp)
   11ff8:	d8801f15 	stw	r2,124(sp)
   11ffc:	00119000 	call	11900 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   12000:	d8c02517 	ldw	r3,148(sp)
   12004:	18bffe15 	stw	r2,-8(r3)
   12008:	003f3806 	br	11cec <__gxx_personality_sj0+0x140>
   1200c:	d8800317 	ldw	r2,12(sp)
   12010:	1080004c 	andi	r2,r2,1
   12014:	103f711e 	bne	r2,zero,11ddc <__gxx_personality_sj0+0x230>
   12018:	d8800317 	ldw	r2,12(sp)
   1201c:	1080020c 	andi	r2,r2,8
   12020:	d8800415 	stw	r2,16(sp)
   12024:	10008126 	beq	r2,zero,1222c <__gxx_personality_sj0+0x680>
   12028:	d8800a17 	ldw	r2,40(sp)
   1202c:	d8000415 	stw	zero,16(sp)
   12030:	d8800115 	stw	r2,4(sp)
   12034:	003f2d06 	br	11cec <__gxx_personality_sj0+0x140>
   12038:	00800044 	movi	r2,1
   1203c:	d88008c5 	stb	r2,35(sp)
   12040:	003fcd06 	br	11f78 <__gxx_personality_sj0+0x3cc>
   12044:	d8802203 	ldbu	r2,136(sp)
   12048:	11003fcc 	andi	r4,r2,255
   1204c:	20c03fe0 	cmpeqi	r3,r4,255
   12050:	18002a1e 	bne	r3,zero,120fc <__gxx_personality_sj0+0x550>
   12054:	108001cc 	andi	r2,r2,7
   12058:	10c000a0 	cmpeqi	r3,r2,2
   1205c:	18001f1e 	bne	r3,zero,120dc <__gxx_personality_sj0+0x530>
   12060:	10c000e8 	cmpgeui	r3,r2,3
   12064:	18001926 	beq	r3,zero,120cc <__gxx_personality_sj0+0x520>
   12068:	10c000e0 	cmpeqi	r3,r2,3
   1206c:	1800181e 	bne	r3,zero,120d0 <__gxx_personality_sj0+0x524>
   12070:	10800120 	cmpeqi	r2,r2,4
   12074:	10007026 	beq	r2,zero,12238 <__gxx_personality_sj0+0x68c>
   12078:	380490fa 	slli	r2,r7,3
   1207c:	0085c83a 	sub	r2,zero,r2
   12080:	d9802017 	ldw	r6,128(sp)
   12084:	d9401f17 	ldw	r5,124(sp)
   12088:	d9c01c04 	addi	r7,sp,112
   1208c:	308d883a 	add	r6,r6,r2
   12090:	00bfffc4 	movi	r2,-1
   12094:	d8800e15 	stw	r2,56(sp)
   12098:	00117180 	call	11718 <_ZL28read_encoded_value_with_basehjPKhPj>
   1209c:	d9001c17 	ldw	r4,112(sp)
   120a0:	20000626 	beq	r4,zero,120bc <__gxx_personality_sj0+0x510>
   120a4:	d9400917 	ldw	r5,36(sp)
   120a8:	283fb326 	beq	r5,zero,11f78 <__gxx_personality_sj0+0x3cc>
   120ac:	d9801a04 	addi	r6,sp,104
   120b0:	00116880 	call	11688 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv>
   120b4:	10803fcc 	andi	r2,r2,255
   120b8:	103faf26 	beq	r2,zero,11f78 <__gxx_personality_sj0+0x3cc>
   120bc:	d8800a17 	ldw	r2,40(sp)
   120c0:	d8800115 	stw	r2,4(sp)
   120c4:	008000c4 	movi	r2,3
   120c8:	003efe06 	br	11cc4 <__gxx_personality_sj0+0x118>
   120cc:	10005a1e 	bne	r2,zero,12238 <__gxx_personality_sj0+0x68c>
   120d0:	380490ba 	slli	r2,r7,2
   120d4:	0085c83a 	sub	r2,zero,r2
   120d8:	003fe906 	br	12080 <__gxx_personality_sj0+0x4d4>
   120dc:	39cf883a 	add	r7,r7,r7
   120e0:	01c5c83a 	sub	r2,zero,r7
   120e4:	003fe606 	br	12080 <__gxx_personality_sj0+0x4d4>
   120e8:	d8800617 	ldw	r2,24(sp)
   120ec:	10002326 	beq	r2,zero,1217c <__gxx_personality_sj0+0x5d0>
   120f0:	00800184 	movi	r2,6
   120f4:	d8800015 	stw	r2,0(sp)
   120f8:	003f0e06 	br	11d34 <__gxx_personality_sj0+0x188>
   120fc:	0005883a 	mov	r2,zero
   12100:	003fdf06 	br	12080 <__gxx_personality_sj0+0x4d4>
   12104:	d8c00617 	ldw	r3,24(sp)
   12108:	183ef41e 	bne	r3,zero,11cdc <__gxx_personality_sj0+0x130>
   1210c:	d8c00717 	ldw	r3,28(sp)
   12110:	18c000a8 	cmpgeui	r3,r3,2
   12114:	183ef11e 	bne	r3,zero,11cdc <__gxx_personality_sj0+0x130>
   12118:	10800060 	cmpeqi	r2,r2,1
   1211c:	103fa926 	beq	r2,zero,11fc4 <__gxx_personality_sj0+0x418>
   12120:	d9002517 	ldw	r4,148(sp)
   12124:	001314c0 	call	1314c <__cxa_call_terminate>
   12128:	00800074 	movhi	r2,1
   1212c:	109c0304 	addi	r2,r2,28684
   12130:	d8800915 	stw	r2,36(sp)
   12134:	003f4206 	br	11e40 <__gxx_personality_sj0+0x294>
   12138:	d8800c17 	ldw	r2,48(sp)
   1213c:	103f7e1e 	bne	r2,zero,11f38 <__gxx_personality_sj0+0x38c>
   12140:	d9801a17 	ldw	r6,104(sp)
   12144:	d9400917 	ldw	r5,36(sp)
   12148:	00bfffc4 	movi	r2,-1
   1214c:	d9001d04 	addi	r4,sp,116
   12150:	d8800e15 	stw	r2,56(sp)
   12154:	0011a9c0 	call	11a9c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   12158:	10803fcc 	andi	r2,r2,255
   1215c:	103f861e 	bne	r2,zero,11f78 <__gxx_personality_sj0+0x3cc>
   12160:	d8800317 	ldw	r2,12(sp)
   12164:	1080004c 	andi	r2,r2,1
   12168:	1000271e 	bne	r2,zero,12208 <__gxx_personality_sj0+0x65c>
   1216c:	d8800a17 	ldw	r2,40(sp)
   12170:	d8800115 	stw	r2,4(sp)
   12174:	008000c4 	movi	r2,3
   12178:	003fe406 	br	1210c <__gxx_personality_sj0+0x560>
   1217c:	d8800717 	ldw	r2,28(sp)
   12180:	108000a8 	cmpgeui	r2,r2,2
   12184:	103fda1e 	bne	r2,zero,120f0 <__gxx_personality_sj0+0x544>
   12188:	d8802517 	ldw	r2,148(sp)
   1218c:	d8c00417 	ldw	r3,16(sp)
   12190:	10fffb15 	stw	r3,-20(r2)
   12194:	d8c00217 	ldw	r3,8(sp)
   12198:	10fffc15 	stw	r3,-16(r2)
   1219c:	d8c00517 	ldw	r3,20(sp)
   121a0:	10fffd15 	stw	r3,-12(r2)
   121a4:	d8c02517 	ldw	r3,148(sp)
   121a8:	d8801a17 	ldw	r2,104(sp)
   121ac:	18bfff15 	stw	r2,-4(r3)
   121b0:	1805883a 	mov	r2,r3
   121b4:	d8c00117 	ldw	r3,4(sp)
   121b8:	10fffe15 	stw	r3,-8(r2)
   121bc:	00800184 	movi	r2,6
   121c0:	d8800015 	stw	r2,0(sp)
   121c4:	003edb06 	br	11d34 <__gxx_personality_sj0+0x188>
   121c8:	d8800717 	ldw	r2,28(sp)
   121cc:	108000a8 	cmpgeui	r2,r2,2
   121d0:	103f181e 	bne	r2,zero,11e34 <__gxx_personality_sj0+0x288>
   121d4:	d8802517 	ldw	r2,148(sp)
   121d8:	10800003 	ldbu	r2,0(r2)
   121dc:	1080004c 	andi	r2,r2,1
   121e0:	10000626 	beq	r2,zero,121fc <__gxx_personality_sj0+0x650>
   121e4:	d8802517 	ldw	r2,148(sp)
   121e8:	10bff517 	ldw	r2,-44(r2)
   121ec:	10fff017 	ldw	r3,-64(r2)
   121f0:	d8801a15 	stw	r2,104(sp)
   121f4:	d8c00915 	stw	r3,36(sp)
   121f8:	003f1106 	br	11e40 <__gxx_personality_sj0+0x294>
   121fc:	d8802517 	ldw	r2,148(sp)
   12200:	10800504 	addi	r2,r2,20
   12204:	003ff906 	br	121ec <__gxx_personality_sj0+0x640>
   12208:	d8800a17 	ldw	r2,40(sp)
   1220c:	d8800115 	stw	r2,4(sp)
   12210:	003fdd06 	br	12188 <__gxx_personality_sj0+0x5dc>
   12214:	00800044 	movi	r2,1
   12218:	d8800e15 	stw	r2,56(sp)
   1221c:	00124ac0 	call	124ac <_ZSt10unexpectedv>
   12220:	d9000f17 	ldw	r4,60(sp)
   12224:	00131ac0 	call	131ac <__cxa_begin_catch>
   12228:	00124880 	call	12488 <_ZSt9terminatev>
   1222c:	d8800a17 	ldw	r2,40(sp)
   12230:	d8800115 	stw	r2,4(sp)
   12234:	003ead06 	br	11cec <__gxx_personality_sj0+0x140>
   12238:	00bfffc4 	movi	r2,-1
   1223c:	d8800e15 	stw	r2,56(sp)
   12240:	0013ec80 	call	13ec8 <abort>

00012244 <__cxa_call_unexpected>:
   12244:	deffe704 	addi	sp,sp,-100
   12248:	01400074 	movhi	r5,1
   1224c:	00c00074 	movhi	r3,1
   12250:	00800074 	movhi	r2,1
   12254:	2946eb04 	addi	r5,r5,7084
   12258:	18d91104 	addi	r3,r3,25668
   1225c:	1088b104 	addi	r2,r2,8900
   12260:	d9000015 	stw	r4,0(sp)
   12264:	d9000404 	addi	r4,sp,16
   12268:	d9400a15 	stw	r5,40(sp)
   1226c:	d8c00b15 	stw	r3,44(sp)
   12270:	dfc01815 	stw	ra,96(sp)
   12274:	d8800d15 	stw	r2,52(sp)
   12278:	df001715 	stw	fp,92(sp)
   1227c:	df000c15 	stw	fp,48(sp)
   12280:	dec00e15 	stw	sp,56(sp)
   12284:	0013bbc0 	call	13bbc <_Unwind_SjLj_Register>
   12288:	d9000017 	ldw	r4,0(sp)
   1228c:	00131ac0 	call	131ac <__cxa_begin_catch>
   12290:	d8c00017 	ldw	r3,0(sp)
   12294:	197ffd17 	ldw	r5,-12(r3)
   12298:	18bffe17 	ldw	r2,-8(r3)
   1229c:	193ff717 	ldw	r4,-36(r3)
   122a0:	d9400115 	stw	r5,4(sp)
   122a4:	197ffb17 	ldw	r5,-20(r3)
   122a8:	18fff817 	ldw	r3,-32(r3)
   122ac:	d8801315 	stw	r2,76(sp)
   122b0:	00800044 	movi	r2,1
   122b4:	d9400015 	stw	r5,0(sp)
   122b8:	d8c00215 	stw	r3,8(sp)
   122bc:	d8800515 	stw	r2,20(sp)
   122c0:	001249c0 	call	1249c <_ZN10__cxxabiv112__unexpectedEPFvvE>
   122c4:	d8c00617 	ldw	r3,24(sp)
   122c8:	d8800517 	ldw	r2,20(sp)
   122cc:	d8c00315 	stw	r3,12(sp)
   122d0:	10002b1e 	bne	r2,zero,12380 <__cxa_call_unexpected+0x13c>
   122d4:	d9000317 	ldw	r4,12(sp)
   122d8:	00131ac0 	call	131ac <__cxa_begin_catch>
   122dc:	00133a40 	call	133a4 <__cxa_get_globals_fast>
   122e0:	10800017 	ldw	r2,0(r2)
   122e4:	10c00b03 	ldbu	r3,44(r2)
   122e8:	18c0004c 	andi	r3,r3,1
   122ec:	18002e26 	beq	r3,zero,123a8 <__cxa_call_unexpected+0x164>
   122f0:	10800017 	ldw	r2,0(r2)
   122f4:	d8800315 	stw	r2,12(sp)
   122f8:	d9400117 	ldw	r5,4(sp)
   122fc:	00800084 	movi	r2,2
   12300:	d9801104 	addi	r6,sp,68
   12304:	0009883a 	mov	r4,zero
   12308:	d8800515 	stw	r2,20(sp)
   1230c:	00119700 	call	11970 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   12310:	d9800317 	ldw	r6,12(sp)
   12314:	d9c00017 	ldw	r7,0(sp)
   12318:	d9001104 	addi	r4,sp,68
   1231c:	317ff017 	ldw	r5,-64(r6)
   12320:	0011a9c0 	call	11a9c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   12324:	10803fcc 	andi	r2,r2,255
   12328:	1000221e 	bne	r2,zero,123b4 <__cxa_call_unexpected+0x170>
   1232c:	d9c00017 	ldw	r7,0(sp)
   12330:	01400074 	movhi	r5,1
   12334:	00800084 	movi	r2,2
   12338:	000d883a 	mov	r6,zero
   1233c:	2959c304 	addi	r5,r5,26380
   12340:	d9001104 	addi	r4,sp,68
   12344:	d8800515 	stw	r2,20(sp)
   12348:	0011a9c0 	call	11a9c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   1234c:	10803fcc 	andi	r2,r2,255
   12350:	10001926 	beq	r2,zero,123b8 <__cxa_call_unexpected+0x174>
   12354:	01000104 	movi	r4,4
   12358:	0012ff80 	call	12ff8 <__cxa_allocate_exception>
   1235c:	1009883a 	mov	r4,r2
   12360:	00800074 	movhi	r2,1
   12364:	01800074 	movhi	r6,1
   12368:	01400074 	movhi	r5,1
   1236c:	1099de04 	addi	r2,r2,26488
   12370:	318cd604 	addi	r6,r6,13144
   12374:	2959c304 	addi	r5,r5,26380
   12378:	20800015 	stw	r2,0(r4)
   1237c:	00125ec0 	call	125ec <__cxa_throw>
   12380:	10bfffc4 	addi	r2,r2,-1
   12384:	10000126 	beq	r2,zero,1238c <__cxa_call_unexpected+0x148>
   12388:	003b68fa 	trap	3
   1238c:	d8000515 	stw	zero,20(sp)
   12390:	00132640 	call	13264 <__cxa_end_catch>
   12394:	00132640 	call	13264 <__cxa_end_catch>
   12398:	d9000317 	ldw	r4,12(sp)
   1239c:	00bfffc4 	movi	r2,-1
   123a0:	d8800515 	stw	r2,20(sp)
   123a4:	0013da40 	call	13da4 <_Unwind_SjLj_Resume>
   123a8:	10801004 	addi	r2,r2,64
   123ac:	d8800315 	stw	r2,12(sp)
   123b0:	003fd106 	br	122f8 <__cxa_call_unexpected+0xb4>
   123b4:	001264c0 	call	1264c <__cxa_rethrow>
   123b8:	d9000217 	ldw	r4,8(sp)
   123bc:	00123c00 	call	123c0 <_ZN10__cxxabiv111__terminateEPFvvE>

000123c0 <_ZN10__cxxabiv111__terminateEPFvvE>:
   123c0:	deffef04 	addi	sp,sp,-68
   123c4:	01400074 	movhi	r5,1
   123c8:	00c00074 	movhi	r3,1
   123cc:	00800074 	movhi	r2,1
   123d0:	200d883a 	mov	r6,r4
   123d4:	10890704 	addi	r2,r2,9244
   123d8:	2946eb04 	addi	r5,r5,7084
   123dc:	18d91504 	addi	r3,r3,25684
   123e0:	d9000204 	addi	r4,sp,8
   123e4:	d8800b15 	stw	r2,44(sp)
   123e8:	dfc01015 	stw	ra,64(sp)
   123ec:	df000f15 	stw	fp,60(sp)
   123f0:	d9800015 	stw	r6,0(sp)
   123f4:	d9400815 	stw	r5,32(sp)
   123f8:	d8c00915 	stw	r3,36(sp)
   123fc:	df000a15 	stw	fp,40(sp)
   12400:	dec00c15 	stw	sp,48(sp)
   12404:	0013bbc0 	call	13bbc <_Unwind_SjLj_Register>
   12408:	00800044 	movi	r2,1
   1240c:	d8800315 	stw	r2,12(sp)
   12410:	d8800017 	ldw	r2,0(sp)
   12414:	103ee83a 	callr	r2
   12418:	0013ec80 	call	13ec8 <abort>
   1241c:	d8c00417 	ldw	r3,16(sp)
   12420:	d8800317 	ldw	r2,12(sp)
   12424:	d8c00015 	stw	r3,0(sp)
   12428:	d8c00517 	ldw	r3,20(sp)
   1242c:	d8c00115 	stw	r3,4(sp)
   12430:	1000051e 	bne	r2,zero,12448 <_ZN10__cxxabiv111__terminateEPFvvE+0x88>
   12434:	d9000017 	ldw	r4,0(sp)
   12438:	00131ac0 	call	131ac <__cxa_begin_catch>
   1243c:	00800084 	movi	r2,2
   12440:	d8800315 	stw	r2,12(sp)
   12444:	0013ec80 	call	13ec8 <abort>
   12448:	10bfffc4 	addi	r2,r2,-1
   1244c:	10000126 	beq	r2,zero,12454 <_ZN10__cxxabiv111__terminateEPFvvE+0x94>
   12450:	003b68fa 	trap	3
   12454:	d8000315 	stw	zero,12(sp)
   12458:	00132640 	call	13264 <__cxa_end_catch>
   1245c:	d8c00117 	ldw	r3,4(sp)
   12460:	18bfffe0 	cmpeqi	r2,r3,-1
   12464:	10000426 	beq	r2,zero,12478 <_ZN10__cxxabiv111__terminateEPFvvE+0xb8>
   12468:	d8800117 	ldw	r2,4(sp)
   1246c:	d9000017 	ldw	r4,0(sp)
   12470:	d8800315 	stw	r2,12(sp)
   12474:	00122440 	call	12244 <__cxa_call_unexpected>
   12478:	d9000017 	ldw	r4,0(sp)
   1247c:	00bfffc4 	movi	r2,-1
   12480:	d8800315 	stw	r2,12(sp)
   12484:	0013da40 	call	13da4 <_Unwind_SjLj_Resume>

00012488 <_ZSt9terminatev>:
   12488:	00800074 	movhi	r2,1
   1248c:	111c0717 	ldw	r4,28700(r2)
   12490:	deffff04 	addi	sp,sp,-4
   12494:	dfc00015 	stw	ra,0(sp)
   12498:	00123c00 	call	123c0 <_ZN10__cxxabiv111__terminateEPFvvE>

0001249c <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   1249c:	deffff04 	addi	sp,sp,-4
   124a0:	dfc00015 	stw	ra,0(sp)
   124a4:	203ee83a 	callr	r4
   124a8:	00124880 	call	12488 <_ZSt9terminatev>

000124ac <_ZSt10unexpectedv>:
   124ac:	00800074 	movhi	r2,1
   124b0:	111bfe17 	ldw	r4,28664(r2)
   124b4:	deffff04 	addi	sp,sp,-4
   124b8:	dfc00015 	stw	ra,0(sp)
   124bc:	001249c0 	call	1249c <_ZN10__cxxabiv112__unexpectedEPFvvE>

000124c0 <_ZSt13set_terminatePFvvE>:
   124c0:	20000526 	beq	r4,zero,124d8 <_ZSt13set_terminatePFvvE+0x18>
   124c4:	00c00074 	movhi	r3,1
   124c8:	00800074 	movhi	r2,1
   124cc:	109c0717 	ldw	r2,28700(r2)
   124d0:	191c0715 	stw	r4,28700(r3)
   124d4:	f800283a 	ret
   124d8:	01000074 	movhi	r4,1
   124dc:	210fb204 	addi	r4,r4,16072
   124e0:	003ff806 	br	124c4 <_ZSt13set_terminatePFvvE+0x4>

000124e4 <_ZSt13get_terminatev>:
   124e4:	00800074 	movhi	r2,1
   124e8:	109c0717 	ldw	r2,28700(r2)
   124ec:	f800283a 	ret

000124f0 <_ZSt14set_unexpectedPFvvE>:
   124f0:	20000526 	beq	r4,zero,12508 <_ZSt14set_unexpectedPFvvE+0x18>
   124f4:	00c00074 	movhi	r3,1
   124f8:	00800074 	movhi	r2,1
   124fc:	109bfe17 	ldw	r2,28664(r2)
   12500:	191bfe15 	stw	r4,28664(r3)
   12504:	f800283a 	ret
   12508:	01000074 	movhi	r4,1
   1250c:	21092204 	addi	r4,r4,9352
   12510:	003ff806 	br	124f4 <_ZSt14set_unexpectedPFvvE+0x4>

00012514 <_ZSt14get_unexpectedv>:
   12514:	00800074 	movhi	r2,1
   12518:	109bfe17 	ldw	r2,28664(r2)
   1251c:	f800283a 	ret

00012520 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
   12520:	defffe04 	addi	sp,sp,-8
   12524:	dfc00115 	stw	ra,4(sp)
   12528:	dc000015 	stw	r16,0(sp)
   1252c:	210000b0 	cmpltui	r4,r4,2
   12530:	20001326 	beq	r4,zero,12580 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x60>
   12534:	28bff417 	ldw	r2,-48(r5)
   12538:	10ffffc4 	addi	r3,r2,-1
   1253c:	28fff415 	stw	r3,-48(r5)
   12540:	10800058 	cmpnei	r2,r2,1
   12544:	10000426 	beq	r2,zero,12558 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x38>
   12548:	dfc00117 	ldw	ra,4(sp)
   1254c:	dc000017 	ldw	r16,0(sp)
   12550:	dec00204 	addi	sp,sp,8
   12554:	f800283a 	ret
   12558:	28bff617 	ldw	r2,-40(r5)
   1255c:	2c000504 	addi	r16,r5,20
   12560:	10000226 	beq	r2,zero,1256c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x4c>
   12564:	8009883a 	mov	r4,r16
   12568:	103ee83a 	callr	r2
   1256c:	8009883a 	mov	r4,r16
   12570:	dfc00117 	ldw	ra,4(sp)
   12574:	dc000017 	ldw	r16,0(sp)
   12578:	dec00204 	addi	sp,sp,8
   1257c:	00130501 	jmpi	13050 <__cxa_free_exception>
   12580:	293ff817 	ldw	r4,-32(r5)
   12584:	00123c00 	call	123c0 <_ZN10__cxxabiv111__terminateEPFvvE>

00012588 <__cxa_init_primary_exception>:
   12588:	defffe04 	addi	sp,sp,-8
   1258c:	dfc00115 	stw	ra,4(sp)
   12590:	dc000015 	stw	r16,0(sp)
   12594:	217ff015 	stw	r5,-64(r4)
   12598:	21bff115 	stw	r6,-60(r4)
   1259c:	203fef15 	stw	zero,-68(r4)
   125a0:	2021883a 	mov	r16,r4
   125a4:	00125140 	call	12514 <_ZSt14get_unexpectedv>
   125a8:	80bff215 	stw	r2,-56(r16)
   125ac:	00124e40 	call	124e4 <_ZSt13get_terminatev>
   125b0:	0150caf4 	movhi	r5,17195
   125b4:	0111d3b4 	movhi	r4,18254
   125b8:	00c00074 	movhi	r3,1
   125bc:	294ac004 	addi	r5,r5,11008
   125c0:	211550c4 	addi	r4,r4,21827
   125c4:	18c94804 	addi	r3,r3,9504
   125c8:	80bff315 	stw	r2,-52(r16)
   125cc:	80bfef04 	addi	r2,r16,-68
   125d0:	817ffb15 	stw	r5,-20(r16)
   125d4:	813ffc15 	stw	r4,-16(r16)
   125d8:	80fffd15 	stw	r3,-12(r16)
   125dc:	dfc00117 	ldw	ra,4(sp)
   125e0:	dc000017 	ldw	r16,0(sp)
   125e4:	dec00204 	addi	sp,sp,8
   125e8:	f800283a 	ret

000125ec <__cxa_throw>:
   125ec:	defffc04 	addi	sp,sp,-16
   125f0:	dfc00315 	stw	ra,12(sp)
   125f4:	dc800215 	stw	r18,8(sp)
   125f8:	dc400115 	stw	r17,4(sp)
   125fc:	dc000015 	stw	r16,0(sp)
   12600:	2823883a 	mov	r17,r5
   12604:	2021883a 	mov	r16,r4
   12608:	3025883a 	mov	r18,r6
   1260c:	00133b00 	call	133b0 <__cxa_get_globals>
   12610:	10c00117 	ldw	r3,4(r2)
   12614:	900d883a 	mov	r6,r18
   12618:	880b883a 	mov	r5,r17
   1261c:	18c00044 	addi	r3,r3,1
   12620:	8009883a 	mov	r4,r16
   12624:	10c00115 	stw	r3,4(r2)
   12628:	00125880 	call	12588 <__cxa_init_primary_exception>
   1262c:	14000c04 	addi	r16,r2,48
   12630:	00c00044 	movi	r3,1
   12634:	10c00015 	stw	r3,0(r2)
   12638:	8009883a 	mov	r4,r16
   1263c:	0013c980 	call	13c98 <_Unwind_SjLj_RaiseException>
   12640:	8009883a 	mov	r4,r16
   12644:	00131ac0 	call	131ac <__cxa_begin_catch>
   12648:	00124880 	call	12488 <_ZSt9terminatev>

0001264c <__cxa_rethrow>:
   1264c:	defffe04 	addi	sp,sp,-8
   12650:	dfc00115 	stw	ra,4(sp)
   12654:	dc000015 	stw	r16,0(sp)
   12658:	00133b00 	call	133b0 <__cxa_get_globals>
   1265c:	10c00117 	ldw	r3,4(r2)
   12660:	11000017 	ldw	r4,0(r2)
   12664:	18c00044 	addi	r3,r3,1
   12668:	10c00115 	stw	r3,4(r2)
   1266c:	20001126 	beq	r4,zero,126b4 <__cxa_rethrow+0x68>
   12670:	20c00b17 	ldw	r3,44(r4)
   12674:	21800c17 	ldw	r6,48(r4)
   12678:	016f3574 	movhi	r5,48341
   1267c:	29754004 	addi	r5,r5,-11008
   12680:	01ee2cb4 	movhi	r7,47282
   12684:	39eaaf04 	addi	r7,r7,-21828
   12688:	194b883a 	add	r5,r3,r5
   1268c:	28c7803a 	cmpltu	r3,r5,r3
   12690:	31cd883a 	add	r6,r6,r7
   12694:	1987883a 	add	r3,r3,r6
   12698:	18000726 	beq	r3,zero,126b8 <__cxa_rethrow+0x6c>
   1269c:	10000015 	stw	zero,0(r2)
   126a0:	24000b04 	addi	r16,r4,44
   126a4:	8009883a 	mov	r4,r16
   126a8:	0013de80 	call	13de8 <_Unwind_SjLj_Resume_or_Rethrow>
   126ac:	8009883a 	mov	r4,r16
   126b0:	00131ac0 	call	131ac <__cxa_begin_catch>
   126b4:	00124880 	call	12488 <_ZSt9terminatev>
   126b8:	294000a8 	cmpgeui	r5,r5,2
   126bc:	283ff71e 	bne	r5,zero,1269c <__cxa_rethrow+0x50>
   126c0:	20800517 	ldw	r2,20(r4)
   126c4:	0085c83a 	sub	r2,zero,r2
   126c8:	20800515 	stw	r2,20(r4)
   126cc:	003ff406 	br	126a0 <__cxa_rethrow+0x54>

000126d0 <_ZNK10__cxxabiv120__function_type_info15__is_function_pEv>:
   126d0:	00800044 	movi	r2,1
   126d4:	f800283a 	ret

000126d8 <_ZN10__cxxabiv120__function_type_infoD1Ev>:
   126d8:	00800074 	movhi	r2,1
   126dc:	10994804 	addi	r2,r2,25888
   126e0:	20800015 	stw	r2,0(r4)
   126e4:	0012adc1 	jmpi	12adc <_ZNSt9type_infoD1Ev>

000126e8 <_ZN10__cxxabiv120__function_type_infoD0Ev>:
   126e8:	defffe04 	addi	sp,sp,-8
   126ec:	00800074 	movhi	r2,1
   126f0:	dc000015 	stw	r16,0(sp)
   126f4:	dfc00115 	stw	ra,4(sp)
   126f8:	10994804 	addi	r2,r2,25888
   126fc:	20800015 	stw	r2,0(r4)
   12700:	2021883a 	mov	r16,r4
   12704:	0012adc0 	call	12adc <_ZNSt9type_infoD1Ev>
   12708:	01400204 	movi	r5,8
   1270c:	8009883a 	mov	r4,r16
   12710:	dfc00117 	ldw	ra,4(sp)
   12714:	dc000017 	ldw	r16,0(sp)
   12718:	dec00204 	addi	sp,sp,8
   1271c:	0012e681 	jmpi	12e68 <_ZdlPvj>

00012720 <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
   12720:	00800044 	movi	r2,1
   12724:	f800283a 	ret

00012728 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
   12728:	00800074 	movhi	r2,1
   1272c:	10995c04 	addi	r2,r2,25968
   12730:	20800015 	stw	r2,0(r4)
   12734:	001341c1 	jmpi	1341c <_ZN10__cxxabiv117__pbase_type_infoD1Ev>

00012738 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
   12738:	defffe04 	addi	sp,sp,-8
   1273c:	00800074 	movhi	r2,1
   12740:	dc000015 	stw	r16,0(sp)
   12744:	dfc00115 	stw	ra,4(sp)
   12748:	10995c04 	addi	r2,r2,25968
   1274c:	20800015 	stw	r2,0(r4)
   12750:	2021883a 	mov	r16,r4
   12754:	001341c0 	call	1341c <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
   12758:	01400404 	movi	r5,16
   1275c:	8009883a 	mov	r4,r16
   12760:	dfc00117 	ldw	ra,4(sp)
   12764:	dc000017 	ldw	r16,0(sp)
   12768:	dec00204 	addi	sp,sp,8
   1276c:	0012e681 	jmpi	12e68 <_ZdlPvj>

00012770 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
   12770:	defffb04 	addi	sp,sp,-20
   12774:	dc800315 	stw	r18,12(sp)
   12778:	dc400215 	stw	r17,8(sp)
   1277c:	dfc00415 	stw	ra,16(sp)
   12780:	388000a8 	cmpgeui	r2,r7,2
   12784:	24800317 	ldw	r18,12(r4)
   12788:	2823883a 	mov	r17,r5
   1278c:	10000a26 	beq	r2,zero,127b8 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x48>
   12790:	90800017 	ldw	r2,0(r18)
   12794:	89400317 	ldw	r5,12(r17)
   12798:	39c00084 	addi	r7,r7,2
   1279c:	10800417 	ldw	r2,16(r2)
   127a0:	9009883a 	mov	r4,r18
   127a4:	dfc00417 	ldw	ra,16(sp)
   127a8:	dc800317 	ldw	r18,12(sp)
   127ac:	dc400217 	ldw	r17,8(sp)
   127b0:	dec00504 	addi	sp,sp,20
   127b4:	1000683a 	jmp	r2
   127b8:	00800074 	movhi	r2,1
   127bc:	91000117 	ldw	r4,4(r18)
   127c0:	115c8617 	ldw	r5,29208(r2)
   127c4:	21400926 	beq	r4,r5,127ec <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x7c>
   127c8:	20800007 	ldb	r2,0(r4)
   127cc:	10800aa0 	cmpeqi	r2,r2,42
   127d0:	103fef1e 	bne	r2,zero,12790 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x20>
   127d4:	d9c00115 	stw	r7,4(sp)
   127d8:	d9800015 	stw	r6,0(sp)
   127dc:	00145100 	call	14510 <strcmp>
   127e0:	d9800017 	ldw	r6,0(sp)
   127e4:	d9c00117 	ldw	r7,4(sp)
   127e8:	103fe91e 	bne	r2,zero,12790 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x20>
   127ec:	89000317 	ldw	r4,12(r17)
   127f0:	20800017 	ldw	r2,0(r4)
   127f4:	10800317 	ldw	r2,12(r2)
   127f8:	103ee83a 	callr	r2
   127fc:	1080005c 	xori	r2,r2,1
   12800:	dfc00417 	ldw	ra,16(sp)
   12804:	dc800317 	ldw	r18,12(sp)
   12808:	dc400217 	ldw	r17,8(sp)
   1280c:	dec00504 	addi	sp,sp,20
   12810:	f800283a 	ret

00012814 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   12814:	00800074 	movhi	r2,1
   12818:	10997204 	addi	r2,r2,26056
   1281c:	20800015 	stw	r2,0(r4)
   12820:	0012c501 	jmpi	12c50 <_ZN10__cxxabiv117__class_type_infoD1Ev>

00012824 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   12824:	defffe04 	addi	sp,sp,-8
   12828:	00800074 	movhi	r2,1
   1282c:	dc000015 	stw	r16,0(sp)
   12830:	dfc00115 	stw	ra,4(sp)
   12834:	10997204 	addi	r2,r2,26056
   12838:	20800015 	stw	r2,0(r4)
   1283c:	2021883a 	mov	r16,r4
   12840:	0012c500 	call	12c50 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   12844:	01400304 	movi	r5,12
   12848:	8009883a 	mov	r4,r16
   1284c:	dfc00117 	ldw	ra,4(sp)
   12850:	dc000017 	ldw	r16,0(sp)
   12854:	dec00204 	addi	sp,sp,8
   12858:	0012e681 	jmpi	12e68 <_ZdlPvj>

0001285c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   1285c:	defff504 	addi	sp,sp,-44
   12860:	dcc00415 	stw	r19,16(sp)
   12864:	38800117 	ldw	r2,4(r7)
   12868:	24c00117 	ldw	r19,4(r4)
   1286c:	df000915 	stw	fp,36(sp)
   12870:	dd800715 	stw	r22,28(sp)
   12874:	dd400615 	stw	r21,24(sp)
   12878:	dd000515 	stw	r20,20(sp)
   1287c:	dc000115 	stw	r16,4(sp)
   12880:	dfc00a15 	stw	ra,40(sp)
   12884:	ddc00815 	stw	r23,32(sp)
   12888:	dc800315 	stw	r18,12(sp)
   1288c:	dc400215 	stw	r17,8(sp)
   12890:	dd000b17 	ldw	r20,44(sp)
   12894:	df000c17 	ldw	fp,48(sp)
   12898:	dd800d17 	ldw	r22,52(sp)
   1289c:	dd400e17 	ldw	r21,56(sp)
   128a0:	2821883a 	mov	r16,r5
   128a4:	98800b26 	beq	r19,r2,128d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
   128a8:	9dc00007 	ldb	r23,0(r19)
   128ac:	2025883a 	mov	r18,r4
   128b0:	3823883a 	mov	r17,r7
   128b4:	b8c00aa0 	cmpeqi	r3,r23,42
   128b8:	18001a1e 	bne	r3,zero,12924 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xc8>
   128bc:	100b883a 	mov	r5,r2
   128c0:	9809883a 	mov	r4,r19
   128c4:	d9800015 	stw	r6,0(sp)
   128c8:	00145100 	call	14510 <strcmp>
   128cc:	d9800017 	ldw	r6,0(sp)
   128d0:	1000141e 	bne	r2,zero,12924 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xc8>
   128d4:	ad000015 	stw	r20,0(r21)
   128d8:	a9800115 	stw	r6,4(r21)
   128dc:	80003416 	blt	r16,zero,129b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x154>
   128e0:	a421883a 	add	r16,r20,r16
   128e4:	b4003026 	beq	r22,r16,129a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x14c>
   128e8:	00800044 	movi	r2,1
   128ec:	a8800315 	stw	r2,12(r21)
   128f0:	0005883a 	mov	r2,zero
   128f4:	dfc00a17 	ldw	ra,40(sp)
   128f8:	df000917 	ldw	fp,36(sp)
   128fc:	ddc00817 	ldw	r23,32(sp)
   12900:	dd800717 	ldw	r22,28(sp)
   12904:	dd400617 	ldw	r21,24(sp)
   12908:	dd000517 	ldw	r20,20(sp)
   1290c:	dcc00417 	ldw	r19,16(sp)
   12910:	dc800317 	ldw	r18,12(sp)
   12914:	dc400217 	ldw	r17,8(sp)
   12918:	dc000117 	ldw	r16,4(sp)
   1291c:	dec00b04 	addi	sp,sp,44
   12920:	f800283a 	ret
   12924:	a5801526 	beq	r20,r22,1297c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x120>
   12928:	91000217 	ldw	r4,8(r18)
   1292c:	880f883a 	mov	r7,r17
   12930:	800b883a 	mov	r5,r16
   12934:	20800017 	ldw	r2,0(r4)
   12938:	dd400e15 	stw	r21,56(sp)
   1293c:	dd800d15 	stw	r22,52(sp)
   12940:	df000c15 	stw	fp,48(sp)
   12944:	dd000b15 	stw	r20,44(sp)
   12948:	10800717 	ldw	r2,28(r2)
   1294c:	dfc00a17 	ldw	ra,40(sp)
   12950:	df000917 	ldw	fp,36(sp)
   12954:	ddc00817 	ldw	r23,32(sp)
   12958:	dd800717 	ldw	r22,28(sp)
   1295c:	dd400617 	ldw	r21,24(sp)
   12960:	dd000517 	ldw	r20,20(sp)
   12964:	dcc00417 	ldw	r19,16(sp)
   12968:	dc800317 	ldw	r18,12(sp)
   1296c:	dc400217 	ldw	r17,8(sp)
   12970:	dc000117 	ldw	r16,4(sp)
   12974:	dec00b04 	addi	sp,sp,44
   12978:	1000683a 	jmp	r2
   1297c:	e1400117 	ldw	r5,4(fp)
   12980:	99400726 	beq	r19,r5,129a0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x144>
   12984:	bdc00aa0 	cmpeqi	r23,r23,42
   12988:	b83fe71e 	bne	r23,zero,12928 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
   1298c:	9809883a 	mov	r4,r19
   12990:	d9800015 	stw	r6,0(sp)
   12994:	00145100 	call	14510 <strcmp>
   12998:	d9800017 	ldw	r6,0(sp)
   1299c:	103fe21e 	bne	r2,zero,12928 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
   129a0:	a9800215 	stw	r6,8(r21)
   129a4:	003fd206 	br	128f0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x94>
   129a8:	00800184 	movi	r2,6
   129ac:	003fcf06 	br	128ec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x90>
   129b0:	843fff98 	cmpnei	r16,r16,-2
   129b4:	803fce1e 	bne	r16,zero,128f0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x94>
   129b8:	003fcb06 	br	128e8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>

000129bc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   129bc:	defffa04 	addi	sp,sp,-24
   129c0:	dc800415 	stw	r18,16(sp)
   129c4:	dc800617 	ldw	r18,24(sp)
   129c8:	dc400315 	stw	r17,12(sp)
   129cc:	dc000215 	stw	r16,8(sp)
   129d0:	dfc00515 	stw	ra,20(sp)
   129d4:	2021883a 	mov	r16,r4
   129d8:	2823883a 	mov	r17,r5
   129dc:	91800b26 	beq	r18,r6,12a0c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
   129e0:	81000217 	ldw	r4,8(r16)
   129e4:	880b883a 	mov	r5,r17
   129e8:	20800017 	ldw	r2,0(r4)
   129ec:	dc800615 	stw	r18,24(sp)
   129f0:	10800817 	ldw	r2,32(r2)
   129f4:	dfc00517 	ldw	ra,20(sp)
   129f8:	dc800417 	ldw	r18,16(sp)
   129fc:	dc400317 	ldw	r17,12(sp)
   12a00:	dc000217 	ldw	r16,8(sp)
   12a04:	dec00604 	addi	sp,sp,24
   12a08:	1000683a 	jmp	r2
   12a0c:	21000117 	ldw	r4,4(r4)
   12a10:	39400117 	ldw	r5,4(r7)
   12a14:	21400926 	beq	r4,r5,12a3c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
   12a18:	20800007 	ldb	r2,0(r4)
   12a1c:	10800aa0 	cmpeqi	r2,r2,42
   12a20:	103fef1e 	bne	r2,zero,129e0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   12a24:	d9c00115 	stw	r7,4(sp)
   12a28:	d9800015 	stw	r6,0(sp)
   12a2c:	00145100 	call	14510 <strcmp>
   12a30:	d9800017 	ldw	r6,0(sp)
   12a34:	d9c00117 	ldw	r7,4(sp)
   12a38:	103fe91e 	bne	r2,zero,129e0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   12a3c:	00800184 	movi	r2,6
   12a40:	dfc00517 	ldw	ra,20(sp)
   12a44:	dc800417 	ldw	r18,16(sp)
   12a48:	dc400317 	ldw	r17,12(sp)
   12a4c:	dc000217 	ldw	r16,8(sp)
   12a50:	dec00604 	addi	sp,sp,24
   12a54:	f800283a 	ret

00012a58 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   12a58:	defffb04 	addi	sp,sp,-20
   12a5c:	dcc00315 	stw	r19,12(sp)
   12a60:	dc800215 	stw	r18,8(sp)
   12a64:	dc400115 	stw	r17,4(sp)
   12a68:	dc000015 	stw	r16,0(sp)
   12a6c:	dfc00415 	stw	ra,16(sp)
   12a70:	2025883a 	mov	r18,r4
   12a74:	2827883a 	mov	r19,r5
   12a78:	3021883a 	mov	r16,r6
   12a7c:	3823883a 	mov	r17,r7
   12a80:	0012c980 	call	12c98 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   12a84:	10c03fcc 	andi	r3,r2,255
   12a88:	18000d1e 	bne	r3,zero,12ac0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x68>
   12a8c:	91000217 	ldw	r4,8(r18)
   12a90:	880f883a 	mov	r7,r17
   12a94:	800d883a 	mov	r6,r16
   12a98:	20800017 	ldw	r2,0(r4)
   12a9c:	980b883a 	mov	r5,r19
   12aa0:	10800617 	ldw	r2,24(r2)
   12aa4:	dfc00417 	ldw	ra,16(sp)
   12aa8:	dcc00317 	ldw	r19,12(sp)
   12aac:	dc800217 	ldw	r18,8(sp)
   12ab0:	dc400117 	ldw	r17,4(sp)
   12ab4:	dc000017 	ldw	r16,0(sp)
   12ab8:	dec00504 	addi	sp,sp,20
   12abc:	1000683a 	jmp	r2
   12ac0:	dfc00417 	ldw	ra,16(sp)
   12ac4:	dcc00317 	ldw	r19,12(sp)
   12ac8:	dc800217 	ldw	r18,8(sp)
   12acc:	dc400117 	ldw	r17,4(sp)
   12ad0:	dc000017 	ldw	r16,0(sp)
   12ad4:	dec00504 	addi	sp,sp,20
   12ad8:	f800283a 	ret

00012adc <_ZNSt9type_infoD1Ev>:
   12adc:	f800283a 	ret

00012ae0 <_ZNKSt9type_info14__is_pointer_pEv>:
   12ae0:	0005883a 	mov	r2,zero
   12ae4:	f800283a 	ret

00012ae8 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
   12ae8:	0005883a 	mov	r2,zero
   12aec:	f800283a 	ret

00012af0 <_ZNSt9type_infoD0Ev>:
   12af0:	01400204 	movi	r5,8
   12af4:	0012e681 	jmpi	12e68 <_ZdlPvj>

00012af8 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
   12af8:	21000117 	ldw	r4,4(r4)
   12afc:	29400117 	ldw	r5,4(r5)
   12b00:	21400c26 	beq	r4,r5,12b34 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
   12b04:	20800007 	ldb	r2,0(r4)
   12b08:	10800aa0 	cmpeqi	r2,r2,42
   12b0c:	1000071e 	bne	r2,zero,12b2c <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
   12b10:	deffff04 	addi	sp,sp,-4
   12b14:	dfc00015 	stw	ra,0(sp)
   12b18:	00145100 	call	14510 <strcmp>
   12b1c:	1005003a 	cmpeq	r2,r2,zero
   12b20:	dfc00017 	ldw	ra,0(sp)
   12b24:	dec00104 	addi	sp,sp,4
   12b28:	f800283a 	ret
   12b2c:	0005883a 	mov	r2,zero
   12b30:	f800283a 	ret
   12b34:	00800044 	movi	r2,1
   12b38:	f800283a 	ret

00012b3c <_ZNKSt17bad_function_call4whatEv>:
   12b3c:	00800074 	movhi	r2,1
   12b40:	10998704 	addi	r2,r2,26140
   12b44:	f800283a 	ret

00012b48 <_ZNSt17bad_function_callD1Ev>:
   12b48:	00800074 	movhi	r2,1
   12b4c:	10999704 	addi	r2,r2,26204
   12b50:	20800015 	stw	r2,0(r4)
   12b54:	00133541 	jmpi	13354 <_ZNSt9exceptionD1Ev>

00012b58 <_ZNSt17bad_function_callD0Ev>:
   12b58:	defffe04 	addi	sp,sp,-8
   12b5c:	00800074 	movhi	r2,1
   12b60:	dc000015 	stw	r16,0(sp)
   12b64:	dfc00115 	stw	ra,4(sp)
   12b68:	10999704 	addi	r2,r2,26204
   12b6c:	20800015 	stw	r2,0(r4)
   12b70:	2021883a 	mov	r16,r4
   12b74:	00133540 	call	13354 <_ZNSt9exceptionD1Ev>
   12b78:	8009883a 	mov	r4,r16
   12b7c:	dfc00117 	ldw	ra,4(sp)
   12b80:	dc000017 	ldw	r16,0(sp)
   12b84:	dec00204 	addi	sp,sp,8
   12b88:	0012e641 	jmpi	12e64 <_ZdlPv>

00012b8c <_ZSt25__throw_bad_function_callv>:
   12b8c:	deffff04 	addi	sp,sp,-4
   12b90:	01000104 	movi	r4,4
   12b94:	dfc00015 	stw	ra,0(sp)
   12b98:	0012ff80 	call	12ff8 <__cxa_allocate_exception>
   12b9c:	1009883a 	mov	r4,r2
   12ba0:	00800074 	movhi	r2,1
   12ba4:	01800074 	movhi	r6,1
   12ba8:	01400074 	movhi	r5,1
   12bac:	10999704 	addi	r2,r2,26204
   12bb0:	318ad204 	addi	r6,r6,11080
   12bb4:	29599204 	addi	r5,r5,26184
   12bb8:	20800015 	stw	r2,0(r4)
   12bbc:	00125ec0 	call	125ec <__cxa_throw>

00012bc0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   12bc0:	20800017 	ldw	r2,0(r4)
   12bc4:	defffa04 	addi	sp,sp,-24
   12bc8:	dc000415 	stw	r16,16(sp)
   12bcc:	10800617 	ldw	r2,24(r2)
   12bd0:	3021883a 	mov	r16,r6
   12bd4:	31800017 	ldw	r6,0(r6)
   12bd8:	00c00404 	movi	r3,16
   12bdc:	dfc00515 	stw	ra,20(sp)
   12be0:	d8000015 	stw	zero,0(sp)
   12be4:	d8000115 	stw	zero,4(sp)
   12be8:	d8c00215 	stw	r3,8(sp)
   12bec:	d8000315 	stw	zero,12(sp)
   12bf0:	d80f883a 	mov	r7,sp
   12bf4:	103ee83a 	callr	r2
   12bf8:	d8800117 	ldw	r2,4(sp)
   12bfc:	1080018c 	andi	r2,r2,6
   12c00:	10800198 	cmpnei	r2,r2,6
   12c04:	1000071e 	bne	r2,zero,12c24 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x64>
   12c08:	d8c00017 	ldw	r3,0(sp)
   12c0c:	00800044 	movi	r2,1
   12c10:	80c00015 	stw	r3,0(r16)
   12c14:	dfc00517 	ldw	ra,20(sp)
   12c18:	dc000417 	ldw	r16,16(sp)
   12c1c:	dec00604 	addi	sp,sp,24
   12c20:	f800283a 	ret
   12c24:	0005883a 	mov	r2,zero
   12c28:	dfc00517 	ldw	ra,20(sp)
   12c2c:	dc000417 	ldw	r16,16(sp)
   12c30:	dec00604 	addi	sp,sp,24
   12c34:	f800283a 	ret

00012c38 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   12c38:	d8c00017 	ldw	r3,0(sp)
   12c3c:	00800044 	movi	r2,1
   12c40:	19800126 	beq	r3,r6,12c48 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
   12c44:	f800283a 	ret
   12c48:	00800184 	movi	r2,6
   12c4c:	f800283a 	ret

00012c50 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   12c50:	00800074 	movhi	r2,1
   12c54:	1099a804 	addi	r2,r2,26272
   12c58:	20800015 	stw	r2,0(r4)
   12c5c:	0012adc1 	jmpi	12adc <_ZNSt9type_infoD1Ev>

00012c60 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   12c60:	defffe04 	addi	sp,sp,-8
   12c64:	00800074 	movhi	r2,1
   12c68:	dc000015 	stw	r16,0(sp)
   12c6c:	dfc00115 	stw	ra,4(sp)
   12c70:	1099a804 	addi	r2,r2,26272
   12c74:	20800015 	stw	r2,0(r4)
   12c78:	2021883a 	mov	r16,r4
   12c7c:	0012adc0 	call	12adc <_ZNSt9type_infoD1Ev>
   12c80:	01400204 	movi	r5,8
   12c84:	8009883a 	mov	r4,r16
   12c88:	dfc00117 	ldw	ra,4(sp)
   12c8c:	dc000017 	ldw	r16,0(sp)
   12c90:	dec00204 	addi	sp,sp,8
   12c94:	0012e681 	jmpi	12e68 <_ZdlPvj>

00012c98 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   12c98:	21000117 	ldw	r4,4(r4)
   12c9c:	29400117 	ldw	r5,4(r5)
   12ca0:	defffd04 	addi	sp,sp,-12
   12ca4:	dc400115 	stw	r17,4(sp)
   12ca8:	dc000015 	stw	r16,0(sp)
   12cac:	dfc00215 	stw	ra,8(sp)
   12cb0:	3023883a 	mov	r17,r6
   12cb4:	3821883a 	mov	r16,r7
   12cb8:	21400526 	beq	r4,r5,12cd0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
   12cbc:	20800007 	ldb	r2,0(r4)
   12cc0:	10800aa0 	cmpeqi	r2,r2,42
   12cc4:	10000d1e 	bne	r2,zero,12cfc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
   12cc8:	00145100 	call	14510 <strcmp>
   12ccc:	10000b1e 	bne	r2,zero,12cfc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
   12cd0:	00800204 	movi	r2,8
   12cd4:	80800315 	stw	r2,12(r16)
   12cd8:	00800184 	movi	r2,6
   12cdc:	80800115 	stw	r2,4(r16)
   12ce0:	84400015 	stw	r17,0(r16)
   12ce4:	00800044 	movi	r2,1
   12ce8:	dfc00217 	ldw	ra,8(sp)
   12cec:	dc400117 	ldw	r17,4(sp)
   12cf0:	dc000017 	ldw	r16,0(sp)
   12cf4:	dec00304 	addi	sp,sp,12
   12cf8:	f800283a 	ret
   12cfc:	0005883a 	mov	r2,zero
   12d00:	003ff906 	br	12ce8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x50>

00012d04 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   12d04:	defffb04 	addi	sp,sp,-20
   12d08:	dc800315 	stw	r18,12(sp)
   12d0c:	dc400215 	stw	r17,8(sp)
   12d10:	2025883a 	mov	r18,r4
   12d14:	2823883a 	mov	r17,r5
   12d18:	21000117 	ldw	r4,4(r4)
   12d1c:	29400117 	ldw	r5,4(r5)
   12d20:	dfc00415 	stw	ra,16(sp)
   12d24:	dc000115 	stw	r16,4(sp)
   12d28:	21400826 	beq	r4,r5,12d4c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x48>
   12d2c:	20800007 	ldb	r2,0(r4)
   12d30:	3821883a 	mov	r16,r7
   12d34:	10800aa0 	cmpeqi	r2,r2,42
   12d38:	10000b1e 	bne	r2,zero,12d68 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
   12d3c:	d9800015 	stw	r6,0(sp)
   12d40:	00145100 	call	14510 <strcmp>
   12d44:	d9800017 	ldw	r6,0(sp)
   12d48:	1000071e 	bne	r2,zero,12d68 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
   12d4c:	00800044 	movi	r2,1
   12d50:	dfc00417 	ldw	ra,16(sp)
   12d54:	dc800317 	ldw	r18,12(sp)
   12d58:	dc400217 	ldw	r17,8(sp)
   12d5c:	dc000117 	ldw	r16,4(sp)
   12d60:	dec00504 	addi	sp,sp,20
   12d64:	f800283a 	ret
   12d68:	81c00128 	cmpgeui	r7,r16,4
   12d6c:	38000a1e 	bne	r7,zero,12d98 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x94>
   12d70:	88800017 	ldw	r2,0(r17)
   12d74:	900b883a 	mov	r5,r18
   12d78:	8809883a 	mov	r4,r17
   12d7c:	10800517 	ldw	r2,20(r2)
   12d80:	dfc00417 	ldw	ra,16(sp)
   12d84:	dc800317 	ldw	r18,12(sp)
   12d88:	dc400217 	ldw	r17,8(sp)
   12d8c:	dc000117 	ldw	r16,4(sp)
   12d90:	dec00504 	addi	sp,sp,20
   12d94:	1000683a 	jmp	r2
   12d98:	0005883a 	mov	r2,zero
   12d9c:	003fec06 	br	12d50 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x4c>

00012da0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   12da0:	defffa04 	addi	sp,sp,-24
   12da4:	dc400315 	stw	r17,12(sp)
   12da8:	d8800817 	ldw	r2,32(sp)
   12dac:	dc400617 	ldw	r17,24(sp)
   12db0:	dc800415 	stw	r18,16(sp)
   12db4:	dc000215 	stw	r16,8(sp)
   12db8:	dfc00515 	stw	ra,20(sp)
   12dbc:	dc800917 	ldw	r18,36(sp)
   12dc0:	21000117 	ldw	r4,4(r4)
   12dc4:	3021883a 	mov	r16,r6
   12dc8:	88801226 	beq	r17,r2,12e14 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x74>
   12dcc:	39400117 	ldw	r5,4(r7)
   12dd0:	21400526 	beq	r4,r5,12de8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x48>
   12dd4:	20800007 	ldb	r2,0(r4)
   12dd8:	10800aa0 	cmpeqi	r2,r2,42
   12ddc:	1000061e 	bne	r2,zero,12df8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x58>
   12de0:	00145100 	call	14510 <strcmp>
   12de4:	1000041e 	bne	r2,zero,12df8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x58>
   12de8:	00800044 	movi	r2,1
   12dec:	94400015 	stw	r17,0(r18)
   12df0:	94000115 	stw	r16,4(r18)
   12df4:	90800315 	stw	r2,12(r18)
   12df8:	0005883a 	mov	r2,zero
   12dfc:	dfc00517 	ldw	ra,20(sp)
   12e00:	dc800417 	ldw	r18,16(sp)
   12e04:	dc400317 	ldw	r17,12(sp)
   12e08:	dc000217 	ldw	r16,8(sp)
   12e0c:	dec00604 	addi	sp,sp,24
   12e10:	f800283a 	ret
   12e14:	d8800717 	ldw	r2,28(sp)
   12e18:	11400117 	ldw	r5,4(r2)
   12e1c:	21400f26 	beq	r4,r5,12e5c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xbc>
   12e20:	20800007 	ldb	r2,0(r4)
   12e24:	10800aa0 	cmpeqi	r2,r2,42
   12e28:	1000091e 	bne	r2,zero,12e50 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
   12e2c:	d9c00115 	stw	r7,4(sp)
   12e30:	d9000015 	stw	r4,0(sp)
   12e34:	00145100 	call	14510 <strcmp>
   12e38:	d9000017 	ldw	r4,0(sp)
   12e3c:	d9c00117 	ldw	r7,4(sp)
   12e40:	10000626 	beq	r2,zero,12e5c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xbc>
   12e44:	39400117 	ldw	r5,4(r7)
   12e48:	217fe51e 	bne	r4,r5,12de0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x40>
   12e4c:	003fe606 	br	12de8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x48>
   12e50:	38800117 	ldw	r2,4(r7)
   12e54:	20bfe81e 	bne	r4,r2,12df8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x58>
   12e58:	003fe306 	br	12de8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x48>
   12e5c:	94000215 	stw	r16,8(r18)
   12e60:	003fe506 	br	12df8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x58>

00012e64 <_ZdlPv>:
   12e64:	0013ef01 	jmpi	13ef0 <free>

00012e68 <_ZdlPvj>:
   12e68:	0012e641 	jmpi	12e64 <_ZdlPv>

00012e6c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>:
   12e6c:	01400074 	movhi	r5,1
   12e70:	295dfe04 	addi	r5,r5,30712
   12e74:	28c00117 	ldw	r3,4(r5)
   12e78:	223fff04 	addi	r8,r4,-4
   12e7c:	18001a26 	beq	r3,zero,12ee8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x7c>
   12e80:	227fff17 	ldw	r9,-4(r4)
   12e84:	424d883a 	add	r6,r8,r9
   12e88:	30c01736 	bltu	r6,r3,12ee8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x7c>
   12e8c:	18800117 	ldw	r2,4(r3)
   12e90:	19802326 	beq	r3,r6,12f20 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xb4>
   12e94:	01c00074 	movhi	r7,1
   12e98:	39ddff04 	addi	r7,r7,30716
   12e9c:	10000726 	beq	r2,zero,12ebc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x50>
   12ea0:	3080062e 	bgeu	r6,r2,12ebc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x50>
   12ea4:	11400117 	ldw	r5,4(r2)
   12ea8:	19c00104 	addi	r7,r3,4
   12eac:	1007883a 	mov	r3,r2
   12eb0:	28001826 	beq	r5,zero,12f14 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0xa8>
   12eb4:	2805883a 	mov	r2,r5
   12eb8:	30bffa36 	bltu	r6,r2,12ea4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x38>
   12ebc:	30801026 	beq	r6,r2,12f00 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x94>
   12ec0:	38800017 	ldw	r2,0(r7)
   12ec4:	10c00017 	ldw	r3,0(r2)
   12ec8:	10cb883a 	add	r5,r2,r3
   12ecc:	41400926 	beq	r8,r5,12ef4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x88>
   12ed0:	10800117 	ldw	r2,4(r2)
   12ed4:	227fff15 	stw	r9,-4(r4)
   12ed8:	20800015 	stw	r2,0(r4)
   12edc:	38800017 	ldw	r2,0(r7)
   12ee0:	12000115 	stw	r8,4(r2)
   12ee4:	f800283a 	ret
   12ee8:	20c00015 	stw	r3,0(r4)
   12eec:	2a000115 	stw	r8,4(r5)
   12ef0:	f800283a 	ret
   12ef4:	1a47883a 	add	r3,r3,r9
   12ef8:	10c00015 	stw	r3,0(r2)
   12efc:	f800283a 	ret
   12f00:	31400017 	ldw	r5,0(r6)
   12f04:	30800117 	ldw	r2,4(r6)
   12f08:	4953883a 	add	r9,r9,r5
   12f0c:	18800115 	stw	r2,4(r3)
   12f10:	003feb06 	br	12ec0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x54>
   12f14:	0005883a 	mov	r2,zero
   12f18:	30bfe91e 	bne	r6,r2,12ec0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x54>
   12f1c:	003ff806 	br	12f00 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x94>
   12f20:	18c00017 	ldw	r3,0(r3)
   12f24:	20800015 	stw	r2,0(r4)
   12f28:	1a53883a 	add	r9,r3,r9
   12f2c:	227fff15 	stw	r9,-4(r4)
   12f30:	2a000115 	stw	r8,4(r5)
   12f34:	f800283a 	ret

00012f38 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>:
   12f38:	21000104 	addi	r4,r4,4
   12f3c:	20800228 	cmpgeui	r2,r4,8
   12f40:	1000011e 	bne	r2,zero,12f48 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x10>
   12f44:	01000204 	movi	r4,8
   12f48:	00800074 	movhi	r2,1
   12f4c:	109dff17 	ldw	r2,30716(r2)
   12f50:	210000c4 	addi	r4,r4,3
   12f54:	00ffff04 	movi	r3,-4
   12f58:	20c8703a 	and	r4,r4,r3
   12f5c:	10001026 	beq	r2,zero,12fa0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x68>
   12f60:	01800074 	movhi	r6,1
   12f64:	319dff04 	addi	r6,r6,30716
   12f68:	00000206 	br	12f74 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x3c>
   12f6c:	19800104 	addi	r6,r3,4
   12f70:	10001426 	beq	r2,zero,12fc4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x8c>
   12f74:	11400017 	ldw	r5,0(r2)
   12f78:	1007883a 	mov	r3,r2
   12f7c:	10800117 	ldw	r2,4(r2)
   12f80:	293ffa36 	bltu	r5,r4,12f6c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x34>
   12f84:	290fc83a 	sub	r7,r5,r4
   12f88:	3a000228 	cmpgeui	r8,r7,8
   12f8c:	4000051e 	bne	r8,zero,12fa4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x6c>
   12f90:	19400015 	stw	r5,0(r3)
   12f94:	30800015 	stw	r2,0(r6)
   12f98:	18800104 	addi	r2,r3,4
   12f9c:	f800283a 	ret
   12fa0:	f800283a 	ret
   12fa4:	190b883a 	add	r5,r3,r4
   12fa8:	28800115 	stw	r2,4(r5)
   12fac:	30c00017 	ldw	r3,0(r6)
   12fb0:	29c00015 	stw	r7,0(r5)
   12fb4:	19000015 	stw	r4,0(r3)
   12fb8:	31400015 	stw	r5,0(r6)
   12fbc:	18800104 	addi	r2,r3,4
   12fc0:	f800283a 	ret
   12fc4:	f800283a 	ret

00012fc8 <_ZN9__gnu_cxx9__freeresEv>:
   12fc8:	00800074 	movhi	r2,1
   12fcc:	111e0017 	ldw	r4,30720(r2)
   12fd0:	20000826 	beq	r4,zero,12ff4 <_ZN9__gnu_cxx9__freeresEv+0x2c>
   12fd4:	deffff04 	addi	sp,sp,-4
   12fd8:	dfc00015 	stw	ra,0(sp)
   12fdc:	0013ef00 	call	13ef0 <free>
   12fe0:	00800074 	movhi	r2,1
   12fe4:	101e0015 	stw	zero,30720(r2)
   12fe8:	dfc00017 	ldw	ra,0(sp)
   12fec:	dec00104 	addi	sp,sp,4
   12ff0:	f800283a 	ret
   12ff4:	f800283a 	ret

00012ff8 <__cxa_allocate_exception>:
   12ff8:	defffe04 	addi	sp,sp,-8
   12ffc:	dc000015 	stw	r16,0(sp)
   13000:	24001104 	addi	r16,r4,68
   13004:	8009883a 	mov	r4,r16
   13008:	dfc00115 	stw	ra,4(sp)
   1300c:	0013ee00 	call	13ee0 <malloc>
   13010:	1007883a 	mov	r3,r2
   13014:	10000926 	beq	r2,zero,1303c <__cxa_allocate_exception+0x44>
   13018:	01801104 	movi	r6,68
   1301c:	000b883a 	mov	r5,zero
   13020:	1809883a 	mov	r4,r3
   13024:	0013f000 	call	13f00 <memset>
   13028:	10801104 	addi	r2,r2,68
   1302c:	dfc00117 	ldw	ra,4(sp)
   13030:	dc000017 	ldw	r16,0(sp)
   13034:	dec00204 	addi	sp,sp,8
   13038:	f800283a 	ret
   1303c:	8009883a 	mov	r4,r16
   13040:	0012f380 	call	12f38 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>
   13044:	1007883a 	mov	r3,r2
   13048:	103ff31e 	bne	r2,zero,13018 <__cxa_allocate_exception+0x20>
   1304c:	00124880 	call	12488 <_ZSt9terminatev>

00013050 <__cxa_free_exception>:
   13050:	00800074 	movhi	r2,1
   13054:	109dfe04 	addi	r2,r2,30712
   13058:	10c00217 	ldw	r3,8(r2)
   1305c:	213fef04 	addi	r4,r4,-68
   13060:	1900042e 	bgeu	r3,r4,13074 <__cxa_free_exception+0x24>
   13064:	10800317 	ldw	r2,12(r2)
   13068:	1887883a 	add	r3,r3,r2
   1306c:	20c0012e 	bgeu	r4,r3,13074 <__cxa_free_exception+0x24>
   13070:	0012e6c1 	jmpi	12e6c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
   13074:	0013ef01 	jmpi	13ef0 <free>

00013078 <__cxa_allocate_dependent_exception>:
   13078:	deffff04 	addi	sp,sp,-4
   1307c:	01001004 	movi	r4,64
   13080:	dfc00015 	stw	ra,0(sp)
   13084:	0013ee00 	call	13ee0 <malloc>
   13088:	1009883a 	mov	r4,r2
   1308c:	10000626 	beq	r2,zero,130a8 <__cxa_allocate_dependent_exception+0x30>
   13090:	01801004 	movi	r6,64
   13094:	000b883a 	mov	r5,zero
   13098:	0013f000 	call	13f00 <memset>
   1309c:	dfc00017 	ldw	ra,0(sp)
   130a0:	dec00104 	addi	sp,sp,4
   130a4:	f800283a 	ret
   130a8:	01001004 	movi	r4,64
   130ac:	0012f380 	call	12f38 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>
   130b0:	1009883a 	mov	r4,r2
   130b4:	103ff61e 	bne	r2,zero,13090 <__cxa_allocate_dependent_exception+0x18>
   130b8:	00124880 	call	12488 <_ZSt9terminatev>

000130bc <__cxa_free_dependent_exception>:
   130bc:	00c00074 	movhi	r3,1
   130c0:	18ddfe04 	addi	r3,r3,30712
   130c4:	19400217 	ldw	r5,8(r3)
   130c8:	2005883a 	mov	r2,r4
   130cc:	2900042e 	bgeu	r5,r4,130e0 <__cxa_free_dependent_exception+0x24>
   130d0:	18c00317 	ldw	r3,12(r3)
   130d4:	28cb883a 	add	r5,r5,r3
   130d8:	2140012e 	bgeu	r4,r5,130e0 <__cxa_free_dependent_exception+0x24>
   130dc:	0012e6c1 	jmpi	12e6c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
   130e0:	1009883a 	mov	r4,r2
   130e4:	0013ef01 	jmpi	13ef0 <free>

000130e8 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
   130e8:	defffd04 	addi	sp,sp,-12
   130ec:	dc000015 	stw	r16,0(sp)
   130f0:	04000074 	movhi	r16,1
   130f4:	dc400115 	stw	r17,4(sp)
   130f8:	841dfe04 	addi	r16,r16,30712
   130fc:	04424004 	movi	r17,2304
   13100:	01024004 	movi	r4,2304
   13104:	dfc00215 	stw	ra,8(sp)
   13108:	84400315 	stw	r17,12(r16)
   1310c:	0013ee00 	call	13ee0 <malloc>
   13110:	80800215 	stw	r2,8(r16)
   13114:	10000826 	beq	r2,zero,13138 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x50>
   13118:	80800115 	stw	r2,4(r16)
   1311c:	14400015 	stw	r17,0(r2)
   13120:	10000115 	stw	zero,4(r2)
   13124:	dfc00217 	ldw	ra,8(sp)
   13128:	dc400117 	ldw	r17,4(sp)
   1312c:	dc000017 	ldw	r16,0(sp)
   13130:	dec00304 	addi	sp,sp,12
   13134:	f800283a 	ret
   13138:	00800074 	movhi	r2,1
   1313c:	101e0115 	stw	zero,30724(r2)
   13140:	00800074 	movhi	r2,1
   13144:	101dff15 	stw	zero,30716(r2)
   13148:	003ff606 	br	13124 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x3c>

0001314c <__cxa_call_terminate>:
   1314c:	defffe04 	addi	sp,sp,-8
   13150:	dfc00115 	stw	ra,4(sp)
   13154:	dc000015 	stw	r16,0(sp)
   13158:	20000d26 	beq	r4,zero,13190 <__cxa_call_terminate+0x44>
   1315c:	2021883a 	mov	r16,r4
   13160:	00131ac0 	call	131ac <__cxa_begin_catch>
   13164:	80800017 	ldw	r2,0(r16)
   13168:	81000117 	ldw	r4,4(r16)
   1316c:	00ef3574 	movhi	r3,48341
   13170:	18f54004 	addi	r3,r3,-11008
   13174:	016e2cb4 	movhi	r5,47282
   13178:	296aaf04 	addi	r5,r5,-21828
   1317c:	10c7883a 	add	r3,r2,r3
   13180:	1885803a 	cmpltu	r2,r3,r2
   13184:	2149883a 	add	r4,r4,r5
   13188:	1105883a 	add	r2,r2,r4
   1318c:	10000126 	beq	r2,zero,13194 <__cxa_call_terminate+0x48>
   13190:	00124880 	call	12488 <_ZSt9terminatev>
   13194:	18c000a8 	cmpgeui	r3,r3,2
   13198:	183ffd1e 	bne	r3,zero,13190 <__cxa_call_terminate+0x44>
   1319c:	813ff817 	ldw	r4,-32(r16)
   131a0:	00123c00 	call	123c0 <_ZN10__cxxabiv111__terminateEPFvvE>

000131a4 <__cxa_get_exception_ptr>:
   131a4:	20bfff17 	ldw	r2,-4(r4)
   131a8:	f800283a 	ret

000131ac <__cxa_begin_catch>:
   131ac:	defffe04 	addi	sp,sp,-8
   131b0:	dc000015 	stw	r16,0(sp)
   131b4:	dfc00115 	stw	ra,4(sp)
   131b8:	2021883a 	mov	r16,r4
   131bc:	00133b00 	call	133b0 <__cxa_get_globals>
   131c0:	80c00017 	ldw	r3,0(r16)
   131c4:	81800117 	ldw	r6,4(r16)
   131c8:	012f3574 	movhi	r4,48341
   131cc:	21354004 	addi	r4,r4,-11008
   131d0:	016e2cb4 	movhi	r5,47282
   131d4:	296aaf04 	addi	r5,r5,-21828
   131d8:	1909883a 	add	r4,r3,r4
   131dc:	314d883a 	add	r6,r6,r5
   131e0:	20c7803a 	cmpltu	r3,r4,r3
   131e4:	1987883a 	add	r3,r3,r6
   131e8:	100b883a 	mov	r5,r2
   131ec:	81bff504 	addi	r6,r16,-44
   131f0:	10800017 	ldw	r2,0(r2)
   131f4:	18000626 	beq	r3,zero,13210 <__cxa_begin_catch+0x64>
   131f8:	1000191e 	bne	r2,zero,13260 <__cxa_begin_catch+0xb4>
   131fc:	29800015 	stw	r6,0(r5)
   13200:	dfc00117 	ldw	ra,4(sp)
   13204:	dc000017 	ldw	r16,0(sp)
   13208:	dec00204 	addi	sp,sp,8
   1320c:	f800283a 	ret
   13210:	210000a8 	cmpgeui	r4,r4,2
   13214:	203ff81e 	bne	r4,zero,131f8 <__cxa_begin_catch+0x4c>
   13218:	80fffa17 	ldw	r3,-24(r16)
   1321c:	18000d16 	blt	r3,zero,13254 <__cxa_begin_catch+0xa8>
   13220:	18c00044 	addi	r3,r3,1
   13224:	29000117 	ldw	r4,4(r5)
   13228:	80fffa15 	stw	r3,-24(r16)
   1322c:	20ffffc4 	addi	r3,r4,-1
   13230:	28c00115 	stw	r3,4(r5)
   13234:	11800226 	beq	r2,r6,13240 <__cxa_begin_catch+0x94>
   13238:	80bff915 	stw	r2,-28(r16)
   1323c:	29800015 	stw	r6,0(r5)
   13240:	80bfff17 	ldw	r2,-4(r16)
   13244:	dfc00117 	ldw	ra,4(sp)
   13248:	dc000017 	ldw	r16,0(sp)
   1324c:	dec00204 	addi	sp,sp,8
   13250:	f800283a 	ret
   13254:	01000044 	movi	r4,1
   13258:	20c7c83a 	sub	r3,r4,r3
   1325c:	003ff106 	br	13224 <__cxa_begin_catch+0x78>
   13260:	00124880 	call	12488 <_ZSt9terminatev>

00013264 <__cxa_end_catch>:
   13264:	deffff04 	addi	sp,sp,-4
   13268:	dfc00015 	stw	ra,0(sp)
   1326c:	00133a40 	call	133a4 <__cxa_get_globals_fast>
   13270:	11000017 	ldw	r4,0(r2)
   13274:	20001426 	beq	r4,zero,132c8 <__cxa_end_catch+0x64>
   13278:	20c00b17 	ldw	r3,44(r4)
   1327c:	21800c17 	ldw	r6,48(r4)
   13280:	016f3574 	movhi	r5,48341
   13284:	29754004 	addi	r5,r5,-11008
   13288:	01ee2cb4 	movhi	r7,47282
   1328c:	39eaaf04 	addi	r7,r7,-21828
   13290:	194b883a 	add	r5,r3,r5
   13294:	28c7803a 	cmpltu	r3,r5,r3
   13298:	31cd883a 	add	r6,r6,r7
   1329c:	1987883a 	add	r3,r3,r6
   132a0:	1800111e 	bne	r3,zero,132e8 <__cxa_end_catch+0x84>
   132a4:	294000a8 	cmpgeui	r5,r5,2
   132a8:	28000f1e 	bne	r5,zero,132e8 <__cxa_end_catch+0x84>
   132ac:	20c00517 	ldw	r3,20(r4)
   132b0:	18000816 	blt	r3,zero,132d4 <__cxa_end_catch+0x70>
   132b4:	18ffffc4 	addi	r3,r3,-1
   132b8:	18001026 	beq	r3,zero,132fc <__cxa_end_catch+0x98>
   132bc:	18bfffd8 	cmpnei	r2,r3,-1
   132c0:	10001426 	beq	r2,zero,13314 <__cxa_end_catch+0xb0>
   132c4:	20c00515 	stw	r3,20(r4)
   132c8:	dfc00017 	ldw	ra,0(sp)
   132cc:	dec00104 	addi	sp,sp,4
   132d0:	f800283a 	ret
   132d4:	18c00044 	addi	r3,r3,1
   132d8:	183ffa1e 	bne	r3,zero,132c4 <__cxa_end_catch+0x60>
   132dc:	21400417 	ldw	r5,16(r4)
   132e0:	11400015 	stw	r5,0(r2)
   132e4:	003ff706 	br	132c4 <__cxa_end_catch+0x60>
   132e8:	21000b04 	addi	r4,r4,44
   132ec:	10000015 	stw	zero,0(r2)
   132f0:	dfc00017 	ldw	ra,0(sp)
   132f4:	dec00104 	addi	sp,sp,4
   132f8:	0013e281 	jmpi	13e28 <_Unwind_DeleteException>
   132fc:	20c00417 	ldw	r3,16(r4)
   13300:	21000b04 	addi	r4,r4,44
   13304:	10c00015 	stw	r3,0(r2)
   13308:	dfc00017 	ldw	ra,0(sp)
   1330c:	dec00104 	addi	sp,sp,4
   13310:	0013e281 	jmpi	13e28 <_Unwind_DeleteException>
   13314:	00124880 	call	12488 <_ZSt9terminatev>

00013318 <_ZSt18uncaught_exceptionv>:
   13318:	deffff04 	addi	sp,sp,-4
   1331c:	dfc00015 	stw	ra,0(sp)
   13320:	00133b00 	call	133b0 <__cxa_get_globals>
   13324:	10800117 	ldw	r2,4(r2)
   13328:	1004c03a 	cmpne	r2,r2,zero
   1332c:	dfc00017 	ldw	ra,0(sp)
   13330:	dec00104 	addi	sp,sp,4
   13334:	f800283a 	ret

00013338 <_ZSt19uncaught_exceptionsv>:
   13338:	deffff04 	addi	sp,sp,-4
   1333c:	dfc00015 	stw	ra,0(sp)
   13340:	00133b00 	call	133b0 <__cxa_get_globals>
   13344:	10800117 	ldw	r2,4(r2)
   13348:	dfc00017 	ldw	ra,0(sp)
   1334c:	dec00104 	addi	sp,sp,4
   13350:	f800283a 	ret

00013354 <_ZNSt9exceptionD1Ev>:
   13354:	f800283a 	ret

00013358 <_ZNSt13bad_exceptionD1Ev>:
   13358:	f800283a 	ret

0001335c <_ZGTtNKSt9exception4whatEv>:
   1335c:	00800074 	movhi	r2,1
   13360:	1099b104 	addi	r2,r2,26308
   13364:	f800283a 	ret

00013368 <_ZGTtNKSt13bad_exception4whatEv>:
   13368:	00800074 	movhi	r2,1
   1336c:	1099b504 	addi	r2,r2,26324
   13370:	f800283a 	ret

00013374 <_ZNSt9exceptionD0Ev>:
   13374:	01400104 	movi	r5,4
   13378:	0012e681 	jmpi	12e68 <_ZdlPvj>

0001337c <_ZNSt13bad_exceptionD0Ev>:
   1337c:	01400104 	movi	r5,4
   13380:	0012e681 	jmpi	12e68 <_ZdlPvj>

00013384 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
   13384:	f800283a 	ret

00013388 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
   13388:	01400104 	movi	r5,4
   1338c:	0012e681 	jmpi	12e68 <_ZdlPvj>

00013390 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
   13390:	f800283a 	ret

00013394 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
   13394:	01400104 	movi	r5,4
   13398:	0012e681 	jmpi	12e68 <_ZdlPvj>

0001339c <_ZGTtNKSt9exceptionD1Ev>:
   1339c:	f800283a 	ret

000133a0 <_ZGTtNKSt13bad_exceptionD1Ev>:
   133a0:	f800283a 	ret

000133a4 <__cxa_get_globals_fast>:
   133a4:	00800074 	movhi	r2,1
   133a8:	109ded04 	addi	r2,r2,30644
   133ac:	f800283a 	ret

000133b0 <__cxa_get_globals>:
   133b0:	00800074 	movhi	r2,1
   133b4:	109ded04 	addi	r2,r2,30644
   133b8:	f800283a 	ret

000133bc <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
   133bc:	00800074 	movhi	r2,1
   133c0:	1099fa04 	addi	r2,r2,26600
   133c4:	20800015 	stw	r2,0(r4)
   133c8:	0012adc1 	jmpi	12adc <_ZNSt9type_infoD1Ev>

000133cc <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
   133cc:	defffe04 	addi	sp,sp,-8
   133d0:	00800074 	movhi	r2,1
   133d4:	dc000015 	stw	r16,0(sp)
   133d8:	dfc00115 	stw	ra,4(sp)
   133dc:	1099fa04 	addi	r2,r2,26600
   133e0:	20800015 	stw	r2,0(r4)
   133e4:	2021883a 	mov	r16,r4
   133e8:	0012adc0 	call	12adc <_ZNSt9type_infoD1Ev>
   133ec:	01400204 	movi	r5,8
   133f0:	8009883a 	mov	r4,r16
   133f4:	dfc00117 	ldw	ra,4(sp)
   133f8:	dc000017 	ldw	r16,0(sp)
   133fc:	dec00204 	addi	sp,sp,8
   13400:	0012e681 	jmpi	12e68 <_ZdlPvj>

00013404 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
   13404:	21000317 	ldw	r4,12(r4)
   13408:	29400317 	ldw	r5,12(r5)
   1340c:	39c00084 	addi	r7,r7,2
   13410:	20800017 	ldw	r2,0(r4)
   13414:	10800417 	ldw	r2,16(r2)
   13418:	1000683a 	jmp	r2

0001341c <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
   1341c:	00800074 	movhi	r2,1
   13420:	109ace04 	addi	r2,r2,27448
   13424:	20800015 	stw	r2,0(r4)
   13428:	0012adc1 	jmpi	12adc <_ZNSt9type_infoD1Ev>

0001342c <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
   1342c:	defffe04 	addi	sp,sp,-8
   13430:	00800074 	movhi	r2,1
   13434:	dc000015 	stw	r16,0(sp)
   13438:	dfc00115 	stw	ra,4(sp)
   1343c:	109ace04 	addi	r2,r2,27448
   13440:	20800015 	stw	r2,0(r4)
   13444:	2021883a 	mov	r16,r4
   13448:	0012adc0 	call	12adc <_ZNSt9type_infoD1Ev>
   1344c:	01400404 	movi	r5,16
   13450:	8009883a 	mov	r4,r16
   13454:	dfc00117 	ldw	ra,4(sp)
   13458:	dc000017 	ldw	r16,0(sp)
   1345c:	dec00204 	addi	sp,sp,8
   13460:	0012e681 	jmpi	12e68 <_ZdlPvj>

00013464 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
   13464:	defff804 	addi	sp,sp,-32
   13468:	dcc00315 	stw	r19,12(sp)
   1346c:	dc400115 	stw	r17,4(sp)
   13470:	2027883a 	mov	r19,r4
   13474:	2c400117 	ldw	r17,4(r5)
   13478:	21000117 	ldw	r4,4(r4)
   1347c:	dfc00715 	stw	ra,28(sp)
   13480:	dd800615 	stw	r22,24(sp)
   13484:	dd400515 	stw	r21,20(sp)
   13488:	dd000415 	stw	r20,16(sp)
   1348c:	dc800215 	stw	r18,8(sp)
   13490:	dc000015 	stw	r16,0(sp)
   13494:	24400926 	beq	r4,r17,134bc <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
   13498:	20800007 	ldb	r2,0(r4)
   1349c:	2821883a 	mov	r16,r5
   134a0:	3025883a 	mov	r18,r6
   134a4:	10800aa0 	cmpeqi	r2,r2,42
   134a8:	3829883a 	mov	r20,r7
   134ac:	10000e1e 	bne	r2,zero,134e8 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x84>
   134b0:	880b883a 	mov	r5,r17
   134b4:	00145100 	call	14510 <strcmp>
   134b8:	10000b1e 	bne	r2,zero,134e8 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x84>
   134bc:	00800044 	movi	r2,1
   134c0:	dfc00717 	ldw	ra,28(sp)
   134c4:	dd800617 	ldw	r22,24(sp)
   134c8:	dd400517 	ldw	r21,20(sp)
   134cc:	dd000417 	ldw	r20,16(sp)
   134d0:	dcc00317 	ldw	r19,12(sp)
   134d4:	dc800217 	ldw	r18,8(sp)
   134d8:	dc400117 	ldw	r17,4(sp)
   134dc:	dc000017 	ldw	r16,0(sp)
   134e0:	dec00804 	addi	sp,sp,32
   134e4:	f800283a 	ret
   134e8:	00800074 	movhi	r2,1
   134ec:	9d400017 	ldw	r21,0(r19)
   134f0:	115c5e17 	ldw	r5,29048(r2)
   134f4:	adbfff17 	ldw	r22,-4(r21)
   134f8:	89403726 	beq	r17,r5,135d8 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x174>
   134fc:	88800007 	ldb	r2,0(r17)
   13500:	10800aa0 	cmpeqi	r2,r2,42
   13504:	1000031e 	bne	r2,zero,13514 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
   13508:	8809883a 	mov	r4,r17
   1350c:	00145100 	call	14510 <strcmp>
   13510:	10003126 	beq	r2,zero,135d8 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x174>
   13514:	80006926 	beq	r16,zero,136bc <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x258>
   13518:	80800017 	ldw	r2,0(r16)
   1351c:	b1000117 	ldw	r4,4(r22)
   13520:	10bfff17 	ldw	r2,-4(r2)
   13524:	11400117 	ldw	r5,4(r2)
   13528:	21400526 	beq	r4,r5,13540 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xdc>
   1352c:	20800007 	ldb	r2,0(r4)
   13530:	10800aa0 	cmpeqi	r2,r2,42
   13534:	1000421e 	bne	r2,zero,13640 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1dc>
   13538:	00145100 	call	14510 <strcmp>
   1353c:	1000401e 	bne	r2,zero,13640 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1dc>
   13540:	a080004c 	andi	r2,r20,1
   13544:	10003e26 	beq	r2,zero,13640 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1dc>
   13548:	99000217 	ldw	r4,8(r19)
   1354c:	81800217 	ldw	r6,8(r16)
   13550:	21c0180c 	andi	r7,r4,96
   13554:	3080180c 	andi	r2,r6,96
   13558:	01ca303a 	nor	r5,zero,r7
   1355c:	288a703a 	and	r5,r5,r2
   13560:	28000126 	beq	r5,zero,13568 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x104>
   13564:	31cc703a 	and	r6,r6,r7
   13568:	0084303a 	nor	r2,zero,r2
   1356c:	0106303a 	nor	r3,zero,r4
   13570:	11c4703a 	and	r2,r2,r7
   13574:	1986703a 	and	r3,r3,r6
   13578:	10c4b03a 	or	r2,r2,r3
   1357c:	1000301e 	bne	r2,zero,13640 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1dc>
   13580:	2100004c 	andi	r4,r4,1
   13584:	20003c26 	beq	r4,zero,13678 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x214>
   13588:	a8c00617 	ldw	r3,24(r21)
   1358c:	00800074 	movhi	r2,1
   13590:	108d0104 	addi	r2,r2,13316
   13594:	18803b1e 	bne	r3,r2,13684 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x220>
   13598:	99000317 	ldw	r4,12(r19)
   1359c:	81400317 	ldw	r5,12(r16)
   135a0:	a1c00084 	addi	r7,r20,2
   135a4:	20800017 	ldw	r2,0(r4)
   135a8:	900d883a 	mov	r6,r18
   135ac:	10800417 	ldw	r2,16(r2)
   135b0:	dfc00717 	ldw	ra,28(sp)
   135b4:	dd800617 	ldw	r22,24(sp)
   135b8:	dd400517 	ldw	r21,20(sp)
   135bc:	dd000417 	ldw	r20,16(sp)
   135c0:	dcc00317 	ldw	r19,12(sp)
   135c4:	dc800217 	ldw	r18,8(sp)
   135c8:	dc400117 	ldw	r17,4(sp)
   135cc:	dc000017 	ldw	r16,0(sp)
   135d0:	dec00804 	addi	sp,sp,32
   135d4:	1000683a 	jmp	r2
   135d8:	00800074 	movhi	r2,1
   135dc:	b4400117 	ldw	r17,4(r22)
   135e0:	11595817 	ldw	r5,25952(r2)
   135e4:	89401c26 	beq	r17,r5,13658 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1f4>
   135e8:	88800007 	ldb	r2,0(r17)
   135ec:	10800aa0 	cmpeqi	r2,r2,42
   135f0:	1000151e 	bne	r2,zero,13648 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1e4>
   135f4:	8809883a 	mov	r4,r17
   135f8:	00145100 	call	14510 <strcmp>
   135fc:	10001626 	beq	r2,zero,13658 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1f4>
   13600:	00800074 	movhi	r2,1
   13604:	115ae217 	ldw	r5,27528(r2)
   13608:	89400326 	beq	r17,r5,13618 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1b4>
   1360c:	8809883a 	mov	r4,r17
   13610:	00145100 	call	14510 <strcmp>
   13614:	103fbf1e 	bne	r2,zero,13514 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
   13618:	99000317 	ldw	r4,12(r19)
   1361c:	20800017 	ldw	r2,0(r4)
   13620:	10800317 	ldw	r2,12(r2)
   13624:	103ee83a 	callr	r2
   13628:	10c03fcc 	andi	r3,r2,255
   1362c:	18000d26 	beq	r3,zero,13664 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x200>
   13630:	00c00074 	movhi	r3,1
   13634:	18dc8804 	addi	r3,r3,29216
   13638:	90c00015 	stw	r3,0(r18)
   1363c:	003fa006 	br	134c0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x5c>
   13640:	0005883a 	mov	r2,zero
   13644:	003f9e06 	br	134c0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x5c>
   13648:	00800074 	movhi	r2,1
   1364c:	109ae217 	ldw	r2,27528(r2)
   13650:	88bfb01e 	bne	r17,r2,13514 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
   13654:	003ff006 	br	13618 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1b4>
   13658:	90000015 	stw	zero,0(r18)
   1365c:	00800044 	movi	r2,1
   13660:	003f9706 	br	134c0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x5c>
   13664:	00800074 	movhi	r2,1
   13668:	109c8704 	addi	r2,r2,29212
   1366c:	90800015 	stw	r2,0(r18)
   13670:	00800044 	movi	r2,1
   13674:	003f9206 	br	134c0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x5c>
   13678:	00bfff84 	movi	r2,-2
   1367c:	a0a8703a 	and	r20,r20,r2
   13680:	003fc106 	br	13588 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x124>
   13684:	a00f883a 	mov	r7,r20
   13688:	900d883a 	mov	r6,r18
   1368c:	800b883a 	mov	r5,r16
   13690:	9809883a 	mov	r4,r19
   13694:	dfc00717 	ldw	ra,28(sp)
   13698:	dd800617 	ldw	r22,24(sp)
   1369c:	dd400517 	ldw	r21,20(sp)
   136a0:	dd000417 	ldw	r20,16(sp)
   136a4:	dcc00317 	ldw	r19,12(sp)
   136a8:	dc800217 	ldw	r18,8(sp)
   136ac:	dc400117 	ldw	r17,4(sp)
   136b0:	dc000017 	ldw	r16,0(sp)
   136b4:	dec00804 	addi	sp,sp,32
   136b8:	1800683a 	jmp	r3
   136bc:	00137ec0 	call	137ec <__cxa_bad_typeid>

000136c0 <_ZN10__cxxabiv129__pointer_to_member_type_infoD1Ev>:
   136c0:	00800074 	movhi	r2,1
   136c4:	109ae604 	addi	r2,r2,27544
   136c8:	20800015 	stw	r2,0(r4)
   136cc:	001341c1 	jmpi	1341c <_ZN10__cxxabiv117__pbase_type_infoD1Ev>

000136d0 <_ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev>:
   136d0:	defffe04 	addi	sp,sp,-8
   136d4:	00800074 	movhi	r2,1
   136d8:	dc000015 	stw	r16,0(sp)
   136dc:	dfc00115 	stw	ra,4(sp)
   136e0:	109ae604 	addi	r2,r2,27544
   136e4:	20800015 	stw	r2,0(r4)
   136e8:	2021883a 	mov	r16,r4
   136ec:	001341c0 	call	1341c <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
   136f0:	01400504 	movi	r5,20
   136f4:	8009883a 	mov	r4,r16
   136f8:	dfc00117 	ldw	ra,4(sp)
   136fc:	dc000017 	ldw	r16,0(sp)
   13700:	dec00204 	addi	sp,sp,8
   13704:	0012e681 	jmpi	12e68 <_ZdlPvj>

00013708 <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
   13708:	20c00417 	ldw	r3,16(r4)
   1370c:	28800417 	ldw	r2,16(r5)
   13710:	defffb04 	addi	sp,sp,-20
   13714:	dc400215 	stw	r17,8(sp)
   13718:	dc000115 	stw	r16,4(sp)
   1371c:	2023883a 	mov	r17,r4
   13720:	2821883a 	mov	r16,r5
   13724:	19000117 	ldw	r4,4(r3)
   13728:	11400117 	ldw	r5,4(r2)
   1372c:	dc800315 	stw	r18,12(sp)
   13730:	dfc00415 	stw	ra,16(sp)
   13734:	3825883a 	mov	r18,r7
   13738:	21400e26 	beq	r4,r5,13774 <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x6c>
   1373c:	20800007 	ldb	r2,0(r4)
   13740:	d9800015 	stw	r6,0(sp)
   13744:	10800aa0 	cmpeqi	r2,r2,42
   13748:	1000031e 	bne	r2,zero,13758 <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x50>
   1374c:	00145100 	call	14510 <strcmp>
   13750:	d9800017 	ldw	r6,0(sp)
   13754:	10000726 	beq	r2,zero,13774 <_ZNK10__cxxabiv129__pointer_to_member_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x6c>
   13758:	0005883a 	mov	r2,zero
   1375c:	dfc00417 	ldw	ra,16(sp)
   13760:	dc800317 	ldw	r18,12(sp)
   13764:	dc400217 	ldw	r17,8(sp)
   13768:	dc000117 	ldw	r16,4(sp)
   1376c:	dec00504 	addi	sp,sp,20
   13770:	f800283a 	ret
   13774:	89000317 	ldw	r4,12(r17)
   13778:	81400317 	ldw	r5,12(r16)
   1377c:	91c00084 	addi	r7,r18,2
   13780:	20800017 	ldw	r2,0(r4)
   13784:	10800417 	ldw	r2,16(r2)
   13788:	dfc00417 	ldw	ra,16(sp)
   1378c:	dc800317 	ldw	r18,12(sp)
   13790:	dc400217 	ldw	r17,8(sp)
   13794:	dc000117 	ldw	r16,4(sp)
   13798:	dec00504 	addi	sp,sp,20
   1379c:	1000683a 	jmp	r2

000137a0 <__cxa_pure_virtual>:
   137a0:	deffff04 	addi	sp,sp,-4
   137a4:	dfc00015 	stw	ra,0(sp)
   137a8:	00124880 	call	12488 <_ZSt9terminatev>

000137ac <__cxa_deleted_virtual>:
   137ac:	deffff04 	addi	sp,sp,-4
   137b0:	dfc00015 	stw	ra,0(sp)
   137b4:	00124880 	call	12488 <_ZSt9terminatev>

000137b8 <__cxa_bad_cast>:
   137b8:	deffff04 	addi	sp,sp,-4
   137bc:	01000104 	movi	r4,4
   137c0:	dfc00015 	stw	ra,0(sp)
   137c4:	0012ff80 	call	12ff8 <__cxa_allocate_exception>
   137c8:	1009883a 	mov	r4,r2
   137cc:	00800074 	movhi	r2,1
   137d0:	01800074 	movhi	r6,1
   137d4:	01400074 	movhi	r5,1
   137d8:	109b0f04 	addi	r2,r2,27708
   137dc:	318e2d04 	addi	r6,r6,14516
   137e0:	295b0a04 	addi	r5,r5,27688
   137e4:	20800015 	stw	r2,0(r4)
   137e8:	00125ec0 	call	125ec <__cxa_throw>

000137ec <__cxa_bad_typeid>:
   137ec:	deffff04 	addi	sp,sp,-4
   137f0:	01000104 	movi	r4,4
   137f4:	dfc00015 	stw	ra,0(sp)
   137f8:	0012ff80 	call	12ff8 <__cxa_allocate_exception>
   137fc:	1009883a 	mov	r4,r2
   13800:	00800074 	movhi	r2,1
   13804:	01800074 	movhi	r6,1
   13808:	01400074 	movhi	r5,1
   1380c:	109b1f04 	addi	r2,r2,27772
   13810:	318e4204 	addi	r6,r6,14600
   13814:	295b1a04 	addi	r5,r5,27752
   13818:	20800015 	stw	r2,0(r4)
   1381c:	00125ec0 	call	125ec <__cxa_throw>

00013820 <__cxa_throw_bad_array_new_length>:
   13820:	deffff04 	addi	sp,sp,-4
   13824:	01000104 	movi	r4,4
   13828:	dfc00015 	stw	ra,0(sp)
   1382c:	0012ff80 	call	12ff8 <__cxa_allocate_exception>
   13830:	1009883a 	mov	r4,r2
   13834:	00800074 	movhi	r2,1
   13838:	01800074 	movhi	r6,1
   1383c:	01400074 	movhi	r5,1
   13840:	109b0004 	addi	r2,r2,27648
   13844:	318e1804 	addi	r6,r6,14432
   13848:	295afb04 	addi	r5,r5,27628
   1384c:	20800015 	stw	r2,0(r4)
   13850:	00125ec0 	call	125ec <__cxa_throw>

00013854 <_ZNKSt20bad_array_new_length4whatEv>:
   13854:	00800074 	movhi	r2,1
   13858:	109aed04 	addi	r2,r2,27572
   1385c:	f800283a 	ret

00013860 <_ZNSt20bad_array_new_lengthD1Ev>:
   13860:	00800074 	movhi	r2,1
   13864:	109b0004 	addi	r2,r2,27648
   13868:	20800015 	stw	r2,0(r4)
   1386c:	001395c1 	jmpi	1395c <_ZNSt9bad_allocD1Ev>

00013870 <_ZNSt20bad_array_new_lengthD0Ev>:
   13870:	defffe04 	addi	sp,sp,-8
   13874:	00800074 	movhi	r2,1
   13878:	dc000015 	stw	r16,0(sp)
   1387c:	dfc00115 	stw	ra,4(sp)
   13880:	109b0004 	addi	r2,r2,27648
   13884:	20800015 	stw	r2,0(r4)
   13888:	2021883a 	mov	r16,r4
   1388c:	001395c0 	call	1395c <_ZNSt9bad_allocD1Ev>
   13890:	01400104 	movi	r5,4
   13894:	8009883a 	mov	r4,r16
   13898:	dfc00117 	ldw	ra,4(sp)
   1389c:	dc000017 	ldw	r16,0(sp)
   138a0:	dec00204 	addi	sp,sp,8
   138a4:	0012e681 	jmpi	12e68 <_ZdlPvj>

000138a8 <_ZNKSt8bad_cast4whatEv>:
   138a8:	00800074 	movhi	r2,1
   138ac:	109b0304 	addi	r2,r2,27660
   138b0:	f800283a 	ret

000138b4 <_ZNSt8bad_castD1Ev>:
   138b4:	00800074 	movhi	r2,1
   138b8:	109b0f04 	addi	r2,r2,27708
   138bc:	20800015 	stw	r2,0(r4)
   138c0:	00133541 	jmpi	13354 <_ZNSt9exceptionD1Ev>

000138c4 <_ZNSt8bad_castD0Ev>:
   138c4:	defffe04 	addi	sp,sp,-8
   138c8:	00800074 	movhi	r2,1
   138cc:	dc000015 	stw	r16,0(sp)
   138d0:	dfc00115 	stw	ra,4(sp)
   138d4:	109b0f04 	addi	r2,r2,27708
   138d8:	20800015 	stw	r2,0(r4)
   138dc:	2021883a 	mov	r16,r4
   138e0:	00133540 	call	13354 <_ZNSt9exceptionD1Ev>
   138e4:	01400104 	movi	r5,4
   138e8:	8009883a 	mov	r4,r16
   138ec:	dfc00117 	ldw	ra,4(sp)
   138f0:	dc000017 	ldw	r16,0(sp)
   138f4:	dec00204 	addi	sp,sp,8
   138f8:	0012e681 	jmpi	12e68 <_ZdlPvj>

000138fc <_ZNKSt10bad_typeid4whatEv>:
   138fc:	00800074 	movhi	r2,1
   13900:	109b1204 	addi	r2,r2,27720
   13904:	f800283a 	ret

00013908 <_ZNSt10bad_typeidD1Ev>:
   13908:	00800074 	movhi	r2,1
   1390c:	109b1f04 	addi	r2,r2,27772
   13910:	20800015 	stw	r2,0(r4)
   13914:	00133541 	jmpi	13354 <_ZNSt9exceptionD1Ev>

00013918 <_ZNSt10bad_typeidD0Ev>:
   13918:	defffe04 	addi	sp,sp,-8
   1391c:	00800074 	movhi	r2,1
   13920:	dc000015 	stw	r16,0(sp)
   13924:	dfc00115 	stw	ra,4(sp)
   13928:	109b1f04 	addi	r2,r2,27772
   1392c:	20800015 	stw	r2,0(r4)
   13930:	2021883a 	mov	r16,r4
   13934:	00133540 	call	13354 <_ZNSt9exceptionD1Ev>
   13938:	01400104 	movi	r5,4
   1393c:	8009883a 	mov	r4,r16
   13940:	dfc00117 	ldw	ra,4(sp)
   13944:	dc000017 	ldw	r16,0(sp)
   13948:	dec00204 	addi	sp,sp,8
   1394c:	0012e681 	jmpi	12e68 <_ZdlPvj>

00013950 <_ZNKSt9bad_alloc4whatEv>:
   13950:	00800074 	movhi	r2,1
   13954:	109b2204 	addi	r2,r2,27784
   13958:	f800283a 	ret

0001395c <_ZNSt9bad_allocD1Ev>:
   1395c:	00800074 	movhi	r2,1
   13960:	109b2f04 	addi	r2,r2,27836
   13964:	20800015 	stw	r2,0(r4)
   13968:	00133541 	jmpi	13354 <_ZNSt9exceptionD1Ev>

0001396c <_ZNSt9bad_allocD0Ev>:
   1396c:	defffe04 	addi	sp,sp,-8
   13970:	00800074 	movhi	r2,1
   13974:	dc000015 	stw	r16,0(sp)
   13978:	dfc00115 	stw	ra,4(sp)
   1397c:	109b2f04 	addi	r2,r2,27836
   13980:	20800015 	stw	r2,0(r4)
   13984:	2021883a 	mov	r16,r4
   13988:	00133540 	call	13354 <_ZNSt9exceptionD1Ev>
   1398c:	01400104 	movi	r5,4
   13990:	8009883a 	mov	r4,r16
   13994:	dfc00117 	ldw	ra,4(sp)
   13998:	dc000017 	ldw	r16,0(sp)
   1399c:	dec00204 	addi	sp,sp,8
   139a0:	0012e681 	jmpi	12e68 <_ZdlPvj>

000139a4 <_Unwind_ForcedUnwind_Phase2>:
   139a4:	28800017 	ldw	r2,0(r5)
   139a8:	defff504 	addi	sp,sp,-44
   139ac:	dd400815 	stw	r21,32(sp)
   139b0:	dd000715 	stw	r20,28(sp)
   139b4:	dcc00615 	stw	r19,24(sp)
   139b8:	dc800515 	stw	r18,20(sp)
   139bc:	dc400415 	stw	r17,16(sp)
   139c0:	dc000315 	stw	r16,12(sp)
   139c4:	dfc00a15 	stw	ra,40(sp)
   139c8:	dd800915 	stw	r22,36(sp)
   139cc:	302b883a 	mov	r21,r6
   139d0:	24c00317 	ldw	r19,12(r4)
   139d4:	25000417 	ldw	r20,16(r4)
   139d8:	21800017 	ldw	r6,0(r4)
   139dc:	21c00117 	ldw	r7,4(r4)
   139e0:	2823883a 	mov	r17,r5
   139e4:	2021883a 	mov	r16,r4
   139e8:	04800044 	movi	r18,1
   139ec:	10001d26 	beq	r2,zero,13a64 <_Unwind_ForcedUnwind_Phase2+0xc0>
   139f0:	15800617 	ldw	r22,24(r2)
   139f4:	01400284 	movi	r5,10
   139f8:	01000044 	movi	r4,1
   139fc:	dd000215 	stw	r20,8(sp)
   13a00:	dc400115 	stw	r17,4(sp)
   13a04:	dc000015 	stw	r16,0(sp)
   13a08:	983ee83a 	callr	r19
   13a0c:	01400284 	movi	r5,10
   13a10:	01000044 	movi	r4,1
   13a14:	10001a1e 	bne	r2,zero,13a80 <_Unwind_ForcedUnwind_Phase2+0xdc>
   13a18:	81800017 	ldw	r6,0(r16)
   13a1c:	81c00117 	ldw	r7,4(r16)
   13a20:	b0000926 	beq	r22,zero,13a48 <_Unwind_ForcedUnwind_Phase2+0xa4>
   13a24:	dc400115 	stw	r17,4(sp)
   13a28:	dc000015 	stw	r16,0(sp)
   13a2c:	b03ee83a 	callr	r22
   13a30:	10c001e0 	cmpeqi	r3,r2,7
   13a34:	11000218 	cmpnei	r4,r2,8
   13a38:	18001d1e 	bne	r3,zero,13ab0 <_Unwind_ForcedUnwind_Phase2+0x10c>
   13a3c:	2000101e 	bne	r4,zero,13a80 <_Unwind_ForcedUnwind_Phase2+0xdc>
   13a40:	81800017 	ldw	r6,0(r16)
   13a44:	81c00117 	ldw	r7,4(r16)
   13a48:	88800017 	ldw	r2,0(r17)
   13a4c:	00c00074 	movhi	r3,1
   13a50:	94800044 	addi	r18,r18,1
   13a54:	10800017 	ldw	r2,0(r2)
   13a58:	189def15 	stw	r2,30652(r3)
   13a5c:	88800015 	stw	r2,0(r17)
   13a60:	103fe31e 	bne	r2,zero,139f0 <_Unwind_ForcedUnwind_Phase2+0x4c>
   13a64:	dd000215 	stw	r20,8(sp)
   13a68:	dc400115 	stw	r17,4(sp)
   13a6c:	dc000015 	stw	r16,0(sp)
   13a70:	01400684 	movi	r5,26
   13a74:	01000044 	movi	r4,1
   13a78:	983ee83a 	callr	r19
   13a7c:	10000b26 	beq	r2,zero,13aac <_Unwind_ForcedUnwind_Phase2+0x108>
   13a80:	00800084 	movi	r2,2
   13a84:	dfc00a17 	ldw	ra,40(sp)
   13a88:	dd800917 	ldw	r22,36(sp)
   13a8c:	dd400817 	ldw	r21,32(sp)
   13a90:	dd000717 	ldw	r20,28(sp)
   13a94:	dcc00617 	ldw	r19,24(sp)
   13a98:	dc800517 	ldw	r18,20(sp)
   13a9c:	dc400417 	ldw	r17,16(sp)
   13aa0:	dc000317 	ldw	r16,12(sp)
   13aa4:	dec00b04 	addi	sp,sp,44
   13aa8:	f800283a 	ret
   13aac:	00800144 	movi	r2,5
   13ab0:	ac800015 	stw	r18,0(r21)
   13ab4:	003ff306 	br	13a84 <_Unwind_ForcedUnwind_Phase2+0xe0>

00013ab8 <_Unwind_RaiseException_Phase2>:
   13ab8:	28800017 	ldw	r2,0(r5)
   13abc:	10002f26 	beq	r2,zero,13b7c <_Unwind_RaiseException_Phase2+0xc4>
   13ac0:	defff804 	addi	sp,sp,-32
   13ac4:	dcc00515 	stw	r19,20(sp)
   13ac8:	dc800415 	stw	r18,16(sp)
   13acc:	dc400315 	stw	r17,12(sp)
   13ad0:	dc000215 	stw	r16,8(sp)
   13ad4:	dfc00715 	stw	ra,28(sp)
   13ad8:	dd000615 	stw	r20,24(sp)
   13adc:	2823883a 	mov	r17,r5
   13ae0:	2021883a 	mov	r16,r4
   13ae4:	3027883a 	mov	r19,r6
   13ae8:	04800044 	movi	r18,1
   13aec:	00001306 	br	13b3c <_Unwind_RaiseException_Phase2+0x84>
   13af0:	18000e26 	beq	r3,zero,13b2c <_Unwind_RaiseException_Phase2+0x74>
   13af4:	01400084 	movi	r5,2
   13af8:	0029883a 	mov	r20,zero
   13afc:	81800017 	ldw	r6,0(r16)
   13b00:	81c00117 	ldw	r7,4(r16)
   13b04:	01000044 	movi	r4,1
   13b08:	dc400115 	stw	r17,4(sp)
   13b0c:	dc000015 	stw	r16,0(sp)
   13b10:	183ee83a 	callr	r3
   13b14:	10c001e0 	cmpeqi	r3,r2,7
   13b18:	18001a1e 	bne	r3,zero,13b84 <_Unwind_RaiseException_Phase2+0xcc>
   13b1c:	10800218 	cmpnei	r2,r2,8
   13b20:	10000d1e 	bne	r2,zero,13b58 <_Unwind_RaiseException_Phase2+0xa0>
   13b24:	a000191e 	bne	r20,zero,13b8c <_Unwind_RaiseException_Phase2+0xd4>
   13b28:	88800017 	ldw	r2,0(r17)
   13b2c:	10800017 	ldw	r2,0(r2)
   13b30:	94800044 	addi	r18,r18,1
   13b34:	88800015 	stw	r2,0(r17)
   13b38:	10000726 	beq	r2,zero,13b58 <_Unwind_RaiseException_Phase2+0xa0>
   13b3c:	81000417 	ldw	r4,16(r16)
   13b40:	10c00617 	ldw	r3,24(r2)
   13b44:	113fea1e 	bne	r2,r4,13af0 <_Unwind_RaiseException_Phase2+0x38>
   13b48:	18001026 	beq	r3,zero,13b8c <_Unwind_RaiseException_Phase2+0xd4>
   13b4c:	01400184 	movi	r5,6
   13b50:	05000104 	movi	r20,4
   13b54:	003fe906 	br	13afc <_Unwind_RaiseException_Phase2+0x44>
   13b58:	00800084 	movi	r2,2
   13b5c:	dfc00717 	ldw	ra,28(sp)
   13b60:	dd000617 	ldw	r20,24(sp)
   13b64:	dcc00517 	ldw	r19,20(sp)
   13b68:	dc800417 	ldw	r18,16(sp)
   13b6c:	dc400317 	ldw	r17,12(sp)
   13b70:	dc000217 	ldw	r16,8(sp)
   13b74:	dec00804 	addi	sp,sp,32
   13b78:	f800283a 	ret
   13b7c:	00800084 	movi	r2,2
   13b80:	f800283a 	ret
   13b84:	9c800015 	stw	r18,0(r19)
   13b88:	003ff406 	br	13b5c <_Unwind_RaiseException_Phase2+0xa4>
   13b8c:	0013ec80 	call	13ec8 <abort>

00013b90 <uw_install_context.constprop.0.isra.0>:
   13b90:	deffff04 	addi	sp,sp,-4
   13b94:	df000015 	stw	fp,0(sp)
   13b98:	20800804 	addi	r2,r4,32
   13b9c:	00c00074 	movhi	r3,1
   13ba0:	191def15 	stw	r4,30652(r3)
   13ba4:	d839883a 	mov	fp,sp
   13ba8:	20c00917 	ldw	r3,36(r4)
   13bac:	21000817 	ldw	r4,32(r4)
   13bb0:	16c00217 	ldw	sp,8(r2)
   13bb4:	2039883a 	mov	fp,r4
   13bb8:	1800683a 	jmp	r3

00013bbc <_Unwind_SjLj_Register>:
   13bbc:	00800074 	movhi	r2,1
   13bc0:	109def17 	ldw	r2,30652(r2)
   13bc4:	20800015 	stw	r2,0(r4)
   13bc8:	00800074 	movhi	r2,1
   13bcc:	111def15 	stw	r4,30652(r2)
   13bd0:	f800283a 	ret

00013bd4 <_Unwind_SjLj_Unregister>:
   13bd4:	20c00017 	ldw	r3,0(r4)
   13bd8:	00800074 	movhi	r2,1
   13bdc:	10ddef15 	stw	r3,30652(r2)
   13be0:	f800283a 	ret

00013be4 <_Unwind_GetGR>:
   13be4:	29400084 	addi	r5,r5,2
   13be8:	20800017 	ldw	r2,0(r4)
   13bec:	280a90ba 	slli	r5,r5,2
   13bf0:	114b883a 	add	r5,r2,r5
   13bf4:	28800017 	ldw	r2,0(r5)
   13bf8:	f800283a 	ret

00013bfc <_Unwind_GetCFA>:
   13bfc:	20800017 	ldw	r2,0(r4)
   13c00:	10000226 	beq	r2,zero,13c0c <_Unwind_GetCFA+0x10>
   13c04:	10800a17 	ldw	r2,40(r2)
   13c08:	f800283a 	ret
   13c0c:	0005883a 	mov	r2,zero
   13c10:	f800283a 	ret

00013c14 <_Unwind_SetGR>:
   13c14:	29400084 	addi	r5,r5,2
   13c18:	20800017 	ldw	r2,0(r4)
   13c1c:	280a90ba 	slli	r5,r5,2
   13c20:	114b883a 	add	r5,r2,r5
   13c24:	29800015 	stw	r6,0(r5)
   13c28:	f800283a 	ret

00013c2c <_Unwind_GetIP>:
   13c2c:	20800017 	ldw	r2,0(r4)
   13c30:	10800117 	ldw	r2,4(r2)
   13c34:	10800044 	addi	r2,r2,1
   13c38:	f800283a 	ret

00013c3c <_Unwind_GetIPInfo>:
   13c3c:	20800017 	ldw	r2,0(r4)
   13c40:	28000015 	stw	zero,0(r5)
   13c44:	10000326 	beq	r2,zero,13c54 <_Unwind_GetIPInfo+0x18>
   13c48:	10800117 	ldw	r2,4(r2)
   13c4c:	10800044 	addi	r2,r2,1
   13c50:	f800283a 	ret
   13c54:	0005883a 	mov	r2,zero
   13c58:	f800283a 	ret

00013c5c <_Unwind_SetIP>:
   13c5c:	20800017 	ldw	r2,0(r4)
   13c60:	297fffc4 	addi	r5,r5,-1
   13c64:	11400115 	stw	r5,4(r2)
   13c68:	f800283a 	ret

00013c6c <_Unwind_GetLanguageSpecificData>:
   13c6c:	20800017 	ldw	r2,0(r4)
   13c70:	10800717 	ldw	r2,28(r2)
   13c74:	f800283a 	ret

00013c78 <_Unwind_GetRegionStart>:
   13c78:	0005883a 	mov	r2,zero
   13c7c:	f800283a 	ret

00013c80 <_Unwind_FindEnclosingFunction>:
   13c80:	0005883a 	mov	r2,zero
   13c84:	f800283a 	ret

00013c88 <_Unwind_GetDataRelBase>:
   13c88:	0005883a 	mov	r2,zero
   13c8c:	f800283a 	ret

00013c90 <_Unwind_GetTextRelBase>:
   13c90:	0005883a 	mov	r2,zero
   13c94:	f800283a 	ret

00013c98 <_Unwind_SjLj_RaiseException>:
   13c98:	defff804 	addi	sp,sp,-32
   13c9c:	00800074 	movhi	r2,1
   13ca0:	dc400515 	stw	r17,20(sp)
   13ca4:	145def17 	ldw	r17,30652(r2)
   13ca8:	dfc00715 	stw	ra,28(sp)
   13cac:	dc800615 	stw	r18,24(sp)
   13cb0:	dc000415 	stw	r16,16(sp)
   13cb4:	dc400215 	stw	r17,8(sp)
   13cb8:	88001426 	beq	r17,zero,13d0c <_Unwind_SjLj_RaiseException+0x74>
   13cbc:	2021883a 	mov	r16,r4
   13cc0:	8805883a 	mov	r2,r17
   13cc4:	dc800204 	addi	r18,sp,8
   13cc8:	10800617 	ldw	r2,24(r2)
   13ccc:	10000b26 	beq	r2,zero,13cfc <_Unwind_SjLj_RaiseException+0x64>
   13cd0:	81800017 	ldw	r6,0(r16)
   13cd4:	81c00117 	ldw	r7,4(r16)
   13cd8:	01400044 	movi	r5,1
   13cdc:	dc800115 	stw	r18,4(sp)
   13ce0:	dc000015 	stw	r16,0(sp)
   13ce4:	01000044 	movi	r4,1
   13ce8:	103ee83a 	callr	r2
   13cec:	10c001a0 	cmpeqi	r3,r2,6
   13cf0:	18000d1e 	bne	r3,zero,13d28 <_Unwind_SjLj_RaiseException+0x90>
   13cf4:	10800218 	cmpnei	r2,r2,8
   13cf8:	1000171e 	bne	r2,zero,13d58 <_Unwind_SjLj_RaiseException+0xc0>
   13cfc:	d8800217 	ldw	r2,8(sp)
   13d00:	10800017 	ldw	r2,0(r2)
   13d04:	d8800215 	stw	r2,8(sp)
   13d08:	103fef1e 	bne	r2,zero,13cc8 <_Unwind_SjLj_RaiseException+0x30>
   13d0c:	00800144 	movi	r2,5
   13d10:	dfc00717 	ldw	ra,28(sp)
   13d14:	dc800617 	ldw	r18,24(sp)
   13d18:	dc400517 	ldw	r17,20(sp)
   13d1c:	dc000417 	ldw	r16,16(sp)
   13d20:	dec00804 	addi	sp,sp,32
   13d24:	f800283a 	ret
   13d28:	d8800217 	ldw	r2,8(sp)
   13d2c:	80000315 	stw	zero,12(r16)
   13d30:	d9800304 	addi	r6,sp,12
   13d34:	80800415 	stw	r2,16(r16)
   13d38:	900b883a 	mov	r5,r18
   13d3c:	8009883a 	mov	r4,r16
   13d40:	dc400215 	stw	r17,8(sp)
   13d44:	0013ab80 	call	13ab8 <_Unwind_RaiseException_Phase2>
   13d48:	10c001d8 	cmpnei	r3,r2,7
   13d4c:	183ff01e 	bne	r3,zero,13d10 <_Unwind_SjLj_RaiseException+0x78>
   13d50:	d9000217 	ldw	r4,8(sp)
   13d54:	0013b900 	call	13b90 <uw_install_context.constprop.0.isra.0>
   13d58:	008000c4 	movi	r2,3
   13d5c:	003fec06 	br	13d10 <_Unwind_SjLj_RaiseException+0x78>

00013d60 <_Unwind_SjLj_ForcedUnwind>:
   13d60:	00800074 	movhi	r2,1
   13d64:	defffd04 	addi	sp,sp,-12
   13d68:	10ddef17 	ldw	r3,30652(r2)
   13d6c:	dfc00215 	stw	ra,8(sp)
   13d70:	21400315 	stw	r5,12(r4)
   13d74:	21800415 	stw	r6,16(r4)
   13d78:	d80b883a 	mov	r5,sp
   13d7c:	d9800104 	addi	r6,sp,4
   13d80:	d8c00015 	stw	r3,0(sp)
   13d84:	00139a40 	call	139a4 <_Unwind_ForcedUnwind_Phase2>
   13d88:	10c001e0 	cmpeqi	r3,r2,7
   13d8c:	1800031e 	bne	r3,zero,13d9c <_Unwind_SjLj_ForcedUnwind+0x3c>
   13d90:	dfc00217 	ldw	ra,8(sp)
   13d94:	dec00304 	addi	sp,sp,12
   13d98:	f800283a 	ret
   13d9c:	d9000017 	ldw	r4,0(sp)
   13da0:	0013b900 	call	13b90 <uw_install_context.constprop.0.isra.0>

00013da4 <_Unwind_SjLj_Resume>:
   13da4:	00800074 	movhi	r2,1
   13da8:	10ddef17 	ldw	r3,30652(r2)
   13dac:	20800317 	ldw	r2,12(r4)
   13db0:	defffd04 	addi	sp,sp,-12
   13db4:	dfc00215 	stw	ra,8(sp)
   13db8:	d8c00015 	stw	r3,0(sp)
   13dbc:	d9800104 	addi	r6,sp,4
   13dc0:	d80b883a 	mov	r5,sp
   13dc4:	1000051e 	bne	r2,zero,13ddc <_Unwind_SjLj_Resume+0x38>
   13dc8:	0013ab80 	call	13ab8 <_Unwind_RaiseException_Phase2>
   13dcc:	108001e0 	cmpeqi	r2,r2,7
   13dd0:	10000426 	beq	r2,zero,13de4 <_Unwind_SjLj_Resume+0x40>
   13dd4:	d9000017 	ldw	r4,0(sp)
   13dd8:	0013b900 	call	13b90 <uw_install_context.constprop.0.isra.0>
   13ddc:	00139a40 	call	139a4 <_Unwind_ForcedUnwind_Phase2>
   13de0:	003ffa06 	br	13dcc <_Unwind_SjLj_Resume+0x28>
   13de4:	0013ec80 	call	13ec8 <abort>

00013de8 <_Unwind_SjLj_Resume_or_Rethrow>:
   13de8:	20800317 	ldw	r2,12(r4)
   13dec:	1000011e 	bne	r2,zero,13df4 <_Unwind_SjLj_Resume_or_Rethrow+0xc>
   13df0:	0013c981 	jmpi	13c98 <_Unwind_SjLj_RaiseException>
   13df4:	00800074 	movhi	r2,1
   13df8:	109def17 	ldw	r2,30652(r2)
   13dfc:	defffd04 	addi	sp,sp,-12
   13e00:	d9800104 	addi	r6,sp,4
   13e04:	d80b883a 	mov	r5,sp
   13e08:	dfc00215 	stw	ra,8(sp)
   13e0c:	d8800015 	stw	r2,0(sp)
   13e10:	00139a40 	call	139a4 <_Unwind_ForcedUnwind_Phase2>
   13e14:	108001e0 	cmpeqi	r2,r2,7
   13e18:	10000226 	beq	r2,zero,13e24 <_Unwind_SjLj_Resume_or_Rethrow+0x3c>
   13e1c:	d9000017 	ldw	r4,0(sp)
   13e20:	0013b900 	call	13b90 <uw_install_context.constprop.0.isra.0>
   13e24:	0013ec80 	call	13ec8 <abort>

00013e28 <_Unwind_DeleteException>:
   13e28:	20800217 	ldw	r2,8(r4)
   13e2c:	200b883a 	mov	r5,r4
   13e30:	10000226 	beq	r2,zero,13e3c <_Unwind_DeleteException+0x14>
   13e34:	01000044 	movi	r4,1
   13e38:	1000683a 	jmp	r2
   13e3c:	f800283a 	ret

00013e40 <_Unwind_Backtrace>:
   13e40:	00800074 	movhi	r2,1
   13e44:	109def17 	ldw	r2,30652(r2)
   13e48:	defffb04 	addi	sp,sp,-20
   13e4c:	dc800315 	stw	r18,12(sp)
   13e50:	dc400215 	stw	r17,8(sp)
   13e54:	dc000115 	stw	r16,4(sp)
   13e58:	dfc00415 	stw	ra,16(sp)
   13e5c:	d8800015 	stw	r2,0(sp)
   13e60:	2021883a 	mov	r16,r4
   13e64:	2823883a 	mov	r17,r5
   13e68:	d825883a 	mov	r18,sp
   13e6c:	10000826 	beq	r2,zero,13e90 <_Unwind_Backtrace+0x50>
   13e70:	880b883a 	mov	r5,r17
   13e74:	9009883a 	mov	r4,r18
   13e78:	803ee83a 	callr	r16
   13e7c:	1000101e 	bne	r2,zero,13ec0 <_Unwind_Backtrace+0x80>
   13e80:	d8800017 	ldw	r2,0(sp)
   13e84:	10800017 	ldw	r2,0(r2)
   13e88:	d8800015 	stw	r2,0(sp)
   13e8c:	103ff81e 	bne	r2,zero,13e70 <_Unwind_Backtrace+0x30>
   13e90:	880b883a 	mov	r5,r17
   13e94:	9009883a 	mov	r4,r18
   13e98:	803ee83a 	callr	r16
   13e9c:	00c00144 	movi	r3,5
   13ea0:	1000071e 	bne	r2,zero,13ec0 <_Unwind_Backtrace+0x80>
   13ea4:	1805883a 	mov	r2,r3
   13ea8:	dfc00417 	ldw	ra,16(sp)
   13eac:	dc800317 	ldw	r18,12(sp)
   13eb0:	dc400217 	ldw	r17,8(sp)
   13eb4:	dc000117 	ldw	r16,4(sp)
   13eb8:	dec00504 	addi	sp,sp,20
   13ebc:	f800283a 	ret
   13ec0:	00c000c4 	movi	r3,3
   13ec4:	003ff706 	br	13ea4 <_Unwind_Backtrace+0x64>

00013ec8 <abort>:
   13ec8:	deffff04 	addi	sp,sp,-4
   13ecc:	01000184 	movi	r4,6
   13ed0:	dfc00015 	stw	ra,0(sp)
   13ed4:	00144800 	call	14480 <raise>
   13ed8:	01000044 	movi	r4,1
   13edc:	00146680 	call	14668 <_exit>

00013ee0 <malloc>:
   13ee0:	00800074 	movhi	r2,1
   13ee4:	200b883a 	mov	r5,r4
   13ee8:	111c8b17 	ldw	r4,29228(r2)
   13eec:	00140201 	jmpi	14020 <_malloc_r>

00013ef0 <free>:
   13ef0:	00800074 	movhi	r2,1
   13ef4:	200b883a 	mov	r5,r4
   13ef8:	111c8b17 	ldw	r4,29228(r2)
   13efc:	0013f201 	jmpi	13f20 <_free_r>

00013f00 <memset>:
   13f00:	2005883a 	mov	r2,r4
   13f04:	218d883a 	add	r6,r4,r6
   13f08:	2007883a 	mov	r3,r4
   13f0c:	1980011e 	bne	r3,r6,13f14 <memset+0x14>
   13f10:	f800283a 	ret
   13f14:	18c00044 	addi	r3,r3,1
   13f18:	197fffc5 	stb	r5,-1(r3)
   13f1c:	003ffb06 	br	13f0c <memset+0xc>

00013f20 <_free_r>:
   13f20:	28003e26 	beq	r5,zero,1401c <_free_r+0xfc>
   13f24:	28bfff17 	ldw	r2,-4(r5)
   13f28:	defffd04 	addi	sp,sp,-12
   13f2c:	dc000115 	stw	r16,4(sp)
   13f30:	dfc00215 	stw	ra,8(sp)
   13f34:	2c3fff04 	addi	r16,r5,-4
   13f38:	1000010e 	bge	r2,zero,13f40 <_free_r+0x20>
   13f3c:	80a1883a 	add	r16,r16,r2
   13f40:	d9000015 	stw	r4,0(sp)
   13f44:	0014c280 	call	14c28 <__malloc_lock>
   13f48:	00800074 	movhi	r2,1
   13f4c:	109df117 	ldw	r2,30660(r2)
   13f50:	d9000017 	ldw	r4,0(sp)
   13f54:	1000071e 	bne	r2,zero,13f74 <_free_r+0x54>
   13f58:	80000115 	stw	zero,4(r16)
   13f5c:	00800074 	movhi	r2,1
   13f60:	141df115 	stw	r16,30660(r2)
   13f64:	dfc00217 	ldw	ra,8(sp)
   13f68:	dc000117 	ldw	r16,4(sp)
   13f6c:	dec00304 	addi	sp,sp,12
   13f70:	0014c4c1 	jmpi	14c4c <__malloc_unlock>
   13f74:	8080092e 	bgeu	r16,r2,13f9c <_free_r+0x7c>
   13f78:	81400017 	ldw	r5,0(r16)
   13f7c:	8147883a 	add	r3,r16,r5
   13f80:	10c0041e 	bne	r2,r3,13f94 <_free_r+0x74>
   13f84:	10c00017 	ldw	r3,0(r2)
   13f88:	10800117 	ldw	r2,4(r2)
   13f8c:	1947883a 	add	r3,r3,r5
   13f90:	80c00015 	stw	r3,0(r16)
   13f94:	80800115 	stw	r2,4(r16)
   13f98:	003ff006 	br	13f5c <_free_r+0x3c>
   13f9c:	1007883a 	mov	r3,r2
   13fa0:	10800117 	ldw	r2,4(r2)
   13fa4:	10000126 	beq	r2,zero,13fac <_free_r+0x8c>
   13fa8:	80bffc2e 	bgeu	r16,r2,13f9c <_free_r+0x7c>
   13fac:	19400017 	ldw	r5,0(r3)
   13fb0:	194d883a 	add	r6,r3,r5
   13fb4:	34000b1e 	bne	r6,r16,13fe4 <_free_r+0xc4>
   13fb8:	81800017 	ldw	r6,0(r16)
   13fbc:	298b883a 	add	r5,r5,r6
   13fc0:	19400015 	stw	r5,0(r3)
   13fc4:	194d883a 	add	r6,r3,r5
   13fc8:	11bfe61e 	bne	r2,r6,13f64 <_free_r+0x44>
   13fcc:	11800017 	ldw	r6,0(r2)
   13fd0:	10800117 	ldw	r2,4(r2)
   13fd4:	314b883a 	add	r5,r6,r5
   13fd8:	19400015 	stw	r5,0(r3)
   13fdc:	18800115 	stw	r2,4(r3)
   13fe0:	003fe006 	br	13f64 <_free_r+0x44>
   13fe4:	8180032e 	bgeu	r16,r6,13ff4 <_free_r+0xd4>
   13fe8:	00800304 	movi	r2,12
   13fec:	20800015 	stw	r2,0(r4)
   13ff0:	003fdc06 	br	13f64 <_free_r+0x44>
   13ff4:	81800017 	ldw	r6,0(r16)
   13ff8:	818b883a 	add	r5,r16,r6
   13ffc:	1140041e 	bne	r2,r5,14010 <_free_r+0xf0>
   14000:	11400017 	ldw	r5,0(r2)
   14004:	10800117 	ldw	r2,4(r2)
   14008:	298b883a 	add	r5,r5,r6
   1400c:	81400015 	stw	r5,0(r16)
   14010:	80800115 	stw	r2,4(r16)
   14014:	1c000115 	stw	r16,4(r3)
   14018:	003fd206 	br	13f64 <_free_r+0x44>
   1401c:	f800283a 	ret

00014020 <_malloc_r>:
   14020:	defffc04 	addi	sp,sp,-16
   14024:	00bfff04 	movi	r2,-4
   14028:	dc400115 	stw	r17,4(sp)
   1402c:	2c4000c4 	addi	r17,r5,3
   14030:	88a2703a 	and	r17,r17,r2
   14034:	8c400204 	addi	r17,r17,8
   14038:	dc800215 	stw	r18,8(sp)
   1403c:	dfc00315 	stw	ra,12(sp)
   14040:	dc000015 	stw	r16,0(sp)
   14044:	88800328 	cmpgeui	r2,r17,12
   14048:	2025883a 	mov	r18,r4
   1404c:	10001a1e 	bne	r2,zero,140b8 <_malloc_r+0x98>
   14050:	04400304 	movi	r17,12
   14054:	89401936 	bltu	r17,r5,140bc <_malloc_r+0x9c>
   14058:	9009883a 	mov	r4,r18
   1405c:	0014c280 	call	14c28 <__malloc_lock>
   14060:	00800074 	movhi	r2,1
   14064:	10ddf117 	ldw	r3,30660(r2)
   14068:	1821883a 	mov	r16,r3
   1406c:	80001c1e 	bne	r16,zero,140e0 <_malloc_r+0xc0>
   14070:	00800074 	movhi	r2,1
   14074:	109df017 	ldw	r2,30656(r2)
   14078:	1000051e 	bne	r2,zero,14090 <_malloc_r+0x70>
   1407c:	000b883a 	mov	r5,zero
   14080:	9009883a 	mov	r4,r18
   14084:	00142100 	call	14210 <_sbrk_r>
   14088:	00c00074 	movhi	r3,1
   1408c:	189df015 	stw	r2,30656(r3)
   14090:	880b883a 	mov	r5,r17
   14094:	9009883a 	mov	r4,r18
   14098:	00142100 	call	14210 <_sbrk_r>
   1409c:	10ffffd8 	cmpnei	r3,r2,-1
   140a0:	18002d1e 	bne	r3,zero,14158 <_malloc_r+0x138>
   140a4:	00800304 	movi	r2,12
   140a8:	90800015 	stw	r2,0(r18)
   140ac:	9009883a 	mov	r4,r18
   140b0:	0014c4c0 	call	14c4c <__malloc_unlock>
   140b4:	00000306 	br	140c4 <_malloc_r+0xa4>
   140b8:	883fe60e 	bge	r17,zero,14054 <_malloc_r+0x34>
   140bc:	00800304 	movi	r2,12
   140c0:	90800015 	stw	r2,0(r18)
   140c4:	0005883a 	mov	r2,zero
   140c8:	dfc00317 	ldw	ra,12(sp)
   140cc:	dc800217 	ldw	r18,8(sp)
   140d0:	dc400117 	ldw	r17,4(sp)
   140d4:	dc000017 	ldw	r16,0(sp)
   140d8:	dec00404 	addi	sp,sp,16
   140dc:	f800283a 	ret
   140e0:	80800017 	ldw	r2,0(r16)
   140e4:	1445c83a 	sub	r2,r2,r17
   140e8:	10001816 	blt	r2,zero,1414c <_malloc_r+0x12c>
   140ec:	11000330 	cmpltui	r4,r2,12
   140f0:	2000041e 	bne	r4,zero,14104 <_malloc_r+0xe4>
   140f4:	80800015 	stw	r2,0(r16)
   140f8:	80a1883a 	add	r16,r16,r2
   140fc:	84400015 	stw	r17,0(r16)
   14100:	00000406 	br	14114 <_malloc_r+0xf4>
   14104:	80800117 	ldw	r2,4(r16)
   14108:	1c000e1e 	bne	r3,r16,14144 <_malloc_r+0x124>
   1410c:	00c00074 	movhi	r3,1
   14110:	189df115 	stw	r2,30660(r3)
   14114:	9009883a 	mov	r4,r18
   14118:	0014c4c0 	call	14c4c <__malloc_unlock>
   1411c:	013ffe04 	movi	r4,-8
   14120:	808002c4 	addi	r2,r16,11
   14124:	80c00104 	addi	r3,r16,4
   14128:	1104703a 	and	r2,r2,r4
   1412c:	10c9c83a 	sub	r4,r2,r3
   14130:	10ffe526 	beq	r2,r3,140c8 <_malloc_r+0xa8>
   14134:	8121883a 	add	r16,r16,r4
   14138:	1887c83a 	sub	r3,r3,r2
   1413c:	80c00015 	stw	r3,0(r16)
   14140:	003fe106 	br	140c8 <_malloc_r+0xa8>
   14144:	18800115 	stw	r2,4(r3)
   14148:	003ff206 	br	14114 <_malloc_r+0xf4>
   1414c:	8007883a 	mov	r3,r16
   14150:	84000117 	ldw	r16,4(r16)
   14154:	003fc506 	br	1406c <_malloc_r+0x4c>
   14158:	140000c4 	addi	r16,r2,3
   1415c:	00ffff04 	movi	r3,-4
   14160:	80e0703a 	and	r16,r16,r3
   14164:	143fe526 	beq	r2,r16,140fc <_malloc_r+0xdc>
   14168:	808bc83a 	sub	r5,r16,r2
   1416c:	9009883a 	mov	r4,r18
   14170:	00142100 	call	14210 <_sbrk_r>
   14174:	10bfffe0 	cmpeqi	r2,r2,-1
   14178:	103fe026 	beq	r2,zero,140fc <_malloc_r+0xdc>
   1417c:	003fc906 	br	140a4 <_malloc_r+0x84>

00014180 <_puts_r>:
   14180:	defffd04 	addi	sp,sp,-12
   14184:	dc000015 	stw	r16,0(sp)
   14188:	2021883a 	mov	r16,r4
   1418c:	2809883a 	mov	r4,r5
   14190:	dfc00215 	stw	ra,8(sp)
   14194:	dc400115 	stw	r17,4(sp)
   14198:	2823883a 	mov	r17,r5
   1419c:	00145540 	call	14554 <strlen>
   141a0:	81400217 	ldw	r5,8(r16)
   141a4:	00c00074 	movhi	r3,1
   141a8:	18d15c04 	addi	r3,r3,17776
   141ac:	28c00115 	stw	r3,4(r5)
   141b0:	100f883a 	mov	r7,r2
   141b4:	880d883a 	mov	r6,r17
   141b8:	8009883a 	mov	r4,r16
   141bc:	00145700 	call	14570 <__sfvwrite_small_dev>
   141c0:	10ffffe0 	cmpeqi	r3,r2,-1
   141c4:	1800091e 	bne	r3,zero,141ec <_puts_r+0x6c>
   141c8:	81400217 	ldw	r5,8(r16)
   141cc:	01800074 	movhi	r6,1
   141d0:	01c00044 	movi	r7,1
   141d4:	28800117 	ldw	r2,4(r5)
   141d8:	319b3204 	addi	r6,r6,27848
   141dc:	8009883a 	mov	r4,r16
   141e0:	103ee83a 	callr	r2
   141e4:	10bfffe0 	cmpeqi	r2,r2,-1
   141e8:	0085c83a 	sub	r2,zero,r2
   141ec:	dfc00217 	ldw	ra,8(sp)
   141f0:	dc400117 	ldw	r17,4(sp)
   141f4:	dc000017 	ldw	r16,0(sp)
   141f8:	dec00304 	addi	sp,sp,12
   141fc:	f800283a 	ret

00014200 <puts>:
   14200:	00800074 	movhi	r2,1
   14204:	200b883a 	mov	r5,r4
   14208:	111c8b17 	ldw	r4,29228(r2)
   1420c:	00141801 	jmpi	14180 <_puts_r>

00014210 <_sbrk_r>:
   14210:	defffe04 	addi	sp,sp,-8
   14214:	dc000015 	stw	r16,0(sp)
   14218:	00800074 	movhi	r2,1
   1421c:	2021883a 	mov	r16,r4
   14220:	2809883a 	mov	r4,r5
   14224:	dfc00115 	stw	ra,4(sp)
   14228:	101df215 	stw	zero,30664(r2)
   1422c:	0014c700 	call	14c70 <sbrk>
   14230:	10ffffd8 	cmpnei	r3,r2,-1
   14234:	1800041e 	bne	r3,zero,14248 <_sbrk_r+0x38>
   14238:	00c00074 	movhi	r3,1
   1423c:	18ddf217 	ldw	r3,30664(r3)
   14240:	18000126 	beq	r3,zero,14248 <_sbrk_r+0x38>
   14244:	80c00015 	stw	r3,0(r16)
   14248:	dfc00117 	ldw	ra,4(sp)
   1424c:	dc000017 	ldw	r16,0(sp)
   14250:	dec00204 	addi	sp,sp,8
   14254:	f800283a 	ret

00014258 <_init_signal_r>:
   14258:	20800c17 	ldw	r2,48(r4)
   1425c:	1000131e 	bne	r2,zero,142ac <_init_signal_r+0x54>
   14260:	defffe04 	addi	sp,sp,-8
   14264:	01402004 	movi	r5,128
   14268:	dc000015 	stw	r16,0(sp)
   1426c:	dfc00115 	stw	ra,4(sp)
   14270:	2021883a 	mov	r16,r4
   14274:	00140200 	call	14020 <_malloc_r>
   14278:	80800c15 	stw	r2,48(r16)
   1427c:	1009883a 	mov	r4,r2
   14280:	10000826 	beq	r2,zero,142a4 <_init_signal_r+0x4c>
   14284:	01802004 	movi	r6,128
   14288:	000b883a 	mov	r5,zero
   1428c:	0013f000 	call	13f00 <memset>
   14290:	0005883a 	mov	r2,zero
   14294:	dfc00117 	ldw	ra,4(sp)
   14298:	dc000017 	ldw	r16,0(sp)
   1429c:	dec00204 	addi	sp,sp,8
   142a0:	f800283a 	ret
   142a4:	00bfffc4 	movi	r2,-1
   142a8:	003ffa06 	br	14294 <_init_signal_r+0x3c>
   142ac:	0005883a 	mov	r2,zero
   142b0:	f800283a 	ret

000142b4 <_signal_r>:
   142b4:	defffc04 	addi	sp,sp,-16
   142b8:	dc400115 	stw	r17,4(sp)
   142bc:	dfc00315 	stw	ra,12(sp)
   142c0:	dc800215 	stw	r18,8(sp)
   142c4:	dc000015 	stw	r16,0(sp)
   142c8:	28800830 	cmpltui	r2,r5,32
   142cc:	2023883a 	mov	r17,r4
   142d0:	1000041e 	bne	r2,zero,142e4 <_signal_r+0x30>
   142d4:	00800584 	movi	r2,22
   142d8:	20800015 	stw	r2,0(r4)
   142dc:	00bfffc4 	movi	r2,-1
   142e0:	00000906 	br	14308 <_signal_r+0x54>
   142e4:	20800c17 	ldw	r2,48(r4)
   142e8:	2821883a 	mov	r16,r5
   142ec:	3025883a 	mov	r18,r6
   142f0:	10000b26 	beq	r2,zero,14320 <_signal_r+0x6c>
   142f4:	89400c17 	ldw	r5,48(r17)
   142f8:	802090ba 	slli	r16,r16,2
   142fc:	2c21883a 	add	r16,r5,r16
   14300:	80800017 	ldw	r2,0(r16)
   14304:	84800015 	stw	r18,0(r16)
   14308:	dfc00317 	ldw	ra,12(sp)
   1430c:	dc800217 	ldw	r18,8(sp)
   14310:	dc400117 	ldw	r17,4(sp)
   14314:	dc000017 	ldw	r16,0(sp)
   14318:	dec00404 	addi	sp,sp,16
   1431c:	f800283a 	ret
   14320:	00142580 	call	14258 <_init_signal_r>
   14324:	103ff326 	beq	r2,zero,142f4 <_signal_r+0x40>
   14328:	003fec06 	br	142dc <_signal_r+0x28>

0001432c <_raise_r>:
   1432c:	defffd04 	addi	sp,sp,-12
   14330:	dc000015 	stw	r16,0(sp)
   14334:	dfc00215 	stw	ra,8(sp)
   14338:	dc400115 	stw	r17,4(sp)
   1433c:	28800830 	cmpltui	r2,r5,32
   14340:	2021883a 	mov	r16,r4
   14344:	1000081e 	bne	r2,zero,14368 <_raise_r+0x3c>
   14348:	00800584 	movi	r2,22
   1434c:	20800015 	stw	r2,0(r4)
   14350:	00bfffc4 	movi	r2,-1
   14354:	dfc00217 	ldw	ra,8(sp)
   14358:	dc400117 	ldw	r17,4(sp)
   1435c:	dc000017 	ldw	r16,0(sp)
   14360:	dec00304 	addi	sp,sp,12
   14364:	f800283a 	ret
   14368:	20800c17 	ldw	r2,48(r4)
   1436c:	2823883a 	mov	r17,r5
   14370:	10000426 	beq	r2,zero,14384 <_raise_r+0x58>
   14374:	280690ba 	slli	r3,r5,2
   14378:	10c5883a 	add	r2,r2,r3
   1437c:	10c00017 	ldw	r3,0(r2)
   14380:	18000a1e 	bne	r3,zero,143ac <_raise_r+0x80>
   14384:	8009883a 	mov	r4,r16
   14388:	001450c0 	call	1450c <_getpid_r>
   1438c:	880d883a 	mov	r6,r17
   14390:	100b883a 	mov	r5,r2
   14394:	8009883a 	mov	r4,r16
   14398:	dfc00217 	ldw	ra,8(sp)
   1439c:	dc400117 	ldw	r17,4(sp)
   143a0:	dc000017 	ldw	r16,0(sp)
   143a4:	dec00304 	addi	sp,sp,12
   143a8:	00144c01 	jmpi	144c0 <_kill_r>
   143ac:	19000060 	cmpeqi	r4,r3,1
   143b0:	2000091e 	bne	r4,zero,143d8 <_raise_r+0xac>
   143b4:	193fffd8 	cmpnei	r4,r3,-1
   143b8:	2000041e 	bne	r4,zero,143cc <_raise_r+0xa0>
   143bc:	00800584 	movi	r2,22
   143c0:	80800015 	stw	r2,0(r16)
   143c4:	00800044 	movi	r2,1
   143c8:	003fe206 	br	14354 <_raise_r+0x28>
   143cc:	10000015 	stw	zero,0(r2)
   143d0:	2809883a 	mov	r4,r5
   143d4:	183ee83a 	callr	r3
   143d8:	0005883a 	mov	r2,zero
   143dc:	003fdd06 	br	14354 <_raise_r+0x28>

000143e0 <__sigtramp_r>:
   143e0:	28800830 	cmpltui	r2,r5,32
   143e4:	1000021e 	bne	r2,zero,143f0 <__sigtramp_r+0x10>
   143e8:	00bfffc4 	movi	r2,-1
   143ec:	f800283a 	ret
   143f0:	20800c17 	ldw	r2,48(r4)
   143f4:	defffd04 	addi	sp,sp,-12
   143f8:	dc400115 	stw	r17,4(sp)
   143fc:	dc000015 	stw	r16,0(sp)
   14400:	dfc00215 	stw	ra,8(sp)
   14404:	2023883a 	mov	r17,r4
   14408:	2821883a 	mov	r16,r5
   1440c:	10000726 	beq	r2,zero,1442c <__sigtramp_r+0x4c>
   14410:	88800c17 	ldw	r2,48(r17)
   14414:	800690ba 	slli	r3,r16,2
   14418:	10c7883a 	add	r3,r2,r3
   1441c:	18800017 	ldw	r2,0(r3)
   14420:	10000a1e 	bne	r2,zero,1444c <__sigtramp_r+0x6c>
   14424:	00800044 	movi	r2,1
   14428:	00000306 	br	14438 <__sigtramp_r+0x58>
   1442c:	00142580 	call	14258 <_init_signal_r>
   14430:	103ff726 	beq	r2,zero,14410 <__sigtramp_r+0x30>
   14434:	00bfffc4 	movi	r2,-1
   14438:	dfc00217 	ldw	ra,8(sp)
   1443c:	dc400117 	ldw	r17,4(sp)
   14440:	dc000017 	ldw	r16,0(sp)
   14444:	dec00304 	addi	sp,sp,12
   14448:	f800283a 	ret
   1444c:	113fffe0 	cmpeqi	r4,r2,-1
   14450:	2000071e 	bne	r4,zero,14470 <__sigtramp_r+0x90>
   14454:	11000060 	cmpeqi	r4,r2,1
   14458:	2000071e 	bne	r4,zero,14478 <__sigtramp_r+0x98>
   1445c:	18000015 	stw	zero,0(r3)
   14460:	8009883a 	mov	r4,r16
   14464:	103ee83a 	callr	r2
   14468:	0005883a 	mov	r2,zero
   1446c:	003ff206 	br	14438 <__sigtramp_r+0x58>
   14470:	00800084 	movi	r2,2
   14474:	003ff006 	br	14438 <__sigtramp_r+0x58>
   14478:	008000c4 	movi	r2,3
   1447c:	003fee06 	br	14438 <__sigtramp_r+0x58>

00014480 <raise>:
   14480:	00800074 	movhi	r2,1
   14484:	200b883a 	mov	r5,r4
   14488:	111c8b17 	ldw	r4,29228(r2)
   1448c:	001432c1 	jmpi	1432c <_raise_r>

00014490 <signal>:
   14490:	00800074 	movhi	r2,1
   14494:	280d883a 	mov	r6,r5
   14498:	200b883a 	mov	r5,r4
   1449c:	111c8b17 	ldw	r4,29228(r2)
   144a0:	00142b41 	jmpi	142b4 <_signal_r>

000144a4 <_init_signal>:
   144a4:	00800074 	movhi	r2,1
   144a8:	111c8b17 	ldw	r4,29228(r2)
   144ac:	00142581 	jmpi	14258 <_init_signal_r>

000144b0 <__sigtramp>:
   144b0:	00800074 	movhi	r2,1
   144b4:	200b883a 	mov	r5,r4
   144b8:	111c8b17 	ldw	r4,29228(r2)
   144bc:	00143e01 	jmpi	143e0 <__sigtramp_r>

000144c0 <_kill_r>:
   144c0:	defffe04 	addi	sp,sp,-8
   144c4:	dc000015 	stw	r16,0(sp)
   144c8:	00800074 	movhi	r2,1
   144cc:	2021883a 	mov	r16,r4
   144d0:	2809883a 	mov	r4,r5
   144d4:	300b883a 	mov	r5,r6
   144d8:	dfc00115 	stw	ra,4(sp)
   144dc:	101df215 	stw	zero,30664(r2)
   144e0:	00149940 	call	14994 <kill>
   144e4:	10ffffd8 	cmpnei	r3,r2,-1
   144e8:	1800041e 	bne	r3,zero,144fc <_kill_r+0x3c>
   144ec:	00c00074 	movhi	r3,1
   144f0:	18ddf217 	ldw	r3,30664(r3)
   144f4:	18000126 	beq	r3,zero,144fc <_kill_r+0x3c>
   144f8:	80c00015 	stw	r3,0(r16)
   144fc:	dfc00117 	ldw	ra,4(sp)
   14500:	dc000017 	ldw	r16,0(sp)
   14504:	dec00204 	addi	sp,sp,8
   14508:	f800283a 	ret

0001450c <_getpid_r>:
   1450c:	00146a01 	jmpi	146a0 <getpid>

00014510 <strcmp>:
   14510:	20800003 	ldbu	r2,0(r4)
   14514:	28c00003 	ldbu	r3,0(r5)
   14518:	11803fcc 	andi	r6,r2,255
   1451c:	3180201c 	xori	r6,r6,128
   14520:	31bfe004 	addi	r6,r6,-128
   14524:	30000426 	beq	r6,zero,14538 <strcmp+0x28>
   14528:	19c03fcc 	andi	r7,r3,255
   1452c:	39c0201c 	xori	r7,r7,128
   14530:	39ffe004 	addi	r7,r7,-128
   14534:	31c00426 	beq	r6,r7,14548 <strcmp+0x38>
   14538:	18c03fcc 	andi	r3,r3,255
   1453c:	10803fcc 	andi	r2,r2,255
   14540:	10c5c83a 	sub	r2,r2,r3
   14544:	f800283a 	ret
   14548:	21000044 	addi	r4,r4,1
   1454c:	29400044 	addi	r5,r5,1
   14550:	003fef06 	br	14510 <strcmp>

00014554 <strlen>:
   14554:	2005883a 	mov	r2,r4
   14558:	10c00007 	ldb	r3,0(r2)
   1455c:	1800021e 	bne	r3,zero,14568 <strlen+0x14>
   14560:	1105c83a 	sub	r2,r2,r4
   14564:	f800283a 	ret
   14568:	10800044 	addi	r2,r2,1
   1456c:	003ffa06 	br	14558 <strlen+0x4>

00014570 <__sfvwrite_small_dev>:
   14570:	2880000b 	ldhu	r2,0(r5)
   14574:	1080020c 	andi	r2,r2,8
   14578:	10002526 	beq	r2,zero,14610 <__sfvwrite_small_dev+0xa0>
   1457c:	2880008f 	ldh	r2,2(r5)
   14580:	defffb04 	addi	sp,sp,-20
   14584:	dcc00315 	stw	r19,12(sp)
   14588:	dc800215 	stw	r18,8(sp)
   1458c:	dc400115 	stw	r17,4(sp)
   14590:	dc000015 	stw	r16,0(sp)
   14594:	dfc00415 	stw	ra,16(sp)
   14598:	2027883a 	mov	r19,r4
   1459c:	2821883a 	mov	r16,r5
   145a0:	3025883a 	mov	r18,r6
   145a4:	3823883a 	mov	r17,r7
   145a8:	1000100e 	bge	r2,zero,145ec <__sfvwrite_small_dev+0x7c>
   145ac:	8080000b 	ldhu	r2,0(r16)
   145b0:	10801014 	ori	r2,r2,64
   145b4:	8080000d 	sth	r2,0(r16)
   145b8:	00bfffc4 	movi	r2,-1
   145bc:	00000d06 	br	145f4 <__sfvwrite_small_dev+0x84>
   145c0:	88810050 	cmplti	r2,r17,1025
   145c4:	880f883a 	mov	r7,r17
   145c8:	1000011e 	bne	r2,zero,145d0 <__sfvwrite_small_dev+0x60>
   145cc:	01c10004 	movi	r7,1024
   145d0:	8140008f 	ldh	r5,2(r16)
   145d4:	900d883a 	mov	r6,r18
   145d8:	9809883a 	mov	r4,r19
   145dc:	00146180 	call	14618 <_write_r>
   145e0:	00bff20e 	bge	zero,r2,145ac <__sfvwrite_small_dev+0x3c>
   145e4:	88a3c83a 	sub	r17,r17,r2
   145e8:	90a5883a 	add	r18,r18,r2
   145ec:	047ff416 	blt	zero,r17,145c0 <__sfvwrite_small_dev+0x50>
   145f0:	0005883a 	mov	r2,zero
   145f4:	dfc00417 	ldw	ra,16(sp)
   145f8:	dcc00317 	ldw	r19,12(sp)
   145fc:	dc800217 	ldw	r18,8(sp)
   14600:	dc400117 	ldw	r17,4(sp)
   14604:	dc000017 	ldw	r16,0(sp)
   14608:	dec00504 	addi	sp,sp,20
   1460c:	f800283a 	ret
   14610:	00bfffc4 	movi	r2,-1
   14614:	f800283a 	ret

00014618 <_write_r>:
   14618:	defffe04 	addi	sp,sp,-8
   1461c:	dc000015 	stw	r16,0(sp)
   14620:	00800074 	movhi	r2,1
   14624:	2021883a 	mov	r16,r4
   14628:	2809883a 	mov	r4,r5
   1462c:	300b883a 	mov	r5,r6
   14630:	380d883a 	mov	r6,r7
   14634:	dfc00115 	stw	ra,4(sp)
   14638:	101df215 	stw	zero,30664(r2)
   1463c:	0014d640 	call	14d64 <write>
   14640:	10ffffd8 	cmpnei	r3,r2,-1
   14644:	1800041e 	bne	r3,zero,14658 <_write_r+0x40>
   14648:	00c00074 	movhi	r3,1
   1464c:	18ddf217 	ldw	r3,30664(r3)
   14650:	18000126 	beq	r3,zero,14658 <_write_r+0x40>
   14654:	80c00015 	stw	r3,0(r16)
   14658:	dfc00117 	ldw	ra,4(sp)
   1465c:	dc000017 	ldw	r16,0(sp)
   14660:	dec00204 	addi	sp,sp,8
   14664:	f800283a 	ret

00014668 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   14668:	defffd04 	addi	sp,sp,-12
   1466c:	df000215 	stw	fp,8(sp)
   14670:	df000204 	addi	fp,sp,8
   14674:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   14678:	0001883a 	nop
   1467c:	e0bffe17 	ldw	r2,-8(fp)
   14680:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   14684:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   14688:	10000226 	beq	r2,zero,14694 <_exit+0x2c>
    ALT_SIM_FAIL();
   1468c:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   14690:	00000106 	br	14698 <_exit+0x30>
    ALT_SIM_PASS();
   14694:	002af0b0 	cmpltui	zero,zero,43970
}
   14698:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1469c:	003fff06 	br	1469c <_exit+0x34>

000146a0 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   146a0:	deffff04 	addi	sp,sp,-4
   146a4:	df000015 	stw	fp,0(sp)
   146a8:	d839883a 	mov	fp,sp
  return 0;
   146ac:	0005883a 	mov	r2,zero
}
   146b0:	e037883a 	mov	sp,fp
   146b4:	df000017 	ldw	fp,0(sp)
   146b8:	dec00104 	addi	sp,sp,4
   146bc:	f800283a 	ret

000146c0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   146c0:	defff904 	addi	sp,sp,-28
   146c4:	dfc00615 	stw	ra,24(sp)
   146c8:	df000515 	stw	fp,20(sp)
   146cc:	df000504 	addi	fp,sp,20
   146d0:	e13fff15 	stw	r4,-4(fp)
   146d4:	e17ffe15 	stw	r5,-8(fp)
   146d8:	e1bffd15 	stw	r6,-12(fp)
   146dc:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   146e0:	e0800217 	ldw	r2,8(fp)
   146e4:	d8800015 	stw	r2,0(sp)
   146e8:	e1fffc17 	ldw	r7,-16(fp)
   146ec:	e1bffd17 	ldw	r6,-12(fp)
   146f0:	e17ffe17 	ldw	r5,-8(fp)
   146f4:	e13fff17 	ldw	r4,-4(fp)
   146f8:	00148700 	call	14870 <alt_iic_isr_register>
}  
   146fc:	e037883a 	mov	sp,fp
   14700:	dfc00117 	ldw	ra,4(sp)
   14704:	df000017 	ldw	fp,0(sp)
   14708:	dec00204 	addi	sp,sp,8
   1470c:	f800283a 	ret

00014710 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   14710:	defff904 	addi	sp,sp,-28
   14714:	df000615 	stw	fp,24(sp)
   14718:	df000604 	addi	fp,sp,24
   1471c:	e13ffb15 	stw	r4,-20(fp)
   14720:	e17ffa15 	stw	r5,-24(fp)
   14724:	e0bffa17 	ldw	r2,-24(fp)
   14728:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   1472c:	0005303a 	rdctl	r2,status
   14730:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14734:	e0fffe17 	ldw	r3,-8(fp)
   14738:	00bfff84 	movi	r2,-2
   1473c:	1884703a 	and	r2,r3,r2
   14740:	1001703a 	wrctl	status,r2
  return context;
   14744:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   14748:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   1474c:	00c00044 	movi	r3,1
   14750:	e0bfff17 	ldw	r2,-4(fp)
   14754:	1884983a 	sll	r2,r3,r2
   14758:	1007883a 	mov	r3,r2
   1475c:	d0a1f917 	ldw	r2,-30748(gp)
   14760:	1884b03a 	or	r2,r3,r2
   14764:	d0a1f915 	stw	r2,-30748(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14768:	d0a1f917 	ldw	r2,-30748(gp)
   1476c:	100170fa 	wrctl	ienable,r2
   14770:	e0bffd17 	ldw	r2,-12(fp)
   14774:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   14778:	e0bffc17 	ldw	r2,-16(fp)
   1477c:	1001703a 	wrctl	status,r2
}
   14780:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
   14784:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   14788:	e037883a 	mov	sp,fp
   1478c:	df000017 	ldw	fp,0(sp)
   14790:	dec00104 	addi	sp,sp,4
   14794:	f800283a 	ret

00014798 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   14798:	defff904 	addi	sp,sp,-28
   1479c:	df000615 	stw	fp,24(sp)
   147a0:	df000604 	addi	fp,sp,24
   147a4:	e13ffb15 	stw	r4,-20(fp)
   147a8:	e17ffa15 	stw	r5,-24(fp)
   147ac:	e0bffa17 	ldw	r2,-24(fp)
   147b0:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   147b4:	0005303a 	rdctl	r2,status
   147b8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   147bc:	e0fffe17 	ldw	r3,-8(fp)
   147c0:	00bfff84 	movi	r2,-2
   147c4:	1884703a 	and	r2,r3,r2
   147c8:	1001703a 	wrctl	status,r2
  return context;
   147cc:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
   147d0:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
   147d4:	00c00044 	movi	r3,1
   147d8:	e0bfff17 	ldw	r2,-4(fp)
   147dc:	1884983a 	sll	r2,r3,r2
   147e0:	0084303a 	nor	r2,zero,r2
   147e4:	1007883a 	mov	r3,r2
   147e8:	d0a1f917 	ldw	r2,-30748(gp)
   147ec:	1884703a 	and	r2,r3,r2
   147f0:	d0a1f915 	stw	r2,-30748(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   147f4:	d0a1f917 	ldw	r2,-30748(gp)
   147f8:	100170fa 	wrctl	ienable,r2
   147fc:	e0bffd17 	ldw	r2,-12(fp)
   14800:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   14804:	e0bffc17 	ldw	r2,-16(fp)
   14808:	1001703a 	wrctl	status,r2
}
   1480c:	0001883a 	nop
  return 0;
   14810:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   14814:	e037883a 	mov	sp,fp
   14818:	df000017 	ldw	fp,0(sp)
   1481c:	dec00104 	addi	sp,sp,4
   14820:	f800283a 	ret

00014824 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   14824:	defffc04 	addi	sp,sp,-16
   14828:	df000315 	stw	fp,12(sp)
   1482c:	df000304 	addi	fp,sp,12
   14830:	e13ffe15 	stw	r4,-8(fp)
   14834:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   14838:	000530fa 	rdctl	r2,ienable
   1483c:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   14840:	00c00044 	movi	r3,1
   14844:	e0bffd17 	ldw	r2,-12(fp)
   14848:	1884983a 	sll	r2,r3,r2
   1484c:	1007883a 	mov	r3,r2
   14850:	e0bfff17 	ldw	r2,-4(fp)
   14854:	1884703a 	and	r2,r3,r2
   14858:	1004c03a 	cmpne	r2,r2,zero
   1485c:	10803fcc 	andi	r2,r2,255
}
   14860:	e037883a 	mov	sp,fp
   14864:	df000017 	ldw	fp,0(sp)
   14868:	dec00104 	addi	sp,sp,4
   1486c:	f800283a 	ret

00014870 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14870:	defff504 	addi	sp,sp,-44
   14874:	dfc00a15 	stw	ra,40(sp)
   14878:	df000915 	stw	fp,36(sp)
   1487c:	df000904 	addi	fp,sp,36
   14880:	e13ffa15 	stw	r4,-24(fp)
   14884:	e17ff915 	stw	r5,-28(fp)
   14888:	e1bff815 	stw	r6,-32(fp)
   1488c:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
   14890:	00bffa84 	movi	r2,-22
   14894:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   14898:	e0bff917 	ldw	r2,-28(fp)
   1489c:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   148a0:	e0bffe17 	ldw	r2,-8(fp)
   148a4:	10800808 	cmpgei	r2,r2,32
   148a8:	1000251e 	bne	r2,zero,14940 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
   148ac:	0005303a 	rdctl	r2,status
   148b0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   148b4:	e0fffc17 	ldw	r3,-16(fp)
   148b8:	00bfff84 	movi	r2,-2
   148bc:	1884703a 	and	r2,r3,r2
   148c0:	1001703a 	wrctl	status,r2
  return context;
   148c4:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   148c8:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
   148cc:	e0bffe17 	ldw	r2,-8(fp)
   148d0:	100890fa 	slli	r4,r2,3
   148d4:	e0fff817 	ldw	r3,-32(fp)
   148d8:	00800074 	movhi	r2,1
   148dc:	2085883a 	add	r2,r4,r2
   148e0:	10de0215 	stw	r3,30728(r2)
    alt_irq[id].context = isr_context;
   148e4:	e0bffe17 	ldw	r2,-8(fp)
   148e8:	100890fa 	slli	r4,r2,3
   148ec:	e0fff717 	ldw	r3,-36(fp)
   148f0:	00800074 	movhi	r2,1
   148f4:	2085883a 	add	r2,r4,r2
   148f8:	10de0315 	stw	r3,30732(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   148fc:	e0bff817 	ldw	r2,-32(fp)
   14900:	10000526 	beq	r2,zero,14918 <alt_iic_isr_register+0xa8>
   14904:	e0bffe17 	ldw	r2,-8(fp)
   14908:	100b883a 	mov	r5,r2
   1490c:	e13ffa17 	ldw	r4,-24(fp)
   14910:	00147100 	call	14710 <alt_ic_irq_enable>
   14914:	00000406 	br	14928 <alt_iic_isr_register+0xb8>
   14918:	e0bffe17 	ldw	r2,-8(fp)
   1491c:	100b883a 	mov	r5,r2
   14920:	e13ffa17 	ldw	r4,-24(fp)
   14924:	00147980 	call	14798 <alt_ic_irq_disable>
   14928:	e0bfff15 	stw	r2,-4(fp)
   1492c:	e0bffd17 	ldw	r2,-12(fp)
   14930:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   14934:	e0bffb17 	ldw	r2,-20(fp)
   14938:	1001703a 	wrctl	status,r2
}
   1493c:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
   14940:	e0bfff17 	ldw	r2,-4(fp)
}
   14944:	e037883a 	mov	sp,fp
   14948:	dfc00117 	ldw	ra,4(sp)
   1494c:	df000017 	ldw	fp,0(sp)
   14950:	dec00204 	addi	sp,sp,8
   14954:	f800283a 	ret

00014958 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14958:	defffe04 	addi	sp,sp,-8
   1495c:	dfc00115 	stw	ra,4(sp)
   14960:	df000015 	stw	fp,0(sp)
   14964:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14968:	d0a09917 	ldw	r2,-32156(gp)
   1496c:	10000326 	beq	r2,zero,1497c <alt_get_errno+0x24>
   14970:	d0a09917 	ldw	r2,-32156(gp)
   14974:	103ee83a 	callr	r2
   14978:	00000106 	br	14980 <alt_get_errno+0x28>
   1497c:	d0a1f804 	addi	r2,gp,-30752
}
   14980:	e037883a 	mov	sp,fp
   14984:	dfc00117 	ldw	ra,4(sp)
   14988:	df000017 	ldw	fp,0(sp)
   1498c:	dec00204 	addi	sp,sp,8
   14990:	f800283a 	ret

00014994 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   14994:	defffb04 	addi	sp,sp,-20
   14998:	dfc00415 	stw	ra,16(sp)
   1499c:	df000315 	stw	fp,12(sp)
   149a0:	df000304 	addi	fp,sp,12
   149a4:	e13ffe15 	stw	r4,-8(fp)
   149a8:	e17ffd15 	stw	r5,-12(fp)
  int status = 0;
   149ac:	e03fff15 	stw	zero,-4(fp)

  if (pid <= 0)
   149b0:	e0bffe17 	ldw	r2,-8(fp)
   149b4:	00802e16 	blt	zero,r2,14a70 <kill+0xdc>
   149b8:	e0bffd17 	ldw	r2,-12(fp)
   149bc:	10800828 	cmpgeui	r2,r2,32
   149c0:	1000281e 	bne	r2,zero,14a64 <kill+0xd0>
   149c4:	e0bffd17 	ldw	r2,-12(fp)
   149c8:	100690ba 	slli	r3,r2,2
   149cc:	00800074 	movhi	r2,1
   149d0:	1885883a 	add	r2,r3,r2
   149d4:	10927717 	ldw	r2,18908(r2)
   149d8:	1000683a 	jmp	r2
   149dc:	00014a84 	movi	zero,1322
   149e0:	00014a64 	muli	zero,zero,1321
   149e4:	00014a64 	muli	zero,zero,1321
   149e8:	00014a5c 	xori	zero,zero,1321
   149ec:	00014a5c 	xori	zero,zero,1321
   149f0:	00014a5c 	xori	zero,zero,1321
   149f4:	00014a5c 	xori	zero,zero,1321
   149f8:	00014a64 	muli	zero,zero,1321
   149fc:	00014a5c 	xori	zero,zero,1321
   14a00:	00014a5c 	xori	zero,zero,1321
   14a04:	00014a5c 	xori	zero,zero,1321
   14a08:	00014a5c 	xori	zero,zero,1321
   14a0c:	00014a5c 	xori	zero,zero,1321
   14a10:	00014a5c 	xori	zero,zero,1321
   14a14:	00014a5c 	xori	zero,zero,1321
   14a18:	00014a5c 	xori	zero,zero,1321
   14a1c:	00014a84 	movi	zero,1322
   14a20:	00014a64 	muli	zero,zero,1321
   14a24:	00014a64 	muli	zero,zero,1321
   14a28:	00014a64 	muli	zero,zero,1321
   14a2c:	00014a84 	movi	zero,1322
   14a30:	00014a64 	muli	zero,zero,1321
   14a34:	00014a64 	muli	zero,zero,1321
   14a38:	00014a5c 	xori	zero,zero,1321
   14a3c:	00014a5c 	xori	zero,zero,1321
   14a40:	00014a5c 	xori	zero,zero,1321
   14a44:	00014a5c 	xori	zero,zero,1321
   14a48:	00014a5c 	xori	zero,zero,1321
   14a4c:	00014a64 	muli	zero,zero,1321
   14a50:	00014a64 	muli	zero,zero,1321
   14a54:	00014a5c 	xori	zero,zero,1321
   14a58:	00014a5c 	xori	zero,zero,1321
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   14a5c:	0009883a 	mov	r4,zero
   14a60:	00146680 	call	14668 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   14a64:	00800584 	movi	r2,22
   14a68:	e0bfff15 	stw	r2,-4(fp)
   14a6c:	00000606 	br	14a88 <kill+0xf4>
    }
  }

  else if (pid > 0)
   14a70:	e0bffe17 	ldw	r2,-8(fp)
   14a74:	0080040e 	bge	zero,r2,14a88 <kill+0xf4>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   14a78:	008000c4 	movi	r2,3
   14a7c:	e0bfff15 	stw	r2,-4(fp)
   14a80:	00000106 	br	14a88 <kill+0xf4>
      break;
   14a84:	0001883a 	nop
  }

  if (status)
   14a88:	e0bfff17 	ldw	r2,-4(fp)
   14a8c:	10000626 	beq	r2,zero,14aa8 <kill+0x114>
  {
    ALT_ERRNO = status;
   14a90:	00149580 	call	14958 <alt_get_errno>
   14a94:	1007883a 	mov	r3,r2
   14a98:	e0bfff17 	ldw	r2,-4(fp)
   14a9c:	18800015 	stw	r2,0(r3)
    return -1;
   14aa0:	00bfffc4 	movi	r2,-1
   14aa4:	00000106 	br	14aac <kill+0x118>
  }

  return 0;
   14aa8:	0005883a 	mov	r2,zero
}
   14aac:	e037883a 	mov	sp,fp
   14ab0:	dfc00117 	ldw	ra,4(sp)
   14ab4:	df000017 	ldw	fp,0(sp)
   14ab8:	dec00204 	addi	sp,sp,8
   14abc:	f800283a 	ret

00014ac0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   14ac0:	defffc04 	addi	sp,sp,-16
   14ac4:	df000315 	stw	fp,12(sp)
   14ac8:	df000304 	addi	fp,sp,12
   14acc:	e13fff15 	stw	r4,-4(fp)
   14ad0:	e17ffe15 	stw	r5,-8(fp)
   14ad4:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
   14ad8:	e0fffe17 	ldw	r3,-8(fp)
   14adc:	e0bfff17 	ldw	r2,-4(fp)
   14ae0:	18800c26 	beq	r3,r2,14b14 <alt_load_section+0x54>
  {
    while( to != end )
   14ae4:	00000806 	br	14b08 <alt_load_section+0x48>
    {
      *to++ = *from++;
   14ae8:	e0ffff17 	ldw	r3,-4(fp)
   14aec:	18800104 	addi	r2,r3,4
   14af0:	e0bfff15 	stw	r2,-4(fp)
   14af4:	e0bffe17 	ldw	r2,-8(fp)
   14af8:	11000104 	addi	r4,r2,4
   14afc:	e13ffe15 	stw	r4,-8(fp)
   14b00:	18c00017 	ldw	r3,0(r3)
   14b04:	10c00015 	stw	r3,0(r2)
    while( to != end )
   14b08:	e0fffe17 	ldw	r3,-8(fp)
   14b0c:	e0bffd17 	ldw	r2,-12(fp)
   14b10:	18bff51e 	bne	r3,r2,14ae8 <alt_load_section+0x28>
    }
  }
}
   14b14:	0001883a 	nop
   14b18:	e037883a 	mov	sp,fp
   14b1c:	df000017 	ldw	fp,0(sp)
   14b20:	dec00104 	addi	sp,sp,4
   14b24:	f800283a 	ret

00014b28 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   14b28:	defffe04 	addi	sp,sp,-8
   14b2c:	dfc00115 	stw	ra,4(sp)
   14b30:	df000015 	stw	fp,0(sp)
   14b34:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   14b38:	01800074 	movhi	r6,1
   14b3c:	319c9604 	addi	r6,r6,29272
   14b40:	01400074 	movhi	r5,1
   14b44:	295b4104 	addi	r5,r5,27908
   14b48:	01000074 	movhi	r4,1
   14b4c:	211c9604 	addi	r4,r4,29272
   14b50:	0014ac00 	call	14ac0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   14b54:	01800074 	movhi	r6,1
   14b58:	31808904 	addi	r6,r6,548
   14b5c:	01400074 	movhi	r5,1
   14b60:	29400804 	addi	r5,r5,32
   14b64:	01000074 	movhi	r4,1
   14b68:	21000804 	addi	r4,r4,32
   14b6c:	0014ac00 	call	14ac0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   14b70:	01800074 	movhi	r6,1
   14b74:	319b4104 	addi	r6,r6,27908
   14b78:	01400074 	movhi	r5,1
   14b7c:	29591e04 	addi	r5,r5,25720
   14b80:	01000074 	movhi	r4,1
   14b84:	21191e04 	addi	r4,r4,25720
   14b88:	0014ac00 	call	14ac0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   14b8c:	00156680 	call	15668 <alt_dcache_flush_all>
  alt_icache_flush_all();
   14b90:	00158600 	call	15860 <alt_icache_flush_all>
}
   14b94:	0001883a 	nop
   14b98:	e037883a 	mov	sp,fp
   14b9c:	dfc00117 	ldw	ra,4(sp)
   14ba0:	df000017 	ldw	fp,0(sp)
   14ba4:	dec00204 	addi	sp,sp,8
   14ba8:	f800283a 	ret

00014bac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   14bac:	defffd04 	addi	sp,sp,-12
   14bb0:	dfc00215 	stw	ra,8(sp)
   14bb4:	df000115 	stw	fp,4(sp)
   14bb8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   14bbc:	0009883a 	mov	r4,zero
   14bc0:	0014e9c0 	call	14e9c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   14bc4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   14bc8:	0014ed80 	call	14ed8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   14bcc:	01800074 	movhi	r6,1
   14bd0:	319b3304 	addi	r6,r6,27852
   14bd4:	01400074 	movhi	r5,1
   14bd8:	295b3304 	addi	r5,r5,27852
   14bdc:	01000074 	movhi	r4,1
   14be0:	211b3304 	addi	r4,r4,27852
   14be4:	00159ec0 	call	159ec <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   14be8:	00157980 	call	15798 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   14bec:	01000074 	movhi	r4,1
   14bf0:	2115ff04 	addi	r4,r4,22524
   14bf4:	00161700 	call	16170 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   14bf8:	d0a1fa17 	ldw	r2,-30744(gp)
   14bfc:	d0e1fb17 	ldw	r3,-30740(gp)
   14c00:	d121fc17 	ldw	r4,-30736(gp)
   14c04:	200d883a 	mov	r6,r4
   14c08:	180b883a 	mov	r5,r3
   14c0c:	1009883a 	mov	r4,r2
   14c10:	00103d40 	call	103d4 <main>
   14c14:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   14c18:	01000044 	movi	r4,1
   14c1c:	001558c0 	call	1558c <close>
  exit (result);
   14c20:	e13fff17 	ldw	r4,-4(fp)
   14c24:	00161840 	call	16184 <exit>

00014c28 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   14c28:	defffe04 	addi	sp,sp,-8
   14c2c:	df000115 	stw	fp,4(sp)
   14c30:	df000104 	addi	fp,sp,4
   14c34:	e13fff15 	stw	r4,-4(fp)
}
   14c38:	0001883a 	nop
   14c3c:	e037883a 	mov	sp,fp
   14c40:	df000017 	ldw	fp,0(sp)
   14c44:	dec00104 	addi	sp,sp,4
   14c48:	f800283a 	ret

00014c4c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   14c4c:	defffe04 	addi	sp,sp,-8
   14c50:	df000115 	stw	fp,4(sp)
   14c54:	df000104 	addi	fp,sp,4
   14c58:	e13fff15 	stw	r4,-4(fp)
}
   14c5c:	0001883a 	nop
   14c60:	e037883a 	mov	sp,fp
   14c64:	df000017 	ldw	fp,0(sp)
   14c68:	dec00104 	addi	sp,sp,4
   14c6c:	f800283a 	ret

00014c70 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   14c70:	defff904 	addi	sp,sp,-28
   14c74:	df000615 	stw	fp,24(sp)
   14c78:	df000604 	addi	fp,sp,24
   14c7c:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
   14c80:	0005303a 	rdctl	r2,status
   14c84:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14c88:	e0fffd17 	ldw	r3,-12(fp)
   14c8c:	00bfff84 	movi	r2,-2
   14c90:	1884703a 	and	r2,r3,r2
   14c94:	1001703a 	wrctl	status,r2
  return context;
   14c98:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   14c9c:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   14ca0:	d0a09317 	ldw	r2,-32180(gp)
   14ca4:	10c000c4 	addi	r3,r2,3
   14ca8:	00bfff04 	movi	r2,-4
   14cac:	1884703a 	and	r2,r3,r2
   14cb0:	d0a09315 	stw	r2,-32180(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   14cb4:	d0e09317 	ldw	r3,-32180(gp)
   14cb8:	e0bffa17 	ldw	r2,-24(fp)
   14cbc:	1887883a 	add	r3,r3,r2
   14cc0:	008000b4 	movhi	r2,2
   14cc4:	10a80004 	addi	r2,r2,-24576
   14cc8:	10c0072e 	bgeu	r2,r3,14ce8 <sbrk+0x78>
   14ccc:	e0bfff17 	ldw	r2,-4(fp)
   14cd0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   14cd4:	e0bffc17 	ldw	r2,-16(fp)
   14cd8:	1001703a 	wrctl	status,r2
}
   14cdc:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   14ce0:	00bfffc4 	movi	r2,-1
   14ce4:	00000c06 	br	14d18 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   14ce8:	d0a09317 	ldw	r2,-32180(gp)
   14cec:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
   14cf0:	d0e09317 	ldw	r3,-32180(gp)
   14cf4:	e0bffa17 	ldw	r2,-24(fp)
   14cf8:	1885883a 	add	r2,r3,r2
   14cfc:	d0a09315 	stw	r2,-32180(gp)
   14d00:	e0bfff17 	ldw	r2,-4(fp)
   14d04:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   14d08:	e0bffb17 	ldw	r2,-20(fp)
   14d0c:	1001703a 	wrctl	status,r2
}
   14d10:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   14d14:	e0bffe17 	ldw	r2,-8(fp)
} 
   14d18:	e037883a 	mov	sp,fp
   14d1c:	df000017 	ldw	fp,0(sp)
   14d20:	dec00104 	addi	sp,sp,4
   14d24:	f800283a 	ret

00014d28 <alt_get_errno>:
{
   14d28:	defffe04 	addi	sp,sp,-8
   14d2c:	dfc00115 	stw	ra,4(sp)
   14d30:	df000015 	stw	fp,0(sp)
   14d34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14d38:	d0a09917 	ldw	r2,-32156(gp)
   14d3c:	10000326 	beq	r2,zero,14d4c <alt_get_errno+0x24>
   14d40:	d0a09917 	ldw	r2,-32156(gp)
   14d44:	103ee83a 	callr	r2
   14d48:	00000106 	br	14d50 <alt_get_errno+0x28>
   14d4c:	d0a1f804 	addi	r2,gp,-30752
}
   14d50:	e037883a 	mov	sp,fp
   14d54:	dfc00117 	ldw	ra,4(sp)
   14d58:	df000017 	ldw	fp,0(sp)
   14d5c:	dec00204 	addi	sp,sp,8
   14d60:	f800283a 	ret

00014d64 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   14d64:	defff904 	addi	sp,sp,-28
   14d68:	dfc00615 	stw	ra,24(sp)
   14d6c:	df000515 	stw	fp,20(sp)
   14d70:	df000504 	addi	fp,sp,20
   14d74:	e13ffd15 	stw	r4,-12(fp)
   14d78:	e17ffc15 	stw	r5,-16(fp)
   14d7c:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14d80:	e0bffd17 	ldw	r2,-12(fp)
   14d84:	10000916 	blt	r2,zero,14dac <write+0x48>
   14d88:	e0fffd17 	ldw	r3,-12(fp)
   14d8c:	1805883a 	mov	r2,r3
   14d90:	1085883a 	add	r2,r2,r2
   14d94:	10c5883a 	add	r2,r2,r3
   14d98:	100490ba 	slli	r2,r2,2
   14d9c:	00c00074 	movhi	r3,1
   14da0:	18db9a04 	addi	r3,r3,28264
   14da4:	10c5883a 	add	r2,r2,r3
   14da8:	00000106 	br	14db0 <write+0x4c>
   14dac:	0005883a 	mov	r2,zero
   14db0:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   14db4:	e0bfff17 	ldw	r2,-4(fp)
   14db8:	10002126 	beq	r2,zero,14e40 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   14dbc:	e0bfff17 	ldw	r2,-4(fp)
   14dc0:	10800217 	ldw	r2,8(r2)
   14dc4:	108000cc 	andi	r2,r2,3
   14dc8:	10001826 	beq	r2,zero,14e2c <write+0xc8>
   14dcc:	e0bfff17 	ldw	r2,-4(fp)
   14dd0:	10800017 	ldw	r2,0(r2)
   14dd4:	10800617 	ldw	r2,24(r2)
   14dd8:	10001426 	beq	r2,zero,14e2c <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   14ddc:	e0bfff17 	ldw	r2,-4(fp)
   14de0:	10800017 	ldw	r2,0(r2)
   14de4:	10800617 	ldw	r2,24(r2)
   14de8:	e0fffb17 	ldw	r3,-20(fp)
   14dec:	180d883a 	mov	r6,r3
   14df0:	e17ffc17 	ldw	r5,-16(fp)
   14df4:	e13fff17 	ldw	r4,-4(fp)
   14df8:	103ee83a 	callr	r2
   14dfc:	e0bffe15 	stw	r2,-8(fp)
   14e00:	e0bffe17 	ldw	r2,-8(fp)
   14e04:	1000070e 	bge	r2,zero,14e24 <write+0xc0>
      {
        ALT_ERRNO = -rval;
   14e08:	0014d280 	call	14d28 <alt_get_errno>
   14e0c:	1007883a 	mov	r3,r2
   14e10:	e0bffe17 	ldw	r2,-8(fp)
   14e14:	0085c83a 	sub	r2,zero,r2
   14e18:	18800015 	stw	r2,0(r3)
        return -1;
   14e1c:	00bfffc4 	movi	r2,-1
   14e20:	00000c06 	br	14e54 <write+0xf0>
      }
      return rval;
   14e24:	e0bffe17 	ldw	r2,-8(fp)
   14e28:	00000a06 	br	14e54 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
   14e2c:	0014d280 	call	14d28 <alt_get_errno>
   14e30:	1007883a 	mov	r3,r2
   14e34:	00800344 	movi	r2,13
   14e38:	18800015 	stw	r2,0(r3)
   14e3c:	00000406 	br	14e50 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   14e40:	0014d280 	call	14d28 <alt_get_errno>
   14e44:	1007883a 	mov	r3,r2
   14e48:	00801444 	movi	r2,81
   14e4c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   14e50:	00bfffc4 	movi	r2,-1
}
   14e54:	e037883a 	mov	sp,fp
   14e58:	dfc00117 	ldw	ra,4(sp)
   14e5c:	df000017 	ldw	fp,0(sp)
   14e60:	dec00204 	addi	sp,sp,8
   14e64:	f800283a 	ret

00014e68 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   14e68:	defffd04 	addi	sp,sp,-12
   14e6c:	dfc00215 	stw	ra,8(sp)
   14e70:	df000115 	stw	fp,4(sp)
   14e74:	df000104 	addi	fp,sp,4
   14e78:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   14e7c:	d1609604 	addi	r5,gp,-32168
   14e80:	e13fff17 	ldw	r4,-4(fp)
   14e84:	00156f00 	call	156f0 <alt_dev_llist_insert>
}
   14e88:	e037883a 	mov	sp,fp
   14e8c:	dfc00117 	ldw	ra,4(sp)
   14e90:	df000017 	ldw	fp,0(sp)
   14e94:	dec00204 	addi	sp,sp,8
   14e98:	f800283a 	ret

00014e9c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   14e9c:	defffd04 	addi	sp,sp,-12
   14ea0:	dfc00215 	stw	ra,8(sp)
   14ea4:	df000115 	stw	fp,4(sp)
   14ea8:	df000104 	addi	fp,sp,4
   14eac:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   14eb0:	0015efc0 	call	15efc <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   14eb4:	00800044 	movi	r2,1
   14eb8:	1001703a 	wrctl	status,r2
}
   14ebc:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
   14ec0:	0001883a 	nop
   14ec4:	e037883a 	mov	sp,fp
   14ec8:	dfc00117 	ldw	ra,4(sp)
   14ecc:	df000017 	ldw	fp,0(sp)
   14ed0:	dec00204 	addi	sp,sp,8
   14ed4:	f800283a 	ret

00014ed8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   14ed8:	defffe04 	addi	sp,sp,-8
   14edc:	dfc00115 	stw	ra,4(sp)
   14ee0:	df000015 	stw	fp,0(sp)
   14ee4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
   14ee8:	01c0fa04 	movi	r7,1000
   14eec:	01800044 	movi	r6,1
   14ef0:	000b883a 	mov	r5,zero
   14ef4:	010000b4 	movhi	r4,2
   14ef8:	210a0804 	addi	r4,r4,10272
   14efc:	00151f00 	call	151f0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   14f00:	01000074 	movhi	r4,1
   14f04:	211b7a04 	addi	r4,r4,28136
   14f08:	0014e680 	call	14e68 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
   14f0c:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
   14f10:	01000074 	movhi	r4,1
   14f14:	211b8504 	addi	r4,r4,28180
   14f18:	0014e680 	call	14e68 <alt_dev_reg>
}
   14f1c:	0001883a 	nop
   14f20:	e037883a 	mov	sp,fp
   14f24:	dfc00117 	ldw	ra,4(sp)
   14f28:	df000017 	ldw	fp,0(sp)
   14f2c:	dec00204 	addi	sp,sp,8
   14f30:	f800283a 	ret

00014f34 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   14f34:	defffa04 	addi	sp,sp,-24
   14f38:	dfc00515 	stw	ra,20(sp)
   14f3c:	df000415 	stw	fp,16(sp)
   14f40:	df000404 	addi	fp,sp,16
   14f44:	e13ffe15 	stw	r4,-8(fp)
   14f48:	e17ffd15 	stw	r5,-12(fp)
   14f4c:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14f50:	e0bffe17 	ldw	r2,-8(fp)
   14f54:	10800017 	ldw	r2,0(r2)
   14f58:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   14f5c:	e0bfff17 	ldw	r2,-4(fp)
   14f60:	10c00a04 	addi	r3,r2,40
   14f64:	e0bffe17 	ldw	r2,-8(fp)
   14f68:	10800217 	ldw	r2,8(r2)
   14f6c:	100f883a 	mov	r7,r2
   14f70:	e1bffc17 	ldw	r6,-16(fp)
   14f74:	e17ffd17 	ldw	r5,-12(fp)
   14f78:	1809883a 	mov	r4,r3
   14f7c:	0014ff40 	call	14ff4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   14f80:	e037883a 	mov	sp,fp
   14f84:	dfc00117 	ldw	ra,4(sp)
   14f88:	df000017 	ldw	fp,0(sp)
   14f8c:	dec00204 	addi	sp,sp,8
   14f90:	f800283a 	ret

00014f94 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   14f94:	defffa04 	addi	sp,sp,-24
   14f98:	dfc00515 	stw	ra,20(sp)
   14f9c:	df000415 	stw	fp,16(sp)
   14fa0:	df000404 	addi	fp,sp,16
   14fa4:	e13ffe15 	stw	r4,-8(fp)
   14fa8:	e17ffd15 	stw	r5,-12(fp)
   14fac:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   14fb0:	e0bffe17 	ldw	r2,-8(fp)
   14fb4:	10800017 	ldw	r2,0(r2)
   14fb8:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   14fbc:	e0bfff17 	ldw	r2,-4(fp)
   14fc0:	10c00a04 	addi	r3,r2,40
   14fc4:	e0bffe17 	ldw	r2,-8(fp)
   14fc8:	10800217 	ldw	r2,8(r2)
   14fcc:	100f883a 	mov	r7,r2
   14fd0:	e1bffc17 	ldw	r6,-16(fp)
   14fd4:	e17ffd17 	ldw	r5,-12(fp)
   14fd8:	1809883a 	mov	r4,r3
   14fdc:	00150e00 	call	150e0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   14fe0:	e037883a 	mov	sp,fp
   14fe4:	dfc00117 	ldw	ra,4(sp)
   14fe8:	df000017 	ldw	fp,0(sp)
   14fec:	dec00204 	addi	sp,sp,8
   14ff0:	f800283a 	ret

00014ff4 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   14ff4:	defff704 	addi	sp,sp,-36
   14ff8:	df000815 	stw	fp,32(sp)
   14ffc:	df000804 	addi	fp,sp,32
   15000:	e13ffb15 	stw	r4,-20(fp)
   15004:	e17ffa15 	stw	r5,-24(fp)
   15008:	e1bff915 	stw	r6,-28(fp)
   1500c:	e1fff815 	stw	r7,-32(fp)
  unsigned int base = sp->base;
   15010:	e0bffb17 	ldw	r2,-20(fp)
   15014:	10800017 	ldw	r2,0(r2)
   15018:	e0bffe15 	stw	r2,-8(fp)

  char * ptr = buffer;
   1501c:	e0bffa17 	ldw	r2,-24(fp)
   15020:	e0bfff15 	stw	r2,-4(fp)
  char * end = buffer + space;
   15024:	e0bff917 	ldw	r2,-28(fp)
   15028:	e0fffa17 	ldw	r3,-24(fp)
   1502c:	1885883a 	add	r2,r3,r2
   15030:	e0bffd15 	stw	r2,-12(fp)

  while (ptr < end)
   15034:	00001206 	br	15080 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   15038:	e0bffe17 	ldw	r2,-8(fp)
   1503c:	10800037 	ldwio	r2,0(r2)
   15040:	e0bffc15 	stw	r2,-16(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   15044:	e0bffc17 	ldw	r2,-16(fp)
   15048:	10a0000c 	andi	r2,r2,32768
   1504c:	10000626 	beq	r2,zero,15068 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   15050:	e0bfff17 	ldw	r2,-4(fp)
   15054:	10c00044 	addi	r3,r2,1
   15058:	e0ffff15 	stw	r3,-4(fp)
   1505c:	e0fffc17 	ldw	r3,-16(fp)
   15060:	10c00005 	stb	r3,0(r2)
   15064:	00000606 	br	15080 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   15068:	e0ffff17 	ldw	r3,-4(fp)
   1506c:	e0bffa17 	ldw	r2,-24(fp)
   15070:	1880071e 	bne	r3,r2,15090 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   15074:	e0bff817 	ldw	r2,-32(fp)
   15078:	1090000c 	andi	r2,r2,16384
   1507c:	1000061e 	bne	r2,zero,15098 <altera_avalon_jtag_uart_read+0xa4>
  while (ptr < end)
   15080:	e0ffff17 	ldw	r3,-4(fp)
   15084:	e0bffd17 	ldw	r2,-12(fp)
   15088:	18bfeb36 	bltu	r3,r2,15038 <altera_avalon_jtag_uart_read+0x44>
   1508c:	00000306 	br	1509c <altera_avalon_jtag_uart_read+0xa8>
      break;
   15090:	0001883a 	nop
   15094:	00000106 	br	1509c <altera_avalon_jtag_uart_read+0xa8>
      break;   
   15098:	0001883a 	nop
    
  }

  if (ptr != buffer)
   1509c:	e0ffff17 	ldw	r3,-4(fp)
   150a0:	e0bffa17 	ldw	r2,-24(fp)
   150a4:	18800426 	beq	r3,r2,150b8 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   150a8:	e0ffff17 	ldw	r3,-4(fp)
   150ac:	e0bffa17 	ldw	r2,-24(fp)
   150b0:	1885c83a 	sub	r2,r3,r2
   150b4:	00000606 	br	150d0 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   150b8:	e0bff817 	ldw	r2,-32(fp)
   150bc:	1090000c 	andi	r2,r2,16384
   150c0:	10000226 	beq	r2,zero,150cc <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   150c4:	00bffd44 	movi	r2,-11
   150c8:	00000106 	br	150d0 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   150cc:	00bffec4 	movi	r2,-5
}
   150d0:	e037883a 	mov	sp,fp
   150d4:	df000017 	ldw	fp,0(sp)
   150d8:	dec00104 	addi	sp,sp,4
   150dc:	f800283a 	ret

000150e0 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   150e0:	defff904 	addi	sp,sp,-28
   150e4:	df000615 	stw	fp,24(sp)
   150e8:	df000604 	addi	fp,sp,24
   150ec:	e13ffd15 	stw	r4,-12(fp)
   150f0:	e17ffc15 	stw	r5,-16(fp)
   150f4:	e1bffb15 	stw	r6,-20(fp)
   150f8:	e1fffa15 	stw	r7,-24(fp)
  unsigned int base = sp->base;
   150fc:	e0bffd17 	ldw	r2,-12(fp)
   15100:	10800017 	ldw	r2,0(r2)
   15104:	e0bfff15 	stw	r2,-4(fp)

  const char * end = ptr + count;
   15108:	e0bffb17 	ldw	r2,-20(fp)
   1510c:	e0fffc17 	ldw	r3,-16(fp)
   15110:	1885883a 	add	r2,r3,r2
   15114:	e0bffe15 	stw	r2,-8(fp)

  while (ptr < end)
   15118:	00000e06 	br	15154 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   1511c:	e0bfff17 	ldw	r2,-4(fp)
   15120:	10800104 	addi	r2,r2,4
   15124:	10800037 	ldwio	r2,0(r2)
   15128:	10bfffec 	andhi	r2,r2,65535
   1512c:	10000926 	beq	r2,zero,15154 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   15130:	e0ffff17 	ldw	r3,-4(fp)
   15134:	e0bffc17 	ldw	r2,-16(fp)
   15138:	11000044 	addi	r4,r2,1
   1513c:	e13ffc15 	stw	r4,-16(fp)
   15140:	10800003 	ldbu	r2,0(r2)
   15144:	10803fcc 	andi	r2,r2,255
   15148:	1080201c 	xori	r2,r2,128
   1514c:	10bfe004 	addi	r2,r2,-128
   15150:	18800035 	stwio	r2,0(r3)
  while (ptr < end)
   15154:	e0fffc17 	ldw	r3,-16(fp)
   15158:	e0bffe17 	ldw	r2,-8(fp)
   1515c:	18bfef36 	bltu	r3,r2,1511c <altera_avalon_jtag_uart_write+0x3c>

  return count;
   15160:	e0bffb17 	ldw	r2,-20(fp)
}
   15164:	e037883a 	mov	sp,fp
   15168:	df000017 	ldw	fp,0(sp)
   1516c:	dec00104 	addi	sp,sp,4
   15170:	f800283a 	ret

00015174 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   15174:	defffa04 	addi	sp,sp,-24
   15178:	dfc00515 	stw	ra,20(sp)
   1517c:	df000415 	stw	fp,16(sp)
   15180:	df000404 	addi	fp,sp,16
   15184:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   15188:	0007883a 	mov	r3,zero
   1518c:	e0bffc17 	ldw	r2,-16(fp)
   15190:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   15194:	e0bffc17 	ldw	r2,-16(fp)
   15198:	10800104 	addi	r2,r2,4
   1519c:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
   151a0:	0005303a 	rdctl	r2,status
   151a4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   151a8:	e0fffd17 	ldw	r3,-12(fp)
   151ac:	00bfff84 	movi	r2,-2
   151b0:	1884703a 	and	r2,r3,r2
   151b4:	1001703a 	wrctl	status,r2
  return context;
   151b8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   151bc:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
   151c0:	0015df40 	call	15df4 <alt_tick>
   151c4:	e0bfff17 	ldw	r2,-4(fp)
   151c8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   151cc:	e0bffe17 	ldw	r2,-8(fp)
   151d0:	1001703a 	wrctl	status,r2
}
   151d4:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
   151d8:	0001883a 	nop
   151dc:	e037883a 	mov	sp,fp
   151e0:	dfc00117 	ldw	ra,4(sp)
   151e4:	df000017 	ldw	fp,0(sp)
   151e8:	dec00204 	addi	sp,sp,8
   151ec:	f800283a 	ret

000151f0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   151f0:	defff804 	addi	sp,sp,-32
   151f4:	dfc00715 	stw	ra,28(sp)
   151f8:	df000615 	stw	fp,24(sp)
   151fc:	df000604 	addi	fp,sp,24
   15200:	e13ffe15 	stw	r4,-8(fp)
   15204:	e17ffd15 	stw	r5,-12(fp)
   15208:	e1bffc15 	stw	r6,-16(fp)
   1520c:	e1fffb15 	stw	r7,-20(fp)
   15210:	e0bffb17 	ldw	r2,-20(fp)
   15214:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   15218:	d0a1fe17 	ldw	r2,-30728(gp)
   1521c:	1000031e 	bne	r2,zero,1522c <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
   15220:	e0bfff17 	ldw	r2,-4(fp)
   15224:	d0a1fe15 	stw	r2,-30728(gp)
    return 0;
   15228:	00000106 	br	15230 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
   1522c:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   15230:	e0bffe17 	ldw	r2,-8(fp)
   15234:	10800104 	addi	r2,r2,4
   15238:	00c001c4 	movi	r3,7
   1523c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   15240:	d8000015 	stw	zero,0(sp)
   15244:	e1fffe17 	ldw	r7,-8(fp)
   15248:	01800074 	movhi	r6,1
   1524c:	31945d04 	addi	r6,r6,20852
   15250:	e17ffc17 	ldw	r5,-16(fp)
   15254:	e13ffd17 	ldw	r4,-12(fp)
   15258:	00146c00 	call	146c0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   1525c:	0001883a 	nop
   15260:	e037883a 	mov	sp,fp
   15264:	dfc00117 	ldw	ra,4(sp)
   15268:	df000017 	ldw	fp,0(sp)
   1526c:	dec00204 	addi	sp,sp,8
   15270:	f800283a 	ret

00015274 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   15274:	defffa04 	addi	sp,sp,-24
   15278:	dfc00515 	stw	ra,20(sp)
   1527c:	df000415 	stw	fp,16(sp)
   15280:	df000404 	addi	fp,sp,16
   15284:	e13ffe15 	stw	r4,-8(fp)
   15288:	e17ffd15 	stw	r5,-12(fp)
   1528c:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   15290:	e0bffe17 	ldw	r2,-8(fp)
   15294:	10800017 	ldw	r2,0(r2)
   15298:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   1529c:	e0bfff17 	ldw	r2,-4(fp)
   152a0:	10c00a04 	addi	r3,r2,40
   152a4:	e0bffe17 	ldw	r2,-8(fp)
   152a8:	10800217 	ldw	r2,8(r2)
   152ac:	100f883a 	mov	r7,r2
   152b0:	e1bffc17 	ldw	r6,-16(fp)
   152b4:	e17ffd17 	ldw	r5,-12(fp)
   152b8:	1809883a 	mov	r4,r3
   152bc:	00153700 	call	15370 <altera_avalon_uart_read>
      fd->fd_flags);
}
   152c0:	e037883a 	mov	sp,fp
   152c4:	dfc00117 	ldw	ra,4(sp)
   152c8:	df000017 	ldw	fp,0(sp)
   152cc:	dec00204 	addi	sp,sp,8
   152d0:	f800283a 	ret

000152d4 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   152d4:	defffa04 	addi	sp,sp,-24
   152d8:	dfc00515 	stw	ra,20(sp)
   152dc:	df000415 	stw	fp,16(sp)
   152e0:	df000404 	addi	fp,sp,16
   152e4:	e13ffe15 	stw	r4,-8(fp)
   152e8:	e17ffd15 	stw	r5,-12(fp)
   152ec:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   152f0:	e0bffe17 	ldw	r2,-8(fp)
   152f4:	10800017 	ldw	r2,0(r2)
   152f8:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   152fc:	e0bfff17 	ldw	r2,-4(fp)
   15300:	10c00a04 	addi	r3,r2,40
   15304:	e0bffe17 	ldw	r2,-8(fp)
   15308:	10800217 	ldw	r2,8(r2)
   1530c:	100f883a 	mov	r7,r2
   15310:	e1bffc17 	ldw	r6,-16(fp)
   15314:	e17ffd17 	ldw	r5,-12(fp)
   15318:	1809883a 	mov	r4,r3
   1531c:	00154700 	call	15470 <altera_avalon_uart_write>
      fd->fd_flags);
}
   15320:	e037883a 	mov	sp,fp
   15324:	dfc00117 	ldw	ra,4(sp)
   15328:	df000017 	ldw	fp,0(sp)
   1532c:	dec00204 	addi	sp,sp,8
   15330:	f800283a 	ret

00015334 <alt_get_errno>:
{
   15334:	defffe04 	addi	sp,sp,-8
   15338:	dfc00115 	stw	ra,4(sp)
   1533c:	df000015 	stw	fp,0(sp)
   15340:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15344:	d0a09917 	ldw	r2,-32156(gp)
   15348:	10000326 	beq	r2,zero,15358 <alt_get_errno+0x24>
   1534c:	d0a09917 	ldw	r2,-32156(gp)
   15350:	103ee83a 	callr	r2
   15354:	00000106 	br	1535c <alt_get_errno+0x28>
   15358:	d0a1f804 	addi	r2,gp,-30752
}
   1535c:	e037883a 	mov	sp,fp
   15360:	dfc00117 	ldw	ra,4(sp)
   15364:	df000017 	ldw	fp,0(sp)
   15368:	dec00204 	addi	sp,sp,8
   1536c:	f800283a 	ret

00015370 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   15370:	defff804 	addi	sp,sp,-32
   15374:	dfc00715 	stw	ra,28(sp)
   15378:	df000615 	stw	fp,24(sp)
   1537c:	df000604 	addi	fp,sp,24
   15380:	e13ffd15 	stw	r4,-12(fp)
   15384:	e17ffc15 	stw	r5,-16(fp)
   15388:	e1bffb15 	stw	r6,-20(fp)
   1538c:	e1fffa15 	stw	r7,-24(fp)
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
   15390:	e0bffa17 	ldw	r2,-24(fp)
   15394:	1090000c 	andi	r2,r2,16384
   15398:	1005003a 	cmpeq	r2,r2,zero
   1539c:	10803fcc 	andi	r2,r2,255
   153a0:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   153a4:	e0bffd17 	ldw	r2,-12(fp)
   153a8:	10800017 	ldw	r2,0(r2)
   153ac:	10800204 	addi	r2,r2,8
   153b0:	10800037 	ldwio	r2,0(r2)
   153b4:	e0bffe15 	stw	r2,-8(fp)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
   153b8:	e0bffd17 	ldw	r2,-12(fp)
   153bc:	10800017 	ldw	r2,0(r2)
   153c0:	10800204 	addi	r2,r2,8
   153c4:	0007883a 	mov	r3,zero
   153c8:	10c00035 	stwio	r3,0(r2)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
   153cc:	e0bffe17 	ldw	r2,-8(fp)
   153d0:	1080200c 	andi	r2,r2,128
   153d4:	10000b26 	beq	r2,zero,15404 <altera_avalon_uart_read+0x94>
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   153d8:	e0bffd17 	ldw	r2,-12(fp)
   153dc:	10800017 	ldw	r2,0(r2)
   153e0:	10800037 	ldwio	r2,0(r2)
   153e4:	1007883a 	mov	r3,r2
   153e8:	e0bffc17 	ldw	r2,-16(fp)
   153ec:	10c00005 	stb	r3,0(r2)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   153f0:	e0bffe17 	ldw	r2,-8(fp)
   153f4:	108000cc 	andi	r2,r2,3
   153f8:	1000021e 	bne	r2,zero,15404 <altera_avalon_uart_read+0x94>
      ALTERA_AVALON_UART_STATUS_FE_MSK)))
      {
        return 1;
   153fc:	00800044 	movi	r2,1
   15400:	00000706 	br	15420 <altera_avalon_uart_read+0xb0>
      }
    }
  }
  while (block);
   15404:	e0bfff17 	ldw	r2,-4(fp)
   15408:	103fe61e 	bne	r2,zero,153a4 <altera_avalon_uart_read+0x34>

  ALT_ERRNO = EWOULDBLOCK;
   1540c:	00153340 	call	15334 <alt_get_errno>
   15410:	1007883a 	mov	r3,r2
   15414:	008002c4 	movi	r2,11
   15418:	18800015 	stw	r2,0(r3)
 
  return 0;
   1541c:	0005883a 	mov	r2,zero
}
   15420:	e037883a 	mov	sp,fp
   15424:	dfc00117 	ldw	ra,4(sp)
   15428:	df000017 	ldw	fp,0(sp)
   1542c:	dec00204 	addi	sp,sp,8
   15430:	f800283a 	ret

00015434 <alt_get_errno>:
{
   15434:	defffe04 	addi	sp,sp,-8
   15438:	dfc00115 	stw	ra,4(sp)
   1543c:	df000015 	stw	fp,0(sp)
   15440:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15444:	d0a09917 	ldw	r2,-32156(gp)
   15448:	10000326 	beq	r2,zero,15458 <alt_get_errno+0x24>
   1544c:	d0a09917 	ldw	r2,-32156(gp)
   15450:	103ee83a 	callr	r2
   15454:	00000106 	br	1545c <alt_get_errno+0x28>
   15458:	d0a1f804 	addi	r2,gp,-30752
}
   1545c:	e037883a 	mov	sp,fp
   15460:	dfc00117 	ldw	ra,4(sp)
   15464:	df000017 	ldw	fp,0(sp)
   15468:	dec00204 	addi	sp,sp,8
   1546c:	f800283a 	ret

00015470 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   15470:	defff704 	addi	sp,sp,-36
   15474:	dfc00815 	stw	ra,32(sp)
   15478:	df000715 	stw	fp,28(sp)
   1547c:	df000704 	addi	fp,sp,28
   15480:	e13ffc15 	stw	r4,-16(fp)
   15484:	e17ffb15 	stw	r5,-20(fp)
   15488:	e1bffa15 	stw	r6,-24(fp)
   1548c:	e1fff915 	stw	r7,-28(fp)
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
   15490:	e0bff917 	ldw	r2,-28(fp)
   15494:	1090000c 	andi	r2,r2,16384
   15498:	1005003a 	cmpeq	r2,r2,zero
   1549c:	10803fcc 	andi	r2,r2,255
   154a0:	e0bffe15 	stw	r2,-8(fp)
  count = len;
   154a4:	e0bffa17 	ldw	r2,-24(fp)
   154a8:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   154ac:	e0bffc17 	ldw	r2,-16(fp)
   154b0:	10800017 	ldw	r2,0(r2)
   154b4:	10800204 	addi	r2,r2,8
   154b8:	10800037 	ldwio	r2,0(r2)
   154bc:	e0bffd15 	stw	r2,-12(fp)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
   154c0:	e0bffd17 	ldw	r2,-12(fp)
   154c4:	1080100c 	andi	r2,r2,64
   154c8:	10000f26 	beq	r2,zero,15508 <altera_avalon_uart_write+0x98>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
   154cc:	e0bffc17 	ldw	r2,-16(fp)
   154d0:	10800017 	ldw	r2,0(r2)
   154d4:	10800104 	addi	r2,r2,4
   154d8:	1009883a 	mov	r4,r2
   154dc:	e0bffb17 	ldw	r2,-20(fp)
   154e0:	10c00044 	addi	r3,r2,1
   154e4:	e0fffb15 	stw	r3,-20(fp)
   154e8:	10800003 	ldbu	r2,0(r2)
   154ec:	10803fcc 	andi	r2,r2,255
   154f0:	1080201c 	xori	r2,r2,128
   154f4:	10bfe004 	addi	r2,r2,-128
   154f8:	20800035 	stwio	r2,0(r4)
      count--;
   154fc:	e0bfff17 	ldw	r2,-4(fp)
   15500:	10bfffc4 	addi	r2,r2,-1
   15504:	e0bfff15 	stw	r2,-4(fp)
    }
  }
  while (block && count);
   15508:	e0bffe17 	ldw	r2,-8(fp)
   1550c:	10000226 	beq	r2,zero,15518 <altera_avalon_uart_write+0xa8>
   15510:	e0bfff17 	ldw	r2,-4(fp)
   15514:	103fe51e 	bne	r2,zero,154ac <altera_avalon_uart_write+0x3c>

  if (count)
   15518:	e0bfff17 	ldw	r2,-4(fp)
   1551c:	10000426 	beq	r2,zero,15530 <altera_avalon_uart_write+0xc0>
  {
    ALT_ERRNO = EWOULDBLOCK;
   15520:	00154340 	call	15434 <alt_get_errno>
   15524:	1007883a 	mov	r3,r2
   15528:	008002c4 	movi	r2,11
   1552c:	18800015 	stw	r2,0(r3)
  }

  return (len - count);
   15530:	e0fffa17 	ldw	r3,-24(fp)
   15534:	e0bfff17 	ldw	r2,-4(fp)
   15538:	1885c83a 	sub	r2,r3,r2
}
   1553c:	e037883a 	mov	sp,fp
   15540:	dfc00117 	ldw	ra,4(sp)
   15544:	df000017 	ldw	fp,0(sp)
   15548:	dec00204 	addi	sp,sp,8
   1554c:	f800283a 	ret

00015550 <alt_get_errno>:
{
   15550:	defffe04 	addi	sp,sp,-8
   15554:	dfc00115 	stw	ra,4(sp)
   15558:	df000015 	stw	fp,0(sp)
   1555c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15560:	d0a09917 	ldw	r2,-32156(gp)
   15564:	10000326 	beq	r2,zero,15574 <alt_get_errno+0x24>
   15568:	d0a09917 	ldw	r2,-32156(gp)
   1556c:	103ee83a 	callr	r2
   15570:	00000106 	br	15578 <alt_get_errno+0x28>
   15574:	d0a1f804 	addi	r2,gp,-30752
}
   15578:	e037883a 	mov	sp,fp
   1557c:	dfc00117 	ldw	ra,4(sp)
   15580:	df000017 	ldw	fp,0(sp)
   15584:	dec00204 	addi	sp,sp,8
   15588:	f800283a 	ret

0001558c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1558c:	defffb04 	addi	sp,sp,-20
   15590:	dfc00415 	stw	ra,16(sp)
   15594:	df000315 	stw	fp,12(sp)
   15598:	df000304 	addi	fp,sp,12
   1559c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   155a0:	e0bffd17 	ldw	r2,-12(fp)
   155a4:	10000916 	blt	r2,zero,155cc <close+0x40>
   155a8:	e0fffd17 	ldw	r3,-12(fp)
   155ac:	1805883a 	mov	r2,r3
   155b0:	1085883a 	add	r2,r2,r2
   155b4:	10c5883a 	add	r2,r2,r3
   155b8:	100490ba 	slli	r2,r2,2
   155bc:	00c00074 	movhi	r3,1
   155c0:	18db9a04 	addi	r3,r3,28264
   155c4:	10c5883a 	add	r2,r2,r3
   155c8:	00000106 	br	155d0 <close+0x44>
   155cc:	0005883a 	mov	r2,zero
   155d0:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
   155d4:	e0bfff17 	ldw	r2,-4(fp)
   155d8:	10001926 	beq	r2,zero,15640 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   155dc:	e0bfff17 	ldw	r2,-4(fp)
   155e0:	10800017 	ldw	r2,0(r2)
   155e4:	10800417 	ldw	r2,16(r2)
   155e8:	10000626 	beq	r2,zero,15604 <close+0x78>
   155ec:	e0bfff17 	ldw	r2,-4(fp)
   155f0:	10800017 	ldw	r2,0(r2)
   155f4:	10800417 	ldw	r2,16(r2)
   155f8:	e13fff17 	ldw	r4,-4(fp)
   155fc:	103ee83a 	callr	r2
   15600:	00000106 	br	15608 <close+0x7c>
   15604:	0005883a 	mov	r2,zero
   15608:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   1560c:	e13ffd17 	ldw	r4,-12(fp)
   15610:	0015ce00 	call	15ce0 <alt_release_fd>
    if (rval < 0)
   15614:	e0bffe17 	ldw	r2,-8(fp)
   15618:	1000070e 	bge	r2,zero,15638 <close+0xac>
    {
      ALT_ERRNO = -rval;
   1561c:	00155500 	call	15550 <alt_get_errno>
   15620:	1007883a 	mov	r3,r2
   15624:	e0bffe17 	ldw	r2,-8(fp)
   15628:	0085c83a 	sub	r2,zero,r2
   1562c:	18800015 	stw	r2,0(r3)
      return -1;
   15630:	00bfffc4 	movi	r2,-1
   15634:	00000706 	br	15654 <close+0xc8>
    }
    return 0;
   15638:	0005883a 	mov	r2,zero
   1563c:	00000506 	br	15654 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   15640:	00155500 	call	15550 <alt_get_errno>
   15644:	1007883a 	mov	r3,r2
   15648:	00801444 	movi	r2,81
   1564c:	18800015 	stw	r2,0(r3)
    return -1;
   15650:	00bfffc4 	movi	r2,-1
  }
}
   15654:	e037883a 	mov	sp,fp
   15658:	dfc00117 	ldw	ra,4(sp)
   1565c:	df000017 	ldw	fp,0(sp)
   15660:	dec00204 	addi	sp,sp,8
   15664:	f800283a 	ret

00015668 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   15668:	deffff04 	addi	sp,sp,-4
   1566c:	df000015 	stw	fp,0(sp)
   15670:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   15674:	0001883a 	nop
   15678:	e037883a 	mov	sp,fp
   1567c:	df000017 	ldw	fp,0(sp)
   15680:	dec00104 	addi	sp,sp,4
   15684:	f800283a 	ret

00015688 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   15688:	defffc04 	addi	sp,sp,-16
   1568c:	df000315 	stw	fp,12(sp)
   15690:	df000304 	addi	fp,sp,12
   15694:	e13fff15 	stw	r4,-4(fp)
   15698:	e17ffe15 	stw	r5,-8(fp)
   1569c:	e1bffd15 	stw	r6,-12(fp)
  return len;
   156a0:	e0bffd17 	ldw	r2,-12(fp)
}
   156a4:	e037883a 	mov	sp,fp
   156a8:	df000017 	ldw	fp,0(sp)
   156ac:	dec00104 	addi	sp,sp,4
   156b0:	f800283a 	ret

000156b4 <alt_get_errno>:
{
   156b4:	defffe04 	addi	sp,sp,-8
   156b8:	dfc00115 	stw	ra,4(sp)
   156bc:	df000015 	stw	fp,0(sp)
   156c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   156c4:	d0a09917 	ldw	r2,-32156(gp)
   156c8:	10000326 	beq	r2,zero,156d8 <alt_get_errno+0x24>
   156cc:	d0a09917 	ldw	r2,-32156(gp)
   156d0:	103ee83a 	callr	r2
   156d4:	00000106 	br	156dc <alt_get_errno+0x28>
   156d8:	d0a1f804 	addi	r2,gp,-30752
}
   156dc:	e037883a 	mov	sp,fp
   156e0:	dfc00117 	ldw	ra,4(sp)
   156e4:	df000017 	ldw	fp,0(sp)
   156e8:	dec00204 	addi	sp,sp,8
   156ec:	f800283a 	ret

000156f0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   156f0:	defffa04 	addi	sp,sp,-24
   156f4:	dfc00515 	stw	ra,20(sp)
   156f8:	df000415 	stw	fp,16(sp)
   156fc:	df000404 	addi	fp,sp,16
   15700:	e13ffd15 	stw	r4,-12(fp)
   15704:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   15708:	e0bffd17 	ldw	r2,-12(fp)
   1570c:	10000326 	beq	r2,zero,1571c <alt_dev_llist_insert+0x2c>
   15710:	e0bffd17 	ldw	r2,-12(fp)
   15714:	10800217 	ldw	r2,8(r2)
   15718:	1000061e 	bne	r2,zero,15734 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1571c:	00156b40 	call	156b4 <alt_get_errno>
   15720:	1007883a 	mov	r3,r2
   15724:	00800584 	movi	r2,22
   15728:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1572c:	00bffa84 	movi	r2,-22
   15730:	00001406 	br	15784 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   15734:	e0bffd17 	ldw	r2,-12(fp)
   15738:	e0fffc17 	ldw	r3,-16(fp)
   1573c:	e0ffff15 	stw	r3,-4(fp)
   15740:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   15744:	e0bffe17 	ldw	r2,-8(fp)
   15748:	e0ffff17 	ldw	r3,-4(fp)
   1574c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   15750:	e0bfff17 	ldw	r2,-4(fp)
   15754:	10c00017 	ldw	r3,0(r2)
   15758:	e0bffe17 	ldw	r2,-8(fp)
   1575c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   15760:	e0bfff17 	ldw	r2,-4(fp)
   15764:	10800017 	ldw	r2,0(r2)
   15768:	e0fffe17 	ldw	r3,-8(fp)
   1576c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   15770:	e0bfff17 	ldw	r2,-4(fp)
   15774:	e0fffe17 	ldw	r3,-8(fp)
   15778:	10c00015 	stw	r3,0(r2)
}
   1577c:	0001883a 	nop

  return 0;  
   15780:	0005883a 	mov	r2,zero
}
   15784:	e037883a 	mov	sp,fp
   15788:	dfc00117 	ldw	ra,4(sp)
   1578c:	df000017 	ldw	fp,0(sp)
   15790:	dec00204 	addi	sp,sp,8
   15794:	f800283a 	ret

00015798 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   15798:	defffd04 	addi	sp,sp,-12
   1579c:	dfc00215 	stw	ra,8(sp)
   157a0:	df000115 	stw	fp,4(sp)
   157a4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   157a8:	00800074 	movhi	r2,1
   157ac:	10991c04 	addi	r2,r2,25712
   157b0:	e0bfff15 	stw	r2,-4(fp)
   157b4:	00000606 	br	157d0 <_do_ctors+0x38>
        (*ctor) (); 
   157b8:	e0bfff17 	ldw	r2,-4(fp)
   157bc:	10800017 	ldw	r2,0(r2)
   157c0:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   157c4:	e0bfff17 	ldw	r2,-4(fp)
   157c8:	10bfff04 	addi	r2,r2,-4
   157cc:	e0bfff15 	stw	r2,-4(fp)
   157d0:	e0ffff17 	ldw	r3,-4(fp)
   157d4:	00800074 	movhi	r2,1
   157d8:	10991a44 	addi	r2,r2,25705
   157dc:	18bff62e 	bgeu	r3,r2,157b8 <_do_ctors+0x20>
}
   157e0:	0001883a 	nop
   157e4:	0001883a 	nop
   157e8:	e037883a 	mov	sp,fp
   157ec:	dfc00117 	ldw	ra,4(sp)
   157f0:	df000017 	ldw	fp,0(sp)
   157f4:	dec00204 	addi	sp,sp,8
   157f8:	f800283a 	ret

000157fc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   157fc:	defffd04 	addi	sp,sp,-12
   15800:	dfc00215 	stw	ra,8(sp)
   15804:	df000115 	stw	fp,4(sp)
   15808:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1580c:	00800074 	movhi	r2,1
   15810:	10991d04 	addi	r2,r2,25716
   15814:	e0bfff15 	stw	r2,-4(fp)
   15818:	00000606 	br	15834 <_do_dtors+0x38>
        (*dtor) (); 
   1581c:	e0bfff17 	ldw	r2,-4(fp)
   15820:	10800017 	ldw	r2,0(r2)
   15824:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   15828:	e0bfff17 	ldw	r2,-4(fp)
   1582c:	10bfff04 	addi	r2,r2,-4
   15830:	e0bfff15 	stw	r2,-4(fp)
   15834:	e0ffff17 	ldw	r3,-4(fp)
   15838:	00800074 	movhi	r2,1
   1583c:	10991d04 	addi	r2,r2,25716
   15840:	18bff62e 	bgeu	r3,r2,1581c <_do_dtors+0x20>
}
   15844:	0001883a 	nop
   15848:	0001883a 	nop
   1584c:	e037883a 	mov	sp,fp
   15850:	dfc00117 	ldw	ra,4(sp)
   15854:	df000017 	ldw	fp,0(sp)
   15858:	dec00204 	addi	sp,sp,8
   1585c:	f800283a 	ret

00015860 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   15860:	deffff04 	addi	sp,sp,-4
   15864:	df000015 	stw	fp,0(sp)
   15868:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   1586c:	0001883a 	nop
   15870:	e037883a 	mov	sp,fp
   15874:	df000017 	ldw	fp,0(sp)
   15878:	dec00104 	addi	sp,sp,4
   1587c:	f800283a 	ret

00015880 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   15880:	defffe04 	addi	sp,sp,-8
   15884:	df000115 	stw	fp,4(sp)
   15888:	df000104 	addi	fp,sp,4
   1588c:	e13fff15 	stw	r4,-4(fp)
   15890:	e0bfff17 	ldw	r2,-4(fp)
   15894:	10bffe84 	addi	r2,r2,-6
   15898:	10c00428 	cmpgeui	r3,r2,16
   1589c:	1800191e 	bne	r3,zero,15904 <alt_exception_cause_generated_bad_addr+0x84>
   158a0:	100690ba 	slli	r3,r2,2
   158a4:	00800074 	movhi	r2,1
   158a8:	1885883a 	add	r2,r3,r2
   158ac:	10962d17 	ldw	r2,22708(r2)
   158b0:	1000683a 	jmp	r2
   158b4:	000158f4 	movhi	zero,1379
   158b8:	000158f4 	movhi	zero,1379
   158bc:	00015904 	movi	zero,1380
   158c0:	00015904 	movi	zero,1380
   158c4:	00015904 	movi	zero,1380
   158c8:	000158f4 	movhi	zero,1379
   158cc:	000158fc 	xorhi	zero,zero,1379
   158d0:	00015904 	movi	zero,1380
   158d4:	000158f4 	movhi	zero,1379
   158d8:	000158f4 	movhi	zero,1379
   158dc:	00015904 	movi	zero,1380
   158e0:	000158f4 	movhi	zero,1379
   158e4:	000158fc 	xorhi	zero,zero,1379
   158e8:	00015904 	movi	zero,1380
   158ec:	00015904 	movi	zero,1380
   158f0:	000158f4 	movhi	zero,1379
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   158f4:	00800044 	movi	r2,1
   158f8:	00000306 	br	15908 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   158fc:	0005883a 	mov	r2,zero
   15900:	00000106 	br	15908 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
   15904:	0005883a 	mov	r2,zero
  }
}
   15908:	e037883a 	mov	sp,fp
   1590c:	df000017 	ldw	fp,0(sp)
   15910:	dec00104 	addi	sp,sp,4
   15914:	f800283a 	ret

00015918 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   15918:	defff904 	addi	sp,sp,-28
   1591c:	dfc00615 	stw	ra,24(sp)
   15920:	df000515 	stw	fp,20(sp)
   15924:	df000504 	addi	fp,sp,20
   15928:	e13ffe15 	stw	r4,-8(fp)
   1592c:	e17ffd15 	stw	r5,-12(fp)
   15930:	e1bffc15 	stw	r6,-16(fp)
   15934:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   15938:	e1bffb17 	ldw	r6,-20(fp)
   1593c:	e17ffc17 	ldw	r5,-16(fp)
   15940:	e13ffd17 	ldw	r4,-12(fp)
   15944:	0015b800 	call	15b80 <open>
   15948:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   1594c:	e0bfff17 	ldw	r2,-4(fp)
   15950:	10002016 	blt	r2,zero,159d4 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
   15954:	e0ffff17 	ldw	r3,-4(fp)
   15958:	1805883a 	mov	r2,r3
   1595c:	1085883a 	add	r2,r2,r2
   15960:	10c5883a 	add	r2,r2,r3
   15964:	100490ba 	slli	r2,r2,2
   15968:	00c00074 	movhi	r3,1
   1596c:	10c7883a 	add	r3,r2,r3
   15970:	18db9a17 	ldw	r3,28264(r3)
   15974:	e0bffe17 	ldw	r2,-8(fp)
   15978:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1597c:	e0ffff17 	ldw	r3,-4(fp)
   15980:	1805883a 	mov	r2,r3
   15984:	1085883a 	add	r2,r2,r2
   15988:	10c5883a 	add	r2,r2,r3
   1598c:	100490ba 	slli	r2,r2,2
   15990:	00c00074 	movhi	r3,1
   15994:	10c7883a 	add	r3,r2,r3
   15998:	18db9b17 	ldw	r3,28268(r3)
   1599c:	e0bffe17 	ldw	r2,-8(fp)
   159a0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   159a4:	e0ffff17 	ldw	r3,-4(fp)
   159a8:	1805883a 	mov	r2,r3
   159ac:	1085883a 	add	r2,r2,r2
   159b0:	10c5883a 	add	r2,r2,r3
   159b4:	100490ba 	slli	r2,r2,2
   159b8:	00c00074 	movhi	r3,1
   159bc:	10c7883a 	add	r3,r2,r3
   159c0:	18db9c17 	ldw	r3,28272(r3)
   159c4:	e0bffe17 	ldw	r2,-8(fp)
   159c8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   159cc:	e13fff17 	ldw	r4,-4(fp)
   159d0:	0015ce00 	call	15ce0 <alt_release_fd>
  }
} 
   159d4:	0001883a 	nop
   159d8:	e037883a 	mov	sp,fp
   159dc:	dfc00117 	ldw	ra,4(sp)
   159e0:	df000017 	ldw	fp,0(sp)
   159e4:	dec00204 	addi	sp,sp,8
   159e8:	f800283a 	ret

000159ec <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   159ec:	defffb04 	addi	sp,sp,-20
   159f0:	dfc00415 	stw	ra,16(sp)
   159f4:	df000315 	stw	fp,12(sp)
   159f8:	df000304 	addi	fp,sp,12
   159fc:	e13fff15 	stw	r4,-4(fp)
   15a00:	e17ffe15 	stw	r5,-8(fp)
   15a04:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   15a08:	01c07fc4 	movi	r7,511
   15a0c:	01800044 	movi	r6,1
   15a10:	e17fff17 	ldw	r5,-4(fp)
   15a14:	01000074 	movhi	r4,1
   15a18:	211b9d04 	addi	r4,r4,28276
   15a1c:	00159180 	call	15918 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   15a20:	01c07fc4 	movi	r7,511
   15a24:	000d883a 	mov	r6,zero
   15a28:	e17ffe17 	ldw	r5,-8(fp)
   15a2c:	01000074 	movhi	r4,1
   15a30:	211b9a04 	addi	r4,r4,28264
   15a34:	00159180 	call	15918 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   15a38:	01c07fc4 	movi	r7,511
   15a3c:	01800044 	movi	r6,1
   15a40:	e17ffd17 	ldw	r5,-12(fp)
   15a44:	01000074 	movhi	r4,1
   15a48:	211ba004 	addi	r4,r4,28288
   15a4c:	00159180 	call	15918 <alt_open_fd>
}  
   15a50:	0001883a 	nop
   15a54:	e037883a 	mov	sp,fp
   15a58:	dfc00117 	ldw	ra,4(sp)
   15a5c:	df000017 	ldw	fp,0(sp)
   15a60:	dec00204 	addi	sp,sp,8
   15a64:	f800283a 	ret

00015a68 <alt_get_errno>:
{
   15a68:	defffe04 	addi	sp,sp,-8
   15a6c:	dfc00115 	stw	ra,4(sp)
   15a70:	df000015 	stw	fp,0(sp)
   15a74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   15a78:	d0a09917 	ldw	r2,-32156(gp)
   15a7c:	10000326 	beq	r2,zero,15a8c <alt_get_errno+0x24>
   15a80:	d0a09917 	ldw	r2,-32156(gp)
   15a84:	103ee83a 	callr	r2
   15a88:	00000106 	br	15a90 <alt_get_errno+0x28>
   15a8c:	d0a1f804 	addi	r2,gp,-30752
}
   15a90:	e037883a 	mov	sp,fp
   15a94:	dfc00117 	ldw	ra,4(sp)
   15a98:	df000017 	ldw	fp,0(sp)
   15a9c:	dec00204 	addi	sp,sp,8
   15aa0:	f800283a 	ret

00015aa4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   15aa4:	defffd04 	addi	sp,sp,-12
   15aa8:	df000215 	stw	fp,8(sp)
   15aac:	df000204 	addi	fp,sp,8
   15ab0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   15ab4:	e0bffe17 	ldw	r2,-8(fp)
   15ab8:	10800217 	ldw	r2,8(r2)
   15abc:	10d00034 	orhi	r3,r2,16384
   15ac0:	e0bffe17 	ldw	r2,-8(fp)
   15ac4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   15ac8:	e03fff15 	stw	zero,-4(fp)
   15acc:	00002306 	br	15b5c <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   15ad0:	e0ffff17 	ldw	r3,-4(fp)
   15ad4:	1805883a 	mov	r2,r3
   15ad8:	1085883a 	add	r2,r2,r2
   15adc:	10c5883a 	add	r2,r2,r3
   15ae0:	100490ba 	slli	r2,r2,2
   15ae4:	00c00074 	movhi	r3,1
   15ae8:	10c7883a 	add	r3,r2,r3
   15aec:	18db9a17 	ldw	r3,28264(r3)
   15af0:	e0bffe17 	ldw	r2,-8(fp)
   15af4:	10800017 	ldw	r2,0(r2)
   15af8:	1880151e 	bne	r3,r2,15b50 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   15afc:	e0ffff17 	ldw	r3,-4(fp)
   15b00:	1805883a 	mov	r2,r3
   15b04:	1085883a 	add	r2,r2,r2
   15b08:	10c5883a 	add	r2,r2,r3
   15b0c:	100490ba 	slli	r2,r2,2
   15b10:	00c00074 	movhi	r3,1
   15b14:	10c7883a 	add	r3,r2,r3
   15b18:	189b9c17 	ldw	r2,28272(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
   15b1c:	10000c0e 	bge	r2,zero,15b50 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
   15b20:	e0ffff17 	ldw	r3,-4(fp)
   15b24:	1805883a 	mov	r2,r3
   15b28:	1085883a 	add	r2,r2,r2
   15b2c:	10c5883a 	add	r2,r2,r3
   15b30:	100490ba 	slli	r2,r2,2
   15b34:	00c00074 	movhi	r3,1
   15b38:	18db9a04 	addi	r3,r3,28264
   15b3c:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   15b40:	e0fffe17 	ldw	r3,-8(fp)
   15b44:	18800226 	beq	r3,r2,15b50 <alt_file_locked+0xac>
    {
      return -EACCES;
   15b48:	00bffcc4 	movi	r2,-13
   15b4c:	00000806 	br	15b70 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
   15b50:	e0bfff17 	ldw	r2,-4(fp)
   15b54:	10800044 	addi	r2,r2,1
   15b58:	e0bfff15 	stw	r2,-4(fp)
   15b5c:	d0a09817 	ldw	r2,-32160(gp)
   15b60:	1007883a 	mov	r3,r2
   15b64:	e0bfff17 	ldw	r2,-4(fp)
   15b68:	18bfd92e 	bgeu	r3,r2,15ad0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   15b6c:	0005883a 	mov	r2,zero
}
   15b70:	e037883a 	mov	sp,fp
   15b74:	df000017 	ldw	fp,0(sp)
   15b78:	dec00104 	addi	sp,sp,4
   15b7c:	f800283a 	ret

00015b80 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   15b80:	defff604 	addi	sp,sp,-40
   15b84:	dfc00915 	stw	ra,36(sp)
   15b88:	df000815 	stw	fp,32(sp)
   15b8c:	df000804 	addi	fp,sp,32
   15b90:	e13ffa15 	stw	r4,-24(fp)
   15b94:	e17ff915 	stw	r5,-28(fp)
   15b98:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   15b9c:	00bfffc4 	movi	r2,-1
   15ba0:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   15ba4:	00bffb44 	movi	r2,-19
   15ba8:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   15bac:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   15bb0:	d1609604 	addi	r5,gp,-32168
   15bb4:	e13ffa17 	ldw	r4,-24(fp)
   15bb8:	0015f200 	call	15f20 <alt_find_dev>
   15bbc:	e0bfff15 	stw	r2,-4(fp)
   15bc0:	e0bfff17 	ldw	r2,-4(fp)
   15bc4:	1000051e 	bne	r2,zero,15bdc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   15bc8:	e13ffa17 	ldw	r4,-24(fp)
   15bcc:	0015fb00 	call	15fb0 <alt_find_file>
   15bd0:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   15bd4:	00800044 	movi	r2,1
   15bd8:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   15bdc:	e0bfff17 	ldw	r2,-4(fp)
   15be0:	10002c26 	beq	r2,zero,15c94 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   15be4:	e13fff17 	ldw	r4,-4(fp)
   15be8:	00160b80 	call	160b8 <alt_get_fd>
   15bec:	e0bffe15 	stw	r2,-8(fp)
   15bf0:	e0bffe17 	ldw	r2,-8(fp)
   15bf4:	1000030e 	bge	r2,zero,15c04 <open+0x84>
    {
      status = index;
   15bf8:	e0bffe17 	ldw	r2,-8(fp)
   15bfc:	e0bffd15 	stw	r2,-12(fp)
   15c00:	00002606 	br	15c9c <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   15c04:	e0fffe17 	ldw	r3,-8(fp)
   15c08:	1805883a 	mov	r2,r3
   15c0c:	1085883a 	add	r2,r2,r2
   15c10:	10c5883a 	add	r2,r2,r3
   15c14:	100490ba 	slli	r2,r2,2
   15c18:	00c00074 	movhi	r3,1
   15c1c:	18db9a04 	addi	r3,r3,28264
   15c20:	10c5883a 	add	r2,r2,r3
   15c24:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   15c28:	e0fff917 	ldw	r3,-28(fp)
   15c2c:	00900034 	movhi	r2,16384
   15c30:	10bfffc4 	addi	r2,r2,-1
   15c34:	1886703a 	and	r3,r3,r2
   15c38:	e0bffb17 	ldw	r2,-20(fp)
   15c3c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   15c40:	e0bffc17 	ldw	r2,-16(fp)
   15c44:	1000051e 	bne	r2,zero,15c5c <open+0xdc>
   15c48:	e13ffb17 	ldw	r4,-20(fp)
   15c4c:	0015aa40 	call	15aa4 <alt_file_locked>
   15c50:	e0bffd15 	stw	r2,-12(fp)
   15c54:	e0bffd17 	ldw	r2,-12(fp)
   15c58:	10001016 	blt	r2,zero,15c9c <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   15c5c:	e0bfff17 	ldw	r2,-4(fp)
   15c60:	10800317 	ldw	r2,12(r2)
   15c64:	10000826 	beq	r2,zero,15c88 <open+0x108>
   15c68:	e0bfff17 	ldw	r2,-4(fp)
   15c6c:	10800317 	ldw	r2,12(r2)
   15c70:	e1fff817 	ldw	r7,-32(fp)
   15c74:	e1bff917 	ldw	r6,-28(fp)
   15c78:	e17ffa17 	ldw	r5,-24(fp)
   15c7c:	e13ffb17 	ldw	r4,-20(fp)
   15c80:	103ee83a 	callr	r2
   15c84:	00000106 	br	15c8c <open+0x10c>
   15c88:	0005883a 	mov	r2,zero
   15c8c:	e0bffd15 	stw	r2,-12(fp)
   15c90:	00000206 	br	15c9c <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   15c94:	00bffb44 	movi	r2,-19
   15c98:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   15c9c:	e0bffd17 	ldw	r2,-12(fp)
   15ca0:	1000090e 	bge	r2,zero,15cc8 <open+0x148>
  {
    alt_release_fd (index);  
   15ca4:	e13ffe17 	ldw	r4,-8(fp)
   15ca8:	0015ce00 	call	15ce0 <alt_release_fd>
    ALT_ERRNO = -status;
   15cac:	0015a680 	call	15a68 <alt_get_errno>
   15cb0:	1007883a 	mov	r3,r2
   15cb4:	e0bffd17 	ldw	r2,-12(fp)
   15cb8:	0085c83a 	sub	r2,zero,r2
   15cbc:	18800015 	stw	r2,0(r3)
    return -1;
   15cc0:	00bfffc4 	movi	r2,-1
   15cc4:	00000106 	br	15ccc <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   15cc8:	e0bffe17 	ldw	r2,-8(fp)
}
   15ccc:	e037883a 	mov	sp,fp
   15cd0:	dfc00117 	ldw	ra,4(sp)
   15cd4:	df000017 	ldw	fp,0(sp)
   15cd8:	dec00204 	addi	sp,sp,8
   15cdc:	f800283a 	ret

00015ce0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   15ce0:	defffe04 	addi	sp,sp,-8
   15ce4:	df000115 	stw	fp,4(sp)
   15ce8:	df000104 	addi	fp,sp,4
   15cec:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   15cf0:	e0bfff17 	ldw	r2,-4(fp)
   15cf4:	108000d0 	cmplti	r2,r2,3
   15cf8:	1000101e 	bne	r2,zero,15d3c <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
   15cfc:	e0ffff17 	ldw	r3,-4(fp)
   15d00:	1805883a 	mov	r2,r3
   15d04:	1085883a 	add	r2,r2,r2
   15d08:	10c5883a 	add	r2,r2,r3
   15d0c:	100490ba 	slli	r2,r2,2
   15d10:	00c00074 	movhi	r3,1
   15d14:	10c7883a 	add	r3,r2,r3
   15d18:	181b9c15 	stw	zero,28272(r3)
    alt_fd_list[fd].dev      = 0;
   15d1c:	e0ffff17 	ldw	r3,-4(fp)
   15d20:	1805883a 	mov	r2,r3
   15d24:	1085883a 	add	r2,r2,r2
   15d28:	10c5883a 	add	r2,r2,r3
   15d2c:	100490ba 	slli	r2,r2,2
   15d30:	00c00074 	movhi	r3,1
   15d34:	10c7883a 	add	r3,r2,r3
   15d38:	181b9a15 	stw	zero,28264(r3)
  }
}
   15d3c:	0001883a 	nop
   15d40:	e037883a 	mov	sp,fp
   15d44:	df000017 	ldw	fp,0(sp)
   15d48:	dec00104 	addi	sp,sp,4
   15d4c:	f800283a 	ret

00015d50 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   15d50:	defffa04 	addi	sp,sp,-24
   15d54:	df000515 	stw	fp,20(sp)
   15d58:	df000504 	addi	fp,sp,20
   15d5c:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
   15d60:	0005303a 	rdctl	r2,status
   15d64:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15d68:	e0fffc17 	ldw	r3,-16(fp)
   15d6c:	00bfff84 	movi	r2,-2
   15d70:	1884703a 	and	r2,r3,r2
   15d74:	1001703a 	wrctl	status,r2
  return context;
   15d78:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   15d7c:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
   15d80:	e0bffb17 	ldw	r2,-20(fp)
   15d84:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   15d88:	e0bffd17 	ldw	r2,-12(fp)
   15d8c:	10800017 	ldw	r2,0(r2)
   15d90:	e0fffd17 	ldw	r3,-12(fp)
   15d94:	18c00117 	ldw	r3,4(r3)
   15d98:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   15d9c:	e0bffd17 	ldw	r2,-12(fp)
   15da0:	10800117 	ldw	r2,4(r2)
   15da4:	e0fffd17 	ldw	r3,-12(fp)
   15da8:	18c00017 	ldw	r3,0(r3)
   15dac:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   15db0:	e0bffd17 	ldw	r2,-12(fp)
   15db4:	e0fffd17 	ldw	r3,-12(fp)
   15db8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   15dbc:	e0bffd17 	ldw	r2,-12(fp)
   15dc0:	e0fffd17 	ldw	r3,-12(fp)
   15dc4:	10c00015 	stw	r3,0(r2)
} 
   15dc8:	0001883a 	nop
   15dcc:	e0bfff17 	ldw	r2,-4(fp)
   15dd0:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   15dd4:	e0bffe17 	ldw	r2,-8(fp)
   15dd8:	1001703a 	wrctl	status,r2
}
   15ddc:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
   15de0:	0001883a 	nop
   15de4:	e037883a 	mov	sp,fp
   15de8:	df000017 	ldw	fp,0(sp)
   15dec:	dec00104 	addi	sp,sp,4
   15df0:	f800283a 	ret

00015df4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   15df4:	defffb04 	addi	sp,sp,-20
   15df8:	dfc00415 	stw	ra,16(sp)
   15dfc:	df000315 	stw	fp,12(sp)
   15e00:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   15e04:	d0a09a17 	ldw	r2,-32152(gp)
   15e08:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   15e0c:	d0a1ff17 	ldw	r2,-30724(gp)
   15e10:	10800044 	addi	r2,r2,1
   15e14:	d0a1ff15 	stw	r2,-30724(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   15e18:	00002e06 	br	15ed4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   15e1c:	e0bfff17 	ldw	r2,-4(fp)
   15e20:	10800017 	ldw	r2,0(r2)
   15e24:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   15e28:	e0bfff17 	ldw	r2,-4(fp)
   15e2c:	10800403 	ldbu	r2,16(r2)
   15e30:	10803fcc 	andi	r2,r2,255
   15e34:	10000426 	beq	r2,zero,15e48 <alt_tick+0x54>
   15e38:	d0a1ff17 	ldw	r2,-30724(gp)
   15e3c:	1000021e 	bne	r2,zero,15e48 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   15e40:	e0bfff17 	ldw	r2,-4(fp)
   15e44:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   15e48:	e0bfff17 	ldw	r2,-4(fp)
   15e4c:	10800217 	ldw	r2,8(r2)
   15e50:	d0e1ff17 	ldw	r3,-30724(gp)
   15e54:	18801d36 	bltu	r3,r2,15ecc <alt_tick+0xd8>
   15e58:	e0bfff17 	ldw	r2,-4(fp)
   15e5c:	10800403 	ldbu	r2,16(r2)
   15e60:	10803fcc 	andi	r2,r2,255
   15e64:	1000191e 	bne	r2,zero,15ecc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   15e68:	e0bfff17 	ldw	r2,-4(fp)
   15e6c:	10800317 	ldw	r2,12(r2)
   15e70:	e0ffff17 	ldw	r3,-4(fp)
   15e74:	18c00517 	ldw	r3,20(r3)
   15e78:	1809883a 	mov	r4,r3
   15e7c:	103ee83a 	callr	r2
   15e80:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   15e84:	e0bffd17 	ldw	r2,-12(fp)
   15e88:	1000031e 	bne	r2,zero,15e98 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   15e8c:	e13fff17 	ldw	r4,-4(fp)
   15e90:	0015d500 	call	15d50 <alt_alarm_stop>
   15e94:	00000d06 	br	15ecc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   15e98:	e0bfff17 	ldw	r2,-4(fp)
   15e9c:	10c00217 	ldw	r3,8(r2)
   15ea0:	e0bffd17 	ldw	r2,-12(fp)
   15ea4:	1887883a 	add	r3,r3,r2
   15ea8:	e0bfff17 	ldw	r2,-4(fp)
   15eac:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   15eb0:	e0bfff17 	ldw	r2,-4(fp)
   15eb4:	10c00217 	ldw	r3,8(r2)
   15eb8:	d0a1ff17 	ldw	r2,-30724(gp)
   15ebc:	1880032e 	bgeu	r3,r2,15ecc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   15ec0:	e0bfff17 	ldw	r2,-4(fp)
   15ec4:	00c00044 	movi	r3,1
   15ec8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   15ecc:	e0bffe17 	ldw	r2,-8(fp)
   15ed0:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
   15ed4:	e0ffff17 	ldw	r3,-4(fp)
   15ed8:	d0a09a04 	addi	r2,gp,-32152
   15edc:	18bfcf1e 	bne	r3,r2,15e1c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   15ee0:	0001883a 	nop
}
   15ee4:	0001883a 	nop
   15ee8:	e037883a 	mov	sp,fp
   15eec:	dfc00117 	ldw	ra,4(sp)
   15ef0:	df000017 	ldw	fp,0(sp)
   15ef4:	dec00204 	addi	sp,sp,8
   15ef8:	f800283a 	ret

00015efc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   15efc:	deffff04 	addi	sp,sp,-4
   15f00:	df000015 	stw	fp,0(sp)
   15f04:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   15f08:	000170fa 	wrctl	ienable,zero
}
   15f0c:	0001883a 	nop
   15f10:	e037883a 	mov	sp,fp
   15f14:	df000017 	ldw	fp,0(sp)
   15f18:	dec00104 	addi	sp,sp,4
   15f1c:	f800283a 	ret

00015f20 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   15f20:	defffa04 	addi	sp,sp,-24
   15f24:	dfc00515 	stw	ra,20(sp)
   15f28:	df000415 	stw	fp,16(sp)
   15f2c:	df000404 	addi	fp,sp,16
   15f30:	e13ffd15 	stw	r4,-12(fp)
   15f34:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
   15f38:	e0bffc17 	ldw	r2,-16(fp)
   15f3c:	10800017 	ldw	r2,0(r2)
   15f40:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   15f44:	e13ffd17 	ldw	r4,-12(fp)
   15f48:	00145540 	call	14554 <strlen>
   15f4c:	10800044 	addi	r2,r2,1
   15f50:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   15f54:	00000d06 	br	15f8c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   15f58:	e0bfff17 	ldw	r2,-4(fp)
   15f5c:	10800217 	ldw	r2,8(r2)
   15f60:	e0fffe17 	ldw	r3,-8(fp)
   15f64:	180d883a 	mov	r6,r3
   15f68:	e17ffd17 	ldw	r5,-12(fp)
   15f6c:	1009883a 	mov	r4,r2
   15f70:	00161a40 	call	161a4 <memcmp>
   15f74:	1000021e 	bne	r2,zero,15f80 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   15f78:	e0bfff17 	ldw	r2,-4(fp)
   15f7c:	00000706 	br	15f9c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   15f80:	e0bfff17 	ldw	r2,-4(fp)
   15f84:	10800017 	ldw	r2,0(r2)
   15f88:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
   15f8c:	e0ffff17 	ldw	r3,-4(fp)
   15f90:	e0bffc17 	ldw	r2,-16(fp)
   15f94:	18bff01e 	bne	r3,r2,15f58 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
   15f98:	0005883a 	mov	r2,zero
}
   15f9c:	e037883a 	mov	sp,fp
   15fa0:	dfc00117 	ldw	ra,4(sp)
   15fa4:	df000017 	ldw	fp,0(sp)
   15fa8:	dec00204 	addi	sp,sp,8
   15fac:	f800283a 	ret

00015fb0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   15fb0:	defffb04 	addi	sp,sp,-20
   15fb4:	dfc00415 	stw	ra,16(sp)
   15fb8:	df000315 	stw	fp,12(sp)
   15fbc:	df000304 	addi	fp,sp,12
   15fc0:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   15fc4:	d0a09417 	ldw	r2,-32176(gp)
   15fc8:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   15fcc:	00003106 	br	16094 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   15fd0:	e0bfff17 	ldw	r2,-4(fp)
   15fd4:	10800217 	ldw	r2,8(r2)
   15fd8:	1009883a 	mov	r4,r2
   15fdc:	00145540 	call	14554 <strlen>
   15fe0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   15fe4:	e0bfff17 	ldw	r2,-4(fp)
   15fe8:	10c00217 	ldw	r3,8(r2)
   15fec:	e0bffe17 	ldw	r2,-8(fp)
   15ff0:	10bfffc4 	addi	r2,r2,-1
   15ff4:	1885883a 	add	r2,r3,r2
   15ff8:	10800003 	ldbu	r2,0(r2)
   15ffc:	10803fcc 	andi	r2,r2,255
   16000:	1080201c 	xori	r2,r2,128
   16004:	10bfe004 	addi	r2,r2,-128
   16008:	10800bd8 	cmpnei	r2,r2,47
   1600c:	1000031e 	bne	r2,zero,1601c <alt_find_file+0x6c>
    {
      len -= 1;
   16010:	e0bffe17 	ldw	r2,-8(fp)
   16014:	10bfffc4 	addi	r2,r2,-1
   16018:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1601c:	e0bffe17 	ldw	r2,-8(fp)
   16020:	e0fffd17 	ldw	r3,-12(fp)
   16024:	1885883a 	add	r2,r3,r2
   16028:	10800003 	ldbu	r2,0(r2)
   1602c:	10803fcc 	andi	r2,r2,255
   16030:	1080201c 	xori	r2,r2,128
   16034:	10bfe004 	addi	r2,r2,-128
   16038:	10800be0 	cmpeqi	r2,r2,47
   1603c:	1000081e 	bne	r2,zero,16060 <alt_find_file+0xb0>
   16040:	e0bffe17 	ldw	r2,-8(fp)
   16044:	e0fffd17 	ldw	r3,-12(fp)
   16048:	1885883a 	add	r2,r3,r2
   1604c:	10800003 	ldbu	r2,0(r2)
   16050:	10803fcc 	andi	r2,r2,255
   16054:	1080201c 	xori	r2,r2,128
   16058:	10bfe004 	addi	r2,r2,-128
   1605c:	10000a1e 	bne	r2,zero,16088 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   16060:	e0bfff17 	ldw	r2,-4(fp)
   16064:	10800217 	ldw	r2,8(r2)
   16068:	e0fffe17 	ldw	r3,-8(fp)
   1606c:	180d883a 	mov	r6,r3
   16070:	e17ffd17 	ldw	r5,-12(fp)
   16074:	1009883a 	mov	r4,r2
   16078:	00161a40 	call	161a4 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
   1607c:	1000021e 	bne	r2,zero,16088 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
   16080:	e0bfff17 	ldw	r2,-4(fp)
   16084:	00000706 	br	160a4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   16088:	e0bfff17 	ldw	r2,-4(fp)
   1608c:	10800017 	ldw	r2,0(r2)
   16090:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
   16094:	e0ffff17 	ldw	r3,-4(fp)
   16098:	d0a09404 	addi	r2,gp,-32176
   1609c:	18bfcc1e 	bne	r3,r2,15fd0 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
   160a0:	0005883a 	mov	r2,zero
}
   160a4:	e037883a 	mov	sp,fp
   160a8:	dfc00117 	ldw	ra,4(sp)
   160ac:	df000017 	ldw	fp,0(sp)
   160b0:	dec00204 	addi	sp,sp,8
   160b4:	f800283a 	ret

000160b8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   160b8:	defffc04 	addi	sp,sp,-16
   160bc:	df000315 	stw	fp,12(sp)
   160c0:	df000304 	addi	fp,sp,12
   160c4:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   160c8:	00bffa04 	movi	r2,-24
   160cc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   160d0:	e03fff15 	stw	zero,-4(fp)
   160d4:	00001d06 	br	1614c <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   160d8:	e0ffff17 	ldw	r3,-4(fp)
   160dc:	1805883a 	mov	r2,r3
   160e0:	1085883a 	add	r2,r2,r2
   160e4:	10c5883a 	add	r2,r2,r3
   160e8:	100490ba 	slli	r2,r2,2
   160ec:	00c00074 	movhi	r3,1
   160f0:	10c7883a 	add	r3,r2,r3
   160f4:	189b9a17 	ldw	r2,28264(r3)
   160f8:	1000111e 	bne	r2,zero,16140 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   160fc:	e0ffff17 	ldw	r3,-4(fp)
   16100:	1805883a 	mov	r2,r3
   16104:	1085883a 	add	r2,r2,r2
   16108:	10c5883a 	add	r2,r2,r3
   1610c:	100490ba 	slli	r2,r2,2
   16110:	e13ffd17 	ldw	r4,-12(fp)
   16114:	00c00074 	movhi	r3,1
   16118:	10c7883a 	add	r3,r2,r3
   1611c:	191b9a15 	stw	r4,28264(r3)
      if (i > alt_max_fd)
   16120:	d0e09817 	ldw	r3,-32160(gp)
   16124:	e0bfff17 	ldw	r2,-4(fp)
   16128:	1880020e 	bge	r3,r2,16134 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   1612c:	e0bfff17 	ldw	r2,-4(fp)
   16130:	d0a09815 	stw	r2,-32160(gp)
      }
      rc = i;
   16134:	e0bfff17 	ldw	r2,-4(fp)
   16138:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   1613c:	00000706 	br	1615c <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
   16140:	e0bfff17 	ldw	r2,-4(fp)
   16144:	10800044 	addi	r2,r2,1
   16148:	e0bfff15 	stw	r2,-4(fp)
   1614c:	e0bfff17 	ldw	r2,-4(fp)
   16150:	10800810 	cmplti	r2,r2,32
   16154:	103fe01e 	bne	r2,zero,160d8 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
   16158:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1615c:	e0bffe17 	ldw	r2,-8(fp)
}
   16160:	e037883a 	mov	sp,fp
   16164:	df000017 	ldw	fp,0(sp)
   16168:	dec00104 	addi	sp,sp,4
   1616c:	f800283a 	ret

00016170 <atexit>:
   16170:	200b883a 	mov	r5,r4
   16174:	000f883a 	mov	r7,zero
   16178:	000d883a 	mov	r6,zero
   1617c:	0009883a 	mov	r4,zero
   16180:	00161d41 	jmpi	161d4 <__register_exitproc>

00016184 <exit>:
   16184:	defffe04 	addi	sp,sp,-8
   16188:	000b883a 	mov	r5,zero
   1618c:	dc000015 	stw	r16,0(sp)
   16190:	dfc00115 	stw	ra,4(sp)
   16194:	2021883a 	mov	r16,r4
   16198:	00162f00 	call	162f0 <__call_exitprocs>
   1619c:	8009883a 	mov	r4,r16
   161a0:	00146680 	call	14668 <_exit>

000161a4 <memcmp>:
   161a4:	0007883a 	mov	r3,zero
   161a8:	30c0021e 	bne	r6,r3,161b4 <memcmp+0x10>
   161ac:	0005883a 	mov	r2,zero
   161b0:	f800283a 	ret
   161b4:	20c5883a 	add	r2,r4,r3
   161b8:	18c00044 	addi	r3,r3,1
   161bc:	28cf883a 	add	r7,r5,r3
   161c0:	10800003 	ldbu	r2,0(r2)
   161c4:	39ffffc3 	ldbu	r7,-1(r7)
   161c8:	11fff726 	beq	r2,r7,161a8 <memcmp+0x4>
   161cc:	11c5c83a 	sub	r2,r2,r7
   161d0:	f800283a 	ret

000161d4 <__register_exitproc>:
   161d4:	00800074 	movhi	r2,1
   161d8:	109c8a17 	ldw	r2,29224(r2)
   161dc:	defff904 	addi	sp,sp,-28
   161e0:	dc000015 	stw	r16,0(sp)
   161e4:	14000d17 	ldw	r16,52(r2)
   161e8:	dd400515 	stw	r21,20(sp)
   161ec:	dd000415 	stw	r20,16(sp)
   161f0:	dcc00315 	stw	r19,12(sp)
   161f4:	dc800215 	stw	r18,8(sp)
   161f8:	dfc00615 	stw	ra,24(sp)
   161fc:	dc400115 	stw	r17,4(sp)
   16200:	2025883a 	mov	r18,r4
   16204:	2827883a 	mov	r19,r5
   16208:	302b883a 	mov	r21,r6
   1620c:	3829883a 	mov	r20,r7
   16210:	8000081e 	bne	r16,zero,16234 <__register_exitproc+0x60>
   16214:	14000e04 	addi	r16,r2,56
   16218:	00c00034 	movhi	r3,0
   1621c:	14000d15 	stw	r16,52(r2)
   16220:	18c00004 	addi	r3,r3,0
   16224:	18000326 	beq	r3,zero,16234 <__register_exitproc+0x60>
   16228:	00c00034 	movhi	r3,0
   1622c:	18c00017 	ldw	r3,0(r3)
   16230:	10c03015 	stw	r3,192(r2)
   16234:	84400117 	ldw	r17,4(r16)
   16238:	88800810 	cmplti	r2,r17,32
   1623c:	10000a1e 	bne	r2,zero,16268 <__register_exitproc+0x94>
   16240:	00bfffc4 	movi	r2,-1
   16244:	dfc00617 	ldw	ra,24(sp)
   16248:	dd400517 	ldw	r21,20(sp)
   1624c:	dd000417 	ldw	r20,16(sp)
   16250:	dcc00317 	ldw	r19,12(sp)
   16254:	dc800217 	ldw	r18,8(sp)
   16258:	dc400117 	ldw	r17,4(sp)
   1625c:	dc000017 	ldw	r16,0(sp)
   16260:	dec00704 	addi	sp,sp,28
   16264:	f800283a 	ret
   16268:	90001926 	beq	r18,zero,162d0 <__register_exitproc+0xfc>
   1626c:	80802217 	ldw	r2,136(r16)
   16270:	1000091e 	bne	r2,zero,16298 <__register_exitproc+0xc4>
   16274:	00800074 	movhi	r2,1
   16278:	108fb804 	addi	r2,r2,16096
   1627c:	103ff026 	beq	r2,zero,16240 <__register_exitproc+0x6c>
   16280:	01004204 	movi	r4,264
   16284:	0013ee00 	call	13ee0 <malloc>
   16288:	103fed26 	beq	r2,zero,16240 <__register_exitproc+0x6c>
   1628c:	10004015 	stw	zero,256(r2)
   16290:	10004115 	stw	zero,260(r2)
   16294:	80802215 	stw	r2,136(r16)
   16298:	880890ba 	slli	r4,r17,2
   1629c:	00c00044 	movi	r3,1
   162a0:	1c46983a 	sll	r3,r3,r17
   162a4:	1109883a 	add	r4,r2,r4
   162a8:	25400015 	stw	r21,0(r4)
   162ac:	11404017 	ldw	r5,256(r2)
   162b0:	94800098 	cmpnei	r18,r18,2
   162b4:	28cab03a 	or	r5,r5,r3
   162b8:	11404015 	stw	r5,256(r2)
   162bc:	25002015 	stw	r20,128(r4)
   162c0:	9000031e 	bne	r18,zero,162d0 <__register_exitproc+0xfc>
   162c4:	11004117 	ldw	r4,260(r2)
   162c8:	20c6b03a 	or	r3,r4,r3
   162cc:	10c04115 	stw	r3,260(r2)
   162d0:	88800044 	addi	r2,r17,1
   162d4:	8c400084 	addi	r17,r17,2
   162d8:	882290ba 	slli	r17,r17,2
   162dc:	80800115 	stw	r2,4(r16)
   162e0:	0005883a 	mov	r2,zero
   162e4:	8461883a 	add	r16,r16,r17
   162e8:	84c00015 	stw	r19,0(r16)
   162ec:	003fd506 	br	16244 <__register_exitproc+0x70>

000162f0 <__call_exitprocs>:
   162f0:	defff604 	addi	sp,sp,-40
   162f4:	00800074 	movhi	r2,1
   162f8:	dd800615 	stw	r22,24(sp)
   162fc:	159c8a17 	ldw	r22,29224(r2)
   16300:	dd400515 	stw	r21,20(sp)
   16304:	dd000415 	stw	r20,16(sp)
   16308:	dfc00915 	stw	ra,36(sp)
   1630c:	df000815 	stw	fp,32(sp)
   16310:	ddc00715 	stw	r23,28(sp)
   16314:	dcc00315 	stw	r19,12(sp)
   16318:	dc800215 	stw	r18,8(sp)
   1631c:	dc400115 	stw	r17,4(sp)
   16320:	dc000015 	stw	r16,0(sp)
   16324:	202b883a 	mov	r21,r4
   16328:	2829883a 	mov	r20,r5
   1632c:	b4400d17 	ldw	r17,52(r22)
   16330:	88000726 	beq	r17,zero,16350 <__call_exitprocs+0x60>
   16334:	8c000117 	ldw	r16,4(r17)
   16338:	8cc02217 	ldw	r19,136(r17)
   1633c:	84bfffc4 	addi	r18,r16,-1
   16340:	802090ba 	slli	r16,r16,2
   16344:	9c2f883a 	add	r23,r19,r16
   16348:	8c21883a 	add	r16,r17,r16
   1634c:	90000c0e 	bge	r18,zero,16380 <__call_exitprocs+0x90>
   16350:	dfc00917 	ldw	ra,36(sp)
   16354:	df000817 	ldw	fp,32(sp)
   16358:	ddc00717 	ldw	r23,28(sp)
   1635c:	dd800617 	ldw	r22,24(sp)
   16360:	dd400517 	ldw	r21,20(sp)
   16364:	dd000417 	ldw	r20,16(sp)
   16368:	dcc00317 	ldw	r19,12(sp)
   1636c:	dc800217 	ldw	r18,8(sp)
   16370:	dc400117 	ldw	r17,4(sp)
   16374:	dc000017 	ldw	r16,0(sp)
   16378:	dec00a04 	addi	sp,sp,40
   1637c:	f800283a 	ret
   16380:	a0000726 	beq	r20,zero,163a0 <__call_exitprocs+0xb0>
   16384:	9800041e 	bne	r19,zero,16398 <__call_exitprocs+0xa8>
   16388:	94bfffc4 	addi	r18,r18,-1
   1638c:	bdffff04 	addi	r23,r23,-4
   16390:	843fff04 	addi	r16,r16,-4
   16394:	003fed06 	br	1634c <__call_exitprocs+0x5c>
   16398:	b8c01f17 	ldw	r3,124(r23)
   1639c:	1d3ffa1e 	bne	r3,r20,16388 <__call_exitprocs+0x98>
   163a0:	89000117 	ldw	r4,4(r17)
   163a4:	80c00117 	ldw	r3,4(r16)
   163a8:	213fffc4 	addi	r4,r4,-1
   163ac:	24800f1e 	bne	r4,r18,163ec <__call_exitprocs+0xfc>
   163b0:	8c800115 	stw	r18,4(r17)
   163b4:	183ff426 	beq	r3,zero,16388 <__call_exitprocs+0x98>
   163b8:	8f000117 	ldw	fp,4(r17)
   163bc:	98000526 	beq	r19,zero,163d4 <__call_exitprocs+0xe4>
   163c0:	00800044 	movi	r2,1
   163c4:	148c983a 	sll	r6,r2,r18
   163c8:	99004017 	ldw	r4,256(r19)
   163cc:	3108703a 	and	r4,r6,r4
   163d0:	2000081e 	bne	r4,zero,163f4 <__call_exitprocs+0x104>
   163d4:	183ee83a 	callr	r3
   163d8:	89000117 	ldw	r4,4(r17)
   163dc:	b0c00d17 	ldw	r3,52(r22)
   163e0:	273fd21e 	bne	r4,fp,1632c <__call_exitprocs+0x3c>
   163e4:	88ffe826 	beq	r17,r3,16388 <__call_exitprocs+0x98>
   163e8:	003fd006 	br	1632c <__call_exitprocs+0x3c>
   163ec:	80000115 	stw	zero,4(r16)
   163f0:	003ff006 	br	163b4 <__call_exitprocs+0xc4>
   163f4:	99404117 	ldw	r5,260(r19)
   163f8:	b93fff17 	ldw	r4,-4(r23)
   163fc:	314c703a 	and	r6,r6,r5
   16400:	3000041e 	bne	r6,zero,16414 <__call_exitprocs+0x124>
   16404:	200b883a 	mov	r5,r4
   16408:	a809883a 	mov	r4,r21
   1640c:	183ee83a 	callr	r3
   16410:	003ff106 	br	163d8 <__call_exitprocs+0xe8>
   16414:	183ee83a 	callr	r3
   16418:	003fef06 	br	163d8 <__call_exitprocs+0xe8>
   1641c:	0001ffff 	0x1ffff
   16420:	0201ffff 	0x201ffff
   16424:	ffff0000 	call	ffff000 <_gp+0xffe0018>
   16428:	00000201 	jmpi	20 <__alt_mem_onchip_mem-0xffe0>
   1642c:	0201ffff 	0x201ffff
   16430:	883a0000 	call	883a000 <_gp+0x881b018>
   16434:	010d00ff 	0x10d00ff
   16438:	01010002 	0x1010002
	...
   16444:	010d00ff 	0x10d00ff
   16448:	01010004 	movi	r4,1024
   1644c:	00000100 	call	10 <__alt_mem_onchip_mem-0xfff0>
   16450:	00000000 	call	0 <__alt_mem_onchip_mem-0x10000>
   16454:	011100ff 	0x11100ff
   16458:	01010004 	movi	r4,1024
   1645c:	7f000105 	stb	fp,4(r15)
   16460:	007d0000 	call	7d000 <_gp+0x5e018>
   16464:	00000000 	call	0 <__alt_mem_onchip_mem-0x10000>
   16468:	01883a00 	call	1883a0 <_gp+0x1693b8>
   1646c:	00011070 	cmpltui	zero,zero,1089
   16470:	000130e8 	cmpgeui	zero,zero,1219
   16474:	000110a0 	cmpeqi	zero,zero,1090
